{"expiry":1689524841,"data":[{"SourceCode":{"language":"Solidity","sources":{"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"contracts/manifold/burnredeem/IBurnRedeemCore.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * Burn Redeem Core interface\n */\ninterface IBurnRedeemCore is IERC165, IERC721Receiver, IERC1155Receiver  {\n    enum StorageProtocol { INVALID, NONE, ARWEAVE, IPFS }\n\n    /**\n     * @notice the validation type used for a `BurnItem`\n     * CONTRACT                 any token from a specific contract is valid\n     * RANGE                    token IDs within a range (inclusive) are valid\n     * MERKLE_TREE              various individual token IDs included in a merkle tree are valid\n     */\n    enum ValidationType { INVALID, CONTRACT, RANGE, MERKLE_TREE }\n\n    enum TokenSpec { INVALID, ERC721, ERC1155 }\n    enum BurnSpec { NONE, MANIFOLD, OPENZEPPELIN }\n\n    /**\n     * @notice a `BurnItem` indicates which tokens are eligible to be burned\n     * @param validationType    which type of validation used to check that the burn item is \n     *                          satisfied\n     * @param tokenSpec         whether the token is an ERC721 or ERC1155\n     * @param burnSpec          whether the contract for a token has a `burn` function and, if so,\n     *                          what interface\n     * @param amount            (only for ERC1155 tokens) the amount (value) required to burn\n     * @param minTokenId        (only for RANGE validation) the minimum valid token ID\n     * @param maxTokenId        (only for RANGE validation) the maximum valid token ID\n     * @param merkleRoot        (only for MERKLE_TREE validation) the root of the merkle tree of\n     *                          valid token IDs\n     */\n    struct BurnItem {\n        ValidationType validationType;\n        address contractAddress;\n        TokenSpec tokenSpec;\n        BurnSpec burnSpec;\n        uint72 amount;\n        uint256 minTokenId;\n        uint256 maxTokenId;\n        bytes32 merkleRoot;\n    }\n\n    /**\n     * @notice a `BurnGroup` is a group of valid `BurnItem`s\n     * @param requiredCount     the number of `BurnItem`s (0 < requiredCount <= items.length) that \n     *                          need to be included in a burn\n     * @param items             the list of `BurnItem`s\n     */\n    struct BurnGroup {\n        uint256 requiredCount;\n        BurnItem[] items;\n    }\n\n    /**\n     * @notice parameters for burn redeem intialization/updates\n     * @param paymentReceiver   the address to forward proceeds from paid burn redeems\n     * @param storageProtocol   the type of storage used for the redeem token URIs\n     * @param redeemAmount      the number of redeem tokens to mint for each burn redeem\n     * @param totalSupply       the maximum number of redeem tokens to mint (0 for unlimited)\n     * @param startDate         the starting time for the burn redeem (0 for immediately)\n     * @param endDate           the end time for the burn redeem (0 for never)\n     * @param cost              the cost for each burn redeem\n     * @param location          used to construct the token URI (Arweave hash, full URI, etc.)\n     * @param burnSet           a list of `BurnGroup`s that must each be satisfied for a burn redeem\n     */\n    struct BurnRedeemParameters {\n        address payable paymentReceiver;\n        StorageProtocol storageProtocol;\n        uint16 redeemAmount;\n        uint32 totalSupply;\n        uint48 startDate;\n        uint48 endDate;\n        uint160 cost;\n        string location;\n        BurnGroup[] burnSet;\n    }\n\n    struct BurnRedeem {\n        address payable paymentReceiver;\n        StorageProtocol storageProtocol;\n        uint32 redeemedCount;\n        uint16 redeemAmount;\n        uint32 totalSupply;\n        uint8 contractVersion;\n        uint48 startDate;\n        uint48 endDate;\n        uint160 cost;\n        string location;\n        BurnGroup[] burnSet;\n    }\n\n    /**\n     * @notice a pointer to a `BurnItem` in a `BurnGroup` used in calls to `burnRedeem`\n     * @param groupIndex        the index of the `BurnGroup` in `BurnRedeem.burnSet`\n     * @param itemIndex         the index of the `BurnItem` in `BurnGroup.items`\n     * @param contractAddress   the address of the contract for the token\n     * @param id                the token ID\n     * @param merkleProof       the merkle proof for the token ID (only for MERKLE_TREE validation)\n     */\n    struct BurnToken {\n        uint48 groupIndex;\n        uint48 itemIndex;\n        address contractAddress;\n        uint256 id;\n        bytes32[] merkleProof;\n    }\n\n    /**\n     * @notice get a burn redeem corresponding to a creator contract and instanceId\n     * @param creatorContractAddress    the address of the creator contract\n     * @param instanceId                the instanceId of the burn redeem for the creator contract\n     * @return BurnRedeem               the burn redeem object\n     */\n    function getBurnRedeem(address creatorContractAddress, uint256 instanceId) external view returns(BurnRedeem memory);\n    \n    /**\n     * @notice get a burn redeem corresponding to a creator contract and tokenId\n     * @param creatorContractAddress    the address of the creator contract\n     * @param tokenId                   the token to retrieve the burn redeem for\n     * @return                          the burn redeem instanceId and burn redeem object\n     */\n    function getBurnRedeemForToken(address creatorContractAddress, uint256 tokenId) external view returns(uint256, BurnRedeem memory);\n\n    /**\n     * @notice burn tokens and mint a redeem token\n     * @param creatorContractAddress    the address of the creator contract\n     * @param instanceId                the instanceId of the burn redeem for the creator contract\n     * @param burnRedeemCount           the number of burn redeems we want to do\n     * @param burnTokens                the tokens to burn with pointers to the corresponding BurnItem requirement\n     */\n    function burnRedeem(address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, BurnToken[] calldata burnTokens) external payable;\n\n    /**\n     * @notice burn tokens and mint redeem tokens multiple times in a single transaction\n     * @param creatorContractAddresses  the addresses of the creator contracts\n     * @param instanceIds               the instanceIds of the burn redeems for the corresponding creator contract\n     * @param burnRedeemCounts          the burn redeem counts for each burn\n     * @param burnTokens                the tokens to burn for each burn redeem with pointers to the corresponding BurnItem requirement\n     */\n    function burnRedeem(address[] calldata creatorContractAddresses, uint256[] calldata instanceIds, uint32[] calldata burnRedeemCounts, BurnToken[][] calldata burnTokens) external payable;\n\n    /**\n     * @notice allow admin to airdrop arbitrary tokens \n     * @param creatorContractAddress    the creator contract to mint tokens for\n     * @param instanceId                the instanceId of the burn redeem for the creator contract\n     * @param recipients                addresses to airdrop to\n     * @param amounts                   number of redeems to perform for each address in recipients\n     */\n    function airdrop(address creatorContractAddress, uint256 instanceId, address[] calldata recipients, uint32[] calldata amounts) external;\n\n    /**\n     * @notice recover a token that was sent to the contract without safeTransferFrom\n     * @param tokenAddress              the address of the token contract\n     * @param tokenId                   the id of the token\n     * @param destination               the address to send the token to\n     */\n    function recoverERC721(address tokenAddress, uint256 tokenId, address destination) external;\n\n    /**\n     * @notice withdraw Manifold fee proceeds from the contract\n     * @param recipient                 recepient of the funds\n     * @param amount                    amount to withdraw in Wei\n     */\n    function withdraw(address payable recipient, uint256 amount) external;\n\n    /**\n     * @notice set the Manifold Membership contract address\n     * @param addr                      the address of the Manifold Membership contract \n     */\n    function setMembershipAddress(address addr) external;\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/manifold/burnredeem/BurnRedeemLib.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n//                                                                                 //\n//                                     .%(#.                                       //\n//                                      #(((#%,                                    //\n//                                      (#(((((#%*                                 //\n//                                      /#((((((((##*                              //\n//                                      (#((((((((((##%.                           //\n//                                     ,##(/*/(////((((#%*                         //\n//                                   .###(//****/////(((##%,                       //\n//                  (,          ,%#((((((///******/////((##%(                      //\n//                *((,         ,##(///////*********////((###%*                     //\n//              /((((         ,##(//////************/(((((###%                     //\n//             /((((         ,##((////***************/((((###%                     //\n//             (((          .###((///*****************((((####                     //\n//             .            (##((//*******************((((##%*                     //\n//               (#.       .###((/********************((((##%.      %.             //\n//             ,%(#.       .###(/********,,,,,,,*****/(((###%#     ((%,            //\n//            /%#/(/       /###(//****,,,,,,,,,,,****/((((((##%%%%#((#%.           //\n//           /##(//(#.    ,###((/****,,,,,,,,,,,,,***/((/(((((((((#####%           //\n//          *%##(/////((###((((/***,,,,,,,,,,,,,,,***//((((((((((####%%%/          //\n//          ####(((//////(//////**,,,,,,.....,,,,,,****/(((((//((####%%%%          //\n//         .####(((/((((((/////**,,,,,.......,,,,,,,,*****/////(#####%%%%          //\n//         .#%###((////(((//***,,,,,,..........,,,,,,,,*****//((#####%%%%          //\n//          /%%%###/////*****,,,,,,,..............,,,,,,,****/(((####%%%%          //\n//           /%%###(////****,,,,,,.....        ......,,,,,,**(((####%%%%           //\n//            ,#%###(///****,,,,,....            .....,,,,,***/(/(##%%(            //\n//              (####(//****,,....                 ....,,,,,***/(####              //\n//                (###(/***,,,...                    ...,,,,***(##/                //\n//             #.   (#((/**,,,,..                    ...,,,,*((#,                  //\n//               ,#(##(((//,,,,..                   ...,,,*/(((#((/                //\n//                  *#(((///*,,....                ....,*//((((                    //\n//                      *(///***,....            ...,***//,                        //\n//                           ,//***,...       ..,,*,                               //\n//                                                                                 //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./IBurnRedeemCore.sol\";\n\n/**\n * @title Burn Redeem Lib\n * @author manifold.xyz\n * @notice Library for Burn Redeem shared extensions.\n */\nlibrary BurnRedeemLib {\n\n    event BurnRedeemInitialized(address indexed creatorContract, uint256 indexed instanceId, address initializer);\n    event BurnRedeemUpdated(address indexed creatorContract, uint256 indexed instanceId);\n    event BurnRedeemMint(address indexed creatorContract, uint256 indexed instanceId, uint256 indexed tokenId, uint32 redeemedCount);\n\n    /**\n     * Initialiazes a burn redeem with base parameters\n     */\n    function initialize(\n        address creatorContractAddress,\n        uint8 creatorContractVersion,\n        uint256 instanceId,\n        IBurnRedeemCore.BurnRedeem storage burnRedeemInstance,\n        IBurnRedeemCore.BurnRedeemParameters calldata burnRedeemParameters\n    ) public {\n        // Sanity checks\n        require(burnRedeemInstance.storageProtocol == IBurnRedeemCore.StorageProtocol.INVALID, \"Burn redeem already initialized\");\n        _validateParameters(burnRedeemParameters);\n\n        // Create the burn redeem\n        burnRedeemInstance.contractVersion = creatorContractVersion;\n        _setParameters(burnRedeemInstance, burnRedeemParameters);\n        _setBurnGroups(burnRedeemInstance, burnRedeemParameters.burnSet);\n\n        emit BurnRedeemInitialized(creatorContractAddress, instanceId, msg.sender);\n    }\n\n    /**\n     * Updates a burn redeem with base parameters\n     */\n    function update(\n        address creatorContractAddress,\n        uint256 instanceId,\n        IBurnRedeemCore.BurnRedeem storage burnRedeemInstance,\n        IBurnRedeemCore.BurnRedeemParameters calldata burnRedeemParameters\n    ) public {\n        // Sanity checks\n        require(burnRedeemInstance.storageProtocol != IBurnRedeemCore.StorageProtocol.INVALID, \"Burn redeem not initialized\");\n        _validateParameters(burnRedeemParameters);\n        // The current redeemedCount must be divisible by redeemAmount\n        require(burnRedeemInstance.redeemedCount % burnRedeemParameters.redeemAmount == 0, \"Invalid amount\");\n\n        // Overwrite the existing burnRedeem\n        _setParameters(burnRedeemInstance, burnRedeemParameters);\n        _setBurnGroups(burnRedeemInstance, burnRedeemParameters.burnSet);\n        syncTotalSupply(burnRedeemInstance);\n        emit BurnRedeemUpdated(creatorContractAddress, instanceId);\n    }\n\n    /**\n     * Helper to update total supply if redeemedCount exceeds totalSupply after airdrop or instance update.\n     */\n    function syncTotalSupply(IBurnRedeemCore.BurnRedeem storage burnRedeemInstance) public {\n        if (\n            burnRedeemInstance.totalSupply != 0 &&\n            burnRedeemInstance.redeemedCount > burnRedeemInstance.totalSupply\n        ) {\n            burnRedeemInstance.totalSupply = burnRedeemInstance.redeemedCount;\n        }\n    }\n\n    /*\n     * Helper to validate burn item\n     */\n    function validateBurnItem(IBurnRedeemCore.BurnItem memory burnItem, address contractAddress, uint256 tokenId, bytes32[] memory merkleProof) public pure {\n        require(contractAddress == burnItem.contractAddress, \"Invalid burn token\");\n        if (burnItem.validationType == IBurnRedeemCore.ValidationType.CONTRACT) {\n            return;\n        } else if (burnItem.validationType == IBurnRedeemCore.ValidationType.RANGE) {\n            require(tokenId >= burnItem.minTokenId && tokenId <= burnItem.maxTokenId, \"Invalid token ID\");\n            return;\n        } else if (burnItem.validationType == IBurnRedeemCore.ValidationType.MERKLE_TREE) {\n            bytes32 leaf = keccak256(abi.encodePacked(tokenId));\n            require(MerkleProof.verify(merkleProof, burnItem.merkleRoot, leaf), \"Invalid merkle proof\");\n            return;\n        }\n        revert(\"Invalid burn item\");\n    }\n\n        /**\n     * Helper to validate the parameters for a burn redeem\n     */\n    function _validateParameters(IBurnRedeemCore.BurnRedeemParameters calldata burnRedeemParameters) internal pure {\n        require(burnRedeemParameters.storageProtocol != IBurnRedeemCore.StorageProtocol.INVALID, \"Storage protocol invalid\");\n        require(burnRedeemParameters.paymentReceiver != address(0), \"Payment receiver required\");\n        require(burnRedeemParameters.endDate == 0 || burnRedeemParameters.startDate < burnRedeemParameters.endDate, \"startDate after endDate\");\n        require(burnRedeemParameters.totalSupply % burnRedeemParameters.redeemAmount == 0, \"Remainder left from totalSupply\");\n    }\n\n    /**\n     * Helper to set top level properties for a burn redeem\n     */\n    function _setParameters(IBurnRedeemCore.BurnRedeem storage burnRedeemInstance, IBurnRedeemCore.BurnRedeemParameters calldata burnRedeemParameters) private {\n        burnRedeemInstance.startDate = burnRedeemParameters.startDate;\n        burnRedeemInstance.endDate = burnRedeemParameters.endDate;\n        burnRedeemInstance.redeemAmount = burnRedeemParameters.redeemAmount;\n        burnRedeemInstance.totalSupply = burnRedeemParameters.totalSupply;\n        burnRedeemInstance.storageProtocol = burnRedeemParameters.storageProtocol;\n        burnRedeemInstance.location = burnRedeemParameters.location;\n        burnRedeemInstance.cost = burnRedeemParameters.cost;\n        burnRedeemInstance.paymentReceiver = burnRedeemParameters.paymentReceiver;\n    }\n\n    /**\n     * Helper to set the burn groups for a burn redeem\n     */\n    function _setBurnGroups(IBurnRedeemCore.BurnRedeem storage burnRedeemInstance, IBurnRedeemCore.BurnGroup[] calldata burnGroups) private {\n        delete burnRedeemInstance.burnSet;\n        for (uint256 i; i < burnGroups.length;) {\n            burnRedeemInstance.burnSet.push();\n            IBurnRedeemCore.BurnGroup storage burnGroup = burnRedeemInstance.burnSet[i];\n            require(\n                burnGroups[i].requiredCount > 0 &&\n                burnGroups[i].requiredCount <= burnGroups[i].items.length,\n                \"Invalid input\"\n            );\n            burnGroup.requiredCount = burnGroups[i].requiredCount;\n            for (uint256 j; j < burnGroups[i].items.length;) {\n                IBurnRedeemCore.BurnItem memory burnItem = burnGroups[i].items[j];\n                require(\n                    (\n                        (burnItem.tokenSpec == IBurnRedeemCore.TokenSpec.ERC1155 && burnItem.amount > 0) ||\n                        (burnItem.tokenSpec == IBurnRedeemCore.TokenSpec.ERC721 && burnItem.amount == 0)\n                    ) &&\n                    burnItem.validationType != IBurnRedeemCore.ValidationType.INVALID,\n                    \"Invalid input\");\n                burnGroup.items.push(burnGroups[i].items[j]);\n                unchecked { ++j; }\n            }\n            unchecked { ++i; }\n        }\n    }\n\n}"}},"settings":{"libraries":{},"optimizer":{"enabled":true,"runs":150},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"BurnRedeemInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"redeemedCount\",\"type\":\"uint32\"}],\"name\":\"BurnRedeemMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"}],\"name\":\"BurnRedeemUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IBurnRedeemCore.ValidationType\",\"name\":\"validationType\",\"type\":\"IBurnRedeemCore.ValidationType\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum IBurnRedeemCore.TokenSpec\",\"name\":\"tokenSpec\",\"type\":\"IBurnRedeemCore.TokenSpec\"},{\"internalType\":\"enum IBurnRedeemCore.BurnSpec\",\"name\":\"burnSpec\",\"type\":\"IBurnRedeemCore.BurnSpec\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"uint256\",\"name\":\"minTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBurnRedeemCore.BurnItem\",\"name\":\"burnItem\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"validateBurnItem\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"BurnRedeemLib","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":1,"Runs":150,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}