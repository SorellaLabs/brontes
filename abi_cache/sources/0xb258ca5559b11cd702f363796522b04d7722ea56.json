{"expiry":1689524843,"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/exchangeV2/lib/Structs.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nstruct TakeAsk {\n    Order[] orders;\n    Exchange[] exchanges;\n    FeeRate takerFee;\n    bytes signatures;\n    address tokenRecipient;\n}\n\nstruct TakeAskSingle {\n    Order order;\n    Exchange exchange;\n    FeeRate takerFee;\n    bytes signature;\n    address tokenRecipient;\n}\n\nstruct TakeBid {\n    Order[] orders;\n    Exchange[] exchanges;\n    FeeRate takerFee;\n    bytes signatures;\n}\n\nstruct TakeBidSingle {\n    Order order;\n    Exchange exchange;\n    FeeRate takerFee;\n    bytes signature;\n}\n\nenum AssetType {\n    ERC721,\n    ERC1155\n}\n\nenum OrderType {\n    ASK,\n    BID\n}\n\nstruct Exchange { // Size: 0x80\n    uint256 index; // 0x00\n    bytes32[] proof; // 0x20\n    Listing listing; // 0x40\n    Taker taker; // 0x60\n}\n\nstruct Listing { // Size: 0x80\n    uint256 index; // 0x00\n    uint256 tokenId; // 0x20\n    uint256 amount; // 0x40\n    uint256 price; // 0x60\n}\n\nstruct Taker { // Size: 0x40\n    uint256 tokenId; // 0x00\n    uint256 amount; // 0x20\n}\n\nstruct Order { // Size: 0x100\n    address trader; // 0x00\n    address collection; // 0x20\n    bytes32 listingsRoot; // 0x40\n    uint256 numberOfListings; // 0x60\n    uint256 expirationTime; // 0x80\n    AssetType assetType; // 0xa0\n    FeeRate makerFee; // 0xc0\n    uint256 salt; // 0xe0\n}\n\n/*\nReference only; struct is composed manually using calldata formatting in execution\nstruct ExecutionBatch { // Size: 0x80\n    address taker; // 0x00\n    OrderType orderType; // 0x20\n    Transfer[] transfers; // 0x40\n    uint256 length; // 0x60\n}\n*/\n\nstruct Transfer { // Size: 0xa0\n    address trader; // 0x00\n    uint256 id; // 0x20\n    uint256 amount; // 0x40\n    address collection; // 0x60\n    AssetType assetType; // 0x80\n}\n\nstruct FungibleTransfers {\n    uint256 totalProtocolFee;\n    uint256 totalSellerTransfer;\n    uint256 totalTakerFee;\n    uint256 feeRecipientId;\n    uint256 makerId;\n    address[] feeRecipients;\n    address[] makers;\n    uint256[] makerTransfers;\n    uint256[] feeTransfers;\n    AtomicExecution[] executions;\n}\n\nstruct AtomicExecution { // Size: 0xe0\n    uint256 makerId; // 0x00\n    uint256 sellerAmount; // 0x20\n    uint256 makerFeeRecipientId; // 0x40\n    uint256 makerFeeAmount; // 0x60\n    uint256 takerFeeAmount; // 0x80\n    uint256 protocolFeeAmount; // 0xa0\n    StateUpdate stateUpdate; // 0xc0\n}\n\nstruct StateUpdate { // Size: 0xa0\n    address trader; // 0x00\n    bytes32 hash; // 0x20\n    uint256 index; // 0x40\n    uint256 value; // 0x60\n    uint256 maxAmount; // 0x80\n}\n\nstruct Fees { // Size: 0x40\n    FeeRate protocolFee; // 0x00\n    FeeRate takerFee; // 0x20\n}\n\nstruct FeeRate { // Size: 0x40\n    address recipient; // 0x00\n    uint16 rate; // 0x20\n}\n\nstruct Cancel {\n    bytes32 hash;\n    uint256 index;\n    uint256 amount;\n}\n"},"contracts/exchangeV1/lib/OrderStructs.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nenum Side { Buy, Sell }\nenum SignatureVersion { Single, Bulk }\nenum AssetType { ERC721, ERC1155 }\n\nstruct Fee {\n    uint16 rate;\n    address payable recipient;\n}\n\nstruct Order {\n    address trader;\n    Side side;\n    address matchingPolicy;\n    address collection;\n    uint256 tokenId;\n    uint256 amount;\n    address paymentToken;\n    uint256 price;\n    uint256 listingTime;\n    /* Order expiration timestamp - 0 for oracle cancellations. */\n    uint256 expirationTime;\n    Fee[] fees;\n    uint256 salt;\n    bytes extraParams;\n}\n\nstruct Input {\n    Order order;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n    bytes extraSignature;\n    SignatureVersion signatureVersion;\n    uint256 blockNumber;\n}\n\nstruct Execution {\n  Input sell;\n  Input buy;\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"lib/solmate/src/utils/SignedWadMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n/// @notice Signed 18 decimal fixed point (wad) arithmetic library.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SignedWadMath.sol)\n/// @author Modified from Remco Bloemen (https://xn--2-umb.com/22/exp-ln/index.html)\n\n/// @dev Will not revert on overflow, only use where overflow is not possible.\nfunction toWadUnsafe(uint256 x) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Multiply x by 1e18.\n        r := mul(x, 1000000000000000000)\n    }\n}\n\n/// @dev Takes an integer amount of seconds and converts it to a wad amount of days.\n/// @dev Will not revert on overflow, only use where overflow is not possible.\n/// @dev Not meant for negative second amounts, it assumes x is positive.\nfunction toDaysWadUnsafe(uint256 x) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Multiply x by 1e18 and then divide it by 86400.\n        r := div(mul(x, 1000000000000000000), 86400)\n    }\n}\n\n/// @dev Takes a wad amount of days and converts it to an integer amount of seconds.\n/// @dev Will not revert on overflow, only use where overflow is not possible.\n/// @dev Not meant for negative day amounts, it assumes x is positive.\nfunction fromDaysWadUnsafe(int256 x) pure returns (uint256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Multiply x by 86400 and then divide it by 1e18.\n        r := div(mul(x, 86400), 1000000000000000000)\n    }\n}\n\n/// @dev Will not revert on overflow, only use where overflow is not possible.\nfunction unsafeWadMul(int256 x, int256 y) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Multiply x by y and divide by 1e18.\n        r := sdiv(mul(x, y), 1000000000000000000)\n    }\n}\n\n/// @dev Will return 0 instead of reverting if y is zero and will\n/// not revert on overflow, only use where overflow is not possible.\nfunction unsafeWadDiv(int256 x, int256 y) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Multiply x by 1e18 and divide it by y.\n        r := sdiv(mul(x, 1000000000000000000), y)\n    }\n}\n\nfunction wadMul(int256 x, int256 y) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Store x * y in r for now.\n        r := mul(x, y)\n\n        // Equivalent to require(x == 0 || (x * y) / x == y)\n        if iszero(or(iszero(x), eq(sdiv(r, x), y))) {\n            revert(0, 0)\n        }\n\n        // Scale the result down by 1e18.\n        r := sdiv(r, 1000000000000000000)\n    }\n}\n\nfunction wadDiv(int256 x, int256 y) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Store x * 1e18 in r for now.\n        r := mul(x, 1000000000000000000)\n\n        // Equivalent to require(y != 0 && ((x * 1e18) / 1e18 == x))\n        if iszero(and(iszero(iszero(y)), eq(sdiv(r, 1000000000000000000), x))) {\n            revert(0, 0)\n        }\n\n        // Divide r by y.\n        r := sdiv(r, y)\n    }\n}\n\n/// @dev Will not work with negative bases, only use when x is positive.\nfunction wadPow(int256 x, int256 y) pure returns (int256) {\n    // Equivalent to x to the power of y because x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)\n    return wadExp((wadLn(x) * y) / 1e18); // Using ln(x) means x must be greater than 0.\n}\n\nfunction wadExp(int256 x) pure returns (int256 r) {\n    unchecked {\n        // When the result is < 0.5 we return zero. This happens when\n        // x <= floor(log(0.5e18) * 1e18) ~ -42e18\n        if (x <= -42139678854452767551) return 0;\n\n        // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\n        // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\n        if (x >= 135305999368893231589) revert(\"EXP_OVERFLOW\");\n\n        // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\n        // for more intermediate precision and a binary basis. This base conversion\n        // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\n        x = (x << 78) / 5**18;\n\n        // Reduce range of x to (-½ ln 2, ½ ln 2) * 2**96 by factoring out powers\n        // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\n        // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\n        int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96;\n        x = x - k * 54916777467707473351141471128;\n\n        // k is in the range [-61, 195].\n\n        // Evaluate using a (6, 7)-term rational approximation.\n        // p is made monic, we'll multiply by a scale factor later.\n        int256 y = x + 1346386616545796478920950773328;\n        y = ((y * x) >> 96) + 57155421227552351082224309758442;\n        int256 p = y + x - 94201549194550492254356042504812;\n        p = ((p * y) >> 96) + 28719021644029726153956944680412240;\n        p = p * x + (4385272521454847904659076985693276 << 96);\n\n        // We leave p in 2**192 basis so we don't need to scale it back up for the division.\n        int256 q = x - 2855989394907223263936484059900;\n        q = ((q * x) >> 96) + 50020603652535783019961831881945;\n        q = ((q * x) >> 96) - 533845033583426703283633433725380;\n        q = ((q * x) >> 96) + 3604857256930695427073651918091429;\n        q = ((q * x) >> 96) - 14423608567350463180887372962807573;\n        q = ((q * x) >> 96) + 26449188498355588339934803723976023;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Div in assembly because solidity adds a zero check despite the unchecked.\n            // The q polynomial won't have zeros in the domain as all its roots are complex.\n            // No scaling is necessary because p is already 2**96 too large.\n            r := sdiv(p, q)\n        }\n\n        // r should be in the range (0.09, 0.25) * 2**96.\n\n        // We now need to multiply r by:\n        // * the scale factor s = ~6.031367120.\n        // * the 2**k factor from the range reduction.\n        // * the 1e18 / 2**96 factor for base conversion.\n        // We do this all at once, with an intermediate result in 2**213\n        // basis, so the final right shift is always by a positive amount.\n        r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k));\n    }\n}\n\nfunction wadLn(int256 x) pure returns (int256 r) {\n    unchecked {\n        require(x > 0, \"UNDEFINED\");\n\n        // We want to convert x from 10**18 fixed point to 2**96 fixed point.\n        // We do this by multiplying by 2**96 / 10**18. But since\n        // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\n        // and add ln(2**96 / 10**18) at the end.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\n            r := or(r, shl(2, lt(0xf, shr(r, x))))\n            r := or(r, shl(1, lt(0x3, shr(r, x))))\n            r := or(r, lt(0x1, shr(r, x)))\n        }\n\n        // Reduce range of x to (1, 2) * 2**96\n        // ln(2^k * x) = k * ln(2) + ln(x)\n        int256 k = r - 96;\n        x <<= uint256(159 - k);\n        x = int256(uint256(x) >> 159);\n\n        // Evaluate using a (8, 8)-term rational approximation.\n        // p is made monic, we will multiply by a scale factor later.\n        int256 p = x + 3273285459638523848632254066296;\n        p = ((p * x) >> 96) + 24828157081833163892658089445524;\n        p = ((p * x) >> 96) + 43456485725739037958740375743393;\n        p = ((p * x) >> 96) - 11111509109440967052023855526967;\n        p = ((p * x) >> 96) - 45023709667254063763336534515857;\n        p = ((p * x) >> 96) - 14706773417378608786704636184526;\n        p = p * x - (795164235651350426258249787498 << 96);\n\n        // We leave p in 2**192 basis so we don't need to scale it back up for the division.\n        // q is monic by convention.\n        int256 q = x + 5573035233440673466300451813936;\n        q = ((q * x) >> 96) + 71694874799317883764090561454958;\n        q = ((q * x) >> 96) + 283447036172924575727196451306956;\n        q = ((q * x) >> 96) + 401686690394027663651624208769553;\n        q = ((q * x) >> 96) + 204048457590392012362485061816622;\n        q = ((q * x) >> 96) + 31853899698501571402653359427138;\n        q = ((q * x) >> 96) + 909429971244387300277376558375;\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Div in assembly because solidity adds a zero check despite the unchecked.\n            // The q polynomial is known not to have zeros in the domain.\n            // No scaling required because p is already 2**96 too large.\n            r := sdiv(p, q)\n        }\n\n        // r is in the range (0, 0.125) * 2**96\n\n        // Finalization, we need to:\n        // * multiply by the scale factor s = 5.549…\n        // * add ln(2**96 / 10**18)\n        // * add k * ln(2)\n        // * multiply by 10**18 / 2**96 = 5**18 >> 78\n\n        // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\n        r *= 1677202110996718588342820967067443963516166;\n        // add ln(2) * k * 5e18 * 2**192\n        r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k;\n        // add ln(2**96 / 10**18) * 5e18 * 2**192\n        r += 600920179829731861736702779321621459595472258049074101567377883020018308;\n        // base conversion: mul 2**18 / 2**192\n        r >>= 174;\n    }\n}\n\n/// @dev Will return 0 instead of reverting if y is zero.\nfunction unsafeDiv(int256 x, int256 y) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Divide x by y.\n        r := sdiv(x, y)\n    }\n}\n"},"contracts/blend/Blend.sol":{"content":"// SPDX-License-Identifier: BSL 1.1 - Blend (c) Non Fungible Trading Ltd.\npragma solidity 0.8.17;\n\nimport \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\";\n\nimport \"./Helpers.sol\";\nimport \"./lib/Structs.sol\";\nimport \"./OfferController.sol\";\nimport \"./interfaces/IBlend.sol\";\nimport \"../pool/interfaces/IBlurPool.sol\";\n\ncontract Blend is IBlend, OfferController, UUPSUpgradeable {\n    IExchange private immutable _EXCHANGE;\n    IExchangeV2 private immutable _EXCHANGE_V2;\n    IBlurPool private immutable _POOL;\n    address private immutable _SELL_MATCHING_POLICY;\n    address private immutable _BID_MATCHING_POLICY;\n    address private immutable _DELEGATE;\n    address private immutable _DELEGATE_V2;\n\n    uint256 private constant _BASIS_POINTS = 10_000;\n    uint256 private constant _MAX_AUCTION_DURATION = 432_000;\n    uint256 private constant _LIQUIDATION_THRESHOLD = 100_000;\n    uint256 private _nextLienId;\n\n    mapping(uint256 => bytes32) public liens;\n    mapping(bytes32 => uint256) public amountTaken;\n\n    // required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    constructor(\n        address pool,\n        address exchange,\n        address exchangeV2,\n        address sellMatchingPolicy,\n        address bidMatchingPolicy,\n        address delegate,\n        address delegateV2\n    ) {\n        _POOL = IBlurPool(pool);\n        _EXCHANGE = IExchange(exchange);\n        _EXCHANGE_V2 = IExchangeV2(exchangeV2);\n        _SELL_MATCHING_POLICY = sellMatchingPolicy;\n        _BID_MATCHING_POLICY = bidMatchingPolicy;\n        _DELEGATE = delegate;\n        _DELEGATE_V2 = delegateV2;\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        __UUPSUpgradeable_init();\n        __Ownable_init();\n    }\n\n    /*//////////////////////////////////////////////////\n                    BORROW FLOWS\n    //////////////////////////////////////////////////*/\n\n    /**\n     * @notice Verifies and takes loan offer; then transfers loan and collateral assets\n     * @param offer Loan offer\n     * @param signature Lender offer signature\n     * @param loanAmount Loan amount in ETH\n     * @param collateralTokenId Token id to provide as collateral\n     * @return lienId New lien id\n     */\n    function borrow(\n        LoanOffer calldata offer,\n        bytes calldata signature,\n        uint256 loanAmount,\n        uint256 collateralTokenId\n    ) external returns (uint256 lienId) {\n        lienId = _borrow(offer, signature, loanAmount, collateralTokenId);\n\n        /* Lock collateral token. */\n        offer.collection.safeTransferFrom(msg.sender, address(this), collateralTokenId);\n\n        /* Transfer loan to borrower. */\n        _POOL.transferFrom(offer.lender, msg.sender, loanAmount);\n    }\n\n    /**\n     * @notice Repays loan and retrieves collateral\n     * @param lien Lien preimage\n     * @param lienId Lien id\n     */\n    function repay(\n        Lien calldata lien,\n        uint256 lienId\n    ) external validateLien(lien, lienId) lienIsActive(lien) {\n        uint256 debt = _repay(lien, lienId);\n\n        /* Return NFT to borrower. */\n        lien.collection.safeTransferFrom(address(this), lien.borrower, lien.tokenId);\n\n        /* Repay loan to lender. */\n        _POOL.transferFrom(msg.sender, lien.lender, debt);\n    }\n\n    /**\n     * @notice Verifies and takes loan offer; creates new lien\n     * @param offer Loan offer\n     * @param signature Lender offer signature\n     * @param loanAmount Loan amount in ETH\n     * @param collateralTokenId Token id to provide as collateral\n     * @return lienId New lien id\n     */\n    function _borrow(\n        LoanOffer calldata offer,\n        bytes calldata signature,\n        uint256 loanAmount,\n        uint256 collateralTokenId\n    ) internal returns (uint256 lienId) {\n        if (offer.auctionDuration > _MAX_AUCTION_DURATION) {\n            revert InvalidAuctionDuration();\n        }\n\n        Lien memory lien = Lien({\n            lender: offer.lender,\n            borrower: msg.sender,\n            collection: offer.collection,\n            tokenId: collateralTokenId,\n            amount: loanAmount,\n            startTime: block.timestamp,\n            rate: offer.rate,\n            auctionStartBlock: 0,\n            auctionDuration: offer.auctionDuration\n        });\n\n        /* Create lien. */\n        unchecked {\n            liens[lienId = _nextLienId++] = keccak256(abi.encode(lien));\n        }\n\n        /* Take the loan offer. */\n        _takeLoanOffer(offer, signature, lien, lienId);\n    }\n\n    /**\n     * @notice Computes the current debt repayment and burns the lien\n     * @dev Does not transfer assets\n     * @param lien Lien preimage\n     * @param lienId Lien id\n     * @return debt Current amount of debt owed on the lien\n     */\n    function _repay(Lien calldata lien, uint256 lienId) internal returns (uint256 debt) {\n        debt = Helpers.computeCurrentDebt(lien.amount, lien.rate, lien.startTime);\n\n        delete liens[lienId];\n\n        emit Repay(lienId, address(lien.collection));\n    }\n\n    /**\n     * @notice Verifies and takes loan offer\n     * @dev Does not transfer loan and collateral assets; does not update lien hash\n     * @param offer Loan offer\n     * @param signature Lender offer signature\n     * @param lien Lien preimage\n     * @param lienId Lien id\n     */\n    function _takeLoanOffer(\n        LoanOffer calldata offer,\n        bytes calldata signature,\n        Lien memory lien,\n        uint256 lienId\n    ) internal {\n        bytes32 hash = _hashOffer(offer);\n\n        _validateOffer(\n            hash,\n            offer.lender,\n            offer.oracle,\n            signature,\n            offer.expirationTime,\n            offer.salt\n        );\n\n        if (offer.rate > _LIQUIDATION_THRESHOLD) {\n            revert RateTooHigh();\n        }\n        if (lien.amount > offer.maxAmount || lien.amount < offer.minAmount) {\n            revert InvalidLoan();\n        }\n        uint256 _amountTaken = amountTaken[hash];\n        if (offer.totalAmount - _amountTaken < lien.amount) {\n            revert InsufficientOffer();\n        }\n\n        unchecked {\n            amountTaken[hash] = _amountTaken + lien.amount;\n        }\n\n        emit LoanOfferTaken(\n            hash,\n            lienId,\n            address(offer.collection),\n            lien.lender,\n            lien.borrower,\n            lien.amount,\n            lien.rate,\n            lien.tokenId,\n            lien.auctionDuration\n        );\n    }\n\n    /*//////////////////////////////////////////////////\n                    REFINANCING FLOWS\n    //////////////////////////////////////////////////*/\n\n    /**\n     * @notice Starts Dutch Auction on lien ownership\n     * @dev Must be called by lien owner\n     * @param lienId Lien token id\n     */\n    function startAuction(Lien calldata lien, uint256 lienId) external validateLien(lien, lienId) {\n        if (msg.sender != lien.lender) {\n            revert Unauthorized();\n        }\n\n        /* Cannot start if auction has already started. */\n        if (lien.auctionStartBlock != 0) {\n            revert AuctionIsActive();\n        }\n\n        /* Add auction start block to lien. */\n        liens[lienId] = keccak256(\n            abi.encode(\n                Lien({\n                    lender: lien.lender,\n                    borrower: lien.borrower,\n                    collection: lien.collection,\n                    tokenId: lien.tokenId,\n                    amount: lien.amount,\n                    startTime: lien.startTime,\n                    rate: lien.rate,\n                    auctionStartBlock: block.number,\n                    auctionDuration: lien.auctionDuration\n                })\n            )\n        );\n\n        emit StartAuction(lienId, address(lien.collection));\n    }\n\n    /**\n     * @notice Seizes collateral from defaulted lien, skipping liens that are not defaulted\n     * @param lienPointers List of lien, lienId pairs\n     */\n    function seize(LienPointer[] calldata lienPointers) external {\n        uint256 length = lienPointers.length;\n        for (uint256 i; i < length; ) {\n            Lien calldata lien = lienPointers[i].lien;\n            uint256 lienId = lienPointers[i].lienId;\n\n            if (msg.sender != lien.lender) {\n                revert Unauthorized();\n            }\n            if (!_validateLien(lien, lienId)) {\n                revert InvalidLien();\n            }\n\n            /* Check that the auction has ended and lien is defaulted. */\n            if (_lienIsDefaulted(lien)) {\n                delete liens[lienId];\n\n                /* Seize collateral to lender. */\n                lien.collection.safeTransferFrom(address(this), lien.lender, lien.tokenId);\n\n                emit Seize(lienId, address(lien.collection));\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Refinances to different loan amount and repays previous loan\n     * @dev Must be called by lender; previous loan must be repaid with interest\n     * @param lien Lien struct\n     * @param lienId Lien id\n     * @param offer Loan offer\n     * @param signature Offer signatures\n     */\n    function refinance(\n        Lien calldata lien,\n        uint256 lienId,\n        LoanOffer calldata offer,\n        bytes calldata signature\n    ) external validateLien(lien, lienId) lienIsActive(lien) {\n        if (msg.sender != lien.lender) {\n            revert Unauthorized();\n        }\n\n        /* Interest rate must be at least as good as current. */\n        if (offer.rate > lien.rate || offer.auctionDuration != lien.auctionDuration) {\n            revert InvalidRefinance();\n        }\n\n        uint256 debt = Helpers.computeCurrentDebt(lien.amount, lien.rate, lien.startTime);\n\n        _refinance(lien, lienId, debt, offer, signature);\n\n        /* Repay initial loan. */\n        _POOL.transferFrom(offer.lender, lien.lender, debt);\n    }\n\n    /**\n     * @notice Refinance lien in auction at the current debt amount where the interest rate ceiling increases over time\n     * @dev Interest rate must be lower than the interest rate ceiling\n     * @param lien Lien struct\n     * @param lienId Lien token id\n     * @param rate Interest rate (in bips)\n     * @dev Formula: https://www.desmos.com/calculator/urasr71dhb\n     */\n    function refinanceAuction(\n        Lien calldata lien,\n        uint256 lienId,\n        uint256 rate\n    ) external validateLien(lien, lienId) auctionIsActive(lien) {\n        /* Rate must be below current rate limit. */\n        uint256 rateLimit = Helpers.calcRefinancingAuctionRate(\n            lien.auctionStartBlock,\n            lien.auctionDuration,\n            lien.rate\n        );\n        if (rate > rateLimit) {\n            revert RateTooHigh();\n        }\n\n        uint256 debt = Helpers.computeCurrentDebt(lien.amount, lien.rate, lien.startTime);\n\n        /* Reset the lien with the new lender and interest rate. */\n        liens[lienId] = keccak256(\n            abi.encode(\n                Lien({\n                    lender: msg.sender, // set new lender\n                    borrower: lien.borrower,\n                    collection: lien.collection,\n                    tokenId: lien.tokenId,\n                    amount: debt, // new loan begins with previous debt\n                    startTime: block.timestamp,\n                    rate: rate,\n                    auctionStartBlock: 0, // close the auction\n                    auctionDuration: lien.auctionDuration\n                })\n            )\n        );\n\n        emit Refinance(\n            lienId,\n            address(lien.collection),\n            msg.sender,\n            debt,\n            rate,\n            lien.auctionDuration\n        );\n\n        /* Repay the initial loan. */\n        _POOL.transferFrom(msg.sender, lien.lender, debt);\n    }\n\n    /**\n     * @notice Refinances to different loan amount and repays previous loan\n     * @param lien Lien struct\n     * @param lienId Lien id\n     * @param offer Loan offer\n     * @param signature Offer signatures\n     */\n    function refinanceAuctionByOther(\n        Lien calldata lien,\n        uint256 lienId,\n        LoanOffer calldata offer,\n        bytes calldata signature\n    ) external validateLien(lien, lienId) auctionIsActive(lien) {\n        /* Rate must be below current rate limit and auction duration must be the same. */\n        uint256 rateLimit = Helpers.calcRefinancingAuctionRate(\n            lien.auctionStartBlock,\n            lien.auctionDuration,\n            lien.rate\n        );\n        if (offer.rate > rateLimit || offer.auctionDuration != lien.auctionDuration) {\n            revert InvalidRefinance();\n        }\n\n        uint256 debt = Helpers.computeCurrentDebt(lien.amount, lien.rate, lien.startTime);\n\n        _refinance(lien, lienId, debt, offer, signature);\n\n        /* Repay initial loan. */\n        _POOL.transferFrom(offer.lender, lien.lender, debt);\n    }\n\n    /**\n     * @notice Refinances to different loan amount and repays previous loan\n     * @dev Must be called by borrower; previous loan must be repaid with interest\n     * @param lien Lien struct\n     * @param lienId Lien id\n     * @param loanAmount New loan amount\n     * @param offer Loan offer\n     * @param signature Offer signatures\n     */\n    function borrowerRefinance(\n        Lien calldata lien,\n        uint256 lienId,\n        uint256 loanAmount,\n        LoanOffer calldata offer,\n        bytes calldata signature\n    ) external validateLien(lien, lienId) lienIsActive(lien) {\n        if (msg.sender != lien.borrower) {\n            revert Unauthorized();\n        }\n        if (offer.auctionDuration > _MAX_AUCTION_DURATION) {\n            revert InvalidAuctionDuration();\n        }\n\n        _refinance(lien, lienId, loanAmount, offer, signature);\n\n        uint256 debt = Helpers.computeCurrentDebt(lien.amount, lien.rate, lien.startTime);\n\n        if (loanAmount >= debt) {\n            /* If new loan is more than the previous, repay the initial loan and send the remaining to the borrower. */\n            _POOL.transferFrom(offer.lender, lien.lender, debt);\n            unchecked {\n                _POOL.transferFrom(offer.lender, lien.borrower, loanAmount - debt);\n            }\n        } else {\n            /* If new loan is less than the previous, borrower must supply the difference to repay the initial loan. */\n            _POOL.transferFrom(offer.lender, lien.lender, loanAmount);\n            unchecked {\n                _POOL.transferFrom(lien.borrower, lien.lender, debt - loanAmount);\n            }\n        }\n    }\n\n    function _refinance(\n        Lien calldata lien,\n        uint256 lienId,\n        uint256 loanAmount,\n        LoanOffer calldata offer,\n        bytes calldata signature\n    ) internal {\n        if (lien.collection != offer.collection) {\n            revert CollectionsDoNotMatch();\n        }\n\n        /* Update lien with new loan details. */\n        Lien memory newLien = Lien({\n            lender: offer.lender, // set new lender\n            borrower: lien.borrower,\n            collection: lien.collection,\n            tokenId: lien.tokenId,\n            amount: loanAmount,\n            startTime: block.timestamp,\n            rate: offer.rate,\n            auctionStartBlock: 0, // close the auction\n            auctionDuration: offer.auctionDuration\n        });\n        liens[lienId] = keccak256(abi.encode(newLien));\n\n        /* Take the loan offer. */\n        _takeLoanOffer(offer, signature, newLien, lienId);\n\n        emit Refinance(\n            lienId,\n            address(offer.collection),\n            offer.lender,\n            loanAmount,\n            offer.rate,\n            offer.auctionDuration\n        );\n    }\n\n    /*/////////////////////////////////////////////////////////////\n                          MARKETPLACE FLOWS\n    /////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Purchase an NFT and use as collateral for a loan\n     * @param offer Loan offer to take\n     * @param signature Lender offer signature\n     * @param loanAmount Loan amount in ETH\n     * @param execution Marketplace execution data\n     * @return lienId Lien id\n     */\n    function buyToBorrow(\n        LoanOffer calldata offer,\n        bytes calldata signature,\n        uint256 loanAmount,\n        ExecutionV1 calldata execution\n    ) public returns (uint256 lienId) {\n        if (execution.makerOrder.order.trader == address(this)) {\n            revert Unauthorized();\n        }\n        if (offer.auctionDuration > _MAX_AUCTION_DURATION) {\n            revert InvalidAuctionDuration();\n        }\n\n        uint256 collateralTokenId = execution.makerOrder.order.tokenId;\n        uint256 price = execution.makerOrder.order.price;\n\n        /* Create lien. */\n        Lien memory lien = Lien({\n            lender: offer.lender,\n            borrower: msg.sender,\n            collection: offer.collection,\n            tokenId: collateralTokenId,\n            amount: loanAmount,\n            startTime: block.timestamp,\n            rate: offer.rate,\n            auctionStartBlock: 0,\n            auctionDuration: offer.auctionDuration\n        });\n        unchecked {\n            liens[lienId = _nextLienId++] = keccak256(abi.encode(lien));\n        }\n\n        /* Take the loan offer. */\n        _takeLoanOffer(offer, signature, lien, lienId);\n\n        /* Create the buy side order coming from Blend. */\n        Helpers.executeTakeAsk(\n            offer,\n            execution,\n            loanAmount,\n            collateralTokenId,\n            price,\n            _POOL,\n            _EXCHANGE,\n            _SELL_MATCHING_POLICY\n        );\n    }\n\n    function buyToBorrowV2(\n        LoanOffer calldata offer,\n        bytes calldata signature,\n        uint256 loanAmount,\n        AskExecutionV2 calldata execution\n    ) public returns (uint256 lienId) {\n        if (offer.auctionDuration > _MAX_AUCTION_DURATION) {\n            revert InvalidAuctionDuration();\n        }\n\n        uint256 collateralTokenId = execution.listing.tokenId;\n        uint256 price = execution.listing.price;\n\n        /* Create lien. */\n        Lien memory lien = Lien({\n            lender: offer.lender,\n            borrower: msg.sender,\n            collection: offer.collection,\n            tokenId: collateralTokenId,\n            amount: loanAmount,\n            startTime: block.timestamp,\n            rate: offer.rate,\n            auctionStartBlock: 0,\n            auctionDuration: offer.auctionDuration\n        });\n        unchecked {\n            liens[lienId = _nextLienId++] = keccak256(abi.encode(lien));\n        }\n\n        /* Take the loan offer. */\n        _takeLoanOffer(offer, signature, lien, lienId);\n\n        /* Execute order using ETH currently in contract. */\n        Helpers.executeTakeAskV2(\n            offer,\n            execution,\n            loanAmount,\n            collateralTokenId,\n            price,\n            _POOL,\n            _EXCHANGE_V2\n        );\n    }\n\n    /**\n     * @notice Purchase a locked NFT; repay the initial loan; lock the token as collateral for a new loan\n     * @param lien Lien preimage struct\n     * @param sellInput Sell offer and signature\n     * @param loanInput Loan offer and signature\n     * @return lienId Lien id\n     */\n    function buyToBorrowLocked(\n        Lien calldata lien,\n        SellInput calldata sellInput,\n        LoanInput calldata loanInput,\n        uint256 loanAmount\n    )\n        public\n        validateLien(lien, sellInput.offer.lienId)\n        lienIsActive(lien)\n        returns (uint256 lienId)\n    {\n        if (lien.collection != loanInput.offer.collection) {\n            revert CollectionsDoNotMatch();\n        }\n\n        (uint256 priceAfterFees, uint256 debt) = _buyLocked(\n            lien,\n            sellInput.offer,\n            sellInput.signature\n        );\n\n        lienId = _borrow(loanInput.offer, loanInput.signature, loanAmount, lien.tokenId);\n\n        /* Transfer funds. */\n        /* Need to repay the original loan and payout any surplus from the sell or loan funds. */\n        if (loanAmount < debt) {\n            /* loanAmount < debt < priceAfterFees */\n\n            /* Repay loan with funds from new lender to old lender. */\n            _POOL.transferFrom(loanInput.offer.lender, lien.lender, loanAmount); // doesn't cover debt\n\n            unchecked {\n                /* Supplement difference from new borrower. */\n                _POOL.transferFrom(msg.sender, lien.lender, debt - loanAmount); // cover rest of debt\n\n                /* Send rest of sell funds to borrower. */\n                _POOL.transferFrom(msg.sender, sellInput.offer.borrower, priceAfterFees - debt);\n            }\n        } else if (loanAmount < priceAfterFees) {\n            /* debt < loanAmount < priceAfterFees */\n\n            /* Repay loan with funds from new lender to old lender. */\n            _POOL.transferFrom(loanInput.offer.lender, lien.lender, debt);\n\n            unchecked {\n                /* Send rest of loan from new lender to old borrower. */\n                _POOL.transferFrom(\n                    loanInput.offer.lender,\n                    sellInput.offer.borrower,\n                    loanAmount - debt\n                );\n\n                /* Send rest of sell funds from new borrower to old borrower. */\n                _POOL.transferFrom(\n                    msg.sender,\n                    sellInput.offer.borrower,\n                    priceAfterFees - loanAmount\n                );\n            }\n        } else {\n            /* debt < priceAfterFees < loanAmount */\n\n            /* Repay loan with funds from new lender to old lender. */\n            _POOL.transferFrom(loanInput.offer.lender, lien.lender, debt);\n\n            unchecked {\n                /* Send rest of sell funds from new lender to old borrower. */\n                _POOL.transferFrom(\n                    loanInput.offer.lender,\n                    sellInput.offer.borrower,\n                    priceAfterFees - debt\n                );\n\n                /* Send rest of loan from new lender to new borrower. */\n                _POOL.transferFrom(loanInput.offer.lender, msg.sender, loanAmount - priceAfterFees);\n            }\n        }\n    }\n\n    /**\n     * @notice Purchases a locked NFT and uses the funds to repay the loan\n     * @param lien Lien preimage\n     * @param offer Sell offer\n     * @param signature Lender offer signature\n     */\n    function buyLocked(\n        Lien calldata lien,\n        SellOffer calldata offer,\n        bytes calldata signature\n    ) public validateLien(lien, offer.lienId) lienIsActive(lien) {\n        (uint256 priceAfterFees, uint256 debt) = _buyLocked(lien, offer, signature);\n\n        /* Send token to buyer. */\n        lien.collection.safeTransferFrom(address(this), msg.sender, lien.tokenId);\n\n        /* Repay lender. */\n        _POOL.transferFrom(msg.sender, lien.lender, debt);\n\n        /* Send surplus to borrower. */\n        unchecked {\n            _POOL.transferFrom(msg.sender, lien.borrower, priceAfterFees - debt);\n        }\n    }\n\n    /**\n     * @notice Takes a bid on a locked NFT and use the funds to repay the lien\n     * @dev Must be called by the borrower\n     * @param lien Lien preimage\n     * @param lienId Lien id\n     * @param execution Marketplace execution data\n     */\n    function takeBid(\n        Lien calldata lien,\n        uint256 lienId,\n        ExecutionV1 calldata execution\n    ) external validateLien(lien, lienId) lienIsActive(lien) {\n        if (execution.makerOrder.order.trader == address(this) || msg.sender != lien.borrower) {\n            revert Unauthorized();\n        }\n\n        /* Repay loan with funds received from the sale. */\n        uint256 debt = _repay(lien, lienId);\n\n        Helpers.executeTakeBid(\n            lien,\n            lienId,\n            execution,\n            debt,\n            _POOL,\n            _EXCHANGE,\n            _DELEGATE,\n            _BID_MATCHING_POLICY\n        );\n    }\n\n    function takeBidV2(\n        Lien calldata lien,\n        uint256 lienId,\n        BidExecutionV2 calldata execution\n    ) external validateLien(lien, lienId) lienIsActive(lien) {\n        if (msg.sender != lien.borrower) {\n            revert Unauthorized();\n        }\n\n        /* Repay loan with funds received from the sale. */\n        uint256 debt = _repay(lien, lienId);\n\n        Helpers.executeTakeBidV2(lien, execution, debt, _POOL, _EXCHANGE_V2, _DELEGATE_V2);\n    }\n\n    /**\n     * @notice Verify and take sell offer for token locked in lien; use the funds to repay the debt on the lien\n     * @dev Does not transfer assets\n     * @param lien Lien preimage\n     * @param offer Loan offer\n     * @param signature Loan offer signature\n     * @return priceAfterFees Price of the token (after fees), debt Current debt amount\n     */\n    function _buyLocked(\n        Lien calldata lien,\n        SellOffer calldata offer,\n        bytes calldata signature\n    ) internal returns (uint256 priceAfterFees, uint256 debt) {\n        if (lien.borrower != offer.borrower) {\n            revert Unauthorized();\n        }\n\n        priceAfterFees = _takeSellOffer(offer, signature);\n\n        /* Repay loan with funds received from the sale. */\n        debt = _repay(lien, offer.lienId);\n        if (priceAfterFees < debt) {\n            revert InvalidRepayment();\n        }\n\n        emit BuyLocked(\n            offer.lienId,\n            address(lien.collection),\n            msg.sender,\n            lien.borrower,\n            lien.tokenId\n        );\n    }\n\n    /**\n     * @notice Validates, fulfills, and transfers fees on sell offer\n     * @param sellOffer Sell offer\n     * @param sellSignature Sell offer signature\n     */\n    function _takeSellOffer(\n        SellOffer calldata sellOffer,\n        bytes calldata sellSignature\n    ) internal returns (uint256 priceAfterFees) {\n        _validateOffer(\n            _hashSellOffer(sellOffer),\n            sellOffer.borrower,\n            sellOffer.oracle,\n            sellSignature,\n            sellOffer.expirationTime,\n            sellOffer.salt\n        );\n\n        /* Mark the sell offer as fulfilled. */\n        cancelledOrFulfilled[sellOffer.borrower][sellOffer.salt] = 1;\n\n        /* Transfer fees. */\n        uint256 totalFees = _transferFees(sellOffer.fees, msg.sender, sellOffer.price);\n        unchecked {\n            priceAfterFees = sellOffer.price - totalFees;\n        }\n    }\n\n    function _transferFees(\n        Fee[] calldata fees,\n        address from,\n        uint256 price\n    ) internal returns (uint256 totalFee) {\n        uint256 feesLength = fees.length;\n        for (uint256 i = 0; i < feesLength; ) {\n            uint256 fee = (price * fees[i].rate) / _BASIS_POINTS;\n            _POOL.transferFrom(from, fees[i].recipient, fee);\n            totalFee += fee;\n            unchecked {\n                ++i;\n            }\n        }\n        if (totalFee > price) {\n            revert FeesTooHigh();\n        }\n    }\n\n    receive() external payable {\n        if (msg.sender != address(_POOL) && msg.sender != address(_EXCHANGE_V2)) {\n            revert Unauthorized();\n        }\n    }\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external pure returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /*/////////////////////////////////////////////////////////////\n                        PAYABLE WRAPPERS\n    /////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice buyToBorrow wrapper that deposits ETH to pool\n     */\n    function buyToBorrowETH(\n        LoanOffer calldata offer,\n        bytes calldata signature,\n        uint256 loanAmount,\n        ExecutionV1 calldata execution\n    ) external payable returns (uint256 lienId) {\n        _POOL.deposit{ value: msg.value }(msg.sender);\n        return buyToBorrow(offer, signature, loanAmount, execution);\n    }\n\n    /**\n     * @notice buyToBorrow wrapper that deposits ETH to pool\n     */\n    function buyToBorrowV2ETH(\n        LoanOffer calldata offer,\n        bytes calldata signature,\n        uint256 loanAmount,\n        AskExecutionV2 calldata execution\n    ) external payable returns (uint256 lienId) {\n        _POOL.deposit{ value: msg.value }(msg.sender);\n        return buyToBorrowV2(offer, signature, loanAmount, execution);\n    }\n\n    /**\n     * @notice buyToBorrowLocked wrapper that deposits ETH to pool\n     */\n    function buyToBorrowLockedETH(\n        Lien calldata lien,\n        SellInput calldata sellInput,\n        LoanInput calldata loanInput,\n        uint256 loanAmount\n    ) external payable returns (uint256 lienId) {\n        _POOL.deposit{ value: msg.value }(msg.sender);\n        return buyToBorrowLocked(lien, sellInput, loanInput, loanAmount);\n    }\n\n    /**\n     * @notice buyLocked wrapper that deposits ETH to pool\n     */\n    function buyLockedETH(\n        Lien calldata lien,\n        SellOffer calldata offer,\n        bytes calldata signature\n    ) external payable {\n        _POOL.deposit{ value: msg.value }(msg.sender);\n        return buyLocked(lien, offer, signature);\n    }\n\n    /*/////////////////////////////////////////////////////////////\n                        VALIDATION MODIFIERS\n    /////////////////////////////////////////////////////////////*/\n\n    modifier validateLien(Lien calldata lien, uint256 lienId) {\n        if (!_validateLien(lien, lienId)) {\n            revert InvalidLien();\n        }\n\n        _;\n    }\n\n    modifier lienIsActive(Lien calldata lien) {\n        if (_lienIsDefaulted(lien)) {\n            revert LienIsDefaulted();\n        }\n\n        _;\n    }\n\n    modifier auctionIsActive(Lien calldata lien) {\n        if (!_auctionIsActive(lien)) {\n            revert AuctionIsNotActive();\n        }\n\n        _;\n    }\n\n    function _validateLien(Lien calldata lien, uint256 lienId) internal view returns (bool) {\n        return liens[lienId] == keccak256(abi.encode(lien));\n    }\n\n    function _lienIsDefaulted(Lien calldata lien) internal view returns (bool) {\n        return\n            lien.auctionStartBlock != 0 &&\n            lien.auctionStartBlock + lien.auctionDuration < block.number;\n    }\n\n    function _auctionIsActive(Lien calldata lien) internal view returns (bool) {\n        return\n            lien.auctionStartBlock != 0 &&\n            lien.auctionStartBlock + lien.auctionDuration >= block.number;\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"contracts/blend/lib/Errors.sol":{"content":"// SPDX-License-Identifier: BSL 1.1 - Blend (c) Non Fungible Trading Ltd.\npragma solidity 0.8.17;\n\n// Blend\nerror Unauthorized();\nerror InvalidLoan();\nerror InvalidLien();\nerror InsufficientOffer();\nerror InvalidRepayment();\nerror LienIsDefaulted();\nerror LienNotDefaulted();\nerror AuctionIsActive();\nerror AuctionIsNotActive();\nerror InvalidRefinance();\nerror RateTooHigh();\nerror FeesTooHigh();\nerror CollectionsDoNotMatch();\nerror InvalidAuctionDuration();\n\n// OfferController\nerror OfferExpired();\nerror OfferUnavailable();\n\n// Signatures\nerror UnauthorizedOracle();\nerror SignatureExpired();\nerror InvalidSignature();\nerror InvalidVParameter();\n"},"lib/openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"contracts/pool/interfaces/IBlurPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IBlurPool {\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    function initialize() external;\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address user) external view returns (uint256);\n    function deposit() external payable;\n    function deposit(address user) external payable;\n    function withdraw(uint256 amount) external;\n    function withdrawFrom(address from, address to, uint256 amount) external;\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"contracts/blend/interfaces/IOfferController.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ISignatures.sol\";\n\ninterface IOfferController is ISignatures {\n    event OfferCancelled(address indexed user, uint256 salt);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n\n    function cancelOffer(uint256 salt) external;\n\n    function cancelOffers(uint256[] calldata salts) external;\n\n    function incrementNonce() external;\n\n    /* Admin */\n    function setOracle(address oracle, bool approved) external;\n\n    function setBlockRange(uint256 blockRange) external;\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"contracts/blend/OfferController.sol":{"content":"// SPDX-License-Identifier: BSL 1.1 - Blend (c) Non Fungible Trading Ltd.\npragma solidity 0.8.17;\n\nimport \"lib/openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\";\n\nimport \"./lib/Signatures.sol\";\nimport \"./interfaces/IOfferController.sol\";\n\nabstract contract OfferController is IOfferController, Signatures, Ownable2StepUpgradeable {\n    mapping(address => mapping(uint256 => uint256)) public cancelledOrFulfilled;\n    uint256[50] private _gap;\n\n    /**\n     * @notice Assert offer validity\n     * @param offerHash Offer hash\n     * @param signer Address of offer signer\n     * @param oracle Address of oracle\n     * @param signature Packed signature array\n     * @param expirationTime Offer expiration time\n     * @param salt Offer salt\n     */\n    function _validateOffer(\n        bytes32 offerHash,\n        address signer,\n        address oracle,\n        bytes calldata signature,\n        uint256 expirationTime,\n        uint256 salt\n    ) internal view {\n        _verifyOfferAuthorization(offerHash, signer, oracle, signature);\n\n        if (expirationTime < block.timestamp) {\n            revert OfferExpired();\n        }\n        if (cancelledOrFulfilled[signer][salt] == 1) {\n            revert OfferUnavailable();\n        }\n    }\n\n    /*/////////////////////////////////////////\n                  CANCEL FUNCTIONS\n    /////////////////////////////////////////*/\n    /**\n     * @notice Cancels offer salt for caller\n     * @param salt Unique offer salt\n     */\n    function cancelOffer(uint256 salt) external {\n        _cancelOffer(msg.sender, salt);\n    }\n\n    /**\n     * @notice Cancels offers in bulk for caller\n     * @param salts List of offer salts\n     */\n    function cancelOffers(uint256[] calldata salts) external {\n        uint256 saltsLength = salts.length;\n        for (uint256 i; i < saltsLength; ) {\n            _cancelOffer(msg.sender, salts[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Cancels all offers by incrementing caller nonce\n     */\n    function incrementNonce() external {\n        _incrementNonce(msg.sender);\n    }\n\n    /**\n     * @notice Cancel offer by user and salt\n     * @param user Address of user\n     * @param salt Unique offer salt\n     */\n    function _cancelOffer(address user, uint256 salt) private {\n        cancelledOrFulfilled[user][salt] = 1;\n        emit OfferCancelled(user, salt);\n    }\n\n    /**\n     * @notice Cancel all orders by incrementing the user nonce\n     * @param user Address of user\n     */\n    function _incrementNonce(address user) internal {\n        emit NonceIncremented(user, ++nonces[user]);\n    }\n\n    /*/////////////////////////////////////////\n                  ADMIN FUNCTIONS\n    /////////////////////////////////////////*/\n\n    /**\n     * @notice Set approval for an oracle address\n     * @param oracle Address of oracle\n     * @param approved Whether the oracle is approved\n     */\n    function setOracle(address oracle, bool approved) external onlyOwner {\n        if (approved) {\n            oracles[oracle] = 1;\n        } else {\n            oracles[oracle] = 0;\n        }\n    }\n\n    /**\n     * @notice Set the block range expiry of oracle signatures\n     * @param _blockRange Block range\n     */\n    function setBlockRange(uint256 _blockRange) external onlyOwner {\n        blockRange = _blockRange;\n    }\n}\n"},"contracts/exchangeV2/interfaces/IBlurExchangeV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {\n    TakeAsk,\n    TakeBid,\n    TakeAskSingle,\n    TakeBidSingle,\n    Order,\n    Exchange,\n    Fees,\n    FeeRate,\n    AssetType,\n    OrderType,\n    Transfer,\n    FungibleTransfers,\n    StateUpdate,\n    Cancel,\n    Listing\n} from \"../lib/Structs.sol\";\n\ninterface IBlurExchangeV2 {\n    error InsufficientFunds();\n    error TokenTransferFailed();\n    error InvalidOrder();\n    error ProtocolFeeTooHigh();\n\n    event NewProtocolFee(address indexed recipient, uint16 indexed rate);\n    event NewGovernor(address indexed governor);\n    event NewBlockRange(uint256 blockRange);\n    event CancelTrade(address indexed user, bytes32 hash, uint256 index, uint256 amount);\n    event NonceIncremented(address indexed user, uint256 newNonce);\n    event SetOracle(address indexed user, bool approved);\n\n    function initialize() external;\n\n    function setProtocolFee(address recipient, uint16 rate) external;\n    function setGovernor(address _governor) external;\n    function setOracle(address oracle, bool approved) external;\n    function setBlockRange(uint256 _blockRange) external;\n    function cancelTrades(Cancel[] memory cancels) external;\n    function incrementNonce() external;\n\n    /*//////////////////////////////////////////////////////////////\n                          EXECUTION WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAsk(TakeAsk memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBid(TakeBid memory inputs, bytes calldata oracleSignature) external;\n    function takeAskSingle(TakeAskSingle memory inputs, bytes calldata oracleSignature) external payable;\n    function takeBidSingle(TakeBidSingle memory inputs, bytes calldata oracleSignature) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        EXECUTION POOL WRAPPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function takeAskSinglePool(\n        TakeAskSingle memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n\n    function takeAskPool(\n        TakeAsk memory inputs,\n        bytes calldata oracleSignature,\n        uint256 amountToWithdraw\n    ) external payable;\n}\n"},"contracts/blend/Helpers.sol":{"content":"// SPDX-License-Identifier: BSL 1.1 - Blend (c) Non Fungible Trading Ltd.\npragma solidity 0.8.17;\n\nimport \"lib/solmate/src/utils/SignedWadMath.sol\";\n\nimport { InvalidRepayment } from \"./lib/Errors.sol\";\nimport \"./lib/Structs.sol\";\nimport \"../pool/interfaces/IBlurPool.sol\";\nimport { IBlurExchangeV2 as IExchangeV2 } from \"../exchangeV2/interfaces/IBlurExchangeV2.sol\";\nimport { Order as OrderV1, SignatureVersion, Side } from \"../exchangeV1/lib/OrderStructs.sol\";\nimport {\n    TakeAskSingle,\n    TakeBidSingle,\n    FeeRate,\n    Taker,\n    Exchange,\n    Order as OrderV2,\n    AssetType\n} from \"../exchangeV2/lib/Structs.sol\";\n\ninterface IExchange {\n    function execute(Input calldata sell, Input calldata buy) external payable;\n}\n\nlibrary Helpers {\n    int256 private constant _YEAR_WAD = 365 days * 1e18;\n    uint256 private constant _LIQUIDATION_THRESHOLD = 100_000;\n    uint256 private constant _BASIS_POINTS = 10_000;\n\n    error InvalidExecution();\n\n    /**\n     * @dev Computes the current debt of a borrow given the last time it was touched and the last computed debt.\n     * @param amount Principal in ETH\n     * @param startTime Start time of the loan\n     * @param rate Interest rate (in bips)\n     * @dev Formula: https://www.desmos.com/calculator/l6omp0rwnh\n     */\n    function computeCurrentDebt(\n        uint256 amount,\n        uint256 rate,\n        uint256 startTime\n    ) public view returns (uint256) {\n        uint256 loanTime = block.timestamp - startTime;\n        int256 yearsWad = wadDiv(int256(loanTime) * 1e18, _YEAR_WAD);\n        return uint256(wadMul(int256(amount), wadExp(wadMul(yearsWad, bipsToSignedWads(rate)))));\n    }\n\n    /**\n     * @dev Calculates the current maximum interest rate a specific refinancing\n     * auction could settle at currently given the auction's start block and duration.\n     * @param startBlock The block the auction started at\n     * @param oldRate Previous interest rate (in bips)\n     * @dev Formula: https://www.desmos.com/calculator/urasr71dhb\n     */\n    function calcRefinancingAuctionRate(\n        uint256 startBlock,\n        uint256 auctionDuration,\n        uint256 oldRate\n    ) public view returns (uint256) {\n        uint256 currentAuctionBlock = block.number - startBlock;\n        int256 oldRateWads = bipsToSignedWads(oldRate);\n\n        uint256 auctionT1 = auctionDuration / 5;\n        uint256 auctionT2 = (4 * auctionDuration) / 5;\n\n        int256 maxRateWads;\n        {\n            int256 aInverse = -bipsToSignedWads(15000);\n            int256 b = 2;\n            int256 maxMinRateWads = bipsToSignedWads(500);\n\n            if (oldRateWads < -((b * aInverse) / 2)) {\n                maxRateWads = maxMinRateWads + (oldRateWads ** 2) / aInverse + b * oldRateWads;\n            } else {\n                maxRateWads = maxMinRateWads - ((b ** 2) * aInverse) / 4;\n            }\n        }\n\n        int256 startSlope = maxRateWads / int256(auctionT1); // wad-bips per block\n\n        int256 middleSlope = bipsToSignedWads(9000) / int256((3 * auctionDuration) / 5) + 1; // wad-bips per block (add one to account for rounding)\n        int256 middleB = maxRateWads - int256(auctionT1) * middleSlope;\n\n        if (currentAuctionBlock < auctionT1) {\n            return signedWadsToBips(startSlope * int256(currentAuctionBlock));\n        } else if (currentAuctionBlock < auctionT2) {\n            return signedWadsToBips(middleSlope * int256(currentAuctionBlock) + middleB);\n        } else if (currentAuctionBlock < auctionDuration) {\n            int256 endSlope;\n            int256 endB;\n            {\n                endSlope =\n                    (bipsToSignedWads(_LIQUIDATION_THRESHOLD) -\n                        ((int256(auctionT2) * middleSlope) + middleB)) /\n                    int256(auctionDuration - auctionT2); // wad-bips per block\n                endB =\n                    bipsToSignedWads(_LIQUIDATION_THRESHOLD) -\n                    int256(auctionDuration) *\n                    endSlope;\n            }\n\n            return signedWadsToBips(endSlope * int256(currentAuctionBlock) + endB);\n        } else {\n            return _LIQUIDATION_THRESHOLD;\n        }\n    }\n\n    /**\n     * @dev Converts an integer bips value to a signed wad value.\n     */\n    function bipsToSignedWads(uint256 bips) public pure returns (int256) {\n        return int256((bips * 1e18) / _BASIS_POINTS);\n    }\n\n    /**\n     * @dev Converts a signed wad value to an integer bips value.\n     */\n    function signedWadsToBips(int256 wads) public pure returns (uint256) {\n        return uint256((wads * int256(_BASIS_POINTS)) / 1e18);\n    }\n\n    function executeTakeBid(\n        Lien calldata lien,\n        uint256 lienId,\n        ExecutionV1 calldata execution,\n        uint256 debt,\n        IBlurPool pool,\n        IExchange exchange,\n        address delegate,\n        address matchingPolicy\n    ) external {\n        /* Create sell side order from Blend. */\n        OrderV1 memory sellOrder = OrderV1({\n            trader: address(this),\n            side: Side.Sell,\n            matchingPolicy: matchingPolicy,\n            collection: address(lien.collection),\n            tokenId: lien.tokenId,\n            amount: 1,\n            paymentToken: address(pool),\n            price: execution.makerOrder.order.price,\n            listingTime: execution.makerOrder.order.listingTime + 1, // listingTime determines maker/taker\n            expirationTime: type(uint256).max,\n            fees: new Fee[](0),\n            salt: lienId, // prevent reused order hash\n            extraParams: \"\\x01\" // require oracle signature\n        });\n        Input memory sell = Input({\n            order: sellOrder,\n            v: 0,\n            r: bytes32(0),\n            s: bytes32(0),\n            extraSignature: execution.extraSignature,\n            signatureVersion: SignatureVersion.Single,\n            blockNumber: execution.blockNumber\n        });\n\n        /* Execute marketplace order. */\n        uint256 balanceBefore = pool.balanceOf(address(this));\n        lien.collection.approve(delegate, lien.tokenId);\n        exchange.execute(sell, execution.makerOrder);\n\n        /* Determine the funds received from the sale (after fees). */\n        uint256 amountReceivedFromSale = pool.balanceOf(address(this)) - balanceBefore;\n        if (amountReceivedFromSale < debt) {\n            revert InvalidRepayment();\n        }\n\n        /* Repay lender. */\n        pool.transferFrom(address(this), lien.lender, debt);\n\n        /* Send surplus to borrower. */\n        unchecked {\n            pool.transferFrom(address(this), lien.borrower, amountReceivedFromSale - debt);\n        }\n    }\n\n    function executeTakeAskV2(\n        LoanOffer calldata offer, \n        AskExecutionV2 calldata execution,\n        uint256 loanAmount,\n        uint256 collateralTokenId,\n        uint256 price,\n        IBlurPool pool,\n        IExchangeV2 exchangeV2\n    ) external {\n        OrderV2 calldata order = execution.order;\n        if (address(offer.collection) != order.collection || order.assetType != AssetType.ERC721) {\n            revert InvalidExecution();\n        }\n\n        /* Transfer funds. */\n        /* Need to retrieve the ETH to fund the marketplace execution. */\n        if (loanAmount < price) {\n            /* Take funds from lender. */\n            pool.withdrawFrom(offer.lender, address(this), loanAmount);\n\n            /* Supplement difference from borrower. */\n            unchecked {\n                pool.withdrawFrom(msg.sender, address(this), price - loanAmount);\n            }\n        } else {\n            /* Take funds from lender. */\n            pool.withdrawFrom(offer.lender, address(this), price);\n\n            /* Send surplus to borrower. */\n            unchecked {\n                pool.transferFrom(offer.lender, msg.sender, loanAmount - price);\n            }\n        }\n\n        TakeAskSingle memory execute = TakeAskSingle({\n            order: execution.order,\n            exchange: Exchange({\n                index: 0,\n                proof: execution.proof,\n                listing: Listing({\n                    index: execution.listing.index,\n                    tokenId: collateralTokenId,\n                    amount: 1,\n                    price: price\n                }),\n                taker: Taker({ tokenId: collateralTokenId, amount: 1 })\n            }),\n            takerFee: FeeRate(address(0), 0),\n            signature: execution.signature,\n            tokenRecipient: address(this)\n        });\n        exchangeV2.takeAskSingle{ value: price }(execute, execution.oracleSignature);\n    }\n\n    function executeTakeAsk(\n        LoanOffer calldata offer,\n        ExecutionV1 calldata execution,\n        uint256 loanAmount,\n        uint256 collateralTokenId,\n        uint256 price,\n        IBlurPool pool,\n        IExchange exchange,\n        address matchingPolicy\n    ) external {\n        /* Transfer funds. */\n        /* Need to retrieve the ETH to fund the marketplace execution. */\n        if (loanAmount < price) {\n            /* Take funds from lender. */\n            pool.withdrawFrom(offer.lender, address(this), loanAmount);\n\n            /* Supplement difference from borrower. */\n            unchecked {\n                pool.withdrawFrom(msg.sender, address(this), price - loanAmount);\n            }\n        } else {\n            /* Take funds from lender. */\n            pool.withdrawFrom(offer.lender, address(this), price);\n\n            /* Send surplus to borrower. */\n            unchecked {\n                pool.transferFrom(offer.lender, msg.sender, loanAmount - price);\n            }\n        }\n\n        OrderV1 memory buyOrder = OrderV1({\n            trader: address(this),\n            side: Side.Buy,\n            matchingPolicy: matchingPolicy,\n            collection: address(offer.collection),\n            tokenId: collateralTokenId,\n            amount: 1,\n            paymentToken: address(0),\n            price: price,\n            listingTime: execution.makerOrder.order.listingTime + 1, // listingTime determines maker/taker\n            expirationTime: type(uint256).max,\n            fees: new Fee[](0),\n            salt: uint160(execution.makerOrder.order.trader), // prevent reused order hash\n            extraParams: \"\\x01\" // require oracle signature\n        });\n        Input memory buy = Input({\n            order: buyOrder,\n            v: 0,\n            r: bytes32(0),\n            s: bytes32(0),\n            extraSignature: execution.extraSignature,\n            signatureVersion: SignatureVersion.Single,\n            blockNumber: execution.blockNumber\n        });\n\n        /* Execute order using ETH currently in contract. */\n        exchange.execute{ value: price }(execution.makerOrder, buy);\n    }\n\n    function executeTakeBidV2(\n        Lien calldata lien,\n        BidExecutionV2 calldata execution,\n        uint256 debt,\n        IBlurPool pool,\n        IExchangeV2 exchangeV2,\n        address delegateV2\n    ) external {\n        OrderV2 calldata order = execution.order;\n        if (address(lien.collection) != order.collection || order.assetType != AssetType.ERC721) {\n            revert InvalidExecution();\n        }\n\n        uint256 balanceBefore = pool.balanceOf(address(this));\n\n        TakeBidSingle memory execute = TakeBidSingle({\n            order: execution.order,\n            exchange: Exchange({\n                index: 0,\n                proof: execution.proof,\n                listing: execution.listing,\n                taker: Taker({ tokenId: lien.tokenId, amount: 1 })\n            }),\n            takerFee: FeeRate(address(0), 0),\n            signature: execution.signature\n        });\n\n        /* Execute marketplace order. */\n        lien.collection.approve(delegateV2, lien.tokenId);\n        exchangeV2.takeBidSingle(execute, execution.oracleSignature);\n\n        /* Determine the funds received from the sale (after fees). */\n        uint256 amountReceivedFromSale = pool.balanceOf(address(this)) - balanceBefore;\n        if (amountReceivedFromSale < debt) {\n            revert InvalidRepayment();\n        }\n\n        /* Repay lender. */\n        pool.transferFrom(address(this), lien.lender, debt);\n\n        /* Send surplus to borrower. */\n        unchecked {\n            pool.transferFrom(address(this), lien.borrower, amountReceivedFromSale - debt);\n        }\n    }\n}\n"},"contracts/blend/lib/Signatures.sol":{"content":"// SPDX-License-Identifier: BSL 1.1 - Blend (c) Non Fungible Trading Ltd.\npragma solidity 0.8.17;\n\nimport \"./Structs.sol\";\nimport \"./Errors.sol\";\nimport \"../interfaces/ISignatures.sol\";\n\nabstract contract Signatures is ISignatures {\n    bytes32 private immutable _LOAN_OFFER_TYPEHASH;\n    bytes32 private immutable _FEE_TYPEHASH;\n    bytes32 private immutable _SELL_OFFER_TYPEHASH;\n    bytes32 private immutable _ORACLE_OFFER_TYPEHASH;\n    bytes32 private immutable _EIP_712_DOMAIN_TYPEHASH;\n\n    string private constant _NAME = \"Blend\";\n    string private constant _VERSION = \"1.0\";\n\n    mapping(address => uint256) public nonces;\n    mapping(address => uint256) public oracles;\n    uint256 public blockRange;\n\n    uint256[50] private _gap;\n\n    constructor() {\n        (\n            _LOAN_OFFER_TYPEHASH,\n            _SELL_OFFER_TYPEHASH,\n            _FEE_TYPEHASH,\n            _ORACLE_OFFER_TYPEHASH,\n            _EIP_712_DOMAIN_TYPEHASH\n        ) = _createTypehashes();\n    }\n\n    function information() external view returns (string memory version, bytes32 domainSeparator) {\n        version = _VERSION;\n        domainSeparator = _hashDomain(\n            _EIP_712_DOMAIN_TYPEHASH,\n            keccak256(bytes(_NAME)),\n            keccak256(bytes(_VERSION))\n        );\n    }\n\n    function getSellOfferHash(SellOffer calldata offer) external view returns (bytes32) {\n        return _hashSellOffer(offer);\n    }\n\n    function getOfferHash(LoanOffer calldata offer) external view returns (bytes32) {\n        return _hashOffer(offer);\n    }\n\n    function getOracleOfferHash(bytes32 hash, uint256 blockNumber) external view returns (bytes32) {\n        return _hashOracleOffer(hash, blockNumber);\n    }\n\n    /**\n     * @notice Generate all EIP712 Typehashes\n     */\n    function _createTypehashes()\n        internal\n        view\n        returns (\n            bytes32 loanOfferTypehash,\n            bytes32 sellOfferTypehash,\n            bytes32 feeTypehash,\n            bytes32 oracleOfferTypehash,\n            bytes32 eip712DomainTypehash\n        )\n    {\n        eip712DomainTypehash = keccak256(\n            bytes.concat(\n                \"EIP712Domain(\",\n                \"string name,\",\n                \"string version,\",\n                \"uint256 chainId,\",\n                \"address verifyingContract\",\n                \")\"\n            )\n        );\n\n        oracleOfferTypehash = keccak256(\n            bytes.concat(\"OracleOffer(\", \"bytes32 hash,\", \"uint256 blockNumber\", \")\")\n        );\n\n        loanOfferTypehash = keccak256(\n            bytes.concat(\n                \"LoanOffer(\",\n                \"address lender,\",\n                \"address collection,\",\n                \"uint256 totalAmount,\",\n                \"uint256 minAmount,\",\n                \"uint256 maxAmount,\",\n                \"uint256 auctionDuration,\",\n                \"uint256 salt,\",\n                \"uint256 expirationTime,\",\n                \"uint256 rate,\",\n                \"address oracle,\",\n                \"uint256 nonce\",\n                \")\"\n            )\n        );\n\n        bytes memory feeTypestring = bytes.concat(\"Fee(\", \"uint16 rate,\", \"address recipient\", \")\");\n\n        feeTypehash = keccak256(feeTypestring);\n        sellOfferTypehash = keccak256(\n            bytes.concat(\n                \"SellOffer(\",\n                \"address borrower,\",\n                \"uint256 lienId,\",\n                \"uint256 price,\",\n                \"uint256 expirationTime,\",\n                \"uint256 salt,\",\n                \"address oracle,\",\n                \"Fee[] fees,\",\n                \"uint256 nonce\",\n                \")\",\n                feeTypestring\n            )\n        );\n    }\n\n    function _hashDomain(\n        bytes32 eip712DomainTypehash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    eip712DomainTypehash,\n                    nameHash,\n                    versionHash,\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    function _hashFee(Fee calldata fee) internal view returns (bytes32) {\n        return keccak256(abi.encode(_FEE_TYPEHASH, fee.rate, fee.recipient));\n    }\n\n    function _packFees(Fee[] calldata fees) internal view returns (bytes32) {\n        bytes32[] memory feeHashes = new bytes32[](fees.length);\n        uint256 feesLength = fees.length;\n        for (uint256 i; i < feesLength; ) {\n            feeHashes[i] = _hashFee(fees[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        return keccak256(abi.encodePacked(feeHashes));\n    }\n\n    function _hashSellOffer(SellOffer calldata offer) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _SELL_OFFER_TYPEHASH,\n                    offer.borrower,\n                    offer.lienId,\n                    offer.price,\n                    offer.expirationTime,\n                    offer.salt,\n                    offer.oracle,\n                    _packFees(offer.fees),\n                    nonces[offer.borrower]\n                )\n            );\n    }\n\n    function _hashOffer(LoanOffer calldata offer) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _LOAN_OFFER_TYPEHASH,\n                    offer.lender,\n                    offer.collection,\n                    offer.totalAmount,\n                    offer.minAmount,\n                    offer.maxAmount,\n                    offer.auctionDuration,\n                    offer.salt,\n                    offer.expirationTime,\n                    offer.rate,\n                    offer.oracle,\n                    nonces[offer.lender]\n                )\n            );\n    }\n\n    function _hashOracleOffer(bytes32 hash, uint256 blockNumber) internal view returns (bytes32) {\n        return keccak256(abi.encode(_ORACLE_OFFER_TYPEHASH, hash, blockNumber));\n    }\n\n    function _hashToSign(bytes32 hash) internal view returns (bytes32) {\n        return keccak256(\n            bytes.concat(\n                bytes2(0x1901),\n                _hashDomain(\n                    _EIP_712_DOMAIN_TYPEHASH,\n                    keccak256(bytes(_NAME)),\n                    keccak256(bytes(_VERSION))\n                ),\n                hash\n            )\n        );\n    }\n\n    function _hashToSignOracle(bytes32 hash, uint256 blockNumber) internal view returns (bytes32) {\n        return\n            keccak256(\n                bytes.concat(\n                    bytes2(0x1901),\n                    _hashDomain(\n                        _EIP_712_DOMAIN_TYPEHASH,\n                        keccak256(bytes(_NAME)),\n                        keccak256(bytes(_VERSION))\n                    ),\n                    _hashOracleOffer(hash, blockNumber)\n                )\n            );\n    }\n\n    /**\n     * @notice Verify authorization of offer\n     * @param offerHash Hash of offer struct\n     * @param lender Lender address\n     * @param oracle Oracle address\n     * @param signature Packed offer signature (with oracle signature if necessary)\n     */\n    function _verifyOfferAuthorization(\n        bytes32 offerHash,\n        address lender,\n        address oracle,\n        bytes calldata signature\n    ) internal view {\n        bytes32 hashToSign = _hashToSign(offerHash);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := calldataload(signature.offset)\n            s := calldataload(add(signature.offset, 0x20))\n            v := shr(248, calldataload(add(signature.offset, 0x40)))\n        }\n        _verify(lender, hashToSign, v, r, s);\n\n        /* Verify oracle signature if required. */\n        if (oracle != address(0)) {\n            uint256 blockNumber;\n            assembly {\n                r := calldataload(add(signature.offset, 0x41))\n                s := calldataload(add(signature.offset, 0x61))\n                v := shr(248, calldataload(add(signature.offset, 0x81)))\n                blockNumber := calldataload(add(signature.offset, 0x82))\n            }\n            if (oracles[oracle] == 0) {\n                revert UnauthorizedOracle();\n            }\n            if (blockNumber + blockRange < block.number) {\n                revert SignatureExpired();\n            }\n\n            hashToSign = _hashToSignOracle(offerHash, blockNumber);\n            _verify(oracle, hashToSign, v, r, s);\n        }\n    }\n\n    /**\n     * @notice Verify signature of digest\n     * @param signer Address of expected signer\n     * @param digest Signature digest\n     * @param v v parameter\n     * @param r r parameter\n     * @param s s parameter\n     */\n    function _verify(address signer, bytes32 digest, uint8 v, bytes32 r, bytes32 s) internal pure {\n        if (v != 27 && v != 28) {\n            revert InvalidVParameter();\n        }\n        address recoveredSigner = ecrecover(digest, v, r, s);\n        if (recoveredSigner == address(0) || signer != recoveredSigner) {\n            revert InvalidSignature();\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"contracts/blend/interfaces/IBlend.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../lib/Structs.sol\";\nimport \"./IOfferController.sol\";\n\ninterface IBlend is IOfferController {\n    event LoanOfferTaken(\n        bytes32 offerHash,\n        uint256 lienId,\n        address collection,\n        address lender,\n        address borrower,\n        uint256 loanAmount,\n        uint256 rate,\n        uint256 tokenId,\n        uint256 auctionDuration\n    );\n\n    event Repay(uint256 lienId, address collection);\n\n    event StartAuction(uint256 lienId, address collection);\n\n    event Refinance(\n        uint256 lienId,\n        address collection,\n        address newLender,\n        uint256 newAmount,\n        uint256 newRate,\n        uint256 newAuctionDuration\n    );\n\n    event Seize(uint256 lienId, address collection);\n\n    event BuyLocked(\n        uint256 lienId,\n        address collection,\n        address buyer,\n        address seller,\n        uint256 tokenId\n    );\n\n    function amountTaken(bytes32 offerHash) external view returns (uint256);\n\n    function liens(uint256 lienId) external view returns (bytes32);\n\n    /*//////////////////////////////////////////////////\n                    BORROW FLOWS\n    //////////////////////////////////////////////////*/\n    function borrow(\n        LoanOffer calldata offer,\n        bytes calldata signature,\n        uint256 loanAmount,\n        uint256 collateralId\n    ) external returns (uint256 lienId);\n\n    function repay(Lien calldata lien, uint256 lienId) external;\n\n    /*//////////////////////////////////////////////////\n                    REFINANCING FLOWS\n    //////////////////////////////////////////////////*/\n    function startAuction(Lien calldata lien, uint256 lienId) external;\n\n    function seize(LienPointer[] calldata lienPointers) external;\n\n    function refinance(\n        Lien calldata lien,\n        uint256 lienId,\n        LoanOffer calldata offer,\n        bytes calldata signature\n    ) external;\n\n    function refinanceAuction(Lien calldata lien, uint256 lienId, uint256 rate) external;\n\n    function refinanceAuctionByOther(\n        Lien calldata lien,\n        uint256 lienId,\n        LoanOffer calldata offer,\n        bytes calldata signature\n    ) external;\n\n    function borrowerRefinance(\n        Lien calldata lien,\n        uint256 lienId,\n        uint256 loanAmount,\n        LoanOffer calldata offer,\n        bytes calldata signature\n    ) external;\n\n    /*//////////////////////////////////////////////////\n                    MARKETPLACE FLOWS\n    //////////////////////////////////////////////////*/\n    function buyToBorrow(\n        LoanOffer calldata offer,\n        bytes calldata signature,\n        uint256 loanAmount,\n        ExecutionV1 calldata execution\n    ) external returns (uint256 lienId);\n\n    function buyToBorrowETH(\n        LoanOffer calldata offer,\n        bytes calldata signature,\n        uint256 loanAmount,\n        ExecutionV1 calldata execution\n    ) external payable returns (uint256 lienId);\n\n    function buyToBorrowLocked(\n        Lien calldata lien,\n        SellInput calldata sellInput,\n        LoanInput calldata loanInput,\n        uint256 loanAmount\n    ) external returns (uint256 lienId);\n\n    function buyToBorrowLockedETH(\n        Lien calldata lien,\n        SellInput calldata sellInput,\n        LoanInput calldata loanInput,\n        uint256 loanAmount\n    ) external payable returns (uint256 lienId);\n\n    function buyLocked(\n        Lien calldata lien,\n        SellOffer calldata offer,\n        bytes calldata signature\n    ) external;\n\n    function buyLockedETH(\n        Lien calldata lien,\n        SellOffer calldata offer,\n        bytes calldata signature\n    ) external payable;\n\n    function takeBid(Lien calldata lien, uint256 lienId, ExecutionV1 calldata execution) external;\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1967Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.9._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"lib/solmate/src/tokens/ERC721.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) public getApproved;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public virtual {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        unchecked {\n            _balanceOf[from]--;\n\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n        unchecked {\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        // Ownership check above ensures no underflow.\n        unchecked {\n            _balanceOf[owner]--;\n        }\n\n        delete _ownerOf[id];\n\n        delete getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(\n        address to,\n        uint256 id,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721TokenReceiver {\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC721TokenReceiver.onERC721Received.selector;\n    }\n}\n"},"contracts/blend/interfaces/ISignatures.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../lib/Structs.sol\";\n\ninterface ISignatures {\n    function information()\n        external\n        view\n        returns (\n            string memory version,\n            bytes32 domainSeparator\n        );\n    function getOracleOfferHash(bytes32 hash, uint256 blockNumber) external view returns (bytes32);\n    function getSellOfferHash(SellOffer calldata offer) external view returns (bytes32);\n    function getOfferHash(LoanOffer calldata offer) external view returns (bytes32);\n    function cancelledOrFulfilled(address user, uint256 salt) external view returns (uint256);\n    function nonces(address user) external view returns (uint256);\n}\n"},"contracts/blend/lib/Structs.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"lib/solmate/src/tokens/ERC721.sol\";\n\nimport { Input, Fee } from \"../../exchangeV1/lib/OrderStructs.sol\";\nimport { Order as OrderV2, Listing } from \"../../exchangeV2/lib/Structs.sol\";\n\nstruct LienPointer {\n    Lien lien;\n    uint256 lienId;\n}\n\nstruct SellOffer {\n    address borrower;\n    uint256 lienId;\n    uint256 price;\n    uint256 expirationTime;\n    uint256 salt;\n    address oracle;\n    Fee[] fees;\n}\n\nstruct Lien {\n    address lender;\n    address borrower;\n    ERC721 collection;\n    uint256 tokenId;\n    uint256 amount;\n    uint256 startTime;\n    uint256 rate;\n    uint256 auctionStartBlock;\n    uint256 auctionDuration;\n}\n\nstruct LoanOffer {\n    address lender;\n    ERC721 collection;\n    uint256 totalAmount;\n    uint256 minAmount;\n    uint256 maxAmount;\n    uint256 auctionDuration;\n    uint256 salt;\n    uint256 expirationTime;\n    uint256 rate;\n    address oracle;\n}\n\nstruct LoanInput {\n    LoanOffer offer;\n    bytes signature;\n}\n\nstruct SellInput {\n    SellOffer offer;\n    bytes signature;\n}\n\nstruct ExecutionV1 {\n    Input makerOrder;\n    bytes extraSignature;\n    uint256 blockNumber;\n}\n\nstruct BidExecutionV2 {\n    OrderV2 order;\n    Listing listing;\n    bytes32[] proof;\n    bytes signature;\n    bytes oracleSignature;\n}\n\nstruct AskExecutionV2 {\n    OrderV2 order;\n    Listing listing;\n    bytes32[] proof;\n    bytes signature;\n    bytes oracleSignature;\n}\n"}},"settings":{"libraries":{"contracts/blend/Helpers.sol":{"Helpers":"0x5c55cd67a6bd0d4c315b50cb6cd589bfb080017e"}},"metadata":{"bytecodeHash":"none"},"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}},"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","solmate/=lib/solmate/src/"],"viaIR":false}},"ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellMatchingPolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bidMatchingPolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegateV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuctionIsActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionIsNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionsDoNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeesTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOffer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAuctionDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLien\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRefinance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRepayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LienIsDefaulted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfferExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfferUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedOracle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BuyLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"name\":\"LoanOfferTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"}],\"name\":\"NonceIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"Refinance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"Seize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"StartAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"amountTaken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"borrowerRefinance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SellOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buyLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SellOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buyLockedETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"matchingPolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraSignature\",\"type\":\"bytes\"},{\"internalType\":\"enum SignatureVersion\",\"name\":\"signatureVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct Input\",\"name\":\"makerOrder\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extraSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ExecutionV1\",\"name\":\"execution\",\"type\":\"tuple\"}],\"name\":\"buyToBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"matchingPolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraSignature\",\"type\":\"bytes\"},{\"internalType\":\"enum SignatureVersion\",\"name\":\"signatureVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct Input\",\"name\":\"makerOrder\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extraSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ExecutionV1\",\"name\":\"execution\",\"type\":\"tuple\"}],\"name\":\"buyToBorrowETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SellOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SellInput\",\"name\":\"sellInput\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LoanInput\",\"name\":\"loanInput\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"buyToBorrowLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SellOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SellInput\",\"name\":\"sellInput\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LoanInput\",\"name\":\"loanInput\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"buyToBorrowLockedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"listingsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfListings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"}],\"internalType\":\"struct FeeRate\",\"name\":\"makerFee\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Listing\",\"name\":\"listing\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"oracleSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct AskExecutionV2\",\"name\":\"execution\",\"type\":\"tuple\"}],\"name\":\"buyToBorrowV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"listingsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfListings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"}],\"internalType\":\"struct FeeRate\",\"name\":\"makerFee\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Listing\",\"name\":\"listing\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"oracleSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct AskExecutionV2\",\"name\":\"execution\",\"type\":\"tuple\"}],\"name\":\"buyToBorrowV2ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"salts\",\"type\":\"uint256[]\"}],\"name\":\"cancelOffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cancelledOrFulfilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"getOfferHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getOracleOfferHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SellOffer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"getSellOfferHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"information\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liens\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"refinance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"refinanceAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"refinanceAuctionByOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"internalType\":\"struct LienPointer[]\",\"name\":\"lienPointers\",\"type\":\"tuple[]\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockRange\",\"type\":\"uint256\"}],\"name\":\"setBlockRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"matchingPolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraSignature\",\"type\":\"bytes\"},{\"internalType\":\"enum SignatureVersion\",\"name\":\"signatureVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct Input\",\"name\":\"makerOrder\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extraSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ExecutionV1\",\"name\":\"execution\",\"type\":\"tuple\"}],\"name\":\"takeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"listingsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfListings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"}],\"internalType\":\"struct FeeRate\",\"name\":\"makerFee\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Listing\",\"name\":\"listing\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"oracleSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct BidExecutionV2\",\"name\":\"execution\",\"type\":\"tuple\"}],\"name\":\"takeBidV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Blend","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":1,"Runs":200,"ConstructorArguments":"0x0000000000000000000000000000000000a39bb272e79075ade125fd351887ac000000000000000000000000000000000000ad05ccc4f10045630fb830b95127000000000000000000000000b2ecfe4e4d61f8790bbb9de2d1259b9e2410cea50000000000000000000000000000000000dab4a563819e8fd93dba3b25bc34950000000000000000000000000000000000b92d5d043faf7cecf7e2ee6aaed23200000000000000000000000000000000000111abe46ff893f3b2fdf1f759a8a80000000000000000000000002f18f339620a63e43f0839eeb18d7de1e1be4dfb","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}