{"expiry":1689528949,"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/AvoWallet/VariablesV1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17;\n\nimport { IAvoVersionsRegistry } from \"../interfaces/IAvoVersionsRegistry.sol\";\nimport { IAvoWalletV2 } from \"../interfaces/IAvoWalletV2.sol\";\n\nerror AvoWallet__InvalidParams();\n\n/// @title      VariablesV1\n/// @notice     Contains storage variables for AvoWallet.\nabstract contract VariablesV1 is IAvoWalletV2 {\n    /// @notice  registry holding the valid versions (addresses) for AvoWallet implementation contracts\n    ///          The registry is used to verify a valid version before upgrading\n    ///          immutable but could be updated in the logic contract when a new version of AvoWallet is deployed\n    IAvoVersionsRegistry public immutable avoVersionsRegistry;\n\n    /// @notice address of the AvoForwarder (proxy) that is allowed to forward tx with valid\n    ///         signatures to this contract\n    ///         immutable but could be updated in the logic contract when a new version of AvoWallet is deployed\n    address public immutable avoForwarder;\n\n    // the next 3 vars (avoWalletImpl, nonce, status) are tightly packed into 1 storage slot\n\n    /// @notice address of the Avo wallet logic / implementation contract. IMPORTANT: SAME STORAGE SLOT AS FOR PROXY\n    /// @dev    IMPORTANT: DO NOT MOVE THIS VARIABLE\n    ///         _avoWalletImpl MUST ALWAYS be the first declared variable here in the logic contract and in the proxy!\n    ///         when upgrading, the storage at memory address 0x0 is upgraded (first slot).\n    ///         immutable and constants do not take up storage slots so they can come before.\n    address internal _avoWalletImpl;\n\n    /// @notice nonce that is incremented for every `cast` transaction with valid signature\n    uint88 public avoSafeNonce;\n\n    /// @dev flag set temporarily to signal various cases:\n    /// 0 -> default state\n    /// 1 -> signature is valid or called by owner, _callTargets can be executed\n    /// 20 / 21 -> flashloan receive can be executed (set to original id param from cast())\n    uint8 internal _status;\n\n    /// @notice owner of the smart wallet\n    /// @dev theoretically immutable, can only be set in initialize (at proxy clone factory deployment)\n    address public owner;\n\n    /// @dev\n    /// after owner variable there still is uint8 and bool from Initializable library. Rest of slot (10 bytes) should be empty\n    /// uint8 private _initialized;\n    /// bool private _initializing;\n\n    /// @dev contracts deployed before V2 contain two more variables from EIP712Upgradeable: hashed domain separator\n    /// name and version which were set at initialization (Now we do this in logic contract at deployment as constant)\n    /// https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/cryptography/EIP712Upgradeable.sol#L32\n    /// bytes32 private _HASHED_NAME;\n    /// bytes32 private _HASHED_VERSION;\n\n    /// @notice constructor sets the immutable avoVersionsRegistry address\n    /// @dev    setting this on the logic contract at deployment is ok because the\n    ///         AvoVersionsRegistry is upgradeable so this address is the proxy address which really shouldn't change.\n    ///         Even if it would change then worst case a new AvoWallet logic contract\n    ///         has to be deployed pointing to a new registry\n    /// @param avoVersionsRegistry_    address of the avoVersionsRegistry contract\n    /// @param avoForwarder_           address of the avoForwarder (proxy) contract\n    ///                                to forward tx with valid signatures. must be valid version in AvoVersionsRegistry.\n    constructor(IAvoVersionsRegistry avoVersionsRegistry_, address avoForwarder_) {\n        if (address(avoVersionsRegistry_) == address(0)) {\n            revert AvoWallet__InvalidParams();\n        }\n        avoVersionsRegistry = avoVersionsRegistry_;\n\n        avoVersionsRegistry.requireValidAvoForwarderVersion(avoForwarder_);\n        avoForwarder = avoForwarder_;\n    }\n}\n"},"contracts/AvoWallet/SelfUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17;\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport { VariablesV1 } from \"./VariablesV1.sol\";\n\n/// @title      SelfUpgradeable\n/// @notice     Simple contract to upgrade the implementation address stored at storage slot 0x0\n/// @dev        Mostly based on OpenZeppelin ERC1967Upgrade contract, adapted with selfCall etc.\n///             IMPORANT to keep VariablesV1 at first inheritance to ensure proxy impl address is at 0x0\nabstract contract SelfUpgradeable is VariablesV1 {\n    error SelfUpgradeable__Unauthorized();\n\n    /// @notice Emitted when the implementation is upgraded to a new AvoWallet logic contract\n    event Upgraded(address indexed avoWalletImpl);\n\n    /// @notice modifier that ensures the method can only be called by the same contract itself\n    modifier onlySelf() {\n        _requireSelfCalled();\n        _;\n    }\n\n    /// @notice                 upgrade the contract to a new implementation address, if valid version\n    ///                         can only be called by contract itself (in case of AvoWallet through `cast`)\n    /// @param avoWalletImpl_   New contract address\n    function upgradeTo(address avoWalletImpl_) public onlySelf {\n        avoVersionsRegistry.requireValidAvoWalletVersion(avoWalletImpl_);\n\n        _avoWalletImpl = avoWalletImpl_;\n        emit Upgraded(avoWalletImpl_);\n    }\n\n    /// @notice                 upgrade the contract to a new implementation address, if valid version\n    ///                         and call a function afterwards\n    ///                         can only be called by contract itself (in case of AvoWallet through `cast`)\n    /// @param avoWalletImpl_   New contract address\n    /// @param data_            callData for function call on avoWalletImpl_ after upgrading\n    /// @param forceCall_       optional flag to force send call even if callData (data_) is empty\n    function upgradeToAndCall(\n        address avoWalletImpl_,\n        bytes calldata data_,\n        bool forceCall_\n    ) external payable virtual onlySelf {\n        upgradeTo(avoWalletImpl_);\n        if (data_.length > 0 || forceCall_) {\n            Address.functionDelegateCall(avoWalletImpl_, data_);\n        }\n    }\n\n    /// @dev internal method for modifier logic to reduce bytecode size of contract\n    function _requireSelfCalled() internal view {\n        if (msg.sender != address(this)) {\n            revert SelfUpgradeable__Unauthorized();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/interfaces/IAvoVersionsRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17;\n\ninterface IAvoVersionsRegistry {\n    /// @notice                   checks if an address is listed as allowed AvoWallet version and reverts if it is not\n    /// @param avoWalletVersion_  address of the Avo wallet logic contract to check\n    function requireValidAvoWalletVersion(address avoWalletVersion_) external view;\n\n    /// @notice                      checks if an address is listed as allowed AvoForwarder version\n    ///                              and reverts if it is not\n    /// @param avoForwarderVersion_  address of the AvoForwarder logic contract to check\n    function requireValidAvoForwarderVersion(address avoForwarderVersion_) external view;\n}\n"},"@openzeppelin/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"contracts/external/InstaFlashReceiverInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17;\n\ninterface InstaFlashReceiverInterface {\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata _data\n    ) external returns (bool);\n}\n"},"contracts/AvoWallet/AvoWallet.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17;\n\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { ERC721Holder } from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport { Initializable } from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport { IAvoWalletV2 } from \"../interfaces/IAvoWalletV2.sol\";\nimport { IAvoVersionsRegistry } from \"../interfaces/IAvoVersionsRegistry.sol\";\nimport { InstaFlashReceiverInterface } from \"../external/InstaFlashReceiverInterface.sol\";\nimport { SelfUpgradeable } from \"./SelfUpgradeable.sol\";\nimport { VariablesV1, AvoWallet__InvalidParams } from \"./VariablesV1.sol\";\n\n/// @title  AvoWallet\n/// @notice Smart wallet supporting meta transactions with EIP712 signature. Supports receiving NFTs.\n///         The `cast` method allows the owner of the wallet to execute multiple arbitrary actions\n///         Relayers are expected to call the forwarder contract `execute`, which deploys an AvoWallet if necessary first.\n///         Upgradeable by calling `upgradeTo` (or `upgradeToAndCall`) through a `cast` call, see SelfUpgradeable.sol\n/// @dev    This contract implements parts of EIP-2770 in a minimized form. E.g. domainSeparator is immutable etc.\n///         This contract does not implement ERC2771, because trusting an upgradeable \"forwarder\"\n///         bears a security risk for this non-custodial wallet\n///         Signature related logic is based off of OpenZeppelin EIP712Upgradeable.\n///         This contract validates all signatures for defaultChainId of 634 instead of current block.chainid from opcode (EIP-1344)\n///         For replay protection, the current block.chainid instead is used in the EIP-712 salt\n/// @dev    Note For any new implementation, the upgrade method MUST be in the implementation itself,\n///         otherwise it can not be upgraded anymore! also see SelfUpgradeable\n///\n/// @dev    IMPORTANT: do not move around order of first 3 inheritance to keep storage layout: VariablesV1, SelfUpgradeable, Initializable\ncontract AvoWallet is VariablesV1, SelfUpgradeable, Initializable, ERC721Holder, InstaFlashReceiverInterface {\n    using Address for address;\n    using Strings for uint256;\n\n    /***********************************|\n    |               ERRORS              |\n    |__________________________________*/\n\n    error AvoWallet__InvalidSignature();\n    error AvoWallet__Expired();\n    error AvoWallet__Unauthorized();\n    error AvoWallet__InsufficientGasSent();\n    error AvoWallet__OutOfGas();\n\n    /***********************************|\n    |             CONSTANTS             |\n    |__________________________________*/\n\n    // constants for EIP712 values\n    string public constant DOMAIN_SEPARATOR_NAME = \"Avocado-Safe\";\n    string public constant DOMAIN_SEPARATOR_VERSION = \"2.0.1\";\n\n    /// @dev overwrite chain id for EIP712 is always set to 634\n    uint256 public constant DEFAULT_CHAIN_ID = 634;\n\n    /// @dev _TYPE_HASH is copied from OpenZeppelin EIP712 but with added salt as last param (we use it for block.chainid)\n    bytes32 public constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\");\n\n    /// @dev EIP712 typehash for cast calls including struct for Action\n    bytes32 public constant CAST_TYPE_HASH =\n        keccak256(\n            \"Cast(Action[] actions,CastParams params,uint256 avoSafeNonce)Action(address target,bytes data,uint256 value,uint256 operation)CastParams(uint256 validUntil,uint256 gas,address source,uint256 id,bytes metadata)\"\n        );\n\n    /// @dev EIP712 typehash for Action struct\n    bytes32 public constant ACTION_TYPE_HASH =\n        keccak256(\"Action(address target,bytes data,uint256 value,uint256 operation)\");\n    /// @dev EIP712 typehash for CastParams struct\n    bytes32 public constant CAST_PARAMS_TYPE_HASH =\n        keccak256(\"CastParams(uint256 validUntil,uint256 gas,address source,uint256 id,bytes metadata)\");\n\n    // hashed EIP712 values\n    bytes32 internal constant DOMAIN_SEPARATOR_NAME_HASHED = keccak256(bytes(DOMAIN_SEPARATOR_NAME));\n    bytes32 internal constant DOMAIN_SEPARATOR_VERSION_HASHED = keccak256(bytes(DOMAIN_SEPARATOR_VERSION));\n    /// @dev amount of gas to keep in cast caller method as reserve for emitting CastFailed event\n    uint256 internal constant CAST_RESERVE_GAS = 12000;\n\n    /***********************************|\n    |               EVENTS              |\n    |__________________________________*/\n\n    /// @notice emitted when all actions for cast() are executed successfully\n    event CastExecuted(address indexed source, address indexed caller, bytes metadata);\n\n    /// @notice emitted if one of the actions in cast() fails. reason will be prefixed with the index of the action.\n    /// e.g. if action 1 fails, then the reason will be 1_reason\n    /// if an action in the flashloan callback fails, it will be prefixed with with two numbers:\n    /// e.g. if action 1 is the flashloan, and action 2 of flashloan actions fails, the reason will be 1_2_reason\n    event CastFailed(address indexed source, address indexed caller, string reason, bytes metadata);\n\n    /***********************************|\n    |    CONSTRUCTOR / INITIALIZERS     |\n    |__________________________________*/\n\n    /// @notice                        constructor sets avoVersionsRegistry and avoForwarder (immutable).\n    ///                                also see SelfUpgradeable constructor for details about setting avoVersionsRegistry\n    /// @param avoVersionsRegistry_    address of the avoVersionsRegistry contract\n    /// @param avoForwarder_           address of the avoForwarder (proxy) contract\n    ///                                to forward tx with valid signatures. must be valid version in AvoVersionsRegistry.\n    constructor(IAvoVersionsRegistry avoVersionsRegistry_, address avoForwarder_)\n        VariablesV1(avoVersionsRegistry_, avoForwarder_)\n    {\n        // Ensure logic contract initializer is not abused by disabling initializing\n        // see https://forum.openzeppelin.com/t/security-advisory-initialize-uups-implementation-contracts/15301\n        // and https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializing_the_implementation_contract\n        _disableInitializers();\n    }\n\n    /// @inheritdoc IAvoWalletV2\n    function initialize(address owner_) public initializer {\n        // owner must be EOA\n        if (owner_.isContract() || owner_ == address(0)) {\n            revert AvoWallet__InvalidParams();\n        }\n\n        owner = owner_;\n    }\n\n    /// @inheritdoc IAvoWalletV2\n    function initializeWithVersion(address owner_, address avoWalletVersion_) public initializer {\n        // owner must be EOA\n        if (owner_.isContract() || owner_ == address(0)) {\n            revert AvoWallet__InvalidParams();\n        }\n\n        owner = owner_;\n\n        _avoWalletImpl = avoWalletVersion_;\n    }\n\n    /***********************************|\n    |            PUBLIC API             |\n    |__________________________________*/\n\n    receive() external payable {}\n\n    /// @inheritdoc IAvoWalletV2\n    function domainSeparatorV4() public view returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /// @inheritdoc IAvoWalletV2\n    function verify(\n        Action[] calldata actions_,\n        CastParams calldata params_,\n        bytes calldata signature_\n    ) external view returns (bool) {\n        // do not use modifier to avoid stack too deep\n        _validateParams(actions_, params_.validUntil);\n\n        bytes32 digest_ = _getSigDigest(actions_, params_);\n\n        if (!_verifySig(digest_, signature_)) {\n            revert AvoWallet__InvalidSignature();\n        }\n        return true;\n    }\n\n    /// @inheritdoc IAvoWalletV2\n    function cast(\n        Action[] calldata actions_,\n        CastParams calldata params_,\n        bytes calldata signature_\n    ) external payable returns (bool success_, string memory revertReason_) {\n        {\n            if (msg.sender == avoForwarder) {\n                // if sender is forwarder, first thing we must do is compare actual sent gas to user instructed gas\n                // adding 500 to gasleft for approx. already used gas\n                if ((gasleft() + 500) < params_.gas) {\n                    // relayer has not sent enough gas to cover gas limit as user instructed\n                    revert AvoWallet__InsufficientGasSent();\n                }\n\n                _validateParams(actions_, params_.validUntil);\n\n                // if cast is called through forwarder signature must be valid\n                bytes32 digest_ = _getSigDigest(actions_, params_);\n\n                if (!_verifySig(digest_, signature_)) {\n                    revert AvoWallet__InvalidSignature();\n                }\n            } else if (msg.sender == owner) {\n                _validateParams(actions_, params_.validUntil);\n            } else {\n                // sender must be either owner or allowed forwarder\n                revert AvoWallet__Unauthorized();\n            }\n        }\n\n        // set status verified to 1 for call to _callTargets to avoid having to check signature etc. again\n        _status = 1;\n\n        // nonce increases *always* if signature is valid\n        avoSafeNonce++;\n\n        // execute _callTargets via a low-level call to create a separate execution frame\n        // this is used to revert all the actions if one action fails without reverting the whole transaction\n        bytes memory calldata_ = abi.encodeCall(AvoWallet._callTargets, (actions_, params_.id));\n        bytes memory result_;\n        // using inline assembly for delegatecall to define custom gas amount that should stay here in caller\n        assembly {\n            success_ := delegatecall(\n                // reserve at least ~12k gas to make sure we can emit CastFailed event even for out of gas cases\n                sub(gas(), CAST_RESERVE_GAS),\n                sload(_avoWalletImpl.slot),\n                add(calldata_, 0x20),\n                mload(calldata_),\n                0,\n                0\n            )\n            let size := returndatasize()\n\n            result_ := mload(0x40)\n            mstore(0x40, add(result_, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n            mstore(result_, size)\n            returndatacopy(add(result_, 0x20), 0, size)\n        }\n\n        // reset _status flag to 0 in all cases\n        _status = 0;\n\n        if (!success_) {\n            if (result_.length == 0) {\n                // @dev this case might be caused by edge-case out of gas errors that we were unable to catch\n                // but could potentially also have other reasons\n                revertReason_ = \"AVO__REASON_NOT_DEFINED\";\n            } else if (bytes4(result_) == bytes4(0x8707015b)) {\n                // 0x8707015b = selector for custom error AvoWallet__OutOfGas\n                revertReason_ = \"AVO__OUT_OF_GAS\";\n            } else {\n                assembly {\n                    result_ := add(result_, 0x04)\n                }\n                revertReason_ = abi.decode(result_, (string));\n            }\n\n            emit CastFailed(params_.source, msg.sender, revertReason_, params_.metadata);\n        } else {\n            emit CastExecuted(params_.source, msg.sender, params_.metadata);\n        }\n    }\n\n    /***********************************|\n    |         FLASHLOAN CALLBACK        |\n    |__________________________________*/\n\n    /// @dev                 callback used by Instadapp Flashloan Aggregator, executes operations while owning\n    ///                      the flashloaned amounts. data_ must contain actions, one of them must pay back flashloan\n    // /// @param assets_       assets_ received a flashloan for\n    // /// @param amounts_      flashloaned amounts for each asset\n    // /// @param premiums_     fees to pay for the flashloan\n    /// @param initiator_    flashloan initiator -> must be this contract\n    /// @param data_         data bytes containing the abi.encoded actions that are executed similarly to .callTargets\n    function executeOperation(\n        address[] calldata, /*  assets_ */\n        uint256[] calldata, /*  amounts_ */\n        uint256[] calldata, /*  premiums_ */\n        address initiator_,\n        bytes calldata data_\n    ) external returns (bool) {\n        // @dev using the valid case inverted via one ! instead of invalid case with 3 ! to optimize gas usage\n        if (!((_status == 20 || _status == 21) && initiator_ == address(this))) {\n            revert AvoWallet__Unauthorized();\n        }\n\n        // _status is set to original id_ pre-flashloan trigger in _callTargets\n        uint256 id_ = _status;\n\n        // reset status immediately\n        _status = 0;\n\n        // decode actions to be executed after getting the flashloan\n        Action[] memory actions_ = abi.decode(data_, (Action[]));\n\n        StorageSnapshot memory storageSnapshot_;\n        if (id_ == 21) {\n            // store values before execution to make sure storage vars are not modified by a delegatecall\n            storageSnapshot_.owner = owner;\n            storageSnapshot_.avoWalletImpl = _avoWalletImpl;\n            storageSnapshot_.avoSafeNonce = avoSafeNonce;\n        }\n\n        uint256 actionsLength_ = actions_.length;\n        for (uint256 i; i < actionsLength_; ) {\n            Action memory action_ = actions_[i];\n\n            // execute action\n            bool success_;\n            bytes memory result_;\n            if (action_.operation == 0) {\n                // no enforcing of id_ needed here because code would revert earlier if id is not 20 or 21\n                (success_, result_) = action_.target.call{ value: action_.value }(action_.data);\n            } else if (action_.operation == 1 && id_ == 21) {\n                // delegatecall (operation =1 & id = mixed)\n                (success_, result_) = action_.target.delegatecall(action_.data);\n            } else {\n                // either operation does not exist or the id was not set according to what the action wants to execute\n                if (action_.operation > 2) {\n                    revert(string.concat(i.toString(), \"_AVO__OPERATION_NOT_EXIST\"));\n                } else if (action_.operation == 2) {\n                    revert(string.concat(i.toString(), \"_AVO__NO_FLASHLOAN_IN_FLASHLOAN\"));\n                } else {\n                    // enforce that id must be set according to operation\n                    revert(string.concat(i.toString(), \"_AVO__ID_ACTION_MISMATCH\"));\n                }\n            }\n\n            if (!success_) {\n                revert(string.concat(i.toString(), _getRevertReasonFromReturnedData(result_)));\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // if actions include delegatecall, make sure storage was not modified\n        if (\n            (storageSnapshot_.avoSafeNonce > 0) &&\n            !(storageSnapshot_.avoWalletImpl == _avoWalletImpl &&\n                storageSnapshot_.owner == owner &&\n                storageSnapshot_.avoSafeNonce == avoSafeNonce &&\n                _status == 0)\n        ) {\n            revert(\"AVO__MODIFIED_STORAGE\");\n        }\n\n        return true;\n    }\n\n    /***********************************|\n    |         INDIRECT INTERNAL         |\n    |__________________________________*/\n\n    /// @dev                  executes a low-level .call or .delegateCall on all actions, can only be called by this contract\n    ///                       this is called like an external call to create a separate execution frame.\n    ///                       this way we can revert all the actions if one fails without reverting the whole transaction\n    /// @param actions_       the actions to execute (target, data, value)\n    /// @param id_            id for actions, e.g. 0 = CALL, 1 = MIXED (call and delegatecall), 20 = FLASHLOAN_CALL, 21 = FLASHLOAN_MIXED\n    function _callTargets(Action[] calldata actions_, uint256 id_) external payable {\n        // status must be verified or 0x000000000000000000000000000000000000dEaD used for backend gas estimations\n        if (!(_status == 1 || tx.origin == 0x000000000000000000000000000000000000dEaD)) {\n            revert AvoWallet__Unauthorized();\n        }\n\n        bool isCallId_ = id_ < 2 || id_ == 20 || id_ == 21;\n        bool isDelegateCallId_ = id_ == 1 || id_ == 21;\n\n        // reset status immediately\n        _status = 0;\n\n        StorageSnapshot memory storageSnapshot_;\n        if (isDelegateCallId_) {\n            // store values before execution to make sure storage vars are not modified by a delegatecall\n            storageSnapshot_.owner = owner;\n            storageSnapshot_.avoWalletImpl = _avoWalletImpl;\n            storageSnapshot_.avoSafeNonce = avoSafeNonce;\n        }\n\n        uint256 actionsLength_ = actions_.length;\n        for (uint256 i; i < actionsLength_; ) {\n            Action memory action_ = actions_[i];\n\n            // execute action\n            bool success_;\n            bytes memory result_;\n            uint256 actionMinGasLeft_;\n            if (action_.operation == 0 && isCallId_) {\n                // call (operation =0 & id = call or mixed)\n                // @dev try catch does not work for .call\n                unchecked {\n                    // store amount of gas that stays with caller, according to EIP150 to detect out of gas errors\n                    actionMinGasLeft_ = gasleft() / 64;\n                }\n                (success_, result_) = action_.target.call{ value: action_.value }(action_.data);\n            } else if (action_.operation == 1 && isDelegateCallId_) {\n                // delegatecall (operation =1 & id = delegateCall(1) or mixed(2))\n                unchecked {\n                    // store amount of gas that stays with caller, according to EIP150 to detect out of gas errors\n                    actionMinGasLeft_ = gasleft() / 64;\n                }\n                (success_, result_) = action_.target.delegatecall(action_.data);\n            } else if (action_.operation == 2 && (id_ == 20 || id_ == 21)) {\n                // flashloan is always execute via .call, flashloan aggregator uses msg.sender, so .delegatecall\n                // wouldn't send funds to this contract but rather to the original sender\n                _status = uint8(id_);\n                \n                unchecked {\n                    // store amount of gas that stays with caller, according to EIP150 to detect out of gas errors\n                    actionMinGasLeft_ = gasleft() / 64;\n                }\n                (success_, result_) = action_.target.call{ value: action_.value }(action_.data);\n                \n                // reset _status in all cases\n                _status = 0;\n            } else {\n                // either operation does not exist or the id was not set according to what the action wants to execute\n                if (action_.operation > 2) {\n                    revert(string.concat(i.toString(), \"_AVO__OPERATION_NOT_EXIST\"));\n                } else {\n                    // enforce that id must be set according to operation\n                    revert(string.concat(i.toString(), \"_AVO__ID_ACTION_MISMATCH\"));\n                }\n            }\n\n            if (!success_) {\n                if (gasleft() < actionMinGasLeft_) {\n                    // action ran out of gas, trigger revert with specific custom error\n                    revert AvoWallet__OutOfGas();\n                }\n\n                revert(string.concat(i.toString(), _getRevertReasonFromReturnedData(result_)));\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // if actions include delegatecall, make sure storage was not modified\n        if (\n            (storageSnapshot_.avoSafeNonce > 0) &&\n            !(storageSnapshot_.avoWalletImpl == _avoWalletImpl &&\n                storageSnapshot_.owner == owner &&\n                storageSnapshot_.avoSafeNonce == avoSafeNonce &&\n                _status == 0)\n        ) {\n            revert(\"AVO__MODIFIED_STORAGE\");\n        }\n    }\n\n    /***********************************|\n    |              INTERNAL             |\n    |__________________________________*/\n\n    /// @dev                Validates input params to cast and verify calls. Reverts on invalid values.\n    /// @param actions_     the actions to execute (target, data, value)\n    /// @param validUntil_  As EIP-2770: the highest block number the request can be forwarded in,\n    ///                     or 0 if request validity is not time-limited\n    function _validateParams(Action[] calldata actions_, uint256 validUntil_) internal view {\n        if (actions_.length == 0) {\n            revert AvoWallet__InvalidParams();\n        }\n\n        // make sure request is still valid\n        if (validUntil_ > 0 && validUntil_ < block.timestamp) {\n            revert AvoWallet__Expired();\n        }\n    }\n\n    /// @dev                Verifies a EIP712 signature\n    /// @param digest_      the EIP712 digest for the signature\n    /// @param signature_   the EIP712 signature, see verifySig method\n    /// @return             true if the signature is valid, false otherwise\n    function _verifySig(bytes32 digest_, bytes calldata signature_) internal view returns (bool) {\n        address recoveredSigner_ = ECDSA.recover(digest_, signature_);\n\n        return recoveredSigner_ == owner;\n    }\n\n    /// @dev                  gets the digest to verify an EIP712 signature\n    /// @param actions_       the actions to execute (target, data, value)\n    /// @param params_        Cast params: validUntil, gas, source, id and metadata\n    /// @return               bytes32 digest to verify signature\n    function _getSigDigest(Action[] calldata actions_, CastParams calldata params_) internal view returns (bytes32) {\n        return\n            ECDSA.toTypedDataHash(\n                // domain separator\n                _domainSeparatorV4(),\n                // structHash\n                keccak256(\n                    abi.encode(\n                        CAST_TYPE_HASH,\n                        // actions\n                        getActionsHash_(actions_),\n                        // CastParams\n                        keccak256(\n                            abi.encode(\n                                CAST_PARAMS_TYPE_HASH,\n                                params_.validUntil,\n                                params_.gas,\n                                params_.source,\n                                params_.id,\n                                keccak256(params_.metadata)\n                            )\n                        ),\n                        avoSafeNonce\n                    )\n                )\n            );\n    }\n\n    /// @dev                gets the keccak256 hash for actions array struct for EIP712 signature digest\n    /// @param actions_     the actions to execute (target, data, value)\n    /// @return             bytes32 hash for actions array struct to verify signature\n    function getActionsHash_(Action[] calldata actions_) internal pure returns (bytes32) {\n        // get keccak256s for actions\n        uint256 actionsLength_ = actions_.length;\n        bytes32[] memory keccakActions_ = new bytes32[](actionsLength_);\n        for (uint256 i; i < actionsLength_; ) {\n            keccakActions_[i] = keccak256(\n                abi.encode(\n                    ACTION_TYPE_HASH,\n                    actions_[i].target,\n                    keccak256(actions_[i].data),\n                    actions_[i].value,\n                    actions_[i].operation\n                )\n            );\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return keccak256(abi.encodePacked(keccakActions_));\n    }\n\n    /// @notice Returns the domain separator for the chain with id 634\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    TYPE_HASH,\n                    DOMAIN_SEPARATOR_NAME_HASHED,\n                    DOMAIN_SEPARATOR_VERSION_HASHED,\n                    DEFAULT_CHAIN_ID,\n                    address(this),\n                    keccak256(abi.encodePacked(block.chainid))\n                )\n            );\n    }\n\n    /// @dev Get the revert reason from the returnedData (supports Panic, Error & Custom Errors)\n    /// Based on https://github.com/superfluid-finance/protocol-monorepo/blob/dev/packages/ethereum-contracts/contracts/libs/CallUtils.sol\n    /// This is needed in order to provide some human-readable revert message from a call\n    /// @param returnedData_ revert data of the call\n    /// @return reason_      revert reason\n    function _getRevertReasonFromReturnedData(bytes memory returnedData_)\n        internal\n        pure\n        returns (string memory reason_)\n    {\n        if (returnedData_.length < 4) {\n            // case 1: catch all\n            return \"_REASON_NOT_DEFINED\";\n        } else {\n            bytes4 errorSelector;\n            assembly {\n                errorSelector := mload(add(returnedData_, 0x20))\n            }\n            if (\n                errorSelector == bytes4(0x4e487b71) /* `seth sig \"Panic(uint256)\"` */\n            ) {\n                // case 2: Panic(uint256) (Defined since 0.8.0)\n                // solhint-disable-next-line max-line-length\n                // ref: https://docs.soliditylang.org/en/v0.8.0/control-structures.html#panic-via-assert-and-error-via-require)\n                reason_ = \"_TARGET_PANICKED: 0x__\";\n                uint256 errorCode;\n                assembly {\n                    errorCode := mload(add(returnedData_, 0x24))\n                    let reasonWord := mload(add(reason_, 0x20))\n                    // [0..9] is converted to ['0'..'9']\n                    // [0xa..0xf] is not correctly converted to ['a'..'f']\n                    // but since panic code doesn't have those cases, we will ignore them for now!\n                    let e1 := add(and(errorCode, 0xf), 0x30)\n                    let e2 := shl(8, add(shr(4, and(errorCode, 0xf0)), 0x30))\n                    reasonWord := or(\n                        and(reasonWord, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000),\n                        or(e2, e1)\n                    )\n                    mstore(add(reason_, 0x20), reasonWord)\n                }\n            } else {\n                if (returnedData_.length > 68) {\n                    // case 3: Error(string) (Defined at least since 0.7.0)\n                    assembly {\n                        returnedData_ := add(returnedData_, 0x04)\n                    }\n                    reason_ = string.concat(\"_\", abi.decode(returnedData_, (string)));\n                } else {\n                    // case 4: Custom errors (Defined since 0.8.0)\n                    reason_ = string.concat(\"_CUSTOM_ERROR:\", fromCode(errorSelector));\n                }\n            }\n        }\n    }\n\n    /// @dev used to convert bytes4 selector to string\n    /// based on https://ethereum.stackexchange.com/a/111876\n    function fromCode(bytes4 code) internal pure returns (string memory) {\n        bytes memory result = new bytes(10);\n        result[0] = bytes1(\"0\");\n        result[1] = bytes1(\"x\");\n        for (uint256 i = 0; i < 4; ++i) {\n            result[2 * i + 2] = toHexDigit(uint8(code[i]) / 16);\n            result[2 * i + 3] = toHexDigit(uint8(code[i]) % 16);\n        }\n        return string(result);\n    }\n\n    /// @dev used to convert bytes4 selector to string\n    function toHexDigit(uint8 d) internal pure returns (bytes1) {\n        if (0 <= d && d <= 9) {\n            return bytes1(uint8(bytes1(\"0\")) + d);\n        } else if (10 <= uint8(d) && uint8(d) <= 15) {\n            return bytes1(uint8(bytes1(\"a\")) + d - 10);\n        }\n        revert();\n    }\n}\n"},"contracts/interfaces/IAvoWalletV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17;\n\ninterface IAvoWalletV2 {\n    /// @notice an executable action via low-level call, including operation (call or delegateCall), target, data and value\n    struct Action {\n        address target; // the targets to execute the actions on\n        bytes data; // the data to be passed to the call for each target\n        uint256 value; // the msg.value to be passed to the call for each target. set to 0 if none\n        uint256 operation; // 0 -> .call; 1 -> .delegateCall, 2 -> flashloan (via .call), id must be 0 or 2\n    }\n\n    struct CastParams {\n        /// @param validUntil     As EIP-2770: the highest block number the request can be forwarded in, or 0 if request validity is not time-limited\n        ///                       Protects against relayers executing a certain transaction at a later moment not intended by the user, where it might\n        ///                       have a completely different effect. (Given that the transaction is not executed right away for some reason)\n        uint256 validUntil;\n        /// @param gas            As EIP-2770: an amount of gas limit to set for the execution\n        ///                       Protects gainst potential gas griefing attacks / the relayer getting a reward without properly executing the tx completely\n        ///                       See https://ronan.eth.limo/blog/ethereum-gas-dangers/\n        uint256 gas;\n        /// @param source         Source like e.g. referral for this tx\n        address source;\n        /// @param id             id for actions, e.g. 0 = CALL, 1 = MIXED (call and delegatecall), 20 = FLASHLOAN_CALL, 21 = FLASHLOAN_MIXED\n        uint256 id;\n        /// @param metadata       Optional metadata for future flexibility\n        bytes metadata;\n    }\n\n    /// @notice struct containing variables in storage for a snapshot\n    struct StorageSnapshot {\n        address avoWalletImpl;\n        uint88 avoSafeNonce;\n        address owner;\n    }\n\n    /// @notice             AvoSafe Owner\n    function owner() external view returns (address);\n\n    /// @notice             Domain separator name for signatures\n    function DOMAIN_SEPARATOR_NAME() external view returns (string memory);\n\n    /// @notice             Domain separator version for signatures\n    function DOMAIN_SEPARATOR_VERSION() external view returns (string memory);\n\n    /// @notice             incrementing nonce for each valid tx executed (to ensure unique)\n    function avoSafeNonce() external view returns (uint88);\n\n    /// @notice             initializer called by AvoFactory after deployment\n    /// @param owner_       the owner (immutable) of this smart wallet\n    function initialize(address owner_) external;\n\n    /// @notice                     initialize contract and set new AvoWallet version\n    /// @param owner_               the owner (immutable) of this smart wallet\n    /// @param avoWalletVersion_    version of AvoWallet logic contract to deploy\n    function initializeWithVersion(address owner_, address avoWalletVersion_) external;\n\n    /// @notice             returns the domainSeparator for EIP712 signature\n    /// @return             the bytes32 domainSeparator for EIP712 signature\n    function domainSeparatorV4() external view returns (bytes32);\n\n    /// @notice               Verify the transaction is valid and can be executed.\n    ///                       Does not revert and returns successfully if the input is valid.\n    ///                       Reverts if any validation has failed. For instance, if params or either signature or avoSafeNonce are incorrect.\n    /// @param actions_       the actions to execute (target, data, value)\n    /// @param params_        Cast params: validUntil, gas, source, id and metadata\n    /// @param signature_     the EIP712 signature, see verifySig method\n    /// @return               returns true if everything is valid, otherwise reverts\n    function verify(\n        Action[] calldata actions_,\n        CastParams calldata params_,\n        bytes calldata signature_\n    ) external view returns (bool);\n\n    /// @notice               executes arbitrary actions according to datas on targets\n    ///                       if one action fails, the transaction doesn't revert. Instead the CastFailed event is emitted\n    ///                       and all previous actions are reverted. On success, emits CastExecuted event.\n    /// @dev                  validates EIP712 signature then executes a .call or .delegateCall for every action.\n    /// @param actions_       the actions to execute (target, data, value)\n    /// @param params_        Cast params: validUntil, gas, source, id and metadata\n    /// @param signature_     the EIP712 signature, see verifySig method\n    /// @return success       true if all actions were executed succesfully, false otherwise.\n    /// @return revertReason  revert reason if one of the actions fail\n    function cast(\n        Action[] calldata actions_,\n        CastParams calldata params_,\n        bytes calldata signature_\n    ) external payable returns (bool success, string memory revertReason);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"}},"settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"inputs\":[{\"internalType\":\"contract IAvoVersionsRegistry\",\"name\":\"avoVersionsRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avoForwarder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AvoWallet__Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AvoWallet__InsufficientGasSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AvoWallet__InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AvoWallet__InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AvoWallet__OutOfGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AvoWallet__Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SelfUpgradeable__Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"CastExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"CastFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"avoWalletImpl\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACTION_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAST_PARAMS_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAST_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operation\",\"type\":\"uint256\"}],\"internalType\":\"struct IAvoWalletV2.Action[]\",\"name\":\"actions_\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"_callTargets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avoForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avoSafeNonce\",\"outputs\":[{\"internalType\":\"uint88\",\"name\":\"\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avoVersionsRegistry\",\"outputs\":[{\"internalType\":\"contract IAvoVersionsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operation\",\"type\":\"uint256\"}],\"internalType\":\"struct IAvoWalletV2.Action[]\",\"name\":\"actions_\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IAvoWalletV2.CastParams\",\"name\":\"params_\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"cast\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"revertReason_\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparatorV4\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avoWalletVersion_\",\"type\":\"address\"}],\"name\":\"initializeWithVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"avoWalletImpl_\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"avoWalletImpl_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"forceCall_\",\"type\":\"bool\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operation\",\"type\":\"uint256\"}],\"internalType\":\"struct IAvoWalletV2.Action[]\",\"name\":\"actions_\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IAvoWalletV2.CastParams\",\"name\":\"params_\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AvoWallet","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":0,"Runs":200,"ConstructorArguments":"0x000000000000000000000000fbf28161ae33f492250aa12117e7a3f4593b7aa1000000000000000000000000375f6b0cd12b34dc28e34c26853a37012c24dde5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}