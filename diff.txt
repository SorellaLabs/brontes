diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 68c09a02a..19668b02a 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -14,14 +14,16 @@ jobs:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v4
-      - uses: dtolnay/rust-toolchain@nightly
+
+      - uses: dtolnay/rust-toolchain@stable
         with:
+          toolchain: 1.85.0
           components: clippy,rustfmt
-          toolchain: nightly
+
       - uses: Swatinem/rust-cache@v2
         with:
           cache-on-failure: true
-          key: "clippy-nightly"
+          key: "clippy-stable"
 
       - run: git config --global url."https://x-access-token:${{ secrets.CI }}@github.com/".insteadOf "https://github.com/"
         shell: bash
@@ -34,39 +36,60 @@ jobs:
           RUSTFLAGS: -D warnings
 
   build:
-    name: "build and fmt"
+    name: "build"
     if: github.event.pull_request.draft == false
     runs-on: ubuntu-latest
     timeout-minutes: 30
     steps:
       - uses: actions/checkout@v4
-      - uses: dtolnay/rust-toolchain@nightly
+
+      - uses: dtolnay/rust-toolchain@stable
         with:
-          components: clippy,rustfmt
-          toolchain: nightly
+          toolchain: 1.85.0
+          components: clippy
+
       - uses: Swatinem/rust-cache@v2
         with:
-          key: "buildfmt-nightly"
+          key: "buildfmt-stable"
           cache-on-failure: true
 
-      # allow for downloads
       - run: git config --global url."https://x-access-token:${{ secrets.CI }}@github.com/".insteadOf "https://github.com/"
         shell: bash
       - run: git config --global url."https://${{ secrets.CI }}@github.com/".insteadOf "git@github.com:"
         shell: bash
 
-      - name: "build nightly"
+      - name: "build stable"
         run: cargo build --workspace --all-features
         env:
           RUSTFLAGS: -D warnings
 
-      - name: "cargo fmt"
-        run: cargo fmt --all --check
+  fmt:
+    name: fmt
+    runs-on: ubuntu-latest
+    steps:
+      - name: Check-Out
+        uses: actions/checkout@v4
+
+      - run: git config --global url."https://x-access-token:${{ secrets.CI }}@github.com/".insteadOf "https://github.com/"
+        shell: bash
+      - run: git config --global url."https://${{ secrets.CI }}@github.com/".insteadOf "git@github.com:"
+        shell: bash
+
+      - name: Install Nightly
+        run: |
+          rustup toolchain install nightly
+          rustup component add --toolchain nightly-x86_64-unknown-linux-gnu rustfmt
+
+      - name: cargo build
+        run: cargo build --workspace --all-features
+
+      - name: cargo +nightly fmt
+        run: cargo +nightly fmt --all -- --check
 
   test:
     runs-on: ubuntu-latest
     if: always() && !cancelled() && !contains(needs.*.result, 'failure') && github.event.pull_request.draft == false
-    needs: [clippy, build]
+    needs: [clippy, build, fmt]
     strategy:
       fail-fast: false
       matrix:
@@ -75,20 +98,20 @@ jobs:
       - name: Get branch names.
         id: branch-names
         uses: tj-actions/branch-names@v8
+
       - name: Init ssh config
         run: |
-          mkdir ~/.ssh/ 
-          echo "${{ secrets.BASTION_SSH }}" > ~/.ssh/bastion 
-          chmod 600 ~/.ssh/bastion 
-          echo "${{ secrets.BRONTES_SSH }}" > ~/.ssh/brontes_server 
-          chmod 600 ~/.ssh/brontes_server
+          mkdir ~/.ssh/
+          ssh-keyscan -H ${{ secrets.BRONTES_IP }} >> ~/.ssh/known_hosts
+          echo "${{ secrets.BRONTES_SSH }}" > ~/.ssh/brontes-ci
+          chmod 600 ~/.ssh/brontes-ci
           echo "${{ secrets.SSH_CONFIG }}" > ~/.ssh/config
 
       - name: cargo test
         id: run_tests
         continue-on-error: true
         run: |
-          ssh brontes_server -tt "bash --login -c '
+          ssh brontes-reth -tt "bash --login -c '
             source ~/.bashrc
             cd \$HOME
             mkdir -p ${{ steps.branch-names.outputs.current_branch }}-test-${{ matrix.features }}
@@ -101,7 +124,7 @@ jobs:
       - name: Cleanup
         if: always()
         run: |
-          ssh brontes_server -tt "bash --login -c '
+          ssh brontes-reth -tt "bash --login -c '
             set -x
             rm -rf \$HOME/${{ steps.branch-names.outputs.current_branch }}-test-${{ matrix.features }}
             rm -rf /home/brontes-ci/data/${{ steps.branch-names.outputs.current_branch }}-test-${{ matrix.features }}
@@ -114,7 +137,7 @@ jobs:
   it-test:
     runs-on: ubuntu-latest
     if: always() && !cancelled() && !contains(needs.*.result, 'failure') && github.event.pull_request.draft == false
-    needs: [clippy, build]
+    needs: [clippy, build, fmt]
     strategy:
       fail-fast: false
       matrix:
@@ -123,20 +146,20 @@ jobs:
       - name: Get branch names.
         id: branch-names
         uses: tj-actions/branch-names@v8
+
       - name: Init ssh config
         run: |
-          mkdir ~/.ssh/ 
-          echo "${{ secrets.BASTION_SSH }}" > ~/.ssh/bastion 
-          chmod 600 ~/.ssh/bastion 
-          echo "${{ secrets.BRONTES_SSH }}" > ~/.ssh/brontes_server 
-          chmod 600 ~/.ssh/brontes_server
+          mkdir ~/.ssh/
+          ssh-keyscan -H ${{ secrets.BRONTES_IP }} >> ~/.ssh/known_hosts
+          echo "${{ secrets.BRONTES_SSH }}" > ~/.ssh/brontes-ci
+          chmod 600 ~/.ssh/brontes-ci
           echo "${{ secrets.SSH_CONFIG }}" > ~/.ssh/config
 
       - name: cargo it test
         id: run_it_tests
         continue-on-error: true
         run: |
-          ssh brontes_server -tt "bash --login -c '
+          ssh brontes-reth -tt "bash --login -c '
             source ~/.bashrc
             cd \$HOME
             mkdir -p ${{ steps.branch-names.outputs.current_branch }}-it-${{ matrix.features }}
@@ -150,7 +173,7 @@ jobs:
       - name: Cleanup
         if: always()
         run: |
-          ssh brontes_server -tt "bash --login -c '
+          ssh brontes-reth -tt "bash --login -c '
             set -x
             rm -rf \$HOME/${{ steps.branch-names.outputs.current_branch }}-it-${{ matrix.features }}
             rm -rf /home/brontes-ci/data/${{ steps.branch-names.outputs.current_branch }}-it-${{ matrix.features }}
@@ -168,16 +191,15 @@ jobs:
     steps:
       - name: Init ssh config
         run: |
-          mkdir ~/.ssh/ 
-          echo "${{ secrets.BASTION_SSH }}" > ~/.ssh/bastion 
-          chmod 600 ~/.ssh/bastion 
-          echo "${{ secrets.BRONTES_SSH }}" > ~/.ssh/brontes_server 
-          chmod 600 ~/.ssh/brontes_server
+          mkdir ~/.ssh/
+          ssh-keyscan -H ${{ secrets.BRONTES_IP }} >> ~/.ssh/known_hosts
+          echo "${{ secrets.BRONTES_SSH }}" > ~/.ssh/brontes-ci
+          chmod 600 ~/.ssh/brontes-ci
           echo "${{ secrets.SSH_CONFIG }}" > ~/.ssh/config
 
       - name: Run cleanup
         run: |
-          ssh brontes_server -tt "bash --login -c '
+          ssh brontes-reth -tt "bash --login -c '
             set -x
             rm -rf \$HOME/*/
             echo \"Cleanup completed\"
diff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml
index 11f661dac..11be5cf02 100644
--- a/.github/workflows/docs.yml
+++ b/.github/workflows/docs.yml
@@ -63,7 +63,7 @@ jobs:
           mdbook build
 
       - name: Build docs
-        run: cargo doc --no-deps --all-features
+        run: cargo +nightly doc --no-deps --all-features
         env:
           RUSTDOCFLAGS:
             --cfg docsrs --show-type-layout --generate-link-to-definition --enable-index-page
@@ -89,7 +89,7 @@ jobs:
             .
 
       - name: Upload artifact
-        uses: actions/upload-artifact@v3
+        uses: actions/upload-artifact@v4
         with:
           name: github-pages
           path: ${{ runner.temp }}/artifact.tar
diff --git a/Cargo.lock b/Cargo.lock
index 0a6aa60a9..ed55c3245 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,12 +1,12 @@
 # This file is automatically @generated by Cargo.
 # It is not intended for manual editing.
-version = 3
+version = 4
 
 [[package]]
 name = "addr2line"
-version = "0.21.0"
+version = "0.22.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb"
+checksum = "6e4503c46a5c0c7844e948c9a4d6acd9f50cccb4de1c48eb9e291ea17470c678"
 dependencies = [
  "gimli",
 ]
@@ -78,15 +78,6 @@ dependencies = [
  "zerocopy",
 ]
 
-[[package]]
-name = "aho-corasick"
-version = "0.7.20"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cc936419f96fa211c1b9166887b38e5e40b19958e5b895be7c1f93adec7071ac"
-dependencies = [
- "memchr",
-]
-
 [[package]]
 name = "aho-corasick"
 version = "1.1.3"
@@ -119,37 +110,39 @@ checksum = "5c6cb57a04249c6480766f7f7cef5467412af1490f8d1e243141daddada3264f"
 
 [[package]]
 name = "alloy-chains"
-version = "0.1.27"
+version = "0.1.19"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5b515e82c8468ddb6ff8db21c78a5997442f113fd8471fd5b2261b2602dd0c67"
+checksum = "24ceb48af11349cd7fbd12aa739800be3c4b3965f640b7ae26666907f3bdf091"
 dependencies = [
  "alloy-rlp",
  "arbitrary",
  "num_enum",
  "proptest",
  "serde",
- "strum 0.26.3",
+ "strum 0.26.2",
 ]
 
 [[package]]
 name = "alloy-consensus"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-eips",
  "alloy-primitives",
  "alloy-rlp",
  "alloy-serde",
+ "arbitrary",
  "c-kzg",
+ "proptest",
+ "proptest-derive",
  "serde",
- "sha2 0.10.8",
 ]
 
 [[package]]
 name = "alloy-dyn-abi"
-version = "0.7.7"
+version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "413902aa18a97569e60f679c23f46a18db1656d87ab4d4e49d0e1e52042f66df"
+checksum = "cb6e6436a9530f25010d13653e206fab4c9feddacf21a54de8d7311b275bc56b"
 dependencies = [
  "alloy-json-abi",
  "alloy-primitives",
@@ -160,40 +153,43 @@ dependencies = [
  "itoa",
  "serde",
  "serde_json",
- "winnow 0.6.18",
+ "winnow 0.6.13",
 ]
 
 [[package]]
 name = "alloy-eips"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-primitives",
  "alloy-rlp",
  "alloy-serde",
  "arbitrary",
  "c-kzg",
+ "derive_more",
  "once_cell",
  "proptest",
  "proptest-derive",
  "serde",
+ "sha2 0.10.8",
 ]
 
 [[package]]
 name = "alloy-genesis"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-primitives",
  "alloy-serde",
  "serde",
+ "serde_json",
 ]
 
 [[package]]
 name = "alloy-json-abi"
-version = "0.7.7"
+version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bc05b04ac331a9f07e3a4036ef7926e49a8bf84a99a1ccfc7e2ab55a5fcbb372"
+checksum = "aaeaccd50238126e3a0ff9387c7c568837726ad4f4e399b528ca88104d6c25ef"
 dependencies = [
  "alloy-primitives",
  "alloy-sol-type-parser",
@@ -204,36 +200,38 @@ dependencies = [
 [[package]]
 name = "alloy-json-rpc"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-primitives",
  "serde",
  "serde_json",
- "thiserror",
+ "thiserror 1.0.61",
  "tracing",
 ]
 
 [[package]]
 name = "alloy-network"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-consensus",
  "alloy-eips",
  "alloy-json-rpc",
  "alloy-primitives",
- "alloy-rpc-types",
+ "alloy-rpc-types-eth",
  "alloy-signer",
+ "alloy-sol-types",
  "async-trait",
+ "auto_impl",
  "futures-utils-wasm",
- "thiserror",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
 name = "alloy-primitives"
-version = "0.7.7"
+version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ccb3ead547f4532bc8af961649942f0b9c16ee9226e26caa3f38420651cc0bf4"
+checksum = "f783611babedbbe90db3478c120fb5f5daacceffc210b39adc0af4fe0da70bad"
 dependencies = [
  "alloy-rlp",
  "arbitrary",
@@ -259,17 +257,21 @@ dependencies = [
 [[package]]
 name = "alloy-provider"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
+ "alloy-chains",
+ "alloy-consensus",
  "alloy-eips",
  "alloy-json-rpc",
  "alloy-network",
  "alloy-primitives",
+ "alloy-pubsub",
  "alloy-rpc-client",
- "alloy-rpc-types",
+ "alloy-rpc-types-eth",
  "alloy-rpc-types-trace",
  "alloy-transport",
  "alloy-transport-http",
+ "alloy-transport-ws",
  "async-stream",
  "async-trait",
  "auto_impl",
@@ -277,18 +279,38 @@ dependencies = [
  "futures",
  "futures-utils-wasm",
  "lru",
- "reqwest 0.12.5",
+ "pin-project",
+ "reqwest 0.12.9",
+ "serde",
  "serde_json",
  "tokio",
  "tracing",
  "url",
 ]
 
+[[package]]
+name = "alloy-pubsub"
+version = "0.1.0"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
+dependencies = [
+ "alloy-json-rpc",
+ "alloy-primitives",
+ "alloy-transport",
+ "bimap",
+ "futures",
+ "serde",
+ "serde_json",
+ "tokio",
+ "tokio-stream",
+ "tower",
+ "tracing",
+]
+
 [[package]]
 name = "alloy-rlp"
-version = "0.3.8"
+version = "0.3.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "26154390b1d205a4a7ac7352aa2eb4f81f391399d4e2f546fb81a2f8bb383f62"
+checksum = "b155716bab55763c95ba212806cf43d05bcc70e5f35b02bad20cf5ec7fe11fed"
 dependencies = [
  "alloy-rlp-derive",
  "arrayvec",
@@ -297,26 +319,29 @@ dependencies = [
 
 [[package]]
 name = "alloy-rlp-derive"
-version = "0.3.8"
+version = "0.3.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4d0f2d905ebd295e7effec65e5f6868d153936130ae718352771de3e7d03c75c"
+checksum = "8037e03c7f462a063f28daec9fda285a9a89da003c552f8637a80b9c8fd96241"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "alloy-rpc-client"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-json-rpc",
+ "alloy-primitives",
+ "alloy-pubsub",
  "alloy-transport",
  "alloy-transport-http",
+ "alloy-transport-ws",
  "futures",
  "pin-project",
- "reqwest 0.12.5",
+ "reqwest 0.12.9",
  "serde",
  "serde_json",
  "tokio",
@@ -329,58 +354,81 @@ dependencies = [
 [[package]]
 name = "alloy-rpc-types"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
- "alloy-consensus",
- "alloy-eips",
- "alloy-genesis",
- "alloy-primitives",
- "alloy-rlp",
+ "alloy-rpc-types-engine",
+ "alloy-rpc-types-eth",
+ "alloy-rpc-types-trace",
  "alloy-serde",
- "alloy-sol-types",
- "arbitrary",
- "itertools 0.12.1",
- "jsonrpsee-types",
- "proptest",
- "proptest-derive",
- "serde",
- "serde_json",
- "thiserror",
 ]
 
 [[package]]
 name = "alloy-rpc-types-anvil"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-primitives",
  "alloy-serde",
  "serde",
 ]
 
+[[package]]
+name = "alloy-rpc-types-beacon"
+version = "0.1.0"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
+dependencies = [
+ "alloy-eips",
+ "alloy-primitives",
+ "alloy-rpc-types-engine",
+ "serde",
+ "serde_with",
+ "thiserror 1.0.61",
+]
+
 [[package]]
 name = "alloy-rpc-types-engine"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-consensus",
  "alloy-eips",
  "alloy-primitives",
  "alloy-rlp",
- "alloy-rpc-types",
+ "alloy-rpc-types-eth",
+ "alloy-serde",
+ "jsonrpsee-types",
+ "jsonwebtoken 9.3.0",
+ "rand 0.8.5",
+ "serde",
+ "thiserror 1.0.61",
+]
+
+[[package]]
+name = "alloy-rpc-types-eth"
+version = "0.1.0"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
+dependencies = [
+ "alloy-consensus",
+ "alloy-eips",
+ "alloy-genesis",
+ "alloy-primitives",
+ "alloy-rlp",
  "alloy-serde",
+ "alloy-sol-types",
+ "itertools 0.13.0",
  "jsonrpsee-types",
  "serde",
- "thiserror",
+ "serde_json",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
 name = "alloy-rpc-types-trace"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-primitives",
- "alloy-rpc-types",
+ "alloy-rpc-types-eth",
  "alloy-serde",
  "serde",
  "serde_json",
@@ -389,7 +437,7 @@ dependencies = [
 [[package]]
 name = "alloy-serde"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-primitives",
  "serde",
@@ -399,54 +447,54 @@ dependencies = [
 [[package]]
 name = "alloy-signer"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-primitives",
  "async-trait",
  "auto_impl",
  "elliptic-curve",
  "k256",
- "thiserror",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
 name = "alloy-sol-macro"
-version = "0.7.7"
+version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2b40397ddcdcc266f59f959770f601ce1280e699a91fc1862f29cef91707cd09"
+checksum = "4bad41a7c19498e3f6079f7744656328699f8ea3e783bdd10d85788cd439f572"
 dependencies = [
  "alloy-sol-macro-expander",
  "alloy-sol-macro-input",
  "proc-macro-error",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "alloy-sol-macro-expander"
-version = "0.7.7"
+version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "867a5469d61480fea08c7333ffeca52d5b621f5ca2e44f271b117ec1fc9a0525"
+checksum = "fd9899da7d011b4fe4c406a524ed3e3f963797dbc93b45479d60341d3a27b252"
 dependencies = [
  "alloy-json-abi",
  "alloy-sol-macro-input",
  "const-hex",
  "heck 0.5.0",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "proc-macro-error",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
  "syn-solidity",
  "tiny-keccak",
 ]
 
 [[package]]
 name = "alloy-sol-macro-input"
-version = "0.7.7"
+version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2e482dc33a32b6fadbc0f599adea520bd3aaa585c141a80b404d0a3e3fa72528"
+checksum = "d32d595768fdc61331a132b6f65db41afae41b9b97d36c21eb1b955c422a7e60"
 dependencies = [
  "alloy-json-abi",
  "const-hex",
@@ -455,25 +503,24 @@ dependencies = [
  "proc-macro2",
  "quote",
  "serde_json",
- "syn 2.0.74",
+ "syn 2.0.100",
  "syn-solidity",
 ]
 
 [[package]]
 name = "alloy-sol-type-parser"
-version = "0.7.7"
+version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cbcba3ca07cf7975f15d871b721fb18031eec8bce51103907f6dcce00b255d98"
+checksum = "baa2fbd22d353d8685bd9fee11ba2d8b5c3b1d11e56adb3265fcf1f32bfdf404"
 dependencies = [
- "serde",
- "winnow 0.6.18",
+ "winnow 0.6.13",
 ]
 
 [[package]]
 name = "alloy-sol-types"
-version = "0.7.7"
+version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a91ca40fa20793ae9c3841b83e74569d1cc9af29a2f5237314fd3452d51e38c7"
+checksum = "a49042c6d3b66a9fe6b2b5a8bf0d39fc2ae1ee0310a2a26ffedd79fb097878dd"
 dependencies = [
  "alloy-json-abi",
  "alloy-primitives",
@@ -485,7 +532,7 @@ dependencies = [
 [[package]]
 name = "alloy-transport"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-json-rpc",
  "base64 0.22.1",
@@ -493,41 +540,54 @@ dependencies = [
  "futures-utils-wasm",
  "serde",
  "serde_json",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tower",
  "url",
- "wasm-bindgen-futures",
 ]
 
 [[package]]
 name = "alloy-transport-http"
 version = "0.1.0"
-source = "git+https://github.com/alloy-rs/alloy.git?rev=39b8695#39b869585955d95e9c64c3e1b66f16432ae4f132"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
 dependencies = [
  "alloy-json-rpc",
  "alloy-transport",
- "reqwest 0.12.5",
+ "reqwest 0.12.9",
  "serde_json",
  "tower",
+ "tracing",
  "url",
 ]
 
+[[package]]
+name = "alloy-transport-ws"
+version = "0.1.0"
+source = "git+https://github.com/alloy-rs/alloy?rev=00d81d7#00d81d7882a0bee4720d6d6a1db4c8f164ebb9d0"
+dependencies = [
+ "alloy-pubsub",
+ "alloy-transport",
+ "futures",
+ "http 1.1.0",
+ "rustls",
+ "serde_json",
+ "tokio",
+ "tokio-tungstenite",
+ "tracing",
+ "ws_stream_wasm",
+]
+
 [[package]]
 name = "alloy-trie"
-version = "0.3.1"
+version = "0.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "beb28aa4ecd32fdfa1b1bdd111ff7357dd562c6b2372694cf9e613434fcba659"
+checksum = "03704f265cbbb943b117ecb5055fd46e8f41e7dc8a58b1aed20bcd40ace38c15"
 dependencies = [
  "alloy-primitives",
  "alloy-rlp",
- "arbitrary",
- "derive_arbitrary",
  "derive_more",
  "hashbrown 0.14.5",
  "nybbles",
- "proptest",
- "proptest-derive",
  "serde",
  "smallvec",
  "tracing",
@@ -575,9 +635,9 @@ dependencies = [
 
 [[package]]
 name = "anstream"
-version = "0.6.15"
+version = "0.6.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "64e15c1ab1f89faffbf04a634d5e1962e9074f2741eef6d97f3c4e322426d526"
+checksum = "418c75fa768af9c03be99d17643f93f79bbba589895012a80e3452a19ddda15b"
 dependencies = [
  "anstyle",
  "anstyle-parse",
@@ -590,33 +650,33 @@ dependencies = [
 
 [[package]]
 name = "anstyle"
-version = "1.0.8"
+version = "1.0.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1bec1de6f59aedf83baf9ff929c98f2ad654b97c9510f4e70cf6f661d49fd5b1"
+checksum = "038dfcf04a5feb68e9c60b21c9625a54c2c0616e79b72b0fd87075a056ae1d1b"
 
 [[package]]
 name = "anstyle-parse"
-version = "0.2.5"
+version = "0.2.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "eb47de1e80c2b463c735db5b217a0ddc39d612e7ac9e2e96a5aed1f57616c1cb"
+checksum = "c03a11a9034d92058ceb6ee011ce58af4a9bf61491aa7e1e59ecd24bd40d22d4"
 dependencies = [
  "utf8parse",
 ]
 
 [[package]]
 name = "anstyle-query"
-version = "1.1.1"
+version = "1.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6d36fc52c7f6c869915e99412912f22093507da8d9e942ceaf66fe4b7c14422a"
+checksum = "ad186efb764318d35165f1758e7dcef3b10628e26d41a44bc5550652e6804391"
 dependencies = [
  "windows-sys 0.52.0",
 ]
 
 [[package]]
 name = "anstyle-wincon"
-version = "3.0.4"
+version = "3.0.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5bf74e1b6e971609db8ca7a9ce79fd5768ab6ae46441c572e46cf596f59e57f8"
+checksum = "61a38449feb7068f52bb06c12759005cf459ee52bb4adc1d5a7c4322d716fb19"
 dependencies = [
  "anstyle",
  "windows-sys 0.52.0",
@@ -648,7 +708,7 @@ dependencies = [
  "proc-macro-error",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -795,15 +855,15 @@ dependencies = [
 
 [[package]]
 name = "array-init-cursor"
-version = "0.2.0"
+version = "0.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bf7d0a018de4f6aa429b9d33d69edf69072b1c5b1cb8d3e4a5f7ef898fc3eb76"
+checksum = "ed51fe0f224d1d4ea768be38c51f9f831dee9d05c163c11fba0b8c44387b1fc3"
 
 [[package]]
 name = "arrayref"
-version = "0.3.8"
+version = "0.3.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9d151e35f61089500b617991b791fc8bfd237ae50cd5950803758a179b41e67a"
+checksum = "6b4930d2cb77ce62f89ee5d5289b4ac049559b1c45539271f5ed4fdc7db34545"
 
 [[package]]
 name = "arrayvec"
@@ -952,7 +1012,7 @@ dependencies = [
  "arrow-schema",
  "chrono",
  "half",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "lexical-core",
  "num",
  "serde",
@@ -1032,11 +1092,23 @@ version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "155a5a185e42c6b77ac7b88a15143d930a9e9727a5b7b77eed417404ab15c247"
 
+[[package]]
+name = "async-channel"
+version = "2.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "89b47800b0be77592da0afd425cc03468052844aff33b84e33cc696f64e77b6a"
+dependencies = [
+ "concurrent-queue",
+ "event-listener-strategy",
+ "futures-core",
+ "pin-project-lite",
+]
+
 [[package]]
 name = "async-compression"
-version = "0.4.12"
+version = "0.4.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fec134f64e2bc57411226dfc4e52dec859ddfc7e711fc5e07b612584f000e4aa"
+checksum = "cd066d0b4ef8ecb03a55319dc13aa6910616d0f44008a045bb1835af830abff5"
 dependencies = [
  "brotli 6.0.0",
  "flate2",
@@ -1051,7 +1123,7 @@ dependencies = [
 [[package]]
 name = "async-rate-limiter"
 version = "0.1.0"
-source = "git+https://github.com/jnoorchashm37/async-rate-limiter#08ae53b19cb9db2496c6fbcd0691a2361e6ed477"
+source = "git+https://github.com/jnoorchashm37/async-rate-limiter#2167c9d2ddc010cd99251407b3db0acc3509d3e1"
 dependencies = [
  "tokio",
 ]
@@ -1087,18 +1159,35 @@ checksum = "16e62a023e7c117e27523144c5d2459f4397fcc3cab0085af8e2224f643a0193"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
+[[package]]
+name = "async-task"
+version = "4.7.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8b75356056920673b02621b35afd0f7dda9306d03c79a30f5c56c44cf256e3de"
+
 [[package]]
 name = "async-trait"
-version = "0.1.81"
+version = "0.1.80"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6e0c28dcc82d7c8ead5cb13beb15405b57b8546e93215673ff8ca0349a028107"
+checksum = "c6fa2087f2753a7da8cc1c0dbfcf89579dd57458e36769de5ac750b4671737ca"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
+]
+
+[[package]]
+name = "async_io_stream"
+version = "0.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b6d7b9decdf35d8908a7e3ef02f64c5e9b1695e230154c0e8de3969142d9b94c"
+dependencies = [
+ "futures",
+ "pharos",
+ "rustc_version 0.4.0",
 ]
 
 [[package]]
@@ -1122,17 +1211,6 @@ version = "1.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0"
 
-[[package]]
-name = "attohttpc"
-version = "0.24.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8d9a9bf8b79a749ee0b911b91b671cc2b6c670bdbc7e3dfd537576ddc94bb2a2"
-dependencies = [
- "http 0.2.12",
- "log",
- "url",
-]
-
 [[package]]
 name = "aurora-engine-modexp"
 version = "1.1.0"
@@ -1151,7 +1229,7 @@ checksum = "3c87f3f15e7794432337fc718554eaa4dc8f04c9677a950ffe366f20a162ae42"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -1174,9 +1252,9 @@ dependencies = [
 
 [[package]]
 name = "backtrace"
-version = "0.3.69"
+version = "0.3.73"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2089b7e3f35b9dd2d0ed921ead4f6d318c27680d4a5bd167b3ee120edb105837"
+checksum = "5cc23269a4f8976d0a4d2e7109211a419fe30e8d88d677cd60b6bc79c5732e0a"
 dependencies = [
  "addr2line",
  "cc",
@@ -1232,6 +1310,12 @@ dependencies = [
  "serde",
 ]
 
+[[package]]
+name = "bimap"
+version = "0.6.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "230c5f1ca6a325a32553f8640d31ac9b49f2411e901e427570154868b46da4f7"
+
 [[package]]
 name = "bincode"
 version = "1.3.3"
@@ -1243,19 +1327,20 @@ dependencies = [
 
 [[package]]
 name = "bincode"
-version = "2.0.0-rc.3"
+version = "2.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f11ea1a0346b94ef188834a65c068a03aec181c94896d481d7a0a40d85b0ce95"
+checksum = "36eaf5d7b090263e8150820482d5d93cd964a81e4019913c972f4edcc6edb740"
 dependencies = [
  "bincode_derive",
  "serde",
+ "unty",
 ]
 
 [[package]]
 name = "bincode_derive"
-version = "2.0.0-rc.3"
+version = "2.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7e30759b3b99a1b802a7a3aa21c85c3ded5c28e1c83170d82d70f08bbf7f3e4c"
+checksum = "bf95709a440f45e986983918d0e8a1f30a9b1df04918fc828670606804ac3c09"
 dependencies = [
  "virtue",
 ]
@@ -1266,7 +1351,7 @@ version = "0.69.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a00dc851838a2120612785d195287475a3ac45514741da670b735818822129a0"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "cexpr",
  "clang-sys",
  "itertools 0.12.1",
@@ -1277,7 +1362,7 @@ dependencies = [
  "regex",
  "rustc-hash 1.1.0",
  "shlex",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -1309,9 +1394,9 @@ checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"
 
 [[package]]
 name = "bitflags"
-version = "2.6.0"
+version = "2.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de"
+checksum = "cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1"
 dependencies = [
  "arbitrary",
  "serde",
@@ -1319,9 +1404,9 @@ dependencies = [
 
 [[package]]
 name = "bitm"
-version = "0.4.2"
+version = "0.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b06e8e5bec3490b9f6f3adbb78aa4f53e8396fd9994e8a62a346b44ea7c15f35"
+checksum = "31b9ea263f0faf826a1c9de0e8bf8f32f5986c05f5e3abcf6bcde74616009586"
 dependencies = [
  "dyn_size_of",
 ]
@@ -1366,11 +1451,24 @@ dependencies = [
  "generic-array",
 ]
 
+[[package]]
+name = "blocking"
+version = "1.6.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "703f41c54fc768e63e091340b424302bb1c29ef4aa0c7f10fe849dfb114d29ea"
+dependencies = [
+ "async-channel",
+ "async-task",
+ "futures-io",
+ "futures-lite",
+ "piper",
+]
+
 [[package]]
 name = "blst"
-version = "0.3.13"
+version = "0.3.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4378725facc195f1a538864863f6de233b500a8862747e7f165078a419d5e874"
+checksum = "62dc83a094a71d43eeadd254b1ec2d24cb6a0bb6cadce00df51f0db594711a32"
 dependencies = [
  "cc",
  "glob",
@@ -1384,10 +1482,10 @@ version = "0.18.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "5b6fb81ca0f301f33aff7401e2ffab37dc9e0e4a1cf0ccf6b34f4d9e60aa0682"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "boa_interner",
  "boa_macros",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "num-bigint",
  "rustc-hash 1.1.0",
 ]
@@ -1399,7 +1497,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "600e4e4a65b26efcef08a7b1cf2899d3845a32e82e067ee3b75eaf7e413ff31c"
 dependencies = [
  "arrayvec",
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "boa_ast",
  "boa_gc",
  "boa_interner",
@@ -1412,7 +1510,7 @@ dependencies = [
  "fast-float",
  "hashbrown 0.14.5",
  "icu_normalizer",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "intrusive-collections",
  "itertools 0.12.1",
  "num-bigint",
@@ -1433,7 +1531,7 @@ dependencies = [
  "static_assertions",
  "tap",
  "thin-vec",
- "thiserror",
+ "thiserror 1.0.61",
  "time",
 ]
 
@@ -1458,7 +1556,7 @@ dependencies = [
  "boa_gc",
  "boa_macros",
  "hashbrown 0.14.5",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "once_cell",
  "phf",
  "rustc-hash 1.1.0",
@@ -1473,7 +1571,7 @@ checksum = "6be9c93793b60dac381af475b98634d4b451e28336e72218cad9a20176218dbc"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
  "synstructure",
 ]
 
@@ -1483,7 +1581,7 @@ version = "0.18.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "9e8592556849f0619ed142ce2b3a19086769314a8d657f93a5765d06dbce4818"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "boa_ast",
  "boa_interner",
  "boa_macros",
@@ -1559,7 +1657,7 @@ dependencies = [
  "fs_extra",
  "futures",
  "human_bytes",
- "hyper 0.14.30",
+ "hyper 1.6.0",
  "indicatif",
  "indoc",
  "itertools 0.11.0",
@@ -1572,14 +1670,12 @@ dependencies = [
  "rand 0.8.5",
  "rayon",
  "regex",
- "reqwest 0.12.5",
+ "reqwest 0.12.9",
  "reth-beacon-consensus",
  "reth-blockchain-tree",
  "reth-db",
- "reth-interfaces",
- "reth-network-api",
  "reth-node-core",
- "reth-primitives",
+ "reth-primitives-traits",
  "reth-provider",
  "reth-rpc",
  "reth-rpc-api",
@@ -1591,7 +1687,7 @@ dependencies = [
  "serde_json",
  "strum 0.25.0",
  "tar",
- "thiserror",
+ "thiserror 1.0.61",
  "tikv-jemallocator",
  "tokio",
  "toml",
@@ -1630,14 +1726,14 @@ dependencies = [
  "phf",
  "rayon",
  "reth-db",
- "reth-primitives",
+ "reth-primitives-traits",
  "reth-rpc-types",
  "reth-tracing-ext",
  "serde",
  "serde_json",
  "serial_test",
  "strum 0.25.0",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tracing",
 ]
@@ -1673,14 +1769,13 @@ dependencies = [
  "malachite",
  "once_cell",
  "phf",
- "reqwest 0.12.5",
+ "reqwest 0.12.9",
  "reth-beacon-consensus",
  "reth-blockchain-tree",
  "reth-db",
- "reth-interfaces",
  "reth-metrics",
- "reth-network-api",
  "reth-primitives",
+ "reth-primitives-traits",
  "reth-provider",
  "reth-rpc",
  "reth-rpc-api",
@@ -1692,7 +1787,7 @@ dependencies = [
  "serde",
  "serde_json",
  "serial_test",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tracing",
  "tracing-subscriber",
@@ -1712,7 +1807,7 @@ dependencies = [
  "async-trait",
  "auto_impl",
  "backon",
- "bincode 2.0.0-rc.3",
+ "bincode 2.0.1",
  "brontes-classifier",
  "brontes-core",
  "brontes-database",
@@ -1736,7 +1831,7 @@ dependencies = [
  "fs_extra",
  "futures",
  "human_bytes",
- "hyper 0.14.30",
+ "hyper 1.6.0",
  "hyper-tls 0.5.0",
  "indicatif",
  "itertools 0.12.1",
@@ -1756,16 +1851,16 @@ dependencies = [
  "rayon",
  "redefined",
  "regex",
- "reqwest 0.12.5",
+ "reqwest 0.12.9",
  "reth-codecs",
  "reth-codecs-derive",
  "reth-db",
- "reth-interfaces",
  "reth-libmdbx",
  "reth-mdbx-sys",
- "reth-primitives",
+ "reth-primitives-traits",
  "reth-rpc",
  "reth-rpc-types",
+ "reth-storage-errors",
  "reth-tasks",
  "reth-tracing-ext",
  "rkyv",
@@ -1779,7 +1874,7 @@ dependencies = [
  "strum_macros 0.25.3",
  "tar",
  "test-fuzz",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-scoped",
  "toml",
@@ -1813,16 +1908,16 @@ dependencies = [
  "dotenv",
  "eyre",
  "futures",
- "hyper 0.14.30",
+ "hyper 1.6.0",
  "hyper-tls 0.5.0",
  "itertools 0.11.0",
  "lazy_static",
  "malachite",
  "rand 0.8.5",
  "rayon",
- "reqwest 0.12.5",
+ "reqwest 0.12.9",
  "reth-db",
- "reth-primitives",
+ "reth-primitives-traits",
  "reth-rpc-types",
  "reth-tracing-ext",
  "serde",
@@ -1831,7 +1926,7 @@ dependencies = [
  "serial_test",
  "statrs",
  "strum 0.25.0",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tracing",
  "tracing-subscriber",
@@ -1841,19 +1936,18 @@ dependencies = [
 name = "brontes-libmdbx"
 version = "0.0.0"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "byteorder",
  "criterion",
  "dashmap",
  "derive_more",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "libc",
- "libffi",
  "parking_lot 0.12.3",
  "pprof",
  "reth-mdbx-sys",
  "tempfile",
- "thiserror",
+ "thiserror 1.0.61",
  "tracing",
 ]
 
@@ -1864,7 +1958,7 @@ dependencies = [
  "itertools 0.11.0",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -1879,16 +1973,16 @@ dependencies = [
  "db-interfaces",
  "eyre",
  "futures",
- "hyper 0.14.30",
+ "hyper 1.6.0",
  "metrics",
  "metrics-exporter-prometheus",
  "metrics-process",
  "metrics-util",
  "procfs",
  "prometheus",
- "reth-interfaces",
  "reth-metrics",
- "reth-primitives",
+ "reth-primitives-traits",
+ "reth-storage-errors",
  "tikv-jemalloc-ctl",
  "tokio",
  "tracing",
@@ -1922,7 +2016,7 @@ dependencies = [
  "erased-serde",
  "eyre",
  "futures",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "itertools 0.12.1",
  "malachite",
  "modular-bitfield",
@@ -1941,6 +2035,7 @@ dependencies = [
  "reth-codecs",
  "reth-db",
  "reth-primitives",
+ "reth-primitives-traits",
  "reth-provider",
  "reth-rpc-types",
  "reth-tracing-ext",
@@ -1951,7 +2046,7 @@ dependencies = [
  "serde_repr",
  "serde_with",
  "strum 0.25.0",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tracing",
 ]
@@ -1994,7 +2089,7 @@ dependencies = [
  "eyre",
  "futures",
  "humansize",
- "hyper 0.14.30",
+ "hyper 1.6.0",
  "indicatif",
  "indoc",
  "itertools 0.11.0",
@@ -2009,11 +2104,11 @@ dependencies = [
  "rayon",
  "redefined",
  "relays-openapi",
- "reqwest 0.12.5",
+ "reqwest 0.12.9",
  "reth-codecs",
  "reth-db",
- "reth-interfaces",
  "reth-primitives",
+ "reth-primitives-traits",
  "reth-rpc",
  "reth-rpc-types",
  "reth-tasks",
@@ -2026,7 +2121,7 @@ dependencies = [
  "serial_test",
  "statrs",
  "strum 0.25.0",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tracing",
  "zstd",
@@ -2085,9 +2180,9 @@ dependencies = [
 
 [[package]]
 name = "bstr"
-version = "1.10.0"
+version = "1.12.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "40723b8fb387abc38f4f4a37c09073622e41dd12327033091ef8950659e6dc0c"
+checksum = "234113d19d0d7d613b40e86fb654acf958910802bcceab913a4f9e7cda03b1a4"
 dependencies = [
  "memchr",
 ]
@@ -2128,22 +2223,22 @@ dependencies = [
 
 [[package]]
 name = "bytemuck"
-version = "1.17.0"
+version = "1.16.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6fd4c6dcc3b0aea2f5c0b4b82c2b15fe39ddbc76041a310848f4706edf76bb31"
+checksum = "78834c15cb5d5efe3452d58b1e8ba890dd62d21907f867f383358198e56ebca5"
 dependencies = [
  "bytemuck_derive",
 ]
 
 [[package]]
 name = "bytemuck_derive"
-version = "1.7.1"
+version = "1.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0cc8b54b395f2fcfbb3d90c47b01c7f444d94d05bdeb775811dec868ac3bbc26"
+checksum = "1ee891b04274a59bd38b412188e24b849617b2e45a0fd8d057deb63e7403761b"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -2154,9 +2249,9 @@ checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"
 
 [[package]]
 name = "bytes"
-version = "1.7.1"
+version = "1.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8318a53db07bb3f8dca91a600466bdb3f2eaadeedfdbcf02e1accbad9271ba50"
+checksum = "514de17de45fdb8dc022b1a7975556c53c86f9f0aa5f534b98977b171857c2c9"
 dependencies = [
  "serde",
 ]
@@ -2177,9 +2272,9 @@ dependencies = [
 
 [[package]]
 name = "camino"
-version = "1.1.8"
+version = "1.1.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3054fea8a20d8ff3968d5b22cc27501d2b08dc4decdb31b184323f00c5ef23bb"
+checksum = "e0ec6b951b160caa93cc0c7b209e5a3bff7aae9062213451ac99493cd844c239"
 dependencies = [
  "serde",
 ]
@@ -2204,7 +2299,7 @@ dependencies = [
  "semver 1.0.23",
  "serde",
  "serde_json",
- "thiserror",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
@@ -2215,14 +2310,21 @@ checksum = "37b2a672a2cb129a2e41c10b1224bb368f9f37a2b16b612598138befd7b37eb5"
 
 [[package]]
 name = "cc"
-version = "1.0.83"
+version = "1.2.19"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f1174fb0b6ec23863f8b971027804a42614e347eafb0a95bf0b12cdae21fc4d0"
+checksum = "8e3a13707ac958681c13b39b458c073d0d9bc8a22cb1b2f4c8e55eb72c13f362"
 dependencies = [
  "jobserver",
  "libc",
+ "shlex",
 ]
 
+[[package]]
+name = "cesu8"
+version = "1.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c"
+
 [[package]]
 name = "cexpr"
 version = "0.6.0"
@@ -2238,6 +2340,12 @@ version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
 
+[[package]]
+name = "cfg_aliases"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724"
+
 [[package]]
 name = "chrono"
 version = "0.4.38"
@@ -2334,9 +2442,9 @@ dependencies = [
 
 [[package]]
 name = "clap"
-version = "4.5.16"
+version = "4.5.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ed6719fffa43d0d87e5fd8caeab59be1554fb028cd30edc88fc4369b17971019"
+checksum = "5db83dced34638ad474f39f250d7fea9598bdd239eaced1bdf45d597da0f433f"
 dependencies = [
  "clap_builder",
  "clap_derive",
@@ -2344,33 +2452,33 @@ dependencies = [
 
 [[package]]
 name = "clap_builder"
-version = "4.5.15"
+version = "4.5.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "216aec2b177652e3846684cbfe25c9964d18ec45234f0f5da5157b207ed1aab6"
+checksum = "f7e204572485eb3fbf28f871612191521df159bc3e15a9f5064c66dba3a8c05f"
 dependencies = [
  "anstream",
  "anstyle",
  "clap_lex",
- "strsim 0.11.1",
+ "strsim",
 ]
 
 [[package]]
 name = "clap_derive"
-version = "4.5.13"
+version = "4.5.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "501d359d5f3dcaf6ecdeee48833ae73ec6e42723a1e52419c79abf9507eec0a0"
+checksum = "c780290ccf4fb26629baa7a1081e68ced113f1d3ec302fa5948f1c381ebf06c6"
 dependencies = [
  "heck 0.5.0",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "clap_lex"
-version = "0.7.2"
+version = "0.7.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1462739cb27611015575c0c11df5df7601141071f07518d56fcc1be504cbec97"
+checksum = "4b82cf0babdbd58558212896d1a4272303a57bdb245c2bf1147185fb45640e70"
 
 [[package]]
 name = "clickhouse"
@@ -2382,16 +2490,16 @@ dependencies = [
  "clickhouse-derive",
  "clickhouse-rs-cityhash-sys",
  "futures",
- "hyper 0.14.30",
+ "hyper 0.14.32",
  "hyper-tls 0.5.0",
  "lz4",
- "reqwest 0.12.5",
+ "reqwest 0.12.9",
  "sealed",
  "serde",
  "serde_json",
  "serde_with",
  "static_assertions",
- "thiserror",
+ "thiserror 1.0.61",
  "time",
  "tokio",
  "url",
@@ -2419,18 +2527,28 @@ dependencies = [
 
 [[package]]
 name = "colorchoice"
-version = "1.0.2"
+version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d3fd119d74b830634cea2a0f58bbd0d54540518a14397557951e79340abc28c0"
+checksum = "0b6a852b24ab71dffc585bcb46eaf7959d175cb865a7152e35b348d1b2960422"
 
 [[package]]
 name = "colored"
-version = "2.1.0"
+version = "2.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cbf2150cce219b664a8a70df7a1f933836724b503f8a413af9365b4dcc4d90b8"
+checksum = "117725a109d387c937a1533ce01b450cbde6b88abceea8473c4d7a85853cda3c"
 dependencies = [
  "lazy_static",
- "windows-sys 0.48.0",
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "combine"
+version = "4.6.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ba5a308b75df32fe02788e748662718f03fde005016435c444eea572398219fd"
+dependencies = [
+ "bytes",
+ "memchr",
 ]
 
 [[package]]
@@ -2440,9 +2558,9 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b34115915337defe99b2aff5c2ce6771e5fbc4079f4b506301f5cf394c8452f7"
 dependencies = [
  "crossterm",
- "strum 0.26.3",
+ "strum 0.26.2",
  "strum_macros 0.26.4",
- "unicode-width",
+ "unicode-width 0.1.13",
 ]
 
 [[package]]
@@ -2454,6 +2572,15 @@ dependencies = [
  "digest 0.10.7",
 ]
 
+[[package]]
+name = "concurrent-queue"
+version = "2.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4ca0197aee26d1ae37445ee532fefce43251d24cc7c166799f4d46817f1d3973"
+dependencies = [
+ "crossbeam-utils",
+]
+
 [[package]]
 name = "confy"
 version = "0.6.1"
@@ -2462,7 +2589,7 @@ checksum = "45b1f4c00870f07dc34adcac82bb6a72cc5aabca8536ba1797e01df51d2ce9a0"
 dependencies = [
  "directories",
  "serde",
- "thiserror",
+ "thiserror 1.0.61",
  "toml",
 ]
 
@@ -2475,7 +2602,7 @@ dependencies = [
  "encode_unicode 0.3.6",
  "lazy_static",
  "libc",
- "unicode-width",
+ "unicode-width 0.1.13",
  "windows-sys 0.52.0",
 ]
 
@@ -2526,9 +2653,9 @@ checksum = "3618cccc083bb987a415d85c02ca6c9994ea5b44731ec28b9ecf09658655fba9"
 
 [[package]]
 name = "const_format"
-version = "0.2.32"
+version = "0.2.34"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673"
+checksum = "126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd"
 dependencies = [
  "const_format_proc_macros",
  "konst",
@@ -2536,9 +2663,9 @@ dependencies = [
 
 [[package]]
 name = "const_format_proc_macros"
-version = "0.2.32"
+version = "0.2.34"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500"
+checksum = "1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -2572,9 +2699,9 @@ dependencies = [
 
 [[package]]
 name = "core-foundation-sys"
-version = "0.8.7"
+version = "0.8.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
+checksum = "06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f"
 
 [[package]]
 name = "core2"
@@ -2596,9 +2723,9 @@ dependencies = [
 
 [[package]]
 name = "cpufeatures"
-version = "0.2.13"
+version = "0.2.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad"
+checksum = "53fe5e26ff1b7aef8bca9c6080520cfb8d9333c7568e1829cef191a9723e5504"
 dependencies = [
  "libc",
 ]
@@ -2695,9 +2822,9 @@ dependencies = [
 
 [[package]]
 name = "crossbeam-queue"
-version = "0.3.11"
+version = "0.3.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "df0346b5d5e76ac2fe4e327c5fd1118d6be7c51dfb18f9b7922923f287471e35"
+checksum = "0f58bbc28f91df819d0aa2a2c00cd19754769c2fad90579b3592b1c9ba7a3115"
 dependencies = [
  "crossbeam-utils",
 ]
@@ -2714,10 +2841,10 @@ version = "0.27.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f476fe445d41c9e991fd07515a6f463074b782242ccf4a5b7b1d1012e70824df"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "crossterm_winapi",
  "libc",
- "mio 0.8.11",
+ "mio",
  "parking_lot 0.12.3",
  "signal-hook",
  "signal-hook-mio",
@@ -2835,15 +2962,16 @@ dependencies = [
 
 [[package]]
 name = "curve25519-dalek"
-version = "4.1.3"
+version = "4.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be"
+checksum = "0a677b8922c94e01bdbb12126b0bc852f00447528dee1782229af9c720c3f348"
 dependencies = [
  "cfg-if",
  "cpufeatures",
  "curve25519-dalek-derive",
  "digest 0.10.7",
  "fiat-crypto",
+ "platforms",
  "rustc_version 0.4.0",
  "subtle",
  "zeroize",
@@ -2857,77 +2985,42 @@ checksum = "f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
-]
-
-[[package]]
-name = "darling"
-version = "0.10.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0d706e75d87e35569db781a9b5e2416cff1236a47ed380831f959382ccd5f858"
-dependencies = [
- "darling_core 0.10.2",
- "darling_macro 0.10.2",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "darling"
-version = "0.20.10"
+version = "0.20.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6f63b86c8a8826a49b8c21f08a2d07338eec8d900540f8630dc76284be802989"
+checksum = "83b2eb4d90d12bdda5ed17de686c2acb4c57914f8f921b8da7e112b5a36f3fe1"
 dependencies = [
- "darling_core 0.20.10",
- "darling_macro 0.20.10",
+ "darling_core",
+ "darling_macro",
 ]
 
 [[package]]
 name = "darling_core"
-version = "0.10.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f0c960ae2da4de88a91b2d920c2a7233b400bc33cb28453a2987822d8392519b"
-dependencies = [
- "fnv",
- "ident_case",
- "proc-macro2",
- "quote",
- "strsim 0.9.3",
- "syn 1.0.109",
-]
-
-[[package]]
-name = "darling_core"
-version = "0.20.10"
+version = "0.20.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "95133861a8032aaea082871032f5815eb9e98cef03fa916ab4500513994df9e5"
+checksum = "622687fe0bac72a04e5599029151f5796111b90f1baaa9b544d807a5e31cd120"
 dependencies = [
  "fnv",
  "ident_case",
  "proc-macro2",
  "quote",
- "strsim 0.11.1",
- "syn 2.0.74",
-]
-
-[[package]]
-name = "darling_macro"
-version = "0.10.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d9b5a2f4ac4969822c62224815d069952656cadc7084fdca9751e6d959189b72"
-dependencies = [
- "darling_core 0.10.2",
- "quote",
- "syn 1.0.109",
+ "strsim",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "darling_macro"
-version = "0.20.10"
+version = "0.20.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d336a2a514f6ccccaa3e09b02d41d35330c07ddf03a62165fcec10bb561c7806"
+checksum = "733cabb43482b1a1b53eee8583c2b9e8684d592215ea83efd305dd31bc2f0178"
 dependencies = [
- "darling_core 0.20.10",
+ "darling_core",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -2972,7 +3065,7 @@ dependencies = [
 [[package]]
 name = "db-interfaces"
 version = "0.1.0"
-source = "git+https://github.com/SorellaLabs/db-interfaces#12892c736a6e041ab5698bb73361cdcdac60a5f2"
+source = "git+https://github.com/SorellaLabs/db-interfaces#f08e9be67afb3f902e26fd4e039edf752cab12ae"
 dependencies = [
  "chrono",
  "clickhouse",
@@ -2982,23 +3075,23 @@ dependencies = [
  "erased-serde",
  "eyre",
  "futures",
- "hyper 0.14.30",
+ "hyper 0.14.32",
  "hyper-tls 0.5.0",
  "primitive-types",
  "rand 0.8.5",
- "reqwest 0.12.5",
+ "reqwest 0.12.9",
  "serde",
  "serde_json",
  "strum 0.25.0",
  "strum_macros 0.25.3",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
 ]
 
 [[package]]
 name = "db-interfaces-macros"
 version = "0.1.0"
-source = "git+https://github.com/SorellaLabs/db-interfaces#12892c736a6e041ab5698bb73361cdcdac60a5f2"
+source = "git+https://github.com/SorellaLabs/db-interfaces#f08e9be67afb3f902e26fd4e039edf752cab12ae"
 dependencies = [
  "dotenv",
  "itertools 0.11.0",
@@ -3006,7 +3099,7 @@ dependencies = [
  "proc-macro2",
  "quote",
  "regex",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -3043,7 +3136,7 @@ dependencies = [
  "proc-macro2",
  "quote",
  "semver 1.0.23",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -3085,52 +3178,27 @@ checksum = "67e77553c4162a157adbf834ebae5b415acbecbeafc7a74b0e886657506a7611"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
-name = "derive_builder"
-version = "0.9.0"
+name = "derive_more"
+version = "0.99.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a2658621297f2cf68762a6f7dc0bb7e1ff2cfd6583daef8ee0fed6f7ec468ec0"
+checksum = "4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321"
 dependencies = [
- "darling 0.10.2",
- "derive_builder_core",
+ "convert_case 0.4.0",
  "proc-macro2",
  "quote",
+ "rustc_version 0.4.0",
  "syn 1.0.109",
 ]
 
 [[package]]
-name = "derive_builder_core"
-version = "0.9.0"
+name = "dhat"
+version = "0.3.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2791ea3e372c8495c0bc2033991d76b512cd799d07491fbd6890124db9458bef"
-dependencies = [
- "darling 0.10.2",
- "proc-macro2",
- "quote",
- "syn 1.0.109",
-]
-
-[[package]]
-name = "derive_more"
-version = "0.99.18"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce"
-dependencies = [
- "convert_case 0.4.0",
- "proc-macro2",
- "quote",
- "rustc_version 0.4.0",
- "syn 2.0.74",
-]
-
-[[package]]
-name = "dhat"
-version = "0.3.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "98cd11d84628e233de0ce467de10b8633f4ddaecafadefc86e13b84b8739b827"
+checksum = "98cd11d84628e233de0ce467de10b8633f4ddaecafadefc86e13b84b8739b827"
 dependencies = [
  "backtrace",
  "lazy_static",
@@ -3216,11 +3284,13 @@ dependencies = [
 
 [[package]]
 name = "discv5"
-version = "0.4.1"
-source = "git+https://github.com/sigp/discv5?rev=04ac004#04ac0042a345a9edf93b090007e5d31c008261ed"
+version = "0.6.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cafb8ed8d460b7d1c8d4c970270d45ecb5e283179a3945143196624c55cda6ac"
 dependencies = [
  "aes 0.7.5",
  "aes-gcm",
+ "alloy-rlp",
  "arrayvec",
  "delay_map",
  "enr",
@@ -3235,7 +3305,6 @@ dependencies = [
  "more-asserts",
  "parking_lot 0.11.2",
  "rand 0.8.5",
- "rlp",
  "smallvec",
  "socket2 0.4.10",
  "tokio",
@@ -3246,25 +3315,13 @@ dependencies = [
 
 [[package]]
 name = "displaydoc"
-version = "0.2.5"
+version = "0.2.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0"
+checksum = "487585f4d0c6655fe74905e2504d8ad6908e4db67f744eb140876906c2f3175d"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
-]
-
-[[package]]
-name = "dns-lookup"
-version = "1.0.8"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "53ecafc952c4528d9b51a458d1a8904b81783feff9fde08ab6ed2545ff396872"
-dependencies = [
- "cfg-if",
- "libc",
- "socket2 0.4.10",
- "winapi",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -3275,9 +3332,9 @@ checksum = "77c90badedccf4105eca100756a0b1289e191f6fcbdadd3cee1d2f614f97da8f"
 
 [[package]]
 name = "dunce"
-version = "1.0.5"
+version = "1.0.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "92773504d58c093f6de2459af4af33faa518c13451eb8f2b5698ed3d36e7c813"
+checksum = "56ce8c6da7551ec6c462cbaf3bfbc75131ebbfa1c944aeaa9dab51ca1c5f0c3b"
 
 [[package]]
 name = "dyn-clone"
@@ -3330,23 +3387,11 @@ dependencies = [
  "zeroize",
 ]
 
-[[package]]
-name = "educe"
-version = "0.4.23"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0f0042ff8246a363dbe77d2ceedb073339e85a804b9a47636c6e016a9a32c05f"
-dependencies = [
- "enum-ordinalize",
- "proc-macro2",
- "quote",
- "syn 1.0.109",
-]
-
 [[package]]
 name = "either"
-version = "1.13.0"
+version = "1.12.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0"
+checksum = "3dca9240753cf90908d7e4aac30f630662b02aebaa1b58a3cadabdb23385b58b"
 
 [[package]]
 name = "elliptic-curve"
@@ -3381,9 +3426,9 @@ checksum = "34aa73646ffb006b8f5147f3dc182bd4bcb190227ce861fc4a4844bf8e3cb2c0"
 
 [[package]]
 name = "encoding_rs"
-version = "0.8.34"
+version = "0.8.35"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b45de904aa0b010bce2ab45264d0631681847fa7b6f2eaa7dab7619943bc4f59"
+checksum = "75030f3c4f45dafd7586dd6780965a8c7e8e285a5ecb86713e63a79c5b2766f3"
 dependencies = [
  "cfg-if",
 ]
@@ -3396,10 +3441,11 @@ checksum = "c34f04666d835ff5d62e058c3995147c06f42fe86ff053337632bca83e42702d"
 
 [[package]]
 name = "enr"
-version = "0.10.0"
+version = "0.12.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2a3d8dc56e02f954cac8eb489772c552c473346fc34f67412bb6244fd647f7e4"
+checksum = "4ab656b89cdd15051d92d0931888103508de14ef9e51177c86d478dfa551ce0f"
 dependencies = [
+ "alloy-rlp",
  "base64 0.21.7",
  "bytes",
  "ed25519-dalek",
@@ -3407,25 +3453,12 @@ dependencies = [
  "k256",
  "log",
  "rand 0.8.5",
- "rlp",
- "secp256k1 0.27.0",
+ "secp256k1 0.28.2",
  "serde",
  "sha3",
  "zeroize",
 ]
 
-[[package]]
-name = "enum-as-inner"
-version = "0.3.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "570d109b813e904becc80d8d5da38376818a143348413f7149f1340fe04754d4"
-dependencies = [
- "heck 0.4.1",
- "proc-macro2",
- "quote",
- "syn 1.0.109",
-]
-
 [[package]]
 name = "enum-as-inner"
 version = "0.6.0"
@@ -3435,20 +3468,7 @@ dependencies = [
  "heck 0.4.1",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
-]
-
-[[package]]
-name = "enum-ordinalize"
-version = "3.1.15"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1bf1fa3f06bbff1ea5b1a9c7b14aa992a39657db60a2759457328d7e058f49ee"
-dependencies = [
- "num-bigint",
- "num-traits",
- "proc-macro2",
- "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -3460,18 +3480,18 @@ dependencies = [
  "once_cell",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "enumn"
-version = "0.1.14"
+version = "0.1.13"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2f9ed6b3789237c8a0c1c505af1c7eb2c560df6186f01b098c3a1064ea532f38"
+checksum = "6fd000fd6988e73bbe993ea3db9b1aa64906ab88766d654973924340c8cddb42"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -3491,12 +3511,12 @@ dependencies = [
 
 [[package]]
 name = "errno"
-version = "0.3.9"
+version = "0.3.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba"
+checksum = "976dd42dc7e85965fe702eb8164f21f450704bdde31faefd6471dba214cb594e"
 dependencies = [
  "libc",
- "windows-sys 0.52.0",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
@@ -3543,6 +3563,27 @@ version = "1.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c"
 
+[[package]]
+name = "event-listener"
+version = "5.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6032be9bd27023a771701cc49f9f053c751055f71efb2e0ae5c15809093675ba"
+dependencies = [
+ "concurrent-queue",
+ "parking",
+ "pin-project-lite",
+]
+
+[[package]]
+name = "event-listener-strategy"
+version = "0.5.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0f214dc438f977e6d4e3500aaa277f5ad94ca83fbbd9b1a15713ce2344ccc5a1"
+dependencies = [
+ "event-listener",
+ "pin-project-lite",
+]
+
 [[package]]
 name = "eyre"
 version = "0.6.12"
@@ -3589,7 +3630,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e182f7dbc2ef73d9ef67351c5fbbea084729c48362d3ce9dd44c28e32e277fe5"
 dependencies = [
  "libc",
- "thiserror",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
@@ -3619,9 +3660,9 @@ dependencies = [
 
 [[package]]
 name = "filetime"
-version = "0.2.24"
+version = "0.2.25"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bf401df4a4e3872c4fe8151134cf483738e74b67fc934d6532c882b3d24a4550"
+checksum = "35c0522e981e68cbfa8c3f978441a5f34b30b96e146b33cd3359176b50fe8586"
 dependencies = [
  "cfg-if",
  "libc",
@@ -3672,9 +3713,9 @@ dependencies = [
 
 [[package]]
 name = "flate2"
-version = "1.0.31"
+version = "1.0.30"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7f211bbe8e69bbd0cfdea405084f128ae8b4aaa6b0b522fc8f2b009084797920"
+checksum = "5f54427cfd1c7829e2a139fcefea601bf088ebca651d2bf53ebc600eac295dae"
 dependencies = [
  "crc32fast",
  "miniz_oxide",
@@ -3787,6 +3828,16 @@ version = "0.3.30"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1"
 
+[[package]]
+name = "futures-lite"
+version = "2.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "52527eb5074e35e9339c6b4e8d12600c7128b68fb25dcb9fa9dec18f7c25f3a5"
+dependencies = [
+ "futures-core",
+ "pin-project-lite",
+]
+
 [[package]]
 name = "futures-macro"
 version = "0.3.30"
@@ -3795,7 +3846,7 @@ checksum = "87750cf4b7a4c0625b1529e4c543c2182106e4dedc60a2a6455e00d212c489ac"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -3810,23 +3861,6 @@ version = "0.3.30"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004"
 
-[[package]]
-name = "futures-test"
-version = "0.3.30"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ce388237b32ac42eca0df1ba55ed3bbda4eaf005d7d4b5dbc0b20ab962928ac9"
-dependencies = [
- "futures-core",
- "futures-executor",
- "futures-io",
- "futures-macro",
- "futures-sink",
- "futures-task",
- "futures-util",
- "pin-project",
- "pin-utils",
-]
-
 [[package]]
 name = "futures-timer"
 version = "3.0.3"
@@ -3834,7 +3868,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f288b0a4f20f9a56b5d1da57e2227c661b7b16168e2f72365f57b63326e29b24"
 dependencies = [
  "gloo-timers",
- "send_wrapper",
+ "send_wrapper 0.4.0",
 ]
 
 [[package]]
@@ -3861,6 +3895,19 @@ version = "0.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "42012b0f064e01aa58b545fe3727f90f7dd4020f4a3ea735b50344965f5a57e9"
 
+[[package]]
+name = "generator"
+version = "0.8.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cc6bd114ceda131d3b1d665eba35788690ad37f5916457286b32ab6fd3c438dd"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "log",
+ "rustversion",
+ "windows 0.58.0",
+]
+
 [[package]]
 name = "generic-array"
 version = "0.14.7"
@@ -3908,9 +3955,9 @@ dependencies = [
 
 [[package]]
 name = "gimli"
-version = "0.28.1"
+version = "0.29.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4271d37baee1b8c7e4b708028c57d816cf9d2434acb33a549475f78c181f6253"
+checksum = "40ecd4077b5ae9fd2e9e169b102c6c330d0605168eb0e8bf79952b256dbefffd"
 
 [[package]]
 name = "glob"
@@ -3933,7 +3980,7 @@ dependencies = [
  "pin-project",
  "serde",
  "serde_json",
- "thiserror",
+ "thiserror 1.0.61",
  "wasm-bindgen",
  "wasm-bindgen-futures",
  "web-sys",
@@ -3987,7 +4034,7 @@ dependencies = [
  "futures-sink",
  "futures-util",
  "http 0.2.12",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "slab",
  "tokio",
  "tokio-util",
@@ -4006,7 +4053,7 @@ dependencies = [
  "futures-core",
  "futures-sink",
  "http 1.1.0",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "slab",
  "tokio",
  "tokio-util",
@@ -4044,9 +4091,6 @@ name = "hashbrown"
 version = "0.13.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e"
-dependencies = [
- "ahash",
-]
 
 [[package]]
 name = "hashbrown"
@@ -4060,6 +4104,12 @@ dependencies = [
  "serde",
 ]
 
+[[package]]
+name = "hashbrown"
+version = "0.15.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289"
+
 [[package]]
 name = "hashlink"
 version = "0.8.4"
@@ -4116,12 +4166,6 @@ version = "0.3.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024"
 
-[[package]]
-name = "hermit-abi"
-version = "0.4.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc"
-
 [[package]]
 name = "hex"
 version = "0.4.3"
@@ -4231,9 +4275,9 @@ dependencies = [
 
 [[package]]
 name = "http-body"
-version = "1.0.1"
+version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1efedce1fb8e6913f23e0c92de8e62cd5b772a67e7b3946df930a62566c93184"
+checksum = "1cac85db508abc24a2e48553ba12a996e87244a0395ce011e62b37158745d643"
 dependencies = [
  "bytes",
  "http 1.1.0",
@@ -4248,21 +4292,21 @@ dependencies = [
  "bytes",
  "futures-util",
  "http 1.1.0",
- "http-body 1.0.1",
+ "http-body 1.0.0",
  "pin-project-lite",
 ]
 
 [[package]]
 name = "http-range-header"
-version = "0.3.1"
+version = "0.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "add0ab9360ddbd88cfeb3bd9574a1d85cfdfa14db10b3e21d3700dbc4328758f"
+checksum = "08a397c49fec283e3d6211adbe480be95aae5f304cfb923e9970e08956d5168a"
 
 [[package]]
 name = "httparse"
-version = "1.9.4"
+version = "1.9.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0fcc0b4a115bf80b728eb8ea024ad5bd707b615bfed49e0665b6e0f86fd082d9"
+checksum = "d0e7a4dd27b9476dc40cb050d3632d3bba3a70ddbff012285f7f8559a1e7e545"
 
 [[package]]
 name = "httpdate"
@@ -4303,9 +4347,9 @@ dependencies = [
 
 [[package]]
 name = "hyper"
-version = "0.14.30"
+version = "0.14.32"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a152ddd61dfaec7273fe8419ab357f33aee0d914c5f4efbf0d96fa749eea5ec9"
+checksum = "41dfc780fdec9373c01bae43289ea34c972e40ee3c9f6b3c8801a35f35586ce7"
 dependencies = [
  "bytes",
  "futures-channel",
@@ -4327,17 +4371,18 @@ dependencies = [
 
 [[package]]
 name = "hyper"
-version = "1.4.1"
+version = "1.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "50dfd22e0e76d0f662d429a5f80fcaf3855009297eab6a0a9f8543834744ba05"
+checksum = "cc2b571658e38e0c01b1fdca3bbbe93c00d3d71693ff2770043f8c29bc7d6f80"
 dependencies = [
  "bytes",
  "futures-channel",
  "futures-util",
  "h2 0.4.5",
  "http 1.1.0",
- "http-body 1.0.1",
+ "http-body 1.0.0",
  "httparse",
+ "httpdate",
  "itoa",
  "pin-project-lite",
  "smallvec",
@@ -4345,22 +4390,6 @@ dependencies = [
  "want",
 ]
 
-[[package]]
-name = "hyper-rustls"
-version = "0.24.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ec3efd23720e2049821a693cbc7e65ea87c72f1c58ff2f9522ff332b1491e590"
-dependencies = [
- "futures-util",
- "http 0.2.12",
- "hyper 0.14.30",
- "log",
- "rustls 0.21.12",
- "rustls-native-certs 0.6.3",
- "tokio",
- "tokio-rustls 0.24.1",
-]
-
 [[package]]
 name = "hyper-rustls"
 version = "0.27.2"
@@ -4369,27 +4398,15 @@ checksum = "5ee4be2c948921a1a5320b629c4193916ed787a7f7f293fd3f7f5a6c9de74155"
 dependencies = [
  "futures-util",
  "http 1.1.0",
- "hyper 1.4.1",
+ "hyper 1.6.0",
  "hyper-util",
- "rustls 0.23.12",
+ "log",
+ "rustls",
  "rustls-pki-types",
  "tokio",
- "tokio-rustls 0.26.0",
- "tower-service",
-]
-
-[[package]]
-name = "hyper-system-resolver"
-version = "0.5.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6eea26c5d0b6ab9d72219f65000af310f042a740926f7b2fa3553e774036e2e7"
-dependencies = [
- "derive_builder",
- "dns-lookup",
- "hyper 0.14.30",
- "tokio",
+ "tokio-rustls",
  "tower-service",
- "tracing",
+ "webpki-roots",
 ]
 
 [[package]]
@@ -4399,7 +4416,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d6183ddfa99b85da61a140bea0efc93fdf56ceaa041b37d553518030827f9905"
 dependencies = [
  "bytes",
- "hyper 0.14.30",
+ "hyper 0.14.32",
  "native-tls",
  "tokio",
  "tokio-native-tls",
@@ -4413,7 +4430,7 @@ checksum = "70206fc6890eaca9fde8a0bf71caa2ddfc9fe045ac9e5c70df101a7dbde866e0"
 dependencies = [
  "bytes",
  "http-body-util",
- "hyper 1.4.1",
+ "hyper 1.6.0",
  "hyper-util",
  "native-tls",
  "tokio",
@@ -4423,16 +4440,16 @@ dependencies = [
 
 [[package]]
 name = "hyper-util"
-version = "0.1.7"
+version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cde7055719c54e36e95e8719f95883f22072a48ede39db7fc17a4e1d5281e9b9"
+checksum = "7b875924a60b96e5d7b9ae7b066540b1dd1cbd90d1828f54c92e02a283351c56"
 dependencies = [
  "bytes",
  "futures-channel",
  "futures-util",
  "http 1.1.0",
- "http-body 1.0.1",
- "hyper 1.4.1",
+ "http-body 1.0.0",
+ "hyper 1.6.0",
  "pin-project-lite",
  "socket2 0.5.7",
  "tokio",
@@ -4452,7 +4469,7 @@ dependencies = [
  "iana-time-zone-haiku",
  "js-sys",
  "wasm-bindgen",
- "windows-core",
+ "windows-core 0.52.0",
 ]
 
 [[package]]
@@ -4535,9 +4552,9 @@ checksum = "e3744fecc0df9ce19999cdaf1f9f3a48c253431ce1d67ef499128fe9d0b607ab"
 
 [[package]]
 name = "icu_properties"
-version = "1.4.3"
+version = "1.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "db9e559598096627aeca8cdfb98138a70eb4078025f8d1d5f2416a361241f756"
+checksum = "d8173ba888885d250016e957b8ebfd5a65cdb690123d8833a19f6833f9c2b579"
 dependencies = [
  "displaydoc",
  "icu_collections",
@@ -4579,7 +4596,7 @@ checksum = "d2abdd3a62551e8337af119c5899e600ca0c88ec8f23a46c60ba216c803dcf1a"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -4588,17 +4605,6 @@ version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39"
 
-[[package]]
-name = "idna"
-version = "0.2.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "418a0a6fab821475f634efe3ccc45c013f742efe03d853e8d3355d5cb850ecf8"
-dependencies = [
- "matches",
- "unicode-bidi",
- "unicode-normalization",
-]
-
 [[package]]
 name = "idna"
 version = "0.4.0"
@@ -4611,12 +4617,14 @@ dependencies = [
 
 [[package]]
 name = "idna"
-version = "0.5.0"
+version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6"
+checksum = "4716a3a0933a1d01c2f72450e89596eb51dd34ef3c211ccd875acdf1f8fe47ed"
 dependencies = [
- "unicode-bidi",
- "unicode-normalization",
+ "icu_normalizer",
+ "icu_properties",
+ "smallvec",
+ "utf8_iter",
 ]
 
 [[package]]
@@ -4625,25 +4633,6 @@ version = "1.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "cb56e1aa765b4b4f3aadfab769793b7087bb03a4ea4920644a6d238e2df5b9ed"
 
-[[package]]
-name = "igd-next"
-version = "0.14.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "064d90fec10d541084e7b39ead8875a5a80d9114a2b18791565253bae25f49e4"
-dependencies = [
- "async-trait",
- "attohttpc",
- "bytes",
- "futures",
- "http 0.2.12",
- "hyper 0.14.30",
- "log",
- "rand 0.8.5",
- "tokio",
- "url",
- "xmltree",
-]
-
 [[package]]
 name = "impl-codec"
 version = "0.6.0"
@@ -4684,18 +4673,18 @@ dependencies = [
 
 [[package]]
 name = "include_dir"
-version = "0.7.4"
+version = "0.7.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "923d117408f1e49d914f1a379a309cffe4f18c05cf4e3d12e613a15fc81bd0dd"
+checksum = "18762faeff7122e89e0857b02f7ce6fcc0d101d5e9ad2ad7846cc01d61b7f19e"
 dependencies = [
  "include_dir_macros",
 ]
 
 [[package]]
 name = "include_dir_macros"
-version = "0.7.4"
+version = "0.7.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7cab85a7ed0bd5f0e76d93846e0147172bed2e2d3f859bcc33a8d9699cad1a75"
+checksum = "b139284b5cf57ecfa712bcc66950bb635b31aff41c188e8a4cfc758eca374a3f"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -4720,33 +4709,33 @@ dependencies = [
 
 [[package]]
 name = "indexmap"
-version = "2.4.0"
+version = "2.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c"
+checksum = "cea70ddb795996207ad57735b50c5982d8844f38ba9ee5f1aedcfb708a2aa11e"
 dependencies = [
  "equivalent",
- "hashbrown 0.14.5",
+ "hashbrown 0.15.2",
  "serde",
 ]
 
 [[package]]
 name = "indicatif"
-version = "0.17.8"
+version = "0.17.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "763a5a8f45087d6bcea4222e7b72c291a054edf80e4ef6efd2a4979878c7bea3"
+checksum = "183b3088984b400f4cfac3620d5e076c84da5364016b4f49473de574b2586235"
 dependencies = [
  "console",
- "instant",
  "number_prefix",
  "portable-atomic",
- "unicode-width",
+ "unicode-width 0.2.0",
+ "web-time",
 ]
 
 [[package]]
 name = "indoc"
-version = "2.0.5"
+version = "2.0.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b248f5224d1d606005e02c97f5aa4e88eeb230488bcc03bc9ca4d7991399f2b5"
+checksum = "f4c7245a08504955605670dbf141fceab975f15ca21570696aebe9d2e71576bd"
 
 [[package]]
 name = "inout"
@@ -4782,6 +4771,33 @@ dependencies = [
  "num-traits",
 ]
 
+[[package]]
+name = "interprocess"
+version = "1.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "81f2533f3be42fffe3b5e63b71aeca416c1c3bc33e4e27be018521e76b1f38fb"
+dependencies = [
+ "blocking",
+ "cfg-if",
+ "futures-core",
+ "futures-io",
+ "intmap",
+ "libc",
+ "once_cell",
+ "rustc_version 0.4.0",
+ "spinning",
+ "thiserror 1.0.61",
+ "to_method",
+ "tokio",
+ "winapi",
+]
+
+[[package]]
+name = "intmap"
+version = "0.7.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ae52f28f45ac2bc96edb7714de995cffc174a395fb0abf5bff453587c980d7b9"
+
 [[package]]
 name = "intrusive-collections"
 version = "0.9.6"
@@ -4800,7 +4816,7 @@ dependencies = [
  "socket2 0.5.7",
  "widestring",
  "windows-sys 0.48.0",
- "winreg 0.50.0",
+ "winreg",
 ]
 
 [[package]]
@@ -4821,20 +4837,20 @@ dependencies = [
 
 [[package]]
 name = "is-terminal"
-version = "0.4.13"
+version = "0.4.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "261f68e344040fbd0edea105bef17c66edf46f984ddb1115b775ce31be948f4b"
+checksum = "f23ff5ef2b80d608d61efee834934d862cd92461afc0560dedf493e4c033738b"
 dependencies = [
- "hermit-abi 0.4.0",
+ "hermit-abi",
  "libc",
  "windows-sys 0.52.0",
 ]
 
 [[package]]
 name = "is_terminal_polyfill"
-version = "1.70.1"
+version = "1.70.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf"
+checksum = "f8478577c03552c21db0e2724ffb8986a5ce7af88107e6be5d2ee6e158c12800"
 
 [[package]]
 name = "itertools"
@@ -4863,6 +4879,15 @@ dependencies = [
  "either",
 ]
 
+[[package]]
+name = "itertools"
+version = "0.13.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "413ee7dfc52ee1a4949ceeb7dbc8a33f2d6c088194d9f922fb8318faf1f01186"
+dependencies = [
+ "either",
+]
+
 [[package]]
 name = "itoa"
 version = "1.0.11"
@@ -4875,29 +4900,49 @@ version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "9028f49264629065d057f340a86acb84867925865f73bbf8d47b4d149a7e88b8"
 
+[[package]]
+name = "jni"
+version = "0.19.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c6df18c2e3db7e453d3c6ac5b3e9d5182664d28788126d39b91f2d1e22b017ec"
+dependencies = [
+ "cesu8",
+ "combine",
+ "jni-sys",
+ "log",
+ "thiserror 1.0.61",
+ "walkdir",
+]
+
+[[package]]
+name = "jni-sys"
+version = "0.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130"
+
 [[package]]
 name = "jobserver"
-version = "0.1.32"
+version = "0.1.31"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0"
+checksum = "d2b099aaa34a9751c5bf0878add70444e1ed2dd73f347be99003d4577277de6e"
 dependencies = [
  "libc",
 ]
 
 [[package]]
 name = "js-sys"
-version = "0.3.70"
+version = "0.3.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1868808506b929d7b0cfa8f75951347aa71bb21144b7791bae35d9bccfcfe37a"
+checksum = "29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d"
 dependencies = [
  "wasm-bindgen",
 ]
 
 [[package]]
 name = "jsonrpsee"
-version = "0.22.5"
+version = "0.23.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cfdb12a2381ea5b2e68c3469ec604a007b367778cdb14d09612c8069ebd616ad"
+checksum = "95a130d27083a4001b7b2d72a19f08786299550f76c9bd5307498dce2c2b20fa"
 dependencies = [
  "jsonrpsee-client-transport",
  "jsonrpsee-core",
@@ -4913,40 +4958,44 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee-client-transport"
-version = "0.22.5"
+version = "0.23.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4978087a58c3ab02efc5b07c5e5e2803024536106fd5506f558db172c889b3aa"
+checksum = "039db9fe25cd63b7221c3f8788c1ef4ea07987d40ec25a1e7d7a3c3e3e3fd130"
 dependencies = [
+ "base64 0.22.1",
  "futures-channel",
  "futures-util",
  "gloo-net",
- "http 0.2.12",
+ "http 1.1.0",
  "jsonrpsee-core",
  "pin-project",
- "rustls-native-certs 0.7.1",
+ "rustls",
  "rustls-pki-types",
+ "rustls-platform-verifier",
  "soketto",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
- "tokio-rustls 0.25.0",
+ "tokio-rustls",
  "tokio-util",
  "tracing",
  "url",
- "webpki-roots",
 ]
 
 [[package]]
 name = "jsonrpsee-core"
-version = "0.22.5"
+version = "0.23.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b4b257e1ec385e07b0255dde0b933f948b5c8b8c28d42afda9587c3a967b896d"
+checksum = "21545a9445fbd582840ff5160a9a3e12b8e6da582151cdb07bde9a1970ba3a24"
 dependencies = [
  "anyhow",
  "async-trait",
  "beef",
+ "bytes",
  "futures-timer",
  "futures-util",
- "hyper 0.14.30",
+ "http 1.1.0",
+ "http-body 1.0.0",
+ "http-body-util",
  "jsonrpsee-types",
  "parking_lot 0.12.3",
  "pin-project",
@@ -4954,7 +5003,7 @@ dependencies = [
  "rustc-hash 1.1.0",
  "serde",
  "serde_json",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tracing",
@@ -4963,18 +5012,23 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee-http-client"
-version = "0.22.5"
+version = "0.23.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1ccf93fc4a0bfe05d851d37d7c32b7f370fe94336b52a2f0efc5f1981895c2e5"
+checksum = "fb25cab482c8512c4f3323a5c90b95a3b8f7c90681a87bf7a68b942d52f08933"
 dependencies = [
  "async-trait",
- "hyper 0.14.30",
- "hyper-rustls 0.24.2",
+ "base64 0.22.1",
+ "http-body 1.0.0",
+ "hyper 1.6.0",
+ "hyper-rustls",
+ "hyper-util",
  "jsonrpsee-core",
  "jsonrpsee-types",
+ "rustls",
+ "rustls-platform-verifier",
  "serde",
  "serde_json",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tower",
  "tracing",
@@ -4983,26 +5037,30 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee-proc-macros"
-version = "0.22.5"
+version = "0.23.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7d0bb047e79a143b32ea03974a6bf59b62c2a4c5f5d42a381c907a8bbb3f75c0"
+checksum = "c18184cd09b386feb18085609e8bf77bdc942482bdd82777b433b8d015edf561"
 dependencies = [
- "heck 0.4.1",
+ "heck 0.5.0",
  "proc-macro-crate",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "jsonrpsee-server"
-version = "0.22.5"
+version = "0.23.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "12d8b6a9674422a8572e0b0abb12feeb3f2aeda86528c80d0350c2bd0923ab41"
+checksum = "810f63eff0f78fa8d413d678c0e55b702e2ea61d4587774c0db4ea2fc554ef92"
 dependencies = [
+ "anyhow",
  "futures-util",
- "http 0.2.12",
- "hyper 0.14.30",
+ "http 1.1.0",
+ "http-body 1.0.0",
+ "http-body-util",
+ "hyper 1.6.0",
+ "hyper-util",
  "jsonrpsee-core",
  "jsonrpsee-types",
  "pin-project",
@@ -5010,7 +5068,7 @@ dependencies = [
  "serde",
  "serde_json",
  "soketto",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tokio-util",
@@ -5020,22 +5078,22 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee-types"
-version = "0.22.5"
+version = "0.23.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "150d6168405890a7a3231a3c74843f58b8959471f6df76078db2619ddee1d07d"
+checksum = "f511b714bca46f9a3e97c0e0eb21d2c112e83e444d2db535b5ec7093f5836d73"
 dependencies = [
- "anyhow",
  "beef",
+ "http 1.1.0",
  "serde",
  "serde_json",
- "thiserror",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
 name = "jsonrpsee-wasm-client"
-version = "0.22.5"
+version = "0.23.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f448d8eacd945cc17b6c0b42c361531ca36a962ee186342a97cdb8fca679cd77"
+checksum = "8c8a6dfa0c35c8549fa8e003ce0bbcf37b051ab7ef85fce587e8f0ed7881c84d"
 dependencies = [
  "jsonrpsee-client-transport",
  "jsonrpsee-core",
@@ -5044,11 +5102,11 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee-ws-client"
-version = "0.22.5"
+version = "0.23.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "58b9db2dfd5bb1194b0ce921504df9ceae210a345bc2f6c5a61432089bbab070"
+checksum = "786c100eb67df2f2d863d231c2c6978bcf80ff4bf606ffc40e7e68ef562da7bf"
 dependencies = [
- "http 0.2.12",
+ "http 1.1.0",
  "jsonrpsee-client-transport",
  "jsonrpsee-core",
  "jsonrpsee-types",
@@ -5062,13 +5120,28 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "6971da4d9c3aa03c3d8f3ff0f4155b534aad021292003895a469716b2a230378"
 dependencies = [
  "base64 0.21.7",
- "pem",
+ "pem 1.1.1",
  "ring 0.16.20",
  "serde",
  "serde_json",
  "simple_asn1",
 ]
 
+[[package]]
+name = "jsonwebtoken"
+version = "9.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b9ae10193d25051e74945f1ea2d0b42e03cc3b890f7e4cc5faa44997d808193f"
+dependencies = [
+ "base64 0.21.7",
+ "js-sys",
+ "pem 3.0.4",
+ "ring 0.17.8",
+ "serde",
+ "serde_json",
+ "simple_asn1",
+]
+
 [[package]]
 name = "k256"
 version = "0.13.3"
@@ -5094,9 +5167,9 @@ dependencies = [
 
 [[package]]
 name = "keccak-asm"
-version = "0.1.3"
+version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "422fbc7ff2f2f5bdffeb07718e5a5324dca72b0c9293d50df4026652385e3314"
+checksum = "47a3633291834c4fbebf8673acbc1b04ec9d151418ff9b8e26dcd79129928758"
 dependencies = [
  "digest 0.10.7",
  "sha3-asm",
@@ -5119,11 +5192,11 @@ checksum = "a4933f3f57a8e9d9da04db23fb153356ecaf00cbd14aee46279c33dc80925c37"
 
 [[package]]
 name = "lazy_static"
-version = "1.5.0"
+version = "1.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"
+checksum = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"
 dependencies = [
- "spin 0.9.8",
+ "spin 0.5.2",
 ]
 
 [[package]]
@@ -5198,34 +5271,15 @@ dependencies = [
 
 [[package]]
 name = "libc"
-version = "0.2.156"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a5f43f184355eefb8d17fc948dbecf6c13be3c141f20d834ae842193a448c72a"
-
-[[package]]
-name = "libffi"
-version = "3.2.0"
+version = "0.2.171"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ce826c243048e3d5cec441799724de52e2d42f820468431fc3fceee2341871e2"
-dependencies = [
- "libc",
- "libffi-sys",
-]
-
-[[package]]
-name = "libffi-sys"
-version = "2.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f36115160c57e8529781b4183c2bb51fdc1f6d6d1ed345591d84be7703befb3c"
-dependencies = [
- "cc",
-]
+checksum = "c19937216e9d3aa9956d9bb8dfc0b0c8beb6058fc4f7a4dc4d850edf86a237d6"
 
 [[package]]
 name = "libloading"
-version = "0.8.5"
+version = "0.8.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4979f22fdb869068da03c9f7528f8297c6fd2606bc3a4affe42e6a823fdb8da4"
+checksum = "0c2a198fb6b0eada2a8df47933734e6d35d350665a33a3593d7164fa52c75c19"
 dependencies = [
  "cfg-if",
  "windows-targets 0.52.6",
@@ -5257,7 +5311,7 @@ dependencies = [
  "multiaddr",
  "pin-project",
  "rw-stream-sink",
- "thiserror",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
@@ -5286,14 +5340,15 @@ dependencies = [
 
 [[package]]
 name = "libp2p-core"
-version = "0.41.3"
+version = "0.41.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a5a8920cbd8540059a01950c1e5c96ea8d89eb50c51cd366fc18bdf540a6e48f"
+checksum = "8130a8269e65a2554d55131c770bdf4bcd94d2b8d4efb24ca23699be65066c05"
 dependencies = [
  "either",
  "fnv",
  "futures",
  "futures-timer",
+ "instant",
  "libp2p-identity",
  "multiaddr",
  "multihash",
@@ -5305,11 +5360,10 @@ dependencies = [
  "rand 0.8.5",
  "rw-stream-sink",
  "smallvec",
- "thiserror",
+ "thiserror 1.0.61",
  "tracing",
  "unsigned-varint 0.8.0",
  "void",
- "web-time",
 ]
 
 [[package]]
@@ -5327,7 +5381,7 @@ dependencies = [
  "quick-protobuf",
  "rand 0.8.5",
  "sha2 0.10.8",
- "thiserror",
+ "thiserror 1.0.61",
  "tracing",
  "zeroize",
 ]
@@ -5371,9 +5425,9 @@ version = "0.1.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "libc",
- "redox_syscall 0.5.3",
+ "redox_syscall 0.5.1",
 ]
 
 [[package]]
@@ -5445,6 +5499,12 @@ version = "0.4.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89"
 
+[[package]]
+name = "linux-raw-sys"
+version = "0.9.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"
+
 [[package]]
 name = "litemap"
 version = "0.7.3"
@@ -5463,9 +5523,9 @@ dependencies = [
 
 [[package]]
 name = "log"
-version = "0.4.22"
+version = "0.4.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24"
+checksum = "90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c"
 
 [[package]]
 name = "log-report-layer"
@@ -5473,17 +5533,30 @@ version = "0.1.0"
 source = "git+https://github.com/SorellaLabs/log-report-layer#7f7be4d600ee46662eb521f1667e2a0f627f65c0"
 dependencies = [
  "eyre",
- "reqwest 0.12.5",
+ "reqwest 0.12.9",
  "tokio",
  "tracing",
  "tracing-subscriber",
 ]
 
+[[package]]
+name = "loom"
+version = "0.7.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "419e0dc8046cb947daa77eb95ae174acfbddb7673b4151f56d1eed8e93fbfaca"
+dependencies = [
+ "cfg-if",
+ "generator",
+ "scoped-tls",
+ "tracing",
+ "tracing-subscriber",
+]
+
 [[package]]
 name = "lru"
-version = "0.12.4"
+version = "0.12.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "37ee39891760e7d94734f6f63fedc29a2e4a152f836120753a72503f09fcf904"
+checksum = "d3262e75e648fce39813cb56ac41f3c3e3f65217ebf3844d818d1f9398cfb0dc"
 dependencies = [
  "hashbrown 0.14.5",
 ]
@@ -5499,19 +5572,18 @@ dependencies = [
 
 [[package]]
 name = "lz4"
-version = "1.26.0"
+version = "1.28.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "958b4caa893816eea05507c20cfe47574a43d9a697138a7872990bba8a0ece68"
+checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
 dependencies = [
- "libc",
  "lz4-sys",
 ]
 
 [[package]]
 name = "lz4-sys"
-version = "1.10.0"
+version = "1.11.1+lz4-1.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "109de74d5d2353660401699a4174a4ff23fcc649caf553df71933c7fb45ad868"
+checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
 dependencies = [
  "cc",
  "libc",
@@ -5537,9 +5609,9 @@ dependencies = [
 
 [[package]]
 name = "malachite"
-version = "0.4.14"
+version = "0.4.22"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0b6ea071913d15f7e0566bc4768aae3918906ea77f0abbb387ca7c0dc9303f90"
+checksum = "2fbdf9cb251732db30a7200ebb6ae5d22fe8e11397364416617d2c2cf0c51cb5"
 dependencies = [
  "malachite-base",
  "malachite-float",
@@ -5549,9 +5621,9 @@ dependencies = [
 
 [[package]]
 name = "malachite-base"
-version = "0.4.14"
+version = "0.4.22"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "44c817c713ff9f16e06cfdc23baa3fecf1b71eaaac714816a98a560f4e350aa6"
+checksum = "5ea0ed76adf7defc1a92240b5c36d5368cfe9251640dcce5bd2d0b7c1fd87aeb"
 dependencies = [
  "hashbrown 0.14.5",
  "itertools 0.11.0",
@@ -5561,9 +5633,9 @@ dependencies = [
 
 [[package]]
 name = "malachite-float"
-version = "0.4.14"
+version = "0.4.22"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c4fc2c9c0893bae56d0690c01df3117e116edb08fe18a06b4c5337e60bf526d3"
+checksum = "af9d20db1c73759c1377db7b27575df6f2eab7368809dd62c0a715dc1bcc39f7"
 dependencies = [
  "itertools 0.11.0",
  "malachite-base",
@@ -5574,9 +5646,9 @@ dependencies = [
 
 [[package]]
 name = "malachite-nz"
-version = "0.4.14"
+version = "0.4.22"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "603729facf62429736ac17a9fc9fe1bf7e0eb8bde3da3b18cc2b6153150464d5"
+checksum = "34a79feebb2bc9aa7762047c8e5495269a367da6b5a90a99882a0aeeac1841f7"
 dependencies = [
  "itertools 0.11.0",
  "libm",
@@ -5586,9 +5658,9 @@ dependencies = [
 
 [[package]]
 name = "malachite-q"
-version = "0.4.14"
+version = "0.4.22"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c73844ccbf0e9baaf34d4a6d187f0d6a925ce8e74ef37a67d238e7d65529b38c"
+checksum = "50f235d5747b1256b47620f5640c2a17a88c7569eebdf27cd9cb130e1a619191"
 dependencies = [
  "itertools 0.11.0",
  "malachite-base",
@@ -5611,12 +5683,6 @@ dependencies = [
  "regex-automata 0.1.10",
 ]
 
-[[package]]
-name = "matches"
-version = "0.1.10"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2532096657941c2fea9c289d370a250971c689d4f143798ff67113ec042024a5"
-
 [[package]]
 name = "matrixmultiply"
 version = "0.3.9"
@@ -5629,9 +5695,9 @@ dependencies = [
 
 [[package]]
 name = "memchr"
-version = "2.7.4"
+version = "2.7.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3"
+checksum = "6d0d8b92cd8358e8d229c11df9358decae64d137c5be540952c5ca7b25aea768"
 
 [[package]]
 name = "memmap2"
@@ -5662,49 +5728,33 @@ dependencies = [
 
 [[package]]
 name = "metrics"
-version = "0.21.1"
+version = "0.22.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fde3af1a009ed76a778cb84fdef9e7dbbdf5775ae3e4cc1f434a6a307f6f76c5"
+checksum = "2be3cbd384d4e955b231c895ce10685e3d8260c5ccffae898c96c723b0772835"
 dependencies = [
  "ahash",
- "metrics-macros",
  "portable-atomic",
 ]
 
 [[package]]
 name = "metrics-exporter-prometheus"
-version = "0.12.1"
+version = "0.14.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8a4964177ddfdab1e3a2b37aec7cf320e14169abb0ed73999f558136409178d5"
+checksum = "5d58e362dc7206e9456ddbcdbd53c71ba441020e62104703075a69151e38d85f"
 dependencies = [
- "base64 0.21.7",
- "hyper 0.14.30",
- "indexmap 1.9.3",
- "ipnet",
+ "base64 0.22.1",
+ "indexmap 2.9.0",
  "metrics",
  "metrics-util",
- "quanta 0.11.1",
- "thiserror",
- "tokio",
- "tracing",
-]
-
-[[package]]
-name = "metrics-macros"
-version = "0.7.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "38b4faf00617defe497754acde3024865bc143d44a86799b24e191ecff91354f"
-dependencies = [
- "proc-macro2",
- "quote",
- "syn 2.0.74",
+ "quanta",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
 name = "metrics-process"
-version = "1.0.14"
+version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6aa2a67e2580fbeba4d5a96e659945981e700a383b4cea1432e0cfc18f58c5da"
+checksum = "e7d8f5027620bf43b86e2c8144beea1e4323aec39241f5eae59dee54f79c6a29"
 dependencies = [
  "libproc",
  "mach2",
@@ -5712,24 +5762,24 @@ dependencies = [
  "once_cell",
  "procfs",
  "rlimit",
- "windows",
+ "windows 0.56.0",
 ]
 
 [[package]]
 name = "metrics-util"
-version = "0.15.0"
+version = "0.16.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "111cb375987443c3de8d503580b536f77dc8416d32db62d9456db5d93bd7ac47"
+checksum = "8b07a5eb561b8cbc16be2d216faf7757f9baf3bfb94dbb0fae3df8387a5bb47f"
 dependencies = [
- "aho-corasick 0.7.20",
+ "aho-corasick",
  "crossbeam-epoch",
  "crossbeam-utils",
- "hashbrown 0.13.2",
- "indexmap 1.9.3",
+ "hashbrown 0.14.5",
+ "indexmap 2.9.0",
  "metrics",
  "num_cpus",
- "ordered-float 3.9.2",
- "quanta 0.11.1",
+ "ordered-float 4.2.0",
+ "quanta",
  "radix_trie",
  "sketches-ddsketch",
 ]
@@ -5742,9 +5792,9 @@ checksum = "6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a"
 
 [[package]]
 name = "mime_guess"
-version = "2.0.5"
+version = "2.0.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f7c44f8e672c00fe5308fa235f821cb4198414e1c77935c1ab6948d3fd78550e"
+checksum = "4192263c238a5f0d0c6bfd21f336a313a4ce1c450542449ca191bb657b4642ef"
 dependencies = [
  "mime",
  "unicase",
@@ -5758,9 +5808,9 @@ checksum = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"
 
 [[package]]
 name = "miniz_oxide"
-version = "0.7.4"
+version = "0.7.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b8a240ddb74feaf34a79a7add65a741f3167852fba007066dcac1ca548d89c08"
+checksum = "87dfd01fe195c66b572b37921ad8803d010623c0aca821bea2302239d155cdae"
 dependencies = [
  "adler",
 ]
@@ -5783,18 +5833,6 @@ dependencies = [
  "windows-sys 0.48.0",
 ]
 
-[[package]]
-name = "mio"
-version = "1.0.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "80e04d1dcff3aae0704555fe5fee3bcfaf3d1fdf8a7e521d5b9d2b42acb52cec"
-dependencies = [
- "hermit-abi 0.3.9",
- "libc",
- "wasi 0.11.0+wasi-snapshot-preview1",
- "windows-sys 0.52.0",
-]
-
 [[package]]
 name = "modular-bitfield"
 version = "0.11.2"
@@ -5818,21 +5856,20 @@ dependencies = [
 
 [[package]]
 name = "moka"
-version = "0.12.8"
+version = "0.12.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "32cf62eb4dd975d2dde76432fb1075c49e3ee2331cf36f1f8fd4b66550d32b6f"
+checksum = "a9321642ca94a4282428e6ea4af8cc2ca4eac48ac7a6a4ea8f33f76d0ce70926"
 dependencies = [
  "crossbeam-channel",
  "crossbeam-epoch",
  "crossbeam-utils",
- "once_cell",
+ "loom",
  "parking_lot 0.12.3",
- "quanta 0.12.3",
+ "portable-atomic",
  "rustc_version 0.4.0",
  "smallvec",
  "tagptr",
- "thiserror",
- "triomphe",
+ "thiserror 1.0.61",
  "uuid",
 ]
 
@@ -5949,9 +5986,9 @@ dependencies = [
 
 [[package]]
 name = "native-tls"
-version = "0.2.12"
+version = "0.2.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a8614eb2c83d59d1c8cc974dd3f920198647674a0a035e1af1fa58707e317466"
+checksum = "87de3442987e9dbec73158d5c715e7ad9072fda936bb03d19d7fa10e00520f0e"
 dependencies = [
  "libc",
  "log",
@@ -6049,9 +6086,9 @@ dependencies = [
 
 [[package]]
 name = "num-bigint"
-version = "0.4.6"
+version = "0.4.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a5e44f723f1133c9deac646763579fdb3ac745e418f2a7af9cd0c431da1f20b9"
+checksum = "c165a9ab64cf766f73521c0dd2cfdff64f488b8f0b3e621face3462d3db536d7"
 dependencies = [
  "num-integer",
  "num-traits",
@@ -6120,29 +6157,29 @@ version = "1.16.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43"
 dependencies = [
- "hermit-abi 0.3.9",
+ "hermit-abi",
  "libc",
 ]
 
 [[package]]
 name = "num_enum"
-version = "0.7.3"
+version = "0.7.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4e613fc340b2220f734a8595782c551f1250e969d87d3be1ae0579e8d4065179"
+checksum = "02339744ee7253741199f897151b38e72257d13802d4ee837285cc2990a90845"
 dependencies = [
  "num_enum_derive",
 ]
 
 [[package]]
 name = "num_enum_derive"
-version = "0.7.3"
+version = "0.7.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "af1844ef2428cc3e1cb900be36181049ef3d3193c63e43026cfe202983b27a56"
+checksum = "681030a937600a36906c185595136d26abfebb4aa9c65701cefcaf8578bb982b"
 dependencies = [
  "proc-macro-crate",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -6167,7 +6204,6 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "95f06be0417d97f81fe4e5c86d7d01b392655a9cac9c19a848aa033e18937b23"
 dependencies = [
  "alloy-rlp",
- "arbitrary",
  "const-hex",
  "proptest",
  "serde",
@@ -6176,9 +6212,9 @@ dependencies = [
 
 [[package]]
 name = "object"
-version = "0.32.2"
+version = "0.36.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a6a622008b6e321afc04970976f62ee297fdbaa6f95318ca343e3eebb9648441"
+checksum = "576dfe1fc8f9df304abb159d767a29d0476f7750fbf8aa7ad07816004a207434"
 dependencies = [
  "memchr",
 ]
@@ -6191,9 +6227,9 @@ checksum = "3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92"
 
 [[package]]
 name = "oorandom"
-version = "11.1.4"
+version = "11.1.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b410bbe7e14ab526a0e86877eb47c6996a2bd7746f027ba551028c925390e4e9"
+checksum = "0ab1bc2a289d34bd04a330323ac98a1b4bc82c9d9fcb1e66b63caa84da26b575"
 
 [[package]]
 name = "opaque-debug"
@@ -6203,11 +6239,11 @@ checksum = "c08d65885ee38876c4f86fa503fb49d7b507c2b62552df7c70b2fce627e06381"
 
 [[package]]
 name = "openssl"
-version = "0.10.66"
+version = "0.10.72"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9529f4786b70a3e8c61e11179af17ab6188ad8d0ded78c5529441ed39d4bd9c1"
+checksum = "fedfea7d58a1f73118430a55da6a286e7b044961736ce96a16a17068ea25e5da"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "cfg-if",
  "foreign-types",
  "libc",
@@ -6224,7 +6260,7 @@ checksum = "a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -6235,9 +6271,9 @@ checksum = "ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf"
 
 [[package]]
 name = "openssl-sys"
-version = "0.9.103"
+version = "0.9.107"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7f9e8deee91df40a943c71b917e5874b951d32a802526c85721ce3b776c929d6"
+checksum = "8288979acd84749c744a9014b4382d42b8f7b2592847b5afb2ed29e5d16ede07"
 dependencies = [
  "cc",
  "libc",
@@ -6262,9 +6298,9 @@ dependencies = [
 
 [[package]]
 name = "ordered-float"
-version = "3.9.2"
+version = "4.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f1e1c390732d15f1d48471625cd92d154e66db2c56645e29a9cd26f4699f72dc"
+checksum = "a76df7075c7d4d01fdcb46c912dd17fba5b60c78ea480b475f2b6ab6f666584e"
 dependencies = [
  "num-traits",
 ]
@@ -6313,18 +6349,10 @@ dependencies = [
 ]
 
 [[package]]
-name = "parity-tokio-ipc"
-version = "0.9.0"
+name = "parking"
+version = "2.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9981e32fb75e004cc148f5fb70342f393830e0a4aa62e3cc93b50976218d42b6"
-dependencies = [
- "futures",
- "libc",
- "log",
- "rand 0.7.3",
- "tokio",
- "winapi",
-]
+checksum = "bb813b8af86854136c6922af0598d719255ecb2179515e6e7730d468f05c9cae"
 
 [[package]]
 name = "parking_lot"
@@ -6369,7 +6397,7 @@ checksum = "1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8"
 dependencies = [
  "cfg-if",
  "libc",
- "redox_syscall 0.5.3",
+ "redox_syscall 0.5.1",
  "smallvec",
  "windows-targets 0.52.6",
 ]
@@ -6431,16 +6459,16 @@ checksum = "57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a"
 
 [[package]]
 name = "pathfinding"
-version = "4.10.0"
+version = "4.14.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "39103a901800b5711b9076f2474da1e7412f804c11a0f3b4e8dd3b1e59c58b12"
+checksum = "59ac35caa284c08f3721fb33c2741b5f763decaf42d080c8a6a722154347017e"
 dependencies = [
  "deprecate-until",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "integer-sqrt",
  "num-traits",
- "rustc-hash 2.0.0",
- "thiserror",
+ "rustc-hash 2.1.1",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
@@ -6452,6 +6480,16 @@ dependencies = [
  "base64 0.13.1",
 ]
 
+[[package]]
+name = "pem"
+version = "3.0.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e459365e590736a54c3fa561947c84837534b8e9af6fc5bf781307e82658fae"
+dependencies = [
+ "base64 0.22.1",
+ "serde",
+]
+
 [[package]]
 name = "percent-encoding"
 version = "2.3.1"
@@ -6460,12 +6498,12 @@ checksum = "e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e"
 
 [[package]]
 name = "pest"
-version = "2.7.11"
+version = "2.7.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95"
+checksum = "560131c633294438da9f7c4b08189194b20946c8274c6b9e38881a7874dc8ee8"
 dependencies = [
  "memchr",
- "thiserror",
+ "thiserror 1.0.61",
  "ucd-trie",
 ]
 
@@ -6476,7 +6514,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b4c5cc86750666a3ed20bdaf5ca2a0344f9c67674cae0515bec2da16fbaa47db"
 dependencies = [
  "fixedbitset",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
 ]
 
 [[package]]
@@ -6492,6 +6530,16 @@ dependencies = [
  "wyhash",
 ]
 
+[[package]]
+name = "pharos"
+version = "0.5.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e9567389417feee6ce15dd6527a8a1ecac205ef62c2932bcf3d9f6fc5b78b414"
+dependencies = [
+ "futures",
+ "rustc_version 0.4.0",
+]
+
 [[package]]
 name = "phf"
 version = "0.11.2"
@@ -6504,9 +6552,9 @@ dependencies = [
 
 [[package]]
 name = "phf_codegen"
-version = "0.11.2"
+version = "0.11.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e8d39688d359e6b34654d328e262234662d16cc0f60ec8dcbe5e718709342a5a"
+checksum = "aef8048c789fa5e851558d709946d6d79a8ff88c0440c587967f8e94bfb1216a"
 dependencies = [
  "phf_generator",
  "phf_shared",
@@ -6532,7 +6580,7 @@ dependencies = [
  "phf_shared",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -6561,7 +6609,7 @@ checksum = "2f38a4412a78282e09a2cf38d195ea5420d15ba0602cb375210efbc877243965"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -6576,6 +6624,17 @@ version = "0.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"
 
+[[package]]
+name = "piper"
+version = "0.2.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ae1d5c74c9876f070d3e8fd503d748c7d974c3e48da8f41350fa5222ef9b4391"
+dependencies = [
+ "atomic-waker",
+ "fastrand",
+ "futures-io",
+]
+
 [[package]]
 name = "pkcs8"
 version = "0.10.2"
@@ -6601,6 +6660,12 @@ dependencies = [
  "array-init-cursor",
 ]
 
+[[package]]
+name = "platforms"
+version = "3.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "db23d408679286588f4d4644f965003d056e3dd5abcaaa938116871d7ce2fee7"
+
 [[package]]
 name = "plotters"
 version = "0.3.6"
@@ -6717,14 +6782,14 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "6f20d3c227186f74aa3c228c64ef72f5a15617322fed30b4323eaf53b25f8e7b"
 dependencies = [
  "ahash",
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "bytemuck",
  "chrono",
  "chrono-tz",
  "comfy-table",
  "either",
  "hashbrown 0.14.5",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "num-traits",
  "once_cell",
  "polars-arrow",
@@ -6737,7 +6802,7 @@ dependencies = [
  "rayon",
  "regex",
  "smartstring",
- "thiserror",
+ "thiserror 1.0.61",
  "version_check",
  "xxhash-rust",
 ]
@@ -6751,7 +6816,7 @@ dependencies = [
  "polars-arrow-format",
  "regex",
  "simdutf8",
- "thiserror",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
@@ -6791,7 +6856,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c27df26a19d3092298d31d47614ad84dc330c106e38aa8cd53727cd91c07cf56"
 dependencies = [
  "ahash",
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "glob",
  "once_cell",
  "polars-arrow",
@@ -6822,7 +6887,7 @@ dependencies = [
  "either",
  "hashbrown 0.14.5",
  "hex",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "memchr",
  "num-traits",
  "polars-arrow",
@@ -6964,11 +7029,11 @@ dependencies = [
  "ahash",
  "bytemuck",
  "hashbrown 0.14.5",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "num-traits",
  "once_cell",
  "polars-error",
- "raw-cpuid 11.1.0",
+ "raw-cpuid",
  "rayon",
  "smartstring",
  "sysinfo",
@@ -6995,9 +7060,9 @@ dependencies = [
 
 [[package]]
 name = "portable-atomic"
-version = "1.7.0"
+version = "1.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "da544ee218f0d287a911e9c99a39a8c9bc8fcad3cb8db5959940044ecfc67265"
+checksum = "7170ef9988bc169ba16dd36a7fa041e5c4cbeb6a35b76d4c03daded371eae7c0"
 
 [[package]]
 name = "powerfmt"
@@ -7022,17 +7087,14 @@ dependencies = [
  "smallvec",
  "symbolic-demangle",
  "tempfile",
- "thiserror",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
 name = "ppv-lite86"
-version = "0.2.20"
+version = "0.2.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04"
-dependencies = [
- "zerocopy",
-]
+checksum = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de"
 
 [[package]]
 name = "prettyplease"
@@ -7041,7 +7103,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "5f12335488a2f3b0a83b14edad48dca9879ce89b2edd10e80237e4e852dd645e"
 dependencies = [
  "proc-macro2",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -7055,7 +7117,7 @@ dependencies = [
  "is-terminal",
  "lazy_static",
  "term",
- "unicode-width",
+ "unicode-width 0.1.13",
 ]
 
 [[package]]
@@ -7101,7 +7163,7 @@ dependencies = [
  "redefined",
  "reth-codecs",
  "reth-db",
- "reth-primitives",
+ "reth-primitives-traits",
  "reth-rpc-types",
  "reth-tracing-ext",
  "rkyv",
@@ -7111,7 +7173,7 @@ dependencies = [
  "serde_repr",
  "serde_with",
  "strum 0.25.0",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tracing",
 ]
@@ -7164,9 +7226,9 @@ dependencies = [
 
 [[package]]
 name = "proc-macro2"
-version = "1.0.86"
+version = "1.0.94"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77"
+checksum = "a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84"
 dependencies = [
  "unicode-ident",
 ]
@@ -7177,13 +7239,13 @@ version = "0.16.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "731e0d9356b0c25f16f33b5be79b1c57b562f141ebfcdb0ad8ac2c13a24293b4"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "chrono",
  "flate2",
  "hex",
  "lazy_static",
  "procfs-core",
- "rustix",
+ "rustix 0.38.34",
 ]
 
 [[package]]
@@ -7192,7 +7254,7 @@ version = "0.16.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "2d3554923a69f4ce04c4a754260c338f505ce22642d3830e049a399fc2059a29"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "chrono",
  "hex",
 ]
@@ -7209,18 +7271,18 @@ dependencies = [
  "memchr",
  "parking_lot 0.12.3",
  "protobuf",
- "thiserror",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
 name = "proptest"
-version = "1.5.0"
+version = "1.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b4c2511913b88df1637da85cc8d96ec8e43a3f8bb8ccb71ee1ac240d6f3df58d"
+checksum = "31b476131c3c86cb68032fdc5cb6d5a1045e3e42d96b69fa599fd77701e1f5bf"
 dependencies = [
  "bit-set",
  "bit-vec",
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "lazy_static",
  "num-traits",
  "rand 0.8.5",
@@ -7269,43 +7331,6 @@ dependencies = [
  "syn 1.0.109",
 ]
 
-[[package]]
-name = "public-ip"
-version = "0.2.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7b4c40db5262d93298c363a299f8bc1b3a956a78eecddba3bc0e58b76e2f419a"
-dependencies = [
- "dns-lookup",
- "futures-core",
- "futures-util",
- "http 0.2.12",
- "hyper 0.14.30",
- "hyper-system-resolver",
- "pin-project-lite",
- "thiserror",
- "tokio",
- "tracing",
- "tracing-futures",
- "trust-dns-client",
- "trust-dns-proto 0.20.4",
-]
-
-[[package]]
-name = "quanta"
-version = "0.11.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a17e662a7a8291a865152364c20c7abc5e60486ab2001e8ec10b24862de0b9ab"
-dependencies = [
- "crossbeam-utils",
- "libc",
- "mach2",
- "once_cell",
- "raw-cpuid 10.7.0",
- "wasi 0.11.0+wasi-snapshot-preview1",
- "web-sys",
- "winapi",
-]
-
 [[package]]
 name = "quanta"
 version = "0.12.3"
@@ -7315,7 +7340,7 @@ dependencies = [
  "crossbeam-utils",
  "libc",
  "once_cell",
- "raw-cpuid 11.1.0",
+ "raw-cpuid",
  "wasi 0.11.0+wasi-snapshot-preview1",
  "web-sys",
  "winapi",
@@ -7336,6 +7361,58 @@ dependencies = [
  "byteorder",
 ]
 
+[[package]]
+name = "quinn"
+version = "0.11.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "62e96808277ec6f97351a2380e6c25114bc9e67037775464979f3037c92d05ef"
+dependencies = [
+ "bytes",
+ "pin-project-lite",
+ "quinn-proto",
+ "quinn-udp",
+ "rustc-hash 2.1.1",
+ "rustls",
+ "socket2 0.5.7",
+ "thiserror 2.0.12",
+ "tokio",
+ "tracing",
+]
+
+[[package]]
+name = "quinn-proto"
+version = "0.11.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a2fe5ef3495d7d2e377ff17b1a8ce2ee2ec2a18cde8b6ad6619d65d0701c135d"
+dependencies = [
+ "bytes",
+ "getrandom 0.2.15",
+ "rand 0.8.5",
+ "ring 0.17.8",
+ "rustc-hash 2.1.1",
+ "rustls",
+ "rustls-pki-types",
+ "slab",
+ "thiserror 2.0.12",
+ "tinyvec",
+ "tracing",
+ "web-time",
+]
+
+[[package]]
+name = "quinn-udp"
+version = "0.5.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "541d0f57c6ec747a90738a52741d3221f7960e8ac2f0ff4b1a63680e033b4ab5"
+dependencies = [
+ "cfg_aliases",
+ "libc",
+ "once_cell",
+ "socket2 0.5.7",
+ "tracing",
+ "windows-sys 0.59.0",
+]
+
 [[package]]
 name = "quote"
 version = "1.0.36"
@@ -7453,20 +7530,11 @@ dependencies = [
 
 [[package]]
 name = "raw-cpuid"
-version = "10.7.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6c297679cb867470fa8c9f67dbba74a78d78e3e98d7cf2b08d6d71540f797332"
-dependencies = [
- "bitflags 1.3.2",
-]
-
-[[package]]
-name = "raw-cpuid"
-version = "11.1.0"
+version = "11.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cb9ee317cfe3fbd54b36a511efc1edd42e216903c9cd575e686dd68a2ba90d8d"
+checksum = "e29830cbb1290e404f24c73af91c5d8d631ce7e128691e9477556b540cd01ecd"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
 ]
 
 [[package]]
@@ -7498,7 +7566,7 @@ dependencies = [
 [[package]]
 name = "redefined"
 version = "0.1.0"
-source = "git+https://github.com/SorellaLabs/redefined#d00ea479224a2d50ed525aec93591cf497b3f852"
+source = "git+https://github.com/SorellaLabs/redefined#de906bb869bd588566b4078f9dc237448ecca9b8"
 dependencies = [
  "redefined-derive",
 ]
@@ -7506,15 +7574,15 @@ dependencies = [
 [[package]]
 name = "redefined-derive"
 version = "0.1.0"
-source = "git+https://github.com/SorellaLabs/redefined#d00ea479224a2d50ed525aec93591cf497b3f852"
+source = "git+https://github.com/SorellaLabs/redefined#de906bb869bd588566b4078f9dc237448ecca9b8"
 dependencies = [
  "futures",
  "proc-macro2",
  "quote",
- "reqwest 0.12.5",
+ "reqwest 0.12.9",
  "serde",
  "serde_json",
- "syn 2.0.74",
+ "syn 2.0.100",
  "tokio",
 ]
 
@@ -7529,11 +7597,11 @@ dependencies = [
 
 [[package]]
 name = "redox_syscall"
-version = "0.5.3"
+version = "0.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2a908a6e00f1fdd0dfd9c0eb08ce85126f6d8bbda50017e74bc4a4b7d4a926a4"
+checksum = "469052894dcb553421e483e4209ee581a45100d31b4018de03e5a7ad86374a7e"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
 ]
 
 [[package]]
@@ -7544,16 +7612,16 @@ checksum = "bd283d9651eeda4b2a83a43c1c91b266c40fd76ecd39a50a8c630ae69dc72891"
 dependencies = [
  "getrandom 0.2.15",
  "libredox",
- "thiserror",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
 name = "regex"
-version = "1.10.6"
+version = "1.10.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4219d74c6b67a3654a9fbebc4b419e22126d13d2f3c4a07ee0cb61ff79a79619"
+checksum = "b91213439dad192326a0d7c6ee3955910425f441d7038e0d6933b0aec5c4517f"
 dependencies = [
- "aho-corasick 1.1.3",
+ "aho-corasick",
  "memchr",
  "regex-automata 0.4.7",
  "regex-syntax 0.8.4",
@@ -7574,7 +7642,7 @@ version = "0.4.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "38caf58cc5ef2fed281f89292ef23f6365465ed9a41b7a7754eb4e26496c92df"
 dependencies = [
- "aho-corasick 1.1.3",
+ "aho-corasick",
  "memchr",
  "regex-syntax 0.8.4",
 ]
@@ -7635,7 +7703,7 @@ dependencies = [
  "h2 0.3.26",
  "http 0.2.12",
  "http-body 0.4.6",
- "hyper 0.14.30",
+ "hyper 0.14.32",
  "hyper-tls 0.5.0",
  "ipnet",
  "js-sys",
@@ -7651,7 +7719,7 @@ dependencies = [
  "serde_json",
  "serde_urlencoded",
  "sync_wrapper 0.1.2",
- "system-configuration",
+ "system-configuration 0.5.1",
  "tokio",
  "tokio-native-tls",
  "tower-service",
@@ -7659,14 +7727,14 @@ dependencies = [
  "wasm-bindgen",
  "wasm-bindgen-futures",
  "web-sys",
- "winreg 0.50.0",
+ "winreg",
 ]
 
 [[package]]
 name = "reqwest"
-version = "0.12.5"
+version = "0.12.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c7d6d2a27d57148378eb5e111173f4276ad26340ecc5c49a4a2152167a2d6a37"
+checksum = "a77c62af46e79de0a562e1a9849205ffcb7fc1238876e9bd743357570e04046f"
 dependencies = [
  "base64 0.22.1",
  "bytes",
@@ -7676,10 +7744,10 @@ dependencies = [
  "futures-util",
  "h2 0.4.5",
  "http 1.1.0",
- "http-body 1.0.1",
+ "http-body 1.0.0",
  "http-body-util",
- "hyper 1.4.1",
- "hyper-rustls 0.27.2",
+ "hyper 1.6.0",
+ "hyper-rustls",
  "hyper-tls 0.6.0",
  "hyper-util",
  "ipnet",
@@ -7690,14 +7758,18 @@ dependencies = [
  "once_cell",
  "percent-encoding",
  "pin-project-lite",
- "rustls-pemfile 2.1.3",
+ "quinn",
+ "rustls",
+ "rustls-pemfile 2.1.2",
+ "rustls-pki-types",
  "serde",
  "serde_json",
  "serde_urlencoded",
- "sync_wrapper 1.0.1",
- "system-configuration",
+ "sync_wrapper 1.0.2",
+ "system-configuration 0.6.1",
  "tokio",
  "tokio-native-tls",
+ "tokio-rustls",
  "tokio-util",
  "tower-service",
  "url",
@@ -7705,7 +7777,8 @@ dependencies = [
  "wasm-bindgen-futures",
  "wasm-streams",
  "web-sys",
- "winreg 0.52.0",
+ "webpki-roots",
+ "windows-registry",
 ]
 
 [[package]]
@@ -7720,18 +7793,23 @@ dependencies = [
 
 [[package]]
 name = "reth-auto-seal-consensus"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "futures-util",
  "reth-beacon-consensus",
+ "reth-consensus",
  "reth-engine-primitives",
  "reth-evm",
- "reth-interfaces",
+ "reth-execution-errors",
+ "reth-network-p2p",
+ "reth-network-peers",
  "reth-primitives",
  "reth-provider",
  "reth-revm",
+ "reth-rpc-types",
  "reth-stages-api",
+ "reth-tokio-util",
  "reth-transaction-pool",
  "tokio",
  "tokio-stream",
@@ -7740,17 +7818,16 @@ dependencies = [
 
 [[package]]
 name = "reth-basic-payload-builder"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-rlp",
  "futures-core",
  "futures-util",
  "metrics",
- "reth-engine-primitives",
- "reth-interfaces",
  "reth-metrics",
  "reth-payload-builder",
+ "reth-payload-primitives",
  "reth-primitives",
  "reth-provider",
  "reth-revm",
@@ -7763,17 +7840,21 @@ dependencies = [
 
 [[package]]
 name = "reth-beacon-consensus"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "futures",
+ "itertools 0.12.1",
  "metrics",
- "reth-beacon-consensus-core",
- "reth-db",
+ "reth-blockchain-tree-api",
+ "reth-db-api",
  "reth-engine-primitives",
- "reth-interfaces",
+ "reth-errors",
+ "reth-ethereum-consensus",
  "reth-metrics",
+ "reth-network-p2p",
  "reth-payload-builder",
+ "reth-payload-primitives",
  "reth-payload-validator",
  "reth-primitives",
  "reth-provider",
@@ -7784,138 +7865,225 @@ dependencies = [
  "reth-tasks",
  "reth-tokio-util",
  "schnellru",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tracing",
 ]
 
 [[package]]
-name = "reth-beacon-consensus-core"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
-dependencies = [
- "reth-consensus-common",
- "reth-interfaces",
- "reth-primitives",
-]
-
-[[package]]
-name = "reth-blockchain-tree"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+name = "reth-blockchain-tree"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "aquamarine",
  "linked_hash_set",
- "lru",
  "metrics",
  "parking_lot 0.12.3",
+ "reth-blockchain-tree-api",
+ "reth-consensus",
  "reth-db",
- "reth-interfaces",
+ "reth-db-api",
+ "reth-evm",
+ "reth-execution-errors",
  "reth-metrics",
+ "reth-network",
  "reth-primitives",
  "reth-provider",
+ "reth-prune-types",
+ "reth-revm",
  "reth-stages-api",
+ "reth-storage-errors",
  "reth-trie",
  "reth-trie-parallel",
  "tokio",
  "tracing",
 ]
 
+[[package]]
+name = "reth-blockchain-tree-api"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "reth-consensus",
+ "reth-execution-errors",
+ "reth-primitives",
+ "reth-storage-errors",
+ "thiserror 1.0.61",
+]
+
 [[package]]
 name = "reth-codecs"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
+ "alloy-consensus",
  "alloy-eips",
+ "alloy-genesis",
  "alloy-primitives",
  "bytes",
+ "modular-bitfield",
  "reth-codecs-derive",
+ "serde",
 ]
 
 [[package]]
 name = "reth-codecs-derive"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "convert_case 0.6.0",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "reth-config"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
+ "confy",
  "humantime-serde",
- "reth-discv4",
- "reth-net-nat",
  "reth-network",
- "reth-primitives",
- "secp256k1 0.27.0",
+ "reth-prune-types",
  "serde",
 ]
 
+[[package]]
+name = "reth-consensus"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "auto_impl",
+ "reth-primitives",
+ "thiserror-no-std",
+]
+
 [[package]]
 name = "reth-consensus-common"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
- "reth-interfaces",
+ "reth-consensus",
  "reth-primitives",
- "reth-provider",
+]
+
+[[package]]
+name = "reth-consensus-debug-client"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "alloy-consensus",
+ "alloy-eips",
+ "alloy-provider",
+ "auto_impl",
+ "eyre",
+ "futures",
+ "reqwest 0.12.9",
+ "reth-node-api",
+ "reth-node-core",
+ "reth-rpc-api",
+ "reth-rpc-builder",
+ "reth-rpc-types",
+ "reth-tracing",
+ "ringbuffer",
+ "serde",
+ "tokio",
 ]
 
 [[package]]
 name = "reth-db"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
- "arbitrary",
  "bytes",
  "derive_more",
  "eyre",
  "metrics",
- "modular-bitfield",
- "once_cell",
  "page_size",
- "parity-scale-codec",
  "paste",
- "proptest",
- "proptest-derive",
- "reth-codecs",
- "reth-interfaces",
+ "reth-db-api",
+ "reth-fs-util",
  "reth-libmdbx",
  "reth-metrics",
  "reth-nippy-jar",
  "reth-primitives",
+ "reth-prune-types",
+ "reth-stages-types",
+ "reth-storage-errors",
  "reth-tracing",
+ "reth-trie-common",
  "rustc-hash 1.1.0",
  "serde",
- "strum 0.26.3",
+ "strum 0.26.2",
+ "sysinfo",
  "tempfile",
- "thiserror",
+ "thiserror 1.0.61",
+]
+
+[[package]]
+name = "reth-db-api"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "arbitrary",
+ "bytes",
+ "derive_more",
+ "metrics",
+ "modular-bitfield",
+ "parity-scale-codec",
+ "proptest",
+ "proptest-derive",
+ "reth-codecs",
+ "reth-primitives",
+ "reth-prune-types",
+ "reth-stages-types",
+ "reth-storage-errors",
+ "reth-trie-common",
+ "serde",
+]
+
+[[package]]
+name = "reth-db-common"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "eyre",
+ "reth-codecs",
+ "reth-config",
+ "reth-db",
+ "reth-db-api",
+ "reth-etl",
+ "reth-primitives",
+ "reth-provider",
+ "reth-stages-types",
+ "reth-trie",
+ "serde",
+ "serde_json",
+ "thiserror 1.0.61",
+ "tracing",
 ]
 
 [[package]]
 name = "reth-discv4"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
+ "alloy-primitives",
  "alloy-rlp",
  "discv5",
  "enr",
  "generic-array",
  "parking_lot 0.12.3",
+ "reth-ethereum-forks",
  "reth-net-common",
  "reth-net-nat",
- "reth-primitives",
- "rlp",
- "secp256k1 0.27.0",
+ "reth-network-peers",
+ "schnellru",
+ "secp256k1 0.28.2",
  "serde",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tracing",
@@ -7923,8 +8091,8 @@ dependencies = [
 
 [[package]]
 name = "reth-discv5"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-rlp",
  "derive_more",
@@ -7937,31 +8105,32 @@ dependencies = [
  "multiaddr",
  "rand 0.8.5",
  "reth-metrics",
+ "reth-network-peers",
  "reth-primitives",
- "rlp",
- "secp256k1 0.27.0",
- "thiserror",
+ "secp256k1 0.28.2",
+ "thiserror 1.0.61",
  "tokio",
  "tracing",
 ]
 
 [[package]]
 name = "reth-dns-discovery"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
- "alloy-rlp",
+ "alloy-primitives",
  "data-encoding",
  "enr",
  "linked_hash_set",
  "parking_lot 0.12.3",
+ "reth-ethereum-forks",
  "reth-net-common",
- "reth-primitives",
+ "reth-network-peers",
  "schnellru",
- "secp256k1 0.27.0",
+ "secp256k1 0.28.2",
  "serde",
  "serde_with",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tracing",
@@ -7970,8 +8139,8 @@ dependencies = [
 
 [[package]]
 name = "reth-downloaders"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-rlp",
  "futures",
@@ -7981,12 +8150,14 @@ dependencies = [
  "pin-project",
  "rayon",
  "reth-config",
- "reth-interfaces",
+ "reth-consensus",
  "reth-metrics",
+ "reth-network-p2p",
+ "reth-network-peers",
  "reth-primitives",
  "reth-provider",
  "reth-tasks",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tokio-util",
@@ -7995,10 +8166,11 @@ dependencies = [
 
 [[package]]
 name = "reth-ecies"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "aes 0.8.4",
+ "alloy-primitives",
  "alloy-rlp",
  "block-padding",
  "byteorder",
@@ -8006,18 +8178,16 @@ dependencies = [
  "concat-kdf",
  "ctr 0.9.2",
  "digest 0.10.7",
- "educe",
  "futures",
  "generic-array",
  "hmac 0.12.1",
  "pin-project",
  "rand 0.8.5",
- "reth-net-common",
- "reth-primitives",
- "secp256k1 0.27.0",
+ "reth-network-peers",
+ "secp256k1 0.28.2",
  "sha2 0.10.8",
  "sha3",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tokio-util",
@@ -8027,35 +8197,47 @@ dependencies = [
 
 [[package]]
 name = "reth-engine-primitives"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
+ "reth-payload-primitives",
  "reth-primitives",
- "reth-rpc-types",
  "serde",
- "thiserror",
+]
+
+[[package]]
+name = "reth-errors"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "reth-blockchain-tree-api",
+ "reth-consensus",
+ "reth-execution-errors",
+ "reth-fs-util",
+ "reth-storage-errors",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
 name = "reth-eth-wire"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-rlp",
  "bytes",
  "derive_more",
  "futures",
- "metrics",
  "pin-project",
  "reth-codecs",
  "reth-discv4",
  "reth-ecies",
  "reth-eth-wire-types",
  "reth-metrics",
+ "reth-network-peers",
  "reth-primitives",
  "serde",
  "snap",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tokio-util",
@@ -8064,25 +8246,37 @@ dependencies = [
 
 [[package]]
 name = "reth-eth-wire-types"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-rlp",
  "bytes",
  "derive_more",
- "reth-codecs",
+ "reth-codecs-derive",
  "reth-primitives",
  "serde",
- "thiserror",
+ "thiserror 1.0.61",
+]
+
+[[package]]
+name = "reth-ethereum-consensus"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "reth-consensus",
+ "reth-consensus-common",
+ "reth-primitives",
+ "tracing",
 ]
 
 [[package]]
 name = "reth-ethereum-engine-primitives"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-rlp",
  "reth-engine-primitives",
+ "reth-payload-primitives",
  "reth-primitives",
  "reth-rpc-types",
  "reth-rpc-types-compat",
@@ -8093,8 +8287,8 @@ dependencies = [
 
 [[package]]
 name = "reth-ethereum-forks"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-chains",
  "alloy-primitives",
@@ -8104,15 +8298,18 @@ dependencies = [
  "proptest",
  "proptest-derive",
  "serde",
- "thiserror",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
 name = "reth-ethereum-payload-builder"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "reth-basic-payload-builder",
+ "reth-errors",
+ "reth-evm",
+ "reth-evm-ethereum",
  "reth-payload-builder",
  "reth-primitives",
  "reth-provider",
@@ -8124,50 +8321,85 @@ dependencies = [
 
 [[package]]
 name = "reth-etl"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "rayon",
- "reth-db",
+ "reth-db-api",
  "tempfile",
 ]
 
 [[package]]
 name = "reth-evm"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
- "reth-interfaces",
+ "auto_impl",
+ "futures-util",
+ "reth-execution-errors",
+ "reth-execution-types",
  "reth-primitives",
+ "reth-prune-types",
+ "reth-storage-errors",
  "revm",
  "revm-primitives",
 ]
 
 [[package]]
 name = "reth-evm-ethereum"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
+ "alloy-eips",
+ "alloy-sol-types",
+ "reth-ethereum-consensus",
  "reth-evm",
- "reth-interfaces",
+ "reth-execution-types",
  "reth-primitives",
- "reth-provider",
+ "reth-prune-types",
  "reth-revm",
  "revm-primitives",
- "tracing",
+]
+
+[[package]]
+name = "reth-execution-errors"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "alloy-eips",
+ "alloy-primitives",
+ "reth-consensus",
+ "reth-prune-types",
+ "reth-storage-errors",
+ "revm-primitives",
+ "thiserror-no-std",
+]
+
+[[package]]
+name = "reth-execution-types"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "reth-execution-errors",
+ "reth-primitives",
+ "reth-trie",
+ "revm",
 ]
 
 [[package]]
 name = "reth-exex"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "eyre",
  "metrics",
  "reth-config",
+ "reth-exex-types",
  "reth-metrics",
+ "reth-network",
  "reth-node-api",
  "reth-node-core",
+ "reth-payload-builder",
  "reth-primitives",
  "reth-provider",
  "reth-tasks",
@@ -8177,38 +8409,36 @@ dependencies = [
 ]
 
 [[package]]
-name = "reth-interfaces"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+name = "reth-exex-types"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
- "auto_impl",
- "clap",
- "futures",
- "parking_lot 0.12.3",
- "rand 0.8.5",
- "reth-eth-wire-types",
- "reth-network-api",
- "reth-primitives",
- "reth-rpc-types",
- "secp256k1 0.27.0",
- "thiserror",
- "tokio",
- "tracing",
+ "alloy-primitives",
+]
+
+[[package]]
+name = "reth-fs-util"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "serde_json",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
 name = "reth-ipc"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "async-trait",
  "bytes",
  "futures",
+ "futures-util",
+ "interprocess",
  "jsonrpsee",
- "parity-tokio-ipc",
  "pin-project",
  "serde_json",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tokio-util",
@@ -8218,26 +8448,25 @@ dependencies = [
 
 [[package]]
 name = "reth-libmdbx"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "byteorder",
  "dashmap",
  "derive_more",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "libc",
- "libffi",
  "parking_lot 0.12.3",
  "reth-mdbx-sys",
- "thiserror",
+ "thiserror 1.0.61",
  "tracing",
 ]
 
 [[package]]
 name = "reth-mdbx-sys"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "bindgen",
  "cc",
@@ -8246,8 +8475,8 @@ dependencies = [
 
 [[package]]
 name = "reth-metrics"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "futures",
  "metrics",
@@ -8258,44 +8487,41 @@ dependencies = [
 
 [[package]]
 name = "reth-metrics-derive"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "once_cell",
  "proc-macro2",
  "quote",
  "regex",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "reth-net-common"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
- "pin-project",
- "reth-primitives",
+ "alloy-primitives",
  "tokio",
 ]
 
 [[package]]
 name = "reth-net-nat"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
- "igd-next",
- "pin-project-lite",
- "public-ip",
+ "futures-util",
+ "reqwest 0.12.9",
  "serde_with",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
- "tracing",
 ]
 
 [[package]]
 name = "reth-network"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-rlp",
  "aquamarine",
@@ -8305,23 +8531,23 @@ dependencies = [
  "enr",
  "fnv",
  "futures",
- "futures-test",
  "humantime-serde",
  "itertools 0.12.1",
- "linked_hash_set",
  "metrics",
  "parking_lot 0.12.3",
  "pin-project",
  "rand 0.8.5",
+ "reth-consensus",
  "reth-discv4",
  "reth-discv5",
  "reth-dns-discovery",
  "reth-ecies",
  "reth-eth-wire",
- "reth-interfaces",
  "reth-metrics",
  "reth-net-common",
  "reth-network-api",
+ "reth-network-p2p",
+ "reth-network-peers",
  "reth-primitives",
  "reth-provider",
  "reth-rpc-types",
@@ -8329,11 +8555,11 @@ dependencies = [
  "reth-tokio-util",
  "reth-transaction-pool",
  "schnellru",
- "secp256k1 0.27.0",
+ "secp256k1 0.28.2",
  "serde",
  "serde_json",
  "smallvec",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tokio-util",
@@ -8342,23 +8568,56 @@ dependencies = [
 
 [[package]]
 name = "reth-network-api"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
+ "alloy-primitives",
  "enr",
- "reth-discv4",
  "reth-eth-wire",
- "reth-primitives",
+ "reth-network-peers",
  "reth-rpc-types",
  "serde",
- "thiserror",
+ "thiserror 1.0.61",
+ "tokio",
+]
+
+[[package]]
+name = "reth-network-p2p"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "auto_impl",
+ "futures",
+ "reth-consensus",
+ "reth-eth-wire-types",
+ "reth-network-api",
+ "reth-network-peers",
+ "reth-primitives",
+ "reth-storage-errors",
+ "thiserror 1.0.61",
+ "tokio",
+ "tracing",
+]
+
+[[package]]
+name = "reth-network-peers"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "alloy-primitives",
+ "alloy-rlp",
+ "enr",
+ "secp256k1 0.28.2",
+ "serde_with",
+ "thiserror 1.0.61",
  "tokio",
+ "url",
 ]
 
 [[package]]
 name = "reth-nippy-jar"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "anyhow",
  "bincode 1.3.3",
@@ -8367,24 +8626,25 @@ dependencies = [
  "lz4_flex",
  "memmap2 0.7.1",
  "ph",
- "reth-primitives",
+ "reth-fs-util",
  "serde",
  "sucds",
- "thiserror",
+ "thiserror 1.0.61",
  "tracing",
  "zstd",
 ]
 
 [[package]]
 name = "reth-node-api"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
- "reth-db",
+ "reth-db-api",
  "reth-engine-primitives",
  "reth-evm",
  "reth-network",
  "reth-payload-builder",
+ "reth-payload-primitives",
  "reth-provider",
  "reth-tasks",
  "reth-transaction-pool",
@@ -8392,11 +8652,13 @@ dependencies = [
 
 [[package]]
 name = "reth-node-builder"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "aquamarine",
+ "backon",
  "confy",
+ "discv5",
  "eyre",
  "fdlimit",
  "futures",
@@ -8405,11 +8667,16 @@ dependencies = [
  "reth-beacon-consensus",
  "reth-blockchain-tree",
  "reth-config",
+ "reth-consensus",
+ "reth-consensus-debug-client",
  "reth-db",
+ "reth-db-api",
+ "reth-db-common",
  "reth-downloaders",
+ "reth-evm",
  "reth-exex",
- "reth-interfaces",
  "reth-network",
+ "reth-network-p2p",
  "reth-node-api",
  "reth-node-core",
  "reth-node-events",
@@ -8417,78 +8684,92 @@ dependencies = [
  "reth-primitives",
  "reth-provider",
  "reth-prune",
- "reth-revm",
  "reth-rpc",
+ "reth-rpc-builder",
  "reth-rpc-engine-api",
+ "reth-rpc-layer",
+ "reth-rpc-types",
  "reth-stages",
  "reth-static-file",
  "reth-tasks",
  "reth-tracing",
  "reth-transaction-pool",
+ "secp256k1 0.28.2",
  "tokio",
+ "tokio-stream",
 ]
 
 [[package]]
 name = "reth-node-core"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
+ "alloy-rpc-types-engine",
  "clap",
  "const-str",
  "derive_more",
  "dirs-next",
- "discv5",
  "eyre",
  "futures",
+ "http 1.1.0",
  "humantime",
- "hyper 0.14.30",
+ "jsonrpsee",
  "metrics",
  "metrics-exporter-prometheus",
  "metrics-process",
  "metrics-util",
  "once_cell",
+ "pin-project",
  "procfs",
  "rand 0.8.5",
  "reth-beacon-consensus",
  "reth-config",
  "reth-consensus-common",
  "reth-db",
+ "reth-db-api",
  "reth-discv4",
+ "reth-discv5",
  "reth-engine-primitives",
- "reth-evm",
- "reth-interfaces",
+ "reth-fs-util",
  "reth-metrics",
  "reth-net-nat",
  "reth-network",
- "reth-network-api",
+ "reth-network-p2p",
  "reth-primitives",
  "reth-provider",
+ "reth-prune-types",
  "reth-rpc",
  "reth-rpc-api",
- "reth-rpc-builder",
- "reth-rpc-engine-api",
+ "reth-rpc-server-types",
  "reth-rpc-types",
  "reth-rpc-types-compat",
+ "reth-stages-types",
+ "reth-storage-errors",
  "reth-tasks",
  "reth-tracing",
  "reth-transaction-pool",
- "secp256k1 0.27.0",
+ "secp256k1 0.28.2",
  "serde",
  "serde_json",
  "shellexpand",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
+ "tokio-util",
+ "tower",
  "tracing",
  "vergen",
 ]
 
 [[package]]
 name = "reth-node-ethereum"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "eyre",
+ "reth-auto-seal-consensus",
  "reth-basic-payload-builder",
+ "reth-beacon-consensus",
+ "reth-consensus",
  "reth-ethereum-engine-primitives",
  "reth-ethereum-payload-builder",
  "reth-evm-ethereum",
@@ -8502,20 +8783,20 @@ dependencies = [
 
 [[package]]
 name = "reth-node-events"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "futures",
  "humantime",
  "pin-project",
  "reth-beacon-consensus",
- "reth-db",
- "reth-interfaces",
+ "reth-db-api",
  "reth-network",
  "reth-network-api",
  "reth-primitives",
  "reth-provider",
  "reth-prune",
+ "reth-rpc-types",
  "reth-stages",
  "reth-static-file",
  "tokio",
@@ -8524,29 +8805,44 @@ dependencies = [
 
 [[package]]
 name = "reth-payload-builder"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "futures-util",
  "metrics",
  "reth-engine-primitives",
+ "reth-errors",
  "reth-ethereum-engine-primitives",
- "reth-interfaces",
  "reth-metrics",
+ "reth-payload-primitives",
  "reth-primitives",
  "reth-provider",
  "reth-rpc-types",
  "reth-transaction-pool",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tracing",
 ]
 
+[[package]]
+name = "reth-payload-primitives"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "reth-errors",
+ "reth-primitives",
+ "reth-rpc-types",
+ "reth-transaction-pool",
+ "serde",
+ "thiserror 1.0.61",
+ "tokio",
+]
+
 [[package]]
 name = "reth-payload-validator"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "reth-primitives",
  "reth-rpc-types",
@@ -8555,52 +8851,67 @@ dependencies = [
 
 [[package]]
 name = "reth-primitives"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-chains",
+ "alloy-consensus",
  "alloy-eips",
  "alloy-genesis",
  "alloy-primitives",
  "alloy-rlp",
- "alloy-trie",
+ "alloy-rpc-types",
  "arbitrary",
  "byteorder",
  "bytes",
  "c-kzg",
- "cfg-if",
  "derive_more",
- "enr",
- "itertools 0.12.1",
  "modular-bitfield",
- "nybbles",
  "once_cell",
  "proptest",
  "proptest-derive",
  "rayon",
  "reth-codecs",
  "reth-ethereum-forks",
- "reth-rpc-types",
+ "reth-network-peers",
+ "reth-primitives-traits",
+ "reth-static-file-types",
+ "reth-trie-common",
  "revm",
  "revm-primitives",
  "roaring",
- "secp256k1 0.27.0",
+ "secp256k1 0.28.2",
  "serde",
  "serde_json",
- "serde_with",
- "sha2 0.10.8",
- "strum 0.26.3",
  "tempfile",
- "thiserror",
+ "thiserror 1.0.61",
  "zstd",
 ]
 
+[[package]]
+name = "reth-primitives-traits"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "alloy-consensus",
+ "alloy-genesis",
+ "alloy-primitives",
+ "arbitrary",
+ "bytes",
+ "modular-bitfield",
+ "proptest",
+ "proptest-derive",
+ "reth-codecs",
+ "serde",
+]
+
 [[package]]
 name = "reth-provider"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-rlp",
+ "alloy-rpc-types-engine",
  "auto_impl",
  "dashmap",
  "itertools 0.12.1",
@@ -8608,16 +8919,25 @@ dependencies = [
  "parking_lot 0.12.3",
  "pin-project",
  "rayon",
+ "reth-blockchain-tree-api",
  "reth-codecs",
  "reth-db",
+ "reth-db-api",
+ "reth-errors",
  "reth-evm",
- "reth-interfaces",
+ "reth-execution-types",
+ "reth-fs-util",
  "reth-metrics",
+ "reth-network-p2p",
  "reth-nippy-jar",
  "reth-primitives",
+ "reth-prune-types",
+ "reth-stages-types",
+ "reth-storage-api",
+ "reth-storage-errors",
  "reth-trie",
  "revm",
- "strum 0.26.3",
+ "strum 0.26.2",
  "tokio",
  "tokio-stream",
  "tracing",
@@ -8625,44 +8945,63 @@ dependencies = [
 
 [[package]]
 name = "reth-prune"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
+ "alloy-primitives",
  "itertools 0.12.1",
  "metrics",
  "rayon",
  "reth-config",
  "reth-db",
- "reth-interfaces",
+ "reth-db-api",
+ "reth-errors",
+ "reth-exex-types",
  "reth-metrics",
  "reth-primitives",
  "reth-provider",
+ "reth-prune-types",
  "reth-tokio-util",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
- "tokio-stream",
  "tracing",
 ]
 
+[[package]]
+name = "reth-prune-types"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "alloy-primitives",
+ "bytes",
+ "derive_more",
+ "modular-bitfield",
+ "reth-codecs",
+ "serde",
+ "thiserror 1.0.61",
+]
+
 [[package]]
 name = "reth-revm"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
+ "alloy-eips",
+ "alloy-rlp",
  "reth-consensus-common",
- "reth-evm",
- "reth-interfaces",
+ "reth-execution-errors",
  "reth-primitives",
- "reth-provider",
+ "reth-prune-types",
+ "reth-storage-api",
+ "reth-storage-errors",
  "revm",
- "revm-inspectors",
  "tracing",
 ]
 
 [[package]]
 name = "reth-rpc"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-dyn-abi",
  "alloy-primitives",
@@ -8672,25 +9011,27 @@ dependencies = [
  "derive_more",
  "dyn-clone",
  "futures",
- "http 0.2.12",
- "http-body 0.4.6",
- "hyper 0.14.30",
+ "http 1.1.0",
+ "http-body 1.0.0",
+ "hyper 1.6.0",
  "jsonrpsee",
- "jsonwebtoken",
+ "jsonwebtoken 8.3.0",
  "metrics",
  "parking_lot 0.12.3",
  "pin-project",
  "rand 0.8.5",
  "reth-consensus-common",
+ "reth-errors",
  "reth-evm",
- "reth-interfaces",
  "reth-metrics",
  "reth-network-api",
+ "reth-network-peers",
  "reth-primitives",
  "reth-provider",
  "reth-revm",
  "reth-rpc-api",
  "reth-rpc-engine-api",
+ "reth-rpc-server-types",
  "reth-rpc-types",
  "reth-rpc-types-compat",
  "reth-tasks",
@@ -8699,10 +9040,10 @@ dependencies = [
  "revm-inspectors",
  "revm-primitives",
  "schnellru",
- "secp256k1 0.27.0",
+ "secp256k1 0.28.2",
  "serde",
  "serde_json",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tower",
@@ -8712,11 +9053,12 @@ dependencies = [
 
 [[package]]
 name = "reth-rpc-api"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "jsonrpsee",
  "reth-engine-primitives",
+ "reth-network-peers",
  "reth-primitives",
  "reth-rpc-types",
  "serde",
@@ -8725,10 +9067,10 @@ dependencies = [
 
 [[package]]
 name = "reth-rpc-builder"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
- "hyper 0.14.30",
+ "http 1.1.0",
  "jsonrpsee",
  "metrics",
  "pin-project",
@@ -8737,14 +9079,16 @@ dependencies = [
  "reth-ipc",
  "reth-metrics",
  "reth-network-api",
+ "reth-node-core",
  "reth-provider",
  "reth-rpc",
  "reth-rpc-api",
+ "reth-rpc-layer",
+ "reth-rpc-server-types",
  "reth-tasks",
  "reth-transaction-pool",
  "serde",
- "strum 0.26.3",
- "thiserror",
+ "thiserror 1.0.61",
  "tower",
  "tower-http",
  "tracing",
@@ -8752,8 +9096,8 @@ dependencies = [
 
 [[package]]
 name = "reth-rpc-engine-api"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "async-trait",
  "jsonrpsee-core",
@@ -8761,61 +9105,77 @@ dependencies = [
  "metrics",
  "reth-beacon-consensus",
  "reth-engine-primitives",
- "reth-interfaces",
+ "reth-evm",
  "reth-metrics",
  "reth-payload-builder",
+ "reth-payload-primitives",
  "reth-primitives",
- "reth-provider",
  "reth-rpc-api",
  "reth-rpc-types",
  "reth-rpc-types-compat",
+ "reth-storage-api",
  "reth-tasks",
  "serde",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tracing",
 ]
 
+[[package]]
+name = "reth-rpc-layer"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "alloy-rpc-types-engine",
+ "http 1.1.0",
+ "jsonrpsee-http-client",
+ "pin-project",
+ "tower",
+ "tracing",
+]
+
+[[package]]
+name = "reth-rpc-server-types"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "alloy-primitives",
+ "serde",
+ "strum 0.26.2",
+]
+
 [[package]]
 name = "reth-rpc-types"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
- "alloy-genesis",
  "alloy-primitives",
- "alloy-rlp",
  "alloy-rpc-types",
  "alloy-rpc-types-anvil",
+ "alloy-rpc-types-beacon",
  "alloy-rpc-types-engine",
  "alloy-rpc-types-trace",
- "arbitrary",
- "enr",
  "jsonrpsee-types",
- "proptest",
- "proptest-derive",
- "secp256k1 0.27.0",
  "serde",
  "serde_json",
- "serde_with",
- "thiserror",
- "url",
 ]
 
 [[package]]
 name = "reth-rpc-types-compat"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-rlp",
  "alloy-rpc-types",
  "reth-primitives",
  "reth-rpc-types",
+ "reth-trie-common",
 ]
 
 [[package]]
 name = "reth-stages"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "futures-util",
  "itertools 0.12.1",
@@ -8823,62 +9183,122 @@ dependencies = [
  "rayon",
  "reth-codecs",
  "reth-config",
+ "reth-consensus",
  "reth-db",
+ "reth-db-api",
  "reth-etl",
+ "reth-evm",
  "reth-exex",
- "reth-interfaces",
+ "reth-network-p2p",
  "reth-primitives",
  "reth-provider",
+ "reth-prune-types",
+ "reth-revm",
  "reth-stages-api",
+ "reth-storage-errors",
  "reth-trie",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tracing",
 ]
 
 [[package]]
 name = "reth-stages-api"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "aquamarine",
  "auto_impl",
  "futures-util",
  "metrics",
- "reth-db",
- "reth-interfaces",
+ "reth-consensus",
+ "reth-db-api",
+ "reth-errors",
  "reth-metrics",
+ "reth-network-p2p",
  "reth-primitives",
  "reth-provider",
+ "reth-prune",
+ "reth-stages-types",
  "reth-static-file",
  "reth-tokio-util",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
- "tokio-stream",
  "tracing",
 ]
 
+[[package]]
+name = "reth-stages-types"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "alloy-primitives",
+ "bytes",
+ "modular-bitfield",
+ "reth-codecs",
+ "reth-trie-common",
+ "serde",
+]
+
 [[package]]
 name = "reth-static-file"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "parking_lot 0.12.3",
  "rayon",
  "reth-db",
- "reth-interfaces",
+ "reth-db-api",
  "reth-nippy-jar",
  "reth-primitives",
  "reth-provider",
+ "reth-prune-types",
+ "reth-storage-errors",
  "reth-tokio-util",
- "tokio-stream",
  "tracing",
 ]
 
+[[package]]
+name = "reth-static-file-types"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "alloy-primitives",
+ "derive_more",
+ "serde",
+ "strum 0.26.2",
+]
+
+[[package]]
+name = "reth-storage-api"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "auto_impl",
+ "reth-db-api",
+ "reth-execution-types",
+ "reth-primitives",
+ "reth-prune-types",
+ "reth-stages-types",
+ "reth-storage-errors",
+ "reth-trie",
+ "revm",
+]
+
+[[package]]
+name = "reth-storage-errors"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "reth-fs-util",
+ "reth-primitives",
+ "thiserror-no-std",
+]
+
 [[package]]
 name = "reth-tasks"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "dyn-clone",
  "futures-util",
@@ -8886,7 +9306,7 @@ dependencies = [
  "pin-project",
  "rayon",
  "reth-metrics",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tracing",
  "tracing-futures",
@@ -8894,17 +9314,18 @@ dependencies = [
 
 [[package]]
 name = "reth-tokio-util"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "tokio",
  "tokio-stream",
+ "tracing",
 ]
 
 [[package]]
 name = "reth-tracing"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "clap",
  "eyre",
@@ -8925,7 +9346,7 @@ dependencies = [
  "alloy-rpc-types-trace",
  "alloy-sol-types",
  "async-trait",
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "brontes-core",
  "brontes-macros",
  "brontes-types",
@@ -8936,10 +9357,10 @@ dependencies = [
  "reth-beacon-consensus",
  "reth-blockchain-tree",
  "reth-db",
- "reth-interfaces",
  "reth-network-api",
  "reth-node-ethereum",
  "reth-primitives",
+ "reth-primitives-traits",
  "reth-provider",
  "reth-revm",
  "reth-rpc",
@@ -8959,30 +9380,30 @@ dependencies = [
 
 [[package]]
 name = "reth-transaction-pool"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-rlp",
  "aquamarine",
  "auto_impl",
- "bitflags 2.6.0",
- "fnv",
+ "bitflags 2.5.0",
  "futures-util",
  "itertools 0.12.1",
  "metrics",
  "parking_lot 0.12.3",
  "paste",
  "rand 0.8.5",
- "reth-eth-wire",
+ "reth-eth-wire-types",
+ "reth-fs-util",
  "reth-metrics",
  "reth-primitives",
  "reth-provider",
  "reth-tasks",
- "revm",
+ "rustc-hash 1.1.0",
  "schnellru",
  "serde",
  "smallvec",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tokio-stream",
  "tracing",
@@ -8990,26 +9411,49 @@ dependencies = [
 
 [[package]]
 name = "reth-trie"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-rlp",
  "auto_impl",
  "derive_more",
  "metrics",
+ "rayon",
  "reth-db",
- "reth-interfaces",
+ "reth-db-api",
+ "reth-execution-errors",
  "reth-metrics",
  "reth-primitives",
+ "reth-stages-types",
+ "reth-trie-common",
  "revm",
- "thiserror",
  "tracing",
 ]
 
+[[package]]
+name = "reth-trie-common"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
+dependencies = [
+ "alloy-consensus",
+ "alloy-genesis",
+ "alloy-primitives",
+ "alloy-rlp",
+ "alloy-trie",
+ "bytes",
+ "derive_more",
+ "itertools 0.12.1",
+ "nybbles",
+ "reth-codecs",
+ "reth-primitives-traits",
+ "revm-primitives",
+ "serde",
+]
+
 [[package]]
 name = "reth-trie-parallel"
-version = "0.2.0-beta.6"
-source = "git+https://github.com/paradigmxyz/reth?rev=ac29b4b#ac29b4b73be382caf2a2462d426e6bad75e18af9"
+version = "1.0.0-rc.1"
+source = "git+https://github.com/paradigmxyz/reth?rev=560080e#560080ee1990a14194f4e6da969f5a7e1b95a236"
 dependencies = [
  "alloy-rlp",
  "derive_more",
@@ -9017,22 +9461,22 @@ dependencies = [
  "metrics",
  "rayon",
  "reth-db",
- "reth-interfaces",
+ "reth-db-api",
+ "reth-execution-errors",
  "reth-metrics",
  "reth-primitives",
  "reth-provider",
  "reth-tasks",
  "reth-trie",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tracing",
 ]
 
 [[package]]
 name = "revm"
-version = "8.0.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "72a454c1c650b2b2e23f0c461af09e6c31e1d15e1cbebe905a701c46b8a50afc"
+version = "9.0.0"
+source = "git+https://github.com/bluealloy/revm?rev=a28a543#a28a5439b9cfb7494cbd670da10cbedcfe6c5854"
 dependencies = [
  "auto_impl",
  "cfg-if",
@@ -9046,11 +9490,10 @@ dependencies = [
 [[package]]
 name = "revm-inspectors"
 version = "0.1.0"
-source = "git+https://github.com/paradigmxyz/evm-inspectors?rev=dc614ee#dc614eec85ee4d4af938865b121fad58ec7dad5f"
+source = "git+https://github.com/paradigmxyz/revm-inspectors?rev=70e721d#70e721d9d4af486bfc7bd3115251cde78414b78d"
 dependencies = [
  "alloy-primitives",
  "alloy-rpc-types",
- "alloy-rpc-types-trace",
  "alloy-sol-types",
  "anstyle",
  "boa_engine",
@@ -9058,14 +9501,13 @@ dependencies = [
  "colorchoice",
  "revm",
  "serde_json",
- "thiserror",
+ "thiserror 1.0.61",
 ]
 
 [[package]]
 name = "revm-interpreter"
-version = "4.0.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d322f2730cd300e99d271a1704a2dfb8973d832428f5aa282aaa40e2473b5eec"
+version = "5.0.0"
+source = "git+https://github.com/bluealloy/revm?rev=a28a543#a28a5439b9cfb7494cbd670da10cbedcfe6c5854"
 dependencies = [
  "revm-primitives",
  "serde",
@@ -9073,30 +9515,29 @@ dependencies = [
 
 [[package]]
 name = "revm-precompile"
-version = "6.0.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "931f692f3f4fc72ec39d5d270f8e9d208c4a6008de7590ee96cf948e3b6d3f8d"
+version = "7.0.0"
+source = "git+https://github.com/bluealloy/revm?rev=a28a543#a28a5439b9cfb7494cbd670da10cbedcfe6c5854"
 dependencies = [
  "aurora-engine-modexp",
+ "blst",
  "c-kzg",
  "k256",
  "once_cell",
  "revm-primitives",
  "ripemd",
- "secp256k1 0.28.2",
+ "secp256k1 0.29.0",
  "sha2 0.10.8",
  "substrate-bn",
 ]
 
 [[package]]
 name = "revm-primitives"
-version = "3.1.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cbbc9640790cebcb731289afb7a7d96d16ad94afeb64b5d0b66443bd151e79d6"
+version = "4.0.0"
+source = "git+https://github.com/bluealloy/revm?rev=a28a543#a28a5439b9cfb7494cbd670da10cbedcfe6c5854"
 dependencies = [
  "alloy-primitives",
  "auto_impl",
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "bitvec",
  "c-kzg",
  "cfg-if",
@@ -9149,6 +9590,12 @@ dependencies = [
  "windows-sys 0.52.0",
 ]
 
+[[package]]
+name = "ringbuffer"
+version = "0.15.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3df6368f71f205ff9c33c076d170dd56ebf68e8161c733c0caa07a7a5509ed53"
+
 [[package]]
 name = "ripemd"
 version = "0.1.3"
@@ -9206,9 +9653,9 @@ dependencies = [
 
 [[package]]
 name = "roaring"
-version = "0.10.6"
+version = "0.10.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8f4b84ba6e838ceb47b41de5194a60244fac43d9fe03b71dbe8c5a201081d6d1"
+checksum = "7699249cc2c7d71939f30868f47e9d7add0bdc030d90ee10bfd16887ff8bb1c8"
 dependencies = [
  "bytemuck",
  "byteorder",
@@ -9274,9 +9721,9 @@ checksum = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"
 
 [[package]]
 name = "rustc-hash"
-version = "2.0.0"
+version = "2.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "583034fd73374156e66797ed8e5b0d5690409c9226b22d87cb7f19821c05d152"
+checksum = "357703d41365b4b27c590e3ed91eabb1b663f07c4c084095e60cbed4362dff0d"
 
 [[package]]
 name = "rustc-hex"
@@ -9308,72 +9755,49 @@ version = "0.38.34"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "errno",
  "libc",
- "linux-raw-sys",
+ "linux-raw-sys 0.4.14",
  "windows-sys 0.52.0",
 ]
 
 [[package]]
-name = "rustls"
-version = "0.21.12"
+name = "rustix"
+version = "1.0.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3f56a14d1f48b391359b22f731fd4bd7e43c97f3c50eee276f3aa09c94784d3e"
+checksum = "d97817398dd4bb2e6da002002db259209759911da105da92bec29ccb12cf58bf"
 dependencies = [
- "log",
- "ring 0.17.8",
- "rustls-webpki 0.101.7",
- "sct",
+ "bitflags 2.5.0",
+ "errno",
+ "libc",
+ "linux-raw-sys 0.9.4",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
 name = "rustls"
-version = "0.22.4"
+version = "0.23.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bf4ef73721ac7bcd79b2b315da7779d8fc09718c6b3d2d1b2d94850eb8c18432"
+checksum = "05cff451f60db80f490f3c182b77c35260baace73209e9cdbbe526bfe3a4d402"
 dependencies = [
  "log",
- "ring 0.17.8",
- "rustls-pki-types",
- "rustls-webpki 0.102.6",
- "subtle",
- "zeroize",
-]
-
-[[package]]
-name = "rustls"
-version = "0.23.12"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c58f8c84392efc0a126acce10fa59ff7b3d2ac06ab451a33f2741989b806b044"
-dependencies = [
  "once_cell",
+ "ring 0.17.8",
  "rustls-pki-types",
- "rustls-webpki 0.102.6",
+ "rustls-webpki",
  "subtle",
  "zeroize",
 ]
 
 [[package]]
 name = "rustls-native-certs"
-version = "0.6.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a9aace74cb666635c918e9c12bc0d348266037aa8eb599b5cba565709a8dff00"
-dependencies = [
- "openssl-probe",
- "rustls-pemfile 1.0.4",
- "schannel",
- "security-framework",
-]
-
-[[package]]
-name = "rustls-native-certs"
-version = "0.7.1"
+version = "0.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a88d6d420651b496bdd98684116959239430022a115c1240e6c3993be0b15fba"
+checksum = "8f1fb85efa936c42c6d5fc28d2629bb51e4b2f4b8a5211e297d599cc5a093792"
 dependencies = [
  "openssl-probe",
- "rustls-pemfile 2.1.3",
+ "rustls-pemfile 2.1.2",
  "rustls-pki-types",
  "schannel",
  "security-framework",
@@ -9390,9 +9814,9 @@ dependencies = [
 
 [[package]]
 name = "rustls-pemfile"
-version = "2.1.3"
+version = "2.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "196fe16b00e106300d3e45ecfcb764fa292a535d7326a29a5875c579c7417425"
+checksum = "29993a25686778eb88d4189742cd713c9bce943bc54251a33509dc63cbacf73d"
 dependencies = [
  "base64 0.22.1",
  "rustls-pki-types",
@@ -9400,25 +9824,45 @@ dependencies = [
 
 [[package]]
 name = "rustls-pki-types"
-version = "1.8.0"
+version = "1.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fc0a2ce646f8655401bb81e7927b812614bd5d91dbc968696be50603510fcaf0"
+checksum = "976295e77ce332211c0d24d92c0e83e50f5c5f046d11082cea19f3df13a3562d"
+dependencies = [
+ "web-time",
+]
 
 [[package]]
-name = "rustls-webpki"
-version = "0.101.7"
+name = "rustls-platform-verifier"
+version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8b6275d1ee7a1cd780b64aca7726599a1dbc893b1e64144529e55c3c2f745765"
+checksum = "b5f0d26fa1ce3c790f9590868f0109289a044acb954525f933e2aa3b871c157d"
 dependencies = [
- "ring 0.17.8",
- "untrusted 0.9.0",
+ "core-foundation",
+ "core-foundation-sys",
+ "jni",
+ "log",
+ "once_cell",
+ "rustls",
+ "rustls-native-certs",
+ "rustls-platform-verifier-android",
+ "rustls-webpki",
+ "security-framework",
+ "security-framework-sys",
+ "webpki-roots",
+ "winapi",
 ]
 
+[[package]]
+name = "rustls-platform-verifier-android"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "84e217e7fdc8466b5b35d30f8c0a30febd29173df4a3a0c2115d306b9c4117ad"
+
 [[package]]
 name = "rustls-webpki"
-version = "0.102.6"
+version = "0.102.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8e6b52d4fda176fd835fdc55a835d4a89b8499cad995885a21149d5ad62f852e"
+checksum = "ff448f7e92e913c4b7d4c6d8e4540a1724b319b4152b8aef6d4cf8339712b33e"
 dependencies = [
  "ring 0.17.8",
  "rustls-pki-types",
@@ -9468,9 +9912,9 @@ checksum = "ad97d4ce1560a5e27cec89519dc8300d1aa6035b099821261c651486a19e44d5"
 
 [[package]]
 name = "safe_arch"
-version = "0.7.2"
+version = "0.7.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c3460605018fdc9612bce72735cba0d27efbcd9904780d44c7e3a9948f96148a"
+checksum = "96b02de82ddbe1b636e6170c21be622223aea188ef2e139be0a5b219ec215323"
 dependencies = [
  "bytemuck",
 ]
@@ -9505,20 +9949,16 @@ dependencies = [
 ]
 
 [[package]]
-name = "scopeguard"
-version = "1.2.0"
+name = "scoped-tls"
+version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"
+checksum = "e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294"
 
 [[package]]
-name = "sct"
-version = "0.7.1"
+name = "scopeguard"
+version = "1.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "da046153aa2352493d6cb7da4b6e5c0c057d8a1d0a9aa8560baffdd945acd414"
-dependencies = [
- "ring 0.17.8",
- "untrusted 0.9.0",
-]
+checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"
 
 [[package]]
 name = "seahash"
@@ -9554,61 +9994,62 @@ dependencies = [
 
 [[package]]
 name = "secp256k1"
-version = "0.27.0"
+version = "0.28.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "25996b82292a7a57ed3508f052cfff8640d38d32018784acd714758b43da9c8f"
+checksum = "d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10"
 dependencies = [
  "rand 0.8.5",
- "secp256k1-sys 0.8.1",
+ "secp256k1-sys 0.9.2",
  "serde",
 ]
 
 [[package]]
 name = "secp256k1"
-version = "0.28.2"
+version = "0.29.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10"
+checksum = "0e0cc0f1cf93f4969faf3ea1c7d8a9faed25918d96affa959720823dfe86d4f3"
 dependencies = [
  "rand 0.8.5",
- "secp256k1-sys 0.9.2",
+ "secp256k1-sys 0.10.0",
 ]
 
 [[package]]
 name = "secp256k1-sys"
-version = "0.8.1"
+version = "0.9.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "70a129b9e9efbfb223753b9163c4ab3b13cff7fd9c7f010fbac25ab4099fa07e"
+checksum = "e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb"
 dependencies = [
  "cc",
 ]
 
 [[package]]
 name = "secp256k1-sys"
-version = "0.9.2"
+version = "0.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb"
+checksum = "1433bd67156263443f14d603720b082dd3121779323fce20cba2aa07b874bc1b"
 dependencies = [
  "cc",
 ]
 
 [[package]]
 name = "security-framework"
-version = "2.11.1"
+version = "2.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "897b2245f0b511c87893af39b033e5ca9cce68824c4d7e7630b5a1d339658d02"
+checksum = "c627723fd09706bacdb5cf41499e95098555af3c3c29d014dc3c458ef6be11c0"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "core-foundation",
  "core-foundation-sys",
  "libc",
+ "num-bigint",
  "security-framework-sys",
 ]
 
 [[package]]
 name = "security-framework-sys"
-version = "2.11.1"
+version = "2.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "75da29fe9b9b08fe9d6b22b5b4bcbc75d8db3aa31e639aa56bb62e9d46bfceaf"
+checksum = "317936bbbd05227752583946b9e66d7ce3b489f84e11a94a510b4437fef407d7"
 dependencies = [
  "core-foundation-sys",
  "libc",
@@ -9647,39 +10088,45 @@ version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f638d531eccd6e23b980caf34876660d38e265409d8e99b397ab71eb3612fad0"
 
+[[package]]
+name = "send_wrapper"
+version = "0.6.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cd0b0ec5f1c1ca621c432a25813d8d60c88abe6d3e08a3eb9cf37d97a0fe3d73"
+
 [[package]]
 name = "seq-macro"
-version = "0.3.5"
+version = "0.3.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a3f0bf26fd526d2a95683cd0f87bf103b8539e2ca1ef48ce002d67aad59aa0b4"
+checksum = "1bc711410fbe7399f390ca1c3b60ad0f53f80e95c5eb935e52268a0e2cd49acc"
 
 [[package]]
 name = "serde"
-version = "1.0.208"
+version = "1.0.219"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cff085d2cb684faa248efb494c39b68e522822ac0de72ccf08109abde717cfb2"
+checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
 dependencies = [
  "serde_derive",
 ]
 
 [[package]]
 name = "serde_bytes"
-version = "0.11.15"
+version = "0.11.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a"
+checksum = "8b8497c313fd43ab992087548117643f6fcd935cbf36f176ffda0aacf9591734"
 dependencies = [
  "serde",
 ]
 
 [[package]]
 name = "serde_derive"
-version = "1.0.208"
+version = "1.0.219"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "24008e81ff7613ed8e5ba0cfaf24e2c2f1e5b8a0495711e44fcd4882fca62bcf"
+checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -9695,33 +10142,32 @@ dependencies = [
 
 [[package]]
 name = "serde_json"
-version = "1.0.125"
+version = "1.0.117"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "83c8e735a073ccf5be70aa8066aa984eaf2fa000db6c8d0100ae605b366d31ed"
+checksum = "455182ea6142b14f93f4bc5320a2b31c1f266b66a4a5c858b013302a5d8cbfc3"
 dependencies = [
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "itoa",
- "memchr",
  "ryu",
  "serde",
 ]
 
 [[package]]
 name = "serde_repr"
-version = "0.1.19"
+version = "0.1.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6c64451ba24fc7a6a2d60fc75dd9c83c90903b19028d4eff35e88fc1e86564e9"
+checksum = "175ee3e80ae9982737ca543e96133087cbd9a485eecc3bc4de9c1a37b47ea59c"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "serde_spanned"
-version = "0.6.7"
+version = "0.6.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "eb5b1b31579f3811bf615c144393417496f152e12ac8b7663bf664f4a815306d"
+checksum = "79e674e01f999af37c49f70a6ede167a8a60b2503e56c5599532a65baa5969a0"
 dependencies = [
  "serde",
 ]
@@ -9740,15 +10186,15 @@ dependencies = [
 
 [[package]]
 name = "serde_with"
-version = "3.9.0"
+version = "3.8.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "69cecfa94848272156ea67b2b1a53f20fc7bc638c4a46d2f8abde08f05f4b857"
+checksum = "0ad483d2ab0149d5a5ebcd9972a3852711e0153d863bf5a5d0391d28883c4a20"
 dependencies = [
  "base64 0.22.1",
  "chrono",
  "hex",
  "indexmap 1.9.3",
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "serde",
  "serde_derive",
  "serde_json",
@@ -9758,14 +10204,14 @@ dependencies = [
 
 [[package]]
 name = "serde_with_macros"
-version = "3.9.0"
+version = "3.8.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a8fee4991ef4f274617a51ad4af30519438dacb2f56ac773b08a1922ff743350"
+checksum = "65569b702f41443e8bc8bbb1c5779bd0450bbe723b56198980e80ec45780bce2"
 dependencies = [
- "darling 0.20.10",
+ "darling",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -9790,27 +10236,25 @@ checksum = "91d129178576168c589c9ec973feedf7d3126c01ac2bf08795109aa35b69fb8f"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "sha-1"
-version = "0.9.8"
+version = "0.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "99cd6713db3cf16b6c84e06321e049a9b9f699826e16096d23bbcc44d15d51a6"
+checksum = "f5058ada175748e33390e40e872bd0fe59a19f265d0158daa551c5a88a76009c"
 dependencies = [
- "block-buffer 0.9.0",
  "cfg-if",
  "cpufeatures",
- "digest 0.9.0",
- "opaque-debug",
+ "digest 0.10.7",
 ]
 
 [[package]]
-name = "sha-1"
-version = "0.10.1"
+name = "sha1"
+version = "0.10.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f5058ada175748e33390e40e872bd0fe59a19f265d0158daa551c5a88a76009c"
+checksum = "e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba"
 dependencies = [
  "cfg-if",
  "cpufeatures",
@@ -9853,9 +10297,9 @@ dependencies = [
 
 [[package]]
 name = "sha3-asm"
-version = "0.1.3"
+version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "57d79b758b7cb2085612b11a235055e485605a5103faccdd633f35bd7aee69dd"
+checksum = "a9b57fd861253bff08bb1919e995f90ba8f4889de2726091c8876f3a4e823b40"
 dependencies = [
  "cc",
  "cfg-if",
@@ -9897,12 +10341,12 @@ dependencies = [
 
 [[package]]
 name = "signal-hook-mio"
-version = "0.2.4"
+version = "0.2.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "34db1a06d485c9142248b7a054f034b349b212551f3dfd19c94d45a754a217cd"
+checksum = "29ad2e15f37ec9a6cc544097b78a1ec90001e9f71b81338ca39f430adaca99af"
 dependencies = [
  "libc",
- "mio 0.8.11",
+ "mio",
  "signal-hook",
 ]
 
@@ -9940,9 +10384,9 @@ dependencies = [
 
 [[package]]
 name = "simdutf8"
-version = "0.1.4"
+version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f27f6278552951f1f2b8cf9da965d10969b2efdea95a6ec47987ab46edfe263a"
+checksum = "e3a9fe34e3e7a50316060351f37187a3f546bce95496156754b601a5fa71b76e"
 
 [[package]]
 name = "simple_asn1"
@@ -9952,7 +10396,7 @@ checksum = "adc4e5204eb1910f40f9cfa375f6f05b68c3abac4b6fd879c8ff5e7ae8a0a085"
 dependencies = [
  "num-bigint",
  "num-traits",
- "thiserror",
+ "thiserror 1.0.61",
  "time",
 ]
 
@@ -9983,7 +10427,6 @@ version = "1.13.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67"
 dependencies = [
- "arbitrary",
  "serde",
 ]
 
@@ -10026,18 +10469,18 @@ dependencies = [
 
 [[package]]
 name = "soketto"
-version = "0.7.1"
+version = "0.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "41d1c5305e39e09653383c2c7244f2f78b3bcae37cf50c64cb4789c9f5096ec2"
+checksum = "37468c595637c10857701c990f93a40ce0e357cedb0953d1c26c8d8027f9bb53"
 dependencies = [
- "base64 0.13.1",
+ "base64 0.22.1",
  "bytes",
  "futures",
- "http 0.2.12",
+ "http 1.1.0",
  "httparse",
  "log",
  "rand 0.8.5",
- "sha-1 0.9.8",
+ "sha1",
 ]
 
 [[package]]
@@ -10052,6 +10495,15 @@ version = "0.9.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67"
 
+[[package]]
+name = "spinning"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2d4f0e86297cad2658d92a707320d87bf4e6ae1050287f51d19b67ef3f153a7b"
+dependencies = [
+ "lock_api",
+]
+
 [[package]]
 name = "spki"
 version = "0.7.3"
@@ -10123,12 +10575,6 @@ version = "0.2.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "fe895eb47f22e2ddd4dabc02bce419d2e643c8e3b585c78158b349195bc24d82"
 
-[[package]]
-name = "strsim"
-version = "0.9.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6446ced80d6c486436db5c078dde11a9f73d42b57fb273121e160b84f63d894c"
-
 [[package]]
 name = "strsim"
 version = "0.11.1"
@@ -10146,9 +10592,9 @@ dependencies = [
 
 [[package]]
 name = "strum"
-version = "0.26.3"
+version = "0.26.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8fec0f0aef304996cf250b31b5a10dee7980c85da9d759361292b8bca5a18f06"
+checksum = "5d8cec3501a5194c432b2b7976db6b7d10ec95c253208b45f83f7136aa985e29"
 dependencies = [
  "strum_macros 0.26.4",
 ]
@@ -10163,7 +10609,7 @@ dependencies = [
  "proc-macro2",
  "quote",
  "rustversion",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -10176,7 +10622,7 @@ dependencies = [
  "proc-macro2",
  "quote",
  "rustversion",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -10194,9 +10640,9 @@ dependencies = [
 
 [[package]]
 name = "subtle"
-version = "2.6.1"
+version = "2.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292"
+checksum = "81cdd64d312baedb58e21336b31bc043b77e01cc99033ce76ef539f78e965ebc"
 
 [[package]]
 name = "sucds"
@@ -10210,9 +10656,9 @@ dependencies = [
 
 [[package]]
 name = "symbolic-common"
-version = "12.10.0"
+version = "12.9.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "16629323a4ec5268ad23a575110a724ad4544aae623451de600c747bf87b36cf"
+checksum = "71297dc3e250f7dbdf8adb99e235da783d690f5819fdeb4cce39d9cfb0aca9f1"
 dependencies = [
  "debugid",
  "memmap2 0.9.4",
@@ -10222,9 +10668,9 @@ dependencies = [
 
 [[package]]
 name = "symbolic-demangle"
-version = "12.10.0"
+version = "12.9.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "48c043a45f08f41187414592b3ceb53fb0687da57209cc77401767fb69d5b596"
+checksum = "424fa2c9bf2c862891b9cfd354a752751a6730fd838a4691e7f6c2c7957b9daf"
 dependencies = [
  "cpp_demangle",
  "rustc-demangle",
@@ -10244,9 +10690,9 @@ dependencies = [
 
 [[package]]
 name = "syn"
-version = "2.0.74"
+version = "2.0.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1fceb41e3d546d0bd83421d3409b1460cc7444cd389341a4c880fe7a042cb3d7"
+checksum = "b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -10255,14 +10701,14 @@ dependencies = [
 
 [[package]]
 name = "syn-solidity"
-version = "0.7.7"
+version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c837dc8852cb7074e46b444afb81783140dab12c58867b49fb3898fbafedf7ea"
+checksum = "8d71e19bca02c807c9faa67b5a47673ff231b6e7449b251695188522f1dc44b2"
 dependencies = [
  "paste",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -10273,9 +10719,12 @@ checksum = "2047c6ded9c721764247e62cd3b03c09ffc529b2ba5b10ec482ae507a4a70160"
 
 [[package]]
 name = "sync_wrapper"
-version = "1.0.1"
+version = "1.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a7065abeca94b6a8a577f9bd45aa0867a2238b74e8eb67cf10d492bc39351394"
+checksum = "0bf256ce5efdfa370213c1dabab5935a12e49f2c58d15e9eac2870d3b4f27263"
+dependencies = [
+ "futures-core",
+]
 
 [[package]]
 name = "synstructure"
@@ -10285,21 +10734,21 @@ checksum = "c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "sysinfo"
-version = "0.30.13"
+version = "0.30.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0a5b4ddaee55fb2bea2bf0e5000747e5f5c0de765e5a5ff87f4cd106439f4bb3"
+checksum = "732ffa00f53e6b2af46208fba5718d9662a421049204e156328b66791ffa15ae"
 dependencies = [
  "cfg-if",
  "core-foundation-sys",
  "libc",
  "ntapi",
  "once_cell",
- "windows",
+ "windows 0.52.0",
 ]
 
 [[package]]
@@ -10310,7 +10759,18 @@ checksum = "ba3a3adc5c275d719af8cb4272ea1c4a6d668a777f37e115f6d11ddbc1c8e0e7"
 dependencies = [
  "bitflags 1.3.2",
  "core-foundation",
- "system-configuration-sys",
+ "system-configuration-sys 0.5.0",
+]
+
+[[package]]
+name = "system-configuration"
+version = "0.6.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3c879d448e9d986b661742763247d3693ed13609438cf3d006f51f5368a5ba6b"
+dependencies = [
+ "bitflags 2.5.0",
+ "core-foundation",
+ "system-configuration-sys 0.6.0",
 ]
 
 [[package]]
@@ -10323,6 +10783,16 @@ dependencies = [
  "libc",
 ]
 
+[[package]]
+name = "system-configuration-sys"
+version = "0.6.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e1d1b10ced5ca923a1fcb8d03e96b8d3268065d724548c0211415ff6ac6bac4"
+dependencies = [
+ "core-foundation-sys",
+ "libc",
+]
+
 [[package]]
 name = "tagptr"
 version = "0.2.0"
@@ -10337,9 +10807,9 @@ checksum = "55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369"
 
 [[package]]
 name = "tar"
-version = "0.4.41"
+version = "0.4.44"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cb797dad5fb5b76fcf519e702f4a589483b5ef06567f160c392832c1f5e44909"
+checksum = "1d863878d212c87a19c1a610eb53bb01fe12951c0501cf5a0d65f724914a667a"
 dependencies = [
  "filetime",
  "libc",
@@ -10354,15 +10824,14 @@ checksum = "c1bbb9f3c5c463a01705937a24fdabc5047929ac764b2d5b9cf681c1f5041ed5"
 
 [[package]]
 name = "tempfile"
-version = "3.12.0"
+version = "3.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "04cbcdd0c794ebb0d4cf35e88edd2f7d2c4c3e9a5a6dab322839b321c6a87a64"
+checksum = "85b77fafb263dd9d05cbeac119526425676db3784113aa9295c88498cbf8bff1"
 dependencies = [
  "cfg-if",
  "fastrand",
- "once_cell",
- "rustix",
- "windows-sys 0.59.0",
+ "rustix 0.38.34",
+ "windows-sys 0.52.0",
 ]
 
 [[package]]
@@ -10405,14 +10874,14 @@ version = "4.0.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4da89cfe93508da3676114d5a15aa26e29aa88d5230e22bc5ea5f3c1f08ef5f6"
 dependencies = [
- "darling 0.20.10",
+ "darling",
  "if_chain",
  "itertools 0.12.1",
  "once_cell",
  "prettyplease",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -10424,7 +10893,7 @@ dependencies = [
  "hex",
  "num-traits",
  "serde",
- "sha-1 0.10.1",
+ "sha-1",
  "test-fuzz-internal",
 ]
 
@@ -10436,22 +10905,62 @@ checksum = "a38c90d48152c236a3ab59271da4f4ae63d678c5d7ad6b7714d7cb9760be5e4b"
 
 [[package]]
 name = "thiserror"
-version = "1.0.63"
+version = "1.0.61"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c546c80d6be4bc6a00c0f01730c08df82eaa7a7a61f11d656526506112cc1709"
+dependencies = [
+ "thiserror-impl 1.0.61",
+]
+
+[[package]]
+name = "thiserror"
+version = "2.0.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "567b8a2dae586314f7be2a752ec7474332959c6460e02bde30d702a66d488708"
+dependencies = [
+ "thiserror-impl 2.0.12",
+]
+
+[[package]]
+name = "thiserror-impl"
+version = "1.0.61"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "46c3384250002a6d5af4d114f2845d37b57521033f30d5c3f46c4d70e1197533"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
+]
+
+[[package]]
+name = "thiserror-impl"
+version = "2.0.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7f7cf42b4507d8ea322120659672cf1b9dbb93f8f2d4ecfd6e51350ff5b17a1d"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
+]
+
+[[package]]
+name = "thiserror-impl-no-std"
+version = "2.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724"
+checksum = "58e6318948b519ba6dc2b442a6d0b904ebfb8d411a3ad3e07843615a72249758"
 dependencies = [
- "thiserror-impl",
+ "proc-macro2",
+ "quote",
+ "syn 1.0.109",
 ]
 
 [[package]]
-name = "thiserror-impl"
-version = "1.0.63"
+name = "thiserror-no-std"
+version = "2.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261"
+checksum = "a3ad459d94dd517257cc96add8a43190ee620011bb6e6cdc82dafd97dfafafea"
 dependencies = [
- "proc-macro2",
- "quote",
- "syn 2.0.74",
+ "thiserror-impl-no-std",
 ]
 
 [[package]]
@@ -10586,9 +11095,9 @@ dependencies = [
 
 [[package]]
 name = "tinyvec"
-version = "1.8.0"
+version = "1.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "445e881f4f6d382d5f27c034e25eb92edd7c784ceab92a0937db7f2e9471b938"
+checksum = "87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50"
 dependencies = [
  "tinyvec_macros",
 ]
@@ -10599,34 +11108,41 @@ version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"
 
+[[package]]
+name = "to_method"
+version = "1.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c7c4ceeeca15c8384bbc3e011dbd8fccb7f068a440b752b7d9b32ceb0ca0e2e8"
+
 [[package]]
 name = "tokio"
-version = "1.39.2"
+version = "1.38.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "daa4fb1bc778bd6f04cbfc4bb2d06a7396a8f299dc33ea1900cedaa316f467b1"
+checksum = "ba4f4a02a7a80d6f274636f0aa95c7e383b912d41fe721a31f29e29698585a4a"
 dependencies = [
  "backtrace",
  "bytes",
  "libc",
- "mio 1.0.2",
+ "mio",
+ "num_cpus",
  "parking_lot 0.12.3",
  "pin-project-lite",
  "signal-hook-registry",
  "socket2 0.5.7",
  "tokio-macros",
  "tracing",
- "windows-sys 0.52.0",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
 name = "tokio-macros"
-version = "2.4.0"
+version = "2.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "693d596312e88961bc67d7f1f97af8a70227d9f90c31bba5806eec004978d752"
+checksum = "5f5ae998a069d4b5aba8ee9dad856af7d520c3699e6159b185c2acd48155d39a"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -10639,34 +11155,13 @@ dependencies = [
  "tokio",
 ]
 
-[[package]]
-name = "tokio-rustls"
-version = "0.24.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c28327cf380ac148141087fbfb9de9d7bd4e84ab5d2c28fbc911d753de8a7081"
-dependencies = [
- "rustls 0.21.12",
- "tokio",
-]
-
-[[package]]
-name = "tokio-rustls"
-version = "0.25.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "775e0c0f0adb3a2f22a00c4745d728b479985fc15ee7ca6a2608388c5569860f"
-dependencies = [
- "rustls 0.22.4",
- "rustls-pki-types",
- "tokio",
-]
-
 [[package]]
 name = "tokio-rustls"
 version = "0.26.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0c7bc40d0e5a97695bb96e27995cd3a08538541b0a846f65bba7a359f36700d4"
 dependencies = [
- "rustls 0.23.12",
+ "rustls",
  "rustls-pki-types",
  "tokio",
 ]
@@ -10693,6 +11188,22 @@ dependencies = [
  "tokio-util",
 ]
 
+[[package]]
+name = "tokio-tungstenite"
+version = "0.23.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "becd34a233e7e31a3dbf7c7241b38320f57393dcae8e7324b0167d21b8e320b0"
+dependencies = [
+ "futures-util",
+ "log",
+ "rustls",
+ "rustls-pki-types",
+ "tokio",
+ "tokio-rustls",
+ "tungstenite",
+ "webpki-roots",
+]
+
 [[package]]
 name = "tokio-util"
 version = "0.7.11"
@@ -10710,21 +11221,21 @@ dependencies = [
 
 [[package]]
 name = "toml"
-version = "0.8.19"
+version = "0.8.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a1ed1f98e3fdc28d6d910e6737ae6ab1a93bf1985935a1193e68f93eeb68d24e"
+checksum = "6f49eb2ab21d2f26bd6db7bf383edc527a7ebaee412d17af4d40fdccd442f335"
 dependencies = [
  "serde",
  "serde_spanned",
  "toml_datetime",
- "toml_edit 0.22.20",
+ "toml_edit 0.22.14",
 ]
 
 [[package]]
 name = "toml_datetime"
-version = "0.6.8"
+version = "0.6.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41"
+checksum = "4badfd56924ae69bcc9039335b2e017639ce3f9b001c393c1b2d1ef846ce2cbf"
 dependencies = [
  "serde",
 ]
@@ -10735,22 +11246,22 @@ version = "0.21.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1"
 dependencies = [
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "toml_datetime",
  "winnow 0.5.40",
 ]
 
 [[package]]
 name = "toml_edit"
-version = "0.22.20"
+version = "0.22.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "583c44c02ad26b0c3f3066fe629275e50627026c51ac2e595cca4c230ce1ce1d"
+checksum = "f21c7aaf97f1bd9ca9d4f9e73b0a6c74bd5afef56f2bc931943a6e1c37e04e38"
 dependencies = [
- "indexmap 2.4.0",
+ "indexmap 2.9.0",
  "serde",
  "serde_spanned",
  "toml_datetime",
- "winnow 0.6.18",
+ "winnow 0.6.13",
 ]
 
 [[package]]
@@ -10776,18 +11287,19 @@ dependencies = [
 
 [[package]]
 name = "tower-http"
-version = "0.4.4"
+version = "0.5.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "61c5bb1d698276a2443e5ecfabc1008bf15a36c12e6a7176e7bf089ea9131140"
+checksum = "1e9cd434a998747dd2c4276bc96ee2e0c7a2eadf3cae88e52be55a05fa9053f5"
 dependencies = [
  "async-compression",
  "base64 0.21.7",
- "bitflags 2.6.0",
+ "bitflags 2.5.0",
  "bytes",
  "futures-core",
  "futures-util",
- "http 0.2.12",
- "http-body 0.4.6",
+ "http 1.1.0",
+ "http-body 1.0.0",
+ "http-body-util",
  "http-range-header",
  "httpdate",
  "iri-string",
@@ -10806,15 +11318,15 @@ dependencies = [
 
 [[package]]
 name = "tower-layer"
-version = "0.3.3"
+version = "0.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "121c2a6cda46980bb0fcd1647ffaf6cd3fc79a013de288782836f6df9c48780e"
+checksum = "c20c8dbed6283a09604c3e69b4b7eeb54e298b8a600d4d5ecb5ad39de609f1d0"
 
 [[package]]
 name = "tower-service"
-version = "0.3.3"
+version = "0.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8df9b6e13f2d32c91b9bd719c00d1958837bc7dec474d94952798cc8e69eeec3"
+checksum = "b6bc1c9ce2b5135ac7f93c72918fc37feb872bdc6a5533a8b85eb4b86bfdae52"
 
 [[package]]
 name = "tracing"
@@ -10835,7 +11347,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "3566e8ce28cc0a3fe42519fc80e6b4c943cc4c8cef275620eb8dac2d3d4e06cf"
 dependencies = [
  "crossbeam-channel",
- "thiserror",
+ "thiserror 1.0.61",
  "time",
  "tracing-subscriber",
 ]
@@ -10848,7 +11360,7 @@ checksum = "34704c8d6ebcbc939824180af020566b01a7c01f80641264eba0999f6c2b6be7"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -10867,8 +11379,6 @@ version = "0.2.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2"
 dependencies = [
- "futures",
- "futures-task",
  "pin-project",
  "tracing",
 ]
@@ -10897,9 +11407,9 @@ dependencies = [
 
 [[package]]
 name = "tracing-logfmt"
-version = "0.3.5"
+version = "0.3.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6b1f47d22deb79c3f59fcf2a1f00f60cbdc05462bf17d1cd356c1fefa3f444bd"
+checksum = "22b8e455f6caa5212a102ec530bf86b8dc5a4c536299bffd84b238fed9119be7"
 dependencies = [
  "time",
  "tracing",
@@ -10938,57 +11448,6 @@ dependencies = [
  "tracing-serde",
 ]
 
-[[package]]
-name = "triomphe"
-version = "0.1.11"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "859eb650cfee7434994602c3a68b25d77ad9e68c8a6cd491616ef86661382eb3"
-
-[[package]]
-name = "trust-dns-client"
-version = "0.20.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5b4ef9b9bde0559b78a4abb00339143750085f05e5a453efb7b8bef1061f09dc"
-dependencies = [
- "cfg-if",
- "data-encoding",
- "futures-channel",
- "futures-util",
- "lazy_static",
- "log",
- "radix_trie",
- "rand 0.8.5",
- "thiserror",
- "time",
- "tokio",
- "trust-dns-proto 0.20.4",
-]
-
-[[package]]
-name = "trust-dns-proto"
-version = "0.20.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ca94d4e9feb6a181c690c4040d7a24ef34018d8313ac5044a61d21222ae24e31"
-dependencies = [
- "async-trait",
- "cfg-if",
- "data-encoding",
- "enum-as-inner 0.3.4",
- "futures-channel",
- "futures-io",
- "futures-util",
- "idna 0.2.3",
- "ipnet",
- "lazy_static",
- "log",
- "rand 0.8.5",
- "smallvec",
- "thiserror",
- "tinyvec",
- "tokio",
- "url",
-]
-
 [[package]]
 name = "trust-dns-proto"
 version = "0.23.2"
@@ -10998,7 +11457,7 @@ dependencies = [
  "async-trait",
  "cfg-if",
  "data-encoding",
- "enum-as-inner 0.6.0",
+ "enum-as-inner",
  "futures-channel",
  "futures-io",
  "futures-util",
@@ -11007,7 +11466,7 @@ dependencies = [
  "once_cell",
  "rand 0.8.5",
  "smallvec",
- "thiserror",
+ "thiserror 1.0.61",
  "tinyvec",
  "tokio",
  "tracing",
@@ -11029,10 +11488,10 @@ dependencies = [
  "rand 0.8.5",
  "resolv-conf",
  "smallvec",
- "thiserror",
+ "thiserror 1.0.61",
  "tokio",
  "tracing",
- "trust-dns-proto 0.23.2",
+ "trust-dns-proto",
 ]
 
 [[package]]
@@ -11041,6 +11500,26 @@ version = "0.2.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b"
 
+[[package]]
+name = "tungstenite"
+version = "0.23.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6e2e2ce1e47ed2994fd43b04c8f618008d4cabdd5ee34027cf14f9d918edd9c8"
+dependencies = [
+ "byteorder",
+ "bytes",
+ "data-encoding",
+ "http 1.1.0",
+ "httparse",
+ "log",
+ "rand 0.8.5",
+ "rustls",
+ "rustls-pki-types",
+ "sha1",
+ "thiserror 1.0.61",
+ "utf-8",
+]
+
 [[package]]
 name = "twox-hash"
 version = "1.6.3"
@@ -11133,11 +11612,17 @@ version = "0.1.13"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0336d538f7abc86d282a4189614dfaa90810dfc2c6f6427eaf88e16311dd225d"
 
+[[package]]
+name = "unicode-width"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1fc81956842c57dac11422a97c3b8195a1ff727f06e85c84ed2e8aa277c9a0fd"
+
 [[package]]
 name = "unicode-xid"
-version = "0.2.4"
+version = "0.2.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f962df74c8c05a667b5ee8bcf162993134c104e96440b663c8daa176dc772d8c"
+checksum = "ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853"
 
 [[package]]
 name = "universal-hash"
@@ -11173,17 +11658,29 @@ version = "0.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1"
 
+[[package]]
+name = "unty"
+version = "0.0.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6d49784317cd0d1ee7ec5c716dd598ec5b4483ea832a2dced265471cc0f690ae"
+
 [[package]]
 name = "url"
-version = "2.5.2"
+version = "2.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "22784dbdf76fdde8af1aeda5622b546b422b6fc585325248a2bf9f5e41e94d6c"
+checksum = "f7c25da092f0a868cdf09e8674cd3b7ef3a7d92a24253e663a2fb85e2496de56"
 dependencies = [
  "form_urlencoded",
- "idna 0.5.0",
+ "idna 1.0.0",
  "percent-encoding",
 ]
 
+[[package]]
+name = "utf-8"
+version = "0.7.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09cc8ee72d2a9becf2f2febe0205bbed8fc6615b7cb429ad062dc7b7ddd036a9"
+
 [[package]]
 name = "utf16_iter"
 version = "1.0.5"
@@ -11204,9 +11701,9 @@ checksum = "06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821"
 
 [[package]]
 name = "uuid"
-version = "1.10.0"
+version = "1.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "81dfa00651efa65069b0b6b651f4aaa31ba9e3c3ce0137aaad053604ee7e0314"
+checksum = "a183cf7feeba97b4dd1c0d46788634f6221d87fa961b305bed08c851829efcc0"
 dependencies = [
  "getrandom 0.2.15",
 ]
@@ -11225,9 +11722,9 @@ checksum = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426"
 
 [[package]]
 name = "vergen"
-version = "8.3.2"
+version = "8.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2990d9ea5967266ea0ccf413a4aa5c42a93dbcfda9cb49a97de6931726b12566"
+checksum = "e27d6bdd219887a9eadd19e1c34f32e47fa332301184935c6d9bca26f3cca525"
 dependencies = [
  "anyhow",
  "cargo_metadata",
@@ -11239,15 +11736,15 @@ dependencies = [
 
 [[package]]
 name = "version_check"
-version = "0.9.5"
+version = "0.9.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a"
+checksum = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"
 
 [[package]]
 name = "virtue"
-version = "0.0.13"
+version = "0.0.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9dcc60c0624df774c82a0ef104151231d37da4962957d691c011c852b2473314"
+checksum = "051eb1abcf10076295e815102942cc58f9d5e3b4560e46e53c21e8ff6f3af7b1"
 
 [[package]]
 name = "void"
@@ -11297,35 +11794,34 @@ checksum = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"
 
 [[package]]
 name = "wasm-bindgen"
-version = "0.2.93"
+version = "0.2.92"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a82edfc16a6c469f5f44dc7b571814045d60404b55a0ee849f9bcfa2e63dd9b5"
+checksum = "4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8"
 dependencies = [
  "cfg-if",
- "once_cell",
  "wasm-bindgen-macro",
 ]
 
 [[package]]
 name = "wasm-bindgen-backend"
-version = "0.2.93"
+version = "0.2.92"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9de396da306523044d3302746f1208fa71d7532227f15e347e2d93e4145dd77b"
+checksum = "614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da"
 dependencies = [
  "bumpalo",
  "log",
  "once_cell",
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
  "wasm-bindgen-shared",
 ]
 
 [[package]]
 name = "wasm-bindgen-futures"
-version = "0.4.43"
+version = "0.4.42"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "61e9300f63a621e96ed275155c108eb6f843b6a26d053f122ab69724559dc8ed"
+checksum = "76bc14366121efc8dbb487ab05bcc9d346b3b5ec0eaa76e46594cabbe51762c0"
 dependencies = [
  "cfg-if",
  "js-sys",
@@ -11335,9 +11831,9 @@ dependencies = [
 
 [[package]]
 name = "wasm-bindgen-macro"
-version = "0.2.93"
+version = "0.2.92"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "585c4c91a46b072c92e908d99cb1dcdf95c5218eeb6f3bf1efa991ee7a68cccf"
+checksum = "a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726"
 dependencies = [
  "quote",
  "wasm-bindgen-macro-support",
@@ -11345,22 +11841,22 @@ dependencies = [
 
 [[package]]
 name = "wasm-bindgen-macro-support"
-version = "0.2.93"
+version = "0.2.92"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "afc340c74d9005395cf9dd098506f7f44e38f2b4a21c6aaacf9a105ea5e1e836"
+checksum = "e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
  "wasm-bindgen-backend",
  "wasm-bindgen-shared",
 ]
 
 [[package]]
 name = "wasm-bindgen-shared"
-version = "0.2.93"
+version = "0.2.92"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c62a0a307cb4a311d3a07867860911ca130c3494e8c2719593806c08bc5d0484"
+checksum = "af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96"
 
 [[package]]
 name = "wasm-streams"
@@ -11377,9 +11873,9 @@ dependencies = [
 
 [[package]]
 name = "web-sys"
-version = "0.3.70"
+version = "0.3.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "26fdeaafd9bd129f65e7c031593c24d62186301e0c72c8978fa1678be7d532c0"
+checksum = "77afa9a11836342370f4817622a2f0f418b134426d91a82dfb48f532d2ec13ef"
 dependencies = [
  "js-sys",
  "wasm-bindgen",
@@ -11397,18 +11893,18 @@ dependencies = [
 
 [[package]]
 name = "webpki-roots"
-version = "0.26.3"
+version = "0.26.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bd7c23921eeb1713a4e851530e9b9756e4fb0e89978582942612524cf09f01cd"
+checksum = "3c452ad30530b54a4d8e71952716a212b08efd0f3562baa66c29a618b07da7c3"
 dependencies = [
  "rustls-pki-types",
 ]
 
 [[package]]
 name = "wide"
-version = "0.7.28"
+version = "0.7.32"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b828f995bf1e9622031f8009f8481a85406ce1f4d4588ff746d872043e855690"
+checksum = "41b5576b9a81633f3e8df296ce0063042a73507636cbe956c61133dd7034ab22"
 dependencies = [
  "bytemuck",
  "safe_arch",
@@ -11438,11 +11934,11 @@ checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"
 
 [[package]]
 name = "winapi-util"
-version = "0.1.9"
+version = "0.1.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb"
+checksum = "4d4cc384e1e73b93bafa6fb4f1df8c41695c8a91cf9c4c64358067d15a7b6c6b"
 dependencies = [
- "windows-sys 0.59.0",
+ "windows-sys 0.52.0",
 ]
 
 [[package]]
@@ -11457,7 +11953,27 @@ version = "0.52.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e48a53791691ab099e5e2ad123536d0fff50652600abaf43bbf952894110d0be"
 dependencies = [
- "windows-core",
+ "windows-core 0.52.0",
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "windows"
+version = "0.56.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1de69df01bdf1ead2f4ac895dc77c9351aefff65b2f3db429a343f9cbf05e132"
+dependencies = [
+ "windows-core 0.56.0",
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "windows"
+version = "0.58.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dd04d41d93c4992d421894c18c8b43496aa748dd4c081bac0dc93eb0489272b6"
+dependencies = [
+ "windows-core 0.58.0",
  "windows-targets 0.52.6",
 ]
 
@@ -11470,6 +11986,114 @@ dependencies = [
  "windows-targets 0.52.6",
 ]
 
+[[package]]
+name = "windows-core"
+version = "0.56.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4698e52ed2d08f8658ab0c39512a7c00ee5fe2688c65f8c0a4f06750d729f2a6"
+dependencies = [
+ "windows-implement 0.56.0",
+ "windows-interface 0.56.0",
+ "windows-result 0.1.2",
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "windows-core"
+version = "0.58.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6ba6d44ec8c2591c134257ce647b7ea6b20335bf6379a27dac5f1641fcf59f99"
+dependencies = [
+ "windows-implement 0.58.0",
+ "windows-interface 0.58.0",
+ "windows-result 0.2.0",
+ "windows-strings",
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "windows-implement"
+version = "0.56.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f6fc35f58ecd95a9b71c4f2329b911016e6bec66b3f2e6a4aad86bd2e99e2f9b"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
+]
+
+[[package]]
+name = "windows-implement"
+version = "0.58.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2bbd5b46c938e506ecbce286b6628a02171d56153ba733b6c741fc627ec9579b"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
+]
+
+[[package]]
+name = "windows-interface"
+version = "0.56.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "08990546bf4edef8f431fa6326e032865f27138718c587dc21bc0265bbcb57cc"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
+]
+
+[[package]]
+name = "windows-interface"
+version = "0.58.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "053c4c462dc91d3b1504c6fe5a726dd15e216ba718e84a0e46a88fbe5ded3515"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
+]
+
+[[package]]
+name = "windows-registry"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e400001bb720a623c1c69032f8e3e4cf09984deec740f007dd2b03ec864804b0"
+dependencies = [
+ "windows-result 0.2.0",
+ "windows-strings",
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "windows-result"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5e383302e8ec8515204254685643de10811af0ed97ea37210dc26fb0032647f8"
+dependencies = [
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "windows-result"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1d1043d8214f791817bab27572aaa8af63732e11bf84aa21a45a78d6c317ae0e"
+dependencies = [
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "windows-strings"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4cd9b125c486025df0eabcb585e62173c6c9eddcec5d117d3b6e8c30e2ee4d10"
+dependencies = [
+ "windows-result 0.2.0",
+ "windows-targets 0.52.6",
+]
+
 [[package]]
 name = "windows-sys"
 version = "0.48.0"
@@ -11629,9 +12253,9 @@ dependencies = [
 
 [[package]]
 name = "winnow"
-version = "0.6.18"
+version = "0.6.13"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "68a9bda4691f099d435ad181000724da8e5899daa10713c2d432552b9ccd3a6f"
+checksum = "59b5e5f6c299a3c7890b876a2a587f3115162487e704907d9b6cd29473052ba1"
 dependencies = [
  "memchr",
 ]
@@ -11646,16 +12270,6 @@ dependencies = [
  "windows-sys 0.48.0",
 ]
 
-[[package]]
-name = "winreg"
-version = "0.52.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a277a57398d4bfa075df44f501a17cfdf8542d224f0d36095a2adc7aee4ef0a5"
-dependencies = [
- "cfg-if",
- "windows-sys 0.48.0",
-]
-
 [[package]]
 name = "write16"
 version = "1.0.0"
@@ -11668,6 +12282,25 @@ version = "0.5.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51"
 
+[[package]]
+name = "ws_stream_wasm"
+version = "0.7.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7999f5f4217fe3818726b66257a4475f71e74ffd190776ad053fa159e50737f5"
+dependencies = [
+ "async_io_stream",
+ "futures",
+ "js-sys",
+ "log",
+ "pharos",
+ "rustc_version 0.4.0",
+ "send_wrapper 0.6.0",
+ "thiserror 1.0.61",
+ "wasm-bindgen",
+ "wasm-bindgen-futures",
+ "web-sys",
+]
+
 [[package]]
 name = "wyhash"
 version = "0.5.0"
@@ -11688,35 +12321,19 @@ dependencies = [
 
 [[package]]
 name = "xattr"
-version = "1.3.1"
+version = "1.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8da84f1a25939b27f6820d92aed108f83ff920fdf11a7b19366c27c4cda81d4f"
+checksum = "0d65cbf2f12c15564212d48f4e3dfb87923d25d611f2aed18f4cb23f0413d89e"
 dependencies = [
  "libc",
- "linux-raw-sys",
- "rustix",
-]
-
-[[package]]
-name = "xml-rs"
-version = "0.8.21"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "539a77ee7c0de333dcc6da69b177380a0b81e0dacfa4f7344c465a36871ee601"
-
-[[package]]
-name = "xmltree"
-version = "0.10.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d7d8a75eaf6557bb84a65ace8609883db44a29951042ada9b393151532e41fcb"
-dependencies = [
- "xml-rs",
+ "rustix 1.0.5",
 ]
 
 [[package]]
 name = "xxhash-rust"
-version = "0.8.12"
+version = "0.8.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984"
+checksum = "fdd20c5420375476fbd4394763288da7eb0cc0b8c11deed431a91562af7335d3"
 
 [[package]]
 name = "yoke"
@@ -11738,29 +12355,28 @@ checksum = "28cc31741b18cb6f1d5ff12f5b7523e3d6eb0852bbbad19d73905511d9849b95"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
  "synstructure",
 ]
 
 [[package]]
 name = "zerocopy"
-version = "0.7.35"
+version = "0.7.34"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0"
+checksum = "ae87e3fcd617500e5d106f0380cf7b77f3c6092aae37191433159dda23cfb087"
 dependencies = [
- "byteorder",
  "zerocopy-derive",
 ]
 
 [[package]]
 name = "zerocopy-derive"
-version = "0.7.35"
+version = "0.7.34"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e"
+checksum = "15e934569e47891f7d9411f1a451d947a60e000ab3bd24fbb970f000387d1b3b"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -11780,7 +12396,7 @@ checksum = "0ea7b4a3637ea8669cedf0f1fd5c286a17f3de97b8dd5a70a6c167a1730e63a5"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
  "synstructure",
 ]
 
@@ -11801,14 +12417,14 @@ checksum = "ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "zerovec"
-version = "0.10.4"
+version = "0.10.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "aa2b893d79df23bfb12d5461018d408ea19dfafe76c2c7ef6d4eba614f8ff079"
+checksum = "bb2cc8827d6c0994478a15c53f374f46fbd41bea663d809b14744bc42e6b109c"
 dependencies = [
  "yoke",
  "zerofrom",
@@ -11817,38 +12433,38 @@ dependencies = [
 
 [[package]]
 name = "zerovec-derive"
-version = "0.10.3"
+version = "0.10.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6"
+checksum = "97cf56601ee5052b4417d90c8755c6683473c926039908196cf35d99f893ebe7"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.74",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "zstd"
-version = "0.13.2"
+version = "0.13.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fcf2b778a664581e31e389454a7072dab1647606d44f7feea22cd5abb9c9f3f9"
+checksum = "2d789b1514203a1120ad2429eae43a7bd32b90976a7bb8a05f7ec02fa88cc23a"
 dependencies = [
  "zstd-safe",
 ]
 
 [[package]]
 name = "zstd-safe"
-version = "7.2.1"
+version = "7.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "54a3ab4db68cea366acc5c897c7b4d4d1b8994a9cd6e6f841f8964566a419059"
+checksum = "1cd99b45c6bc03a018c8b8a86025678c87e55526064e38f9df301989dce7ec0a"
 dependencies = [
  "zstd-sys",
 ]
 
 [[package]]
 name = "zstd-sys"
-version = "2.0.13+zstd.1.5.6"
+version = "2.0.10+zstd.1.5.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "38ff0f21cfee8f97d94cef41359e0c89aa6113028ab0291aa8ca0038995a95aa"
+checksum = "c253a4914af5bafc8fa8c86ee400827e83cf6ec01195ec1f1ed8441bf00d65aa"
 dependencies = [
  "cc",
  "pkg-config",
diff --git a/Cargo.toml b/Cargo.toml
index 2639d0fa5..0d35d2c59 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -17,6 +17,22 @@ members = [
 resolver = "2"
 
 [workspace.dependencies]
+
+# rpc
+jsonrpsee = "0.23.1"
+jsonrpsee-core = "0.23.1"
+jsonrpsee-types = "0.23.1"
+jsonrpsee-http-client = "0.23.1"
+enr = { version = "0.12.0", default-features = false, features = [
+  "k256",
+  "rust-secp256k1",
+] }
+secp256k1 = { version = "0.28.2", default-features = false, features = [
+  "global-context",
+  "recovery",
+] }
+
+
 # Database
 clickhouse = { git = "https://github.com/SorellaLabs/clickhouse.rs", branch = "master", features = [
   "tls",
@@ -37,73 +53,99 @@ brontes-analytics = { path = "./crates/brontes-analytics" }
 brontes-libmdbx = { path = "./crates/brontes-database/libmdbx-rs" }
 
 # Reth
-reth-node-ethereum = { git = "https://github.com/paradigmxyz/reth", package = "reth-node-ethereum", rev = "ac29b4b" }
-reth-tasks = { git = "https://github.com/paradigmxyz/reth", package = "reth-tasks", rev = "ac29b4b" }
-reth-rpc = { git = "https://github.com/paradigmxyz/reth", package = "reth-rpc", rev = "ac29b4b" }
-reth-rpc-api = { git = "https://github.com/paradigmxyz/reth", package = "reth-rpc-api", rev = "ac29b4b" }
-reth-rpc-types = { git = "https://github.com/paradigmxyz/reth", package = "reth-rpc-types", rev = "ac29b4b" }
-reth-rpc-builder = { git = "https://github.com/paradigmxyz/reth", package = "reth-rpc-builder", rev = "ac29b4b" }
-reth-provider = { git = "https://github.com/paradigmxyz/reth", package = "reth-provider", rev = "ac29b4b" }
-reth-transaction-pool = { git = "https://github.com/paradigmxyz/reth", package = "reth-transaction-pool", rev = "ac29b4b" }
-reth-network-api = { git = "https://github.com/paradigmxyz/reth", package = "reth-network-api", rev = "ac29b4b" }
-reth-primitives = { git = "https://github.com/paradigmxyz/reth", package = "reth-primitives", rev = "ac29b4b" }
-reth-db = { git = "https://github.com/paradigmxyz/reth", package = "reth-db", rev = "ac29b4b" }
-reth-blockchain-tree = { git = "https://github.com/paradigmxyz/reth", package = "reth-blockchain-tree", rev = "ac29b4b" }
-reth-node-core = { git = "https://github.com/paradigmxyz/reth", package = "reth-node-core", rev = "ac29b4b" }
-reth-beacon-consensus = { git = "https://github.com/paradigmxyz/reth", package = "reth-beacon-consensus", rev = "ac29b4b" }
-reth-revm = { git = "https://github.com/paradigmxyz/reth", package = "reth-revm", rev = "ac29b4b" }
-reth-interfaces = { git = "https://github.com/paradigmxyz/reth", package = "reth-interfaces", features = [
-  "test-utils",
-], rev = "ac29b4b" }
-reth-stages = { git = "https://github.com/paradigmxyz/reth", package = "reth-stages", features = [
-  "test-utils",
-], rev = "ac29b4b" }
-reth-trie = { git = "https://github.com/paradigmxyz/reth", package = "reth-trie", rev = "ac29b4b" }
-reth-libmdbx = { git = "https://github.com/paradigmxyz/reth", package = "reth-libmdbx", rev = "ac29b4b" }
-reth-eth-wire = { git = "https://github.com/paradigmxyz/reth", package = "reth-eth-wire", rev = "ac29b4b" }
-reth-payload-builder = { git = "https://github.com/paradigmxyz/reth", package = "reth-payload-builder", rev = "ac29b4b" }
-reth-metrics = { git = "https://github.com/paradigmxyz/reth", package = "reth-metrics", rev = "ac29b4b" }
-reth-codecs = { git = "https://github.com/paradigmxyz/reth", package = "reth-codecs", rev = "ac29b4b" }
-reth-codecs-derive = { git = "https://github.com/paradigmxyz/reth", rev = "ac29b4b" }
+reth-node-ethereum = { git = "https://github.com/paradigmxyz/reth", package = "reth-node-ethereum", rev = "560080e" }
+reth-node-types = { git = "https://github.com/paradigmxyz/reth", package = "reth-node-types", rev = "560080e" }
+reth-tasks = { git = "https://github.com/paradigmxyz/reth", package = "reth-tasks", rev = "560080e" }
+reth-rpc = { git = "https://github.com/paradigmxyz/reth", package = "reth-rpc", rev = "560080e" }
+reth-rpc-api = { git = "https://github.com/paradigmxyz/reth", package = "reth-rpc-api", rev = "560080e" }
+reth-rpc-types = { git = "https://github.com/paradigmxyz/reth", package = "reth-rpc-types", rev = "560080e" }
+reth-primitives = { git = "https://github.com/paradigmxyz/reth", package = "reth-primitives", rev = "560080e" }
+reth-provider = { git = "https://github.com/paradigmxyz/reth", package = "reth-provider", rev = "560080e" }
+reth-transaction-pool = { git = "https://github.com/paradigmxyz/reth", package = "reth-transaction-pool", rev = "560080e" }
+reth-network-api = { git = "https://github.com/paradigmxyz/reth", package = "reth-network-api", rev = "560080e" }
+# reth-primitives = { git = "https://github.com/paradigmxyz/reth", package = "reth-primitives", rev = "560080e", default-features = false }
+reth-primitives-traits = { git = "https://github.com/paradigmxyz/reth", package = "reth-primitives-traits", rev = "560080e" }
+reth-db = { git = "https://github.com/paradigmxyz/reth", package = "reth-db", rev = "560080e", default-features = false }
+reth-blockchain-tree = { git = "https://github.com/paradigmxyz/reth", package = "reth-blockchain-tree", rev = "560080e" }
+reth-node-core = { git = "https://github.com/paradigmxyz/reth", package = "reth-node-core", rev = "560080e" }
+reth-beacon-consensus = { git = "https://github.com/paradigmxyz/reth", package = "reth-beacon-consensus", rev = "560080e" }
+reth-revm = { git = "https://github.com/paradigmxyz/reth", package = "reth-revm", rev = "560080e" }
+# reth-interfaces = { git = "https://github.com/paradigmxyz/reth", package = "reth-interfaces", features = [
+#   "test-utils",
+# ], rev = "560080e" }
+# reth-stages = { git = "https://github.com/paradigmxyz/reth", package = "reth-stages", features = [
+#   "test-utils",
+# ], rev = "560080e" }
+# reth-interfaces = { git = "https://github.com/paradigmxyz/reth", package = "reth-interfaces", rev = "560080e" }
+reth-libmdbx = { git = "https://github.com/paradigmxyz/reth", package = "reth-libmdbx", rev = "560080e" }
+reth-storage-errors = { git = "https://github.com/paradigmxyz/reth", package = "reth-storage-errors", rev = "560080e" }
+reth-payload-builder = { git = "https://github.com/paradigmxyz/reth", package = "reth-payload-builder", rev = "560080e" }
+reth-metrics = { git = "https://github.com/paradigmxyz/reth", package = "reth-metrics", rev = "560080e" }
+reth-codecs = { git = "https://github.com/paradigmxyz/reth", package = "reth-codecs", rev = "560080e" }
+reth-codecs-derive = { git = "https://github.com/paradigmxyz/reth", rev = "560080e" }
 
 # ruint
 ruint = "1.9.0"
 
 # revm
-revm = { version = "8.0.0", features = [
+revm = { version = "9.0.0", features = [
   "std",
   "secp256k1",
+  "blst",
 ], default-features = false }
-revm-primitives = { version = "3.1", features = [
+revm-primitives = { version = "4.0.0", features = [
   "std",
 ], default-features = false }
-revm-inspectors = { git = "https://github.com/paradigmxyz/evm-inspectors", rev = "dc614ee" }
+revm-inspectors = { git = "https://github.com/paradigmxyz/revm-inspectors", rev = "70e721d" }
 
 
 # Alloy
-alloy-sol-types = { version = "0.7.0", features = ["json"] }
-alloy-sol-macro = { version = "0.7.0", features = ["json"] }
+alloy-sol-types = { version = "0.7.2", features = ["json"] }
+alloy-sol-macro = { version = "0.7.2", features = ["json"] }
 alloy-rlp = { version = "0.3.4" }
 alloy-rlp-derive = { version = "0.3.4" }
-alloy-primitives = { version = "0.7.0", features = ["rlp"] }
-alloy-json-abi = "0.7.0"
-alloy-dyn-abi = "0.7.0 "
+alloy-primitives = { version = "0.7.2", features = ["rlp"] }
+alloy-json-abi = "0.7.2"
+alloy-dyn-abi = "0.7.2"
+alloy-chains = "0.1.15"
+alloy-trie = "0.4.1"
 
 # Alloy core
-alloy-provider = { git = "https://github.com/alloy-rs/alloy.git", rev = "39b8695", features = [
-  "reqwest",
+# alloy-chains = "0.1.15"
+# alloy-primitives = "0.7.2"
+# alloy-dyn-abi = "0.7.2"
+# alloy-sol-types = "0.7.2"
+# alloy-rlp = "0.3.4"
+# alloy-trie = "0.4"
+alloy-rpc-types = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false, features = [
+  "eth",
 ] }
-alloy-transport-http = { git = "https://github.com/alloy-rs/alloy.git", rev = "39b8695" }
-alloy-transport = { git = "https://github.com/alloy-rs/alloy.git", rev = "39b8695" }
-alloy-network = { git = "https://github.com/alloy-rs/alloy.git", rev = "39b8695" }
-alloy-json-rpc = { git = "https://github.com/alloy-rs/alloy.git", rev = "39b8695" }
-alloy-rpc-types = { git = "https://github.com/alloy-rs/alloy.git", rev = "39b8695", features = [
-  "jsonrpsee-types",
+alloy-rpc-types-anvil = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-rpc-types-trace = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-rpc-types-engine = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-rpc-types-beacon = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-genesis = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-node-bindings = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-provider = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false, features = [
+  "reqwest",
 ] }
-alloy-rpc-client = { git = "https://github.com/alloy-rs/alloy.git", rev = "39b8695" }
+alloy-eips = { git = "https://github.com/alloy-rs/alloy", default-features = false, rev = "00d81d7" }
+alloy-signer = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-signer-wallet = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-network = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-consensus = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-transport = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7" }
+alloy-transport-http = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", features = [
+  "reqwest-rustls-tls",
+], default-features = false }
+alloy-transport-ws = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-transport-ipc = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-pubsub = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-json-rpc = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
+alloy-rpc-client = { git = "https://github.com/alloy-rs/alloy", rev = "00d81d7", default-features = false }
 
 # Async
-tokio = { version = "1.13.0", features = ["full", "tracing"] }
+tokio = { version = "1", features = ["full", "tracing"] }
 futures = "0.3.28"
 async-trait = "0.1.73"
 async-rate-limiter = { git = "https://github.com/jnoorchashm37/async-rate-limiter" }
@@ -116,10 +158,12 @@ tracing-subscriber = { version = "0.3.17", default-features = false, features =
 ] }
 colored = "2.0"
 
+
 # Metrics
-metrics-exporter-prometheus = "=0.12.1"
-metrics-util = "0.15.0"
-metrics-process = "=1.0.14"
+metrics = "0.22.0"
+metrics-exporter-prometheus = { version = "0.14.0", default-features = false }
+metrics-util = "0.16.0"
+metrics-process = "2.0.0"
 
 # Logging
 env_logger = "0.10.0"
@@ -129,7 +173,7 @@ thiserror = "1.0.44"
 eyre = "0.6.8"
 
 # http/rpc
-hyper = "0.14.25"
+hyper = "1.6.0"
 hyper-tls = "0.5.0"
 reqwest = "0.12.2"
 
@@ -151,8 +195,6 @@ malachite-q = "0.4.0"
 phf = "0.11.2"
 phf_codegen = "0.11.2"
 
-# metrics
-metrics = "0.21.1"
 
 # misc
 backon = "0.4.4"
@@ -206,3 +248,10 @@ inherits = "release"
 lto = "fat"
 codegen-units = 1
 incremental = false
+
+
+[patch.crates-io]
+revm = { git = "https://github.com/bluealloy/revm", rev = "a28a543" }
+revm-interpreter = { git = "https://github.com/bluealloy/revm", rev = "a28a543" }
+revm-precompile = { git = "https://github.com/bluealloy/revm", rev = "a28a543" }
+revm-primitives = { git = "https://github.com/bluealloy/revm", rev = "a28a543" }
diff --git a/config/searcher_config.toml b/config/searcher_config.toml
index 71ee648f6..25ce8510a 100644
--- a/config/searcher_config.toml
+++ b/config/searcher_config.toml
@@ -209,6 +209,10 @@ mev_types = ["Sandwich, CexDexQuotes", "CexDexTrades"]
 fund = "Beelder"
 mev_types = ["CexDexQuotes", "CexDexTrades"]
 
+[searcher_contracts."0xfBd4cdB413E45a52E2C8312f670e9cE67E794C37"]
+fund = "Wincent"
+mev_types = ["CexDexQuotes", "CexDexTrades"]
+
 [searcher_contracts."0x000000000035B5e5ad9019092C665357240f594e"]
 mev_types = ["AtomicArb"]
 sibling_searchers = ["0x00000000032962B51589768828ad878876299E14"]
@@ -231,6 +235,10 @@ sibling_searchers = ["0x3FAcE0004bC1003B9d0672e7B23134Cb80115fb6", "0xA0d5a274F9
 name = "jaredfromsubway MEV bot"
 mev_types = ["Sandwich"]
 
+[searcher_contracts."0xd4bC53434C5e12cb41381A556c3c47e1a86e80E3"]
+name = "jaredfromsubway CEX-DEX & JIT MEV bot"
+mev_types = ["CexDexQuotes", "CexDexTrades", "JitCexDex", "Jit"]
+
 [searcher_contracts."0x00000000009E50a7dDb7a7B0e2ee6604fd120E49"]
 mev_types = ["AtomicArb"]
 
diff --git a/crates/bin/Cargo.toml b/crates/bin/Cargo.toml
index d72b92d06..f7841df3b 100644
--- a/crates/bin/Cargo.toml
+++ b/crates/bin/Cargo.toml
@@ -43,13 +43,13 @@ reth-rpc-types.workspace = true
 reth-provider.workspace = true
 reth-node-core.workspace = true
 reth-transaction-pool.workspace = true
-reth-network-api.workspace = true
-reth-primitives.workspace = true
+# reth-network-api.workspace = true
+reth-primitives-traits.workspace = true
 reth-db.workspace = true
 reth-blockchain-tree.workspace = true
 reth-beacon-consensus.workspace = true
 #reth-revm.workspace = true
-reth-interfaces.workspace = true
+# reth-interfaces.workspace = true
 
 # Alloy
 alloy-primitives.workspace = true
diff --git a/crates/bin/src/cli/db/cex_data.rs b/crates/bin/src/cli/db/cex_data.rs
index 6298d4f59..ee9089374 100644
--- a/crates/bin/src/cli/db/cex_data.rs
+++ b/crates/bin/src/cli/db/cex_data.rs
@@ -66,13 +66,26 @@ impl CexDB {
 
         let block_timestamp = metadata.microseconds_block_timestamp();
 
-        let cex_trades = &metadata.cex_trades.as_ref().unwrap().0;
+        let cex_trades = match metadata.cex_trades.as_ref() {
+            Some(trades) => &trades.0,
+            None => {
+                eprintln!(
+                    "Error: CEX trades data not found in local database for block {}.",
+                    self.block_number
+                );
+                eprintln!(
+                    "Please ensure 'brontes init' or data update process included this block."
+                );
+                return Ok(()); // Exit gracefully
+            }
+        };
+
         let exchanges_to_use = &cex_config.exchanges_to_use;
 
         let pair_exists = exchanges_to_use.iter().any(|exchange| {
-            cex_trades.get(exchange).map_or(false, |pairs| {
-                pairs.contains_key(&pair) || pairs.contains_key(&pair.flip())
-            })
+            cex_trades
+                .get(exchange)
+                .is_some_and(|pairs| pairs.contains_key(&pair) || pairs.contains_key(&pair.flip()))
         });
 
         if !pair_exists {
diff --git a/crates/bin/src/cli/db/db_query.rs b/crates/bin/src/cli/db/db_query.rs
index a9840342b..0ec7cf89f 100644
--- a/crates/bin/src/cli/db/db_query.rs
+++ b/crates/bin/src/cli/db/db_query.rs
@@ -6,7 +6,7 @@ use brontes_libmdbx::RO;
 use brontes_types::init_thread_pools;
 use clap::Parser;
 use itertools::Itertools;
-use reth_interfaces::db::DatabaseErrorInfo;
+use reth_provider::errors::db::DatabaseErrorInfo;
 
 #[derive(Debug, Parser)]
 pub struct DatabaseQuery {
diff --git a/crates/bin/src/cli/db/table_stats.rs b/crates/bin/src/cli/db/table_stats.rs
index 5447e2095..b25d06489 100644
--- a/crates/bin/src/cli/db/table_stats.rs
+++ b/crates/bin/src/cli/db/table_stats.rs
@@ -5,8 +5,8 @@ use comfy_table::{Cell, Row, Table as ComfyTable};
 use eyre::WrapErr;
 use human_bytes::human_bytes;
 use reth_db::{database::Database, mdbx, open_db, DatabaseEnv};
-use reth_primitives::ChainSpec;
-use reth_provider::ProviderFactory;
+use reth_node_core::primitives::ChainSpec;
+use reth_provider::{providers::StaticFileProvider, ProviderFactory};
 
 #[derive(Parser, Debug)]
 /// The arguments for the `brontes db table-stats` command
@@ -22,11 +22,16 @@ impl Stats {
         let db_path = Path::new(&db_path);
         let chain = Arc::new(ChainSpec::default());
 
+        let mut static_files_path = db_path.to_path_buf();
+        static_files_path.push("static_files");
+
         let db = Arc::new(open_db(db_path, Default::default())?);
 
+        let static_file_provider = StaticFileProvider::read_only(static_files_path.clone())?;
+
         let mut statis_files_path = db_path.to_path_buf();
         statis_files_path.push("static_files");
-        let provider_factory = ProviderFactory::new(db, chain.clone(), statis_files_path)?;
+        let provider_factory = ProviderFactory::new(db, chain.clone(), static_file_provider);
 
         self.run(&provider_factory)?;
 
diff --git a/crates/bin/src/executors/shared/dex_pricing.rs b/crates/bin/src/executors/shared/dex_pricing.rs
index 4bf8ccc6c..560f2401c 100644
--- a/crates/bin/src/executors/shared/dex_pricing.rs
+++ b/crates/bin/src/executors/shared/dex_pricing.rs
@@ -119,7 +119,7 @@ impl<T: TracingProvider> WaitingForPricerFuture<T> {
             true
         });
 
-        if tree.header.number >= START_OF_CHAINBOUND_MEMPOOL_DATA {
+        if tree.header.number >= Some(START_OF_CHAINBOUND_MEMPOOL_DATA) {
             tree.label_private_txes(&meta);
         }
 
diff --git a/crates/bin/src/executors/shared/metadata_loader.rs b/crates/bin/src/executors/shared/metadata_loader.rs
index 16cc1829a..0676b1437 100644
--- a/crates/bin/src/executors/shared/metadata_loader.rs
+++ b/crates/bin/src/executors/shared/metadata_loader.rs
@@ -9,7 +9,7 @@ use std::{
     time::Duration,
 };
 
-use alloy_primitives::Address;
+use alloy_primitives::{Address, BlockHash};
 use brontes_database::clickhouse::ClickhouseHandle;
 use brontes_types::{
     db::{
@@ -24,7 +24,6 @@ use brontes_types::{
 };
 use futures::{stream::FuturesOrdered, Future, Stream, StreamExt};
 use itertools::Itertools;
-use reth_primitives::BlockHash;
 use tracing::error;
 
 use super::dex_pricing::WaitingForPricerFuture;
@@ -102,7 +101,7 @@ impl<T: TracingProvider, CH: ClickhouseHandle> MetadataLoader<T, CH> {
         libmdbx: &'static DB,
         quote_asset: Address,
     ) {
-        let block = tree.header.number;
+        let block = tree.header.number.expect("block number not set in header");
         let generate_dex_pricing = self.generate_dex_pricing(block, libmdbx);
 
         if !generate_dex_pricing && self.clickhouse.is_none() {
@@ -142,7 +141,7 @@ impl<T: TracingProvider, CH: ClickhouseHandle> MetadataLoader<T, CH> {
             let last_block = block + offsets;
             self.cex_window_data.init(last_block, trades);
 
-            return Some(self.cex_window_data.cex_trade_map())
+            return Some(self.cex_window_data.cex_trade_map());
         }
 
         let last_block = self.cex_window_data.get_last_end_block_loaded() + 1;
@@ -175,7 +174,7 @@ impl<T: TracingProvider, CH: ClickhouseHandle> MetadataLoader<T, CH> {
             return;
         };
         meta.builder_info = libmdbx
-            .try_fetch_builder_info(tree.header.beneficiary)
+            .try_fetch_builder_info(tree.header.miner)
             .expect("failed to fetch builder info table in libmdbx");
 
         meta.cex_trades = self.load_cex_trades(libmdbx, block);
@@ -206,7 +205,7 @@ impl<T: TracingProvider, CH: ClickhouseHandle> MetadataLoader<T, CH> {
             return;
         };
         meta.builder_info = libmdbx
-            .try_fetch_builder_info(tree.header.beneficiary)
+            .try_fetch_builder_info(tree.header.miner)
             .expect("failed to fetch builder info table in libmdbx");
 
         let mut meta = meta.into_full_metadata(DexQuotes(vec![]));
@@ -233,7 +232,7 @@ impl<T: TracingProvider, CH: ClickhouseHandle> MetadataLoader<T, CH> {
             return;
         };
         meta.builder_info = libmdbx
-            .try_fetch_builder_info(tree.header.beneficiary)
+            .try_fetch_builder_info(tree.header.miner)
             .expect("failed to fetch builder info table in libmdbx");
 
         meta.cex_trades = self.load_cex_trades(libmdbx, block);
@@ -259,7 +258,7 @@ impl<T: TracingProvider, CH: ClickhouseHandle> MetadataLoader<T, CH> {
         let offsets = (window / 12) as u64;
         let future = Box::pin(async move {
             let builder_info = libmdbx
-                .try_fetch_builder_info(tree.header.beneficiary)
+                .try_fetch_builder_info(tree.header.miner)
                 .expect("failed to fetch builder info table in libmdbx");
 
             //fetch metadata till it works
@@ -277,7 +276,7 @@ impl<T: TracingProvider, CH: ClickhouseHandle> MetadataLoader<T, CH> {
                         error!(err=?e);
                     })
                 {
-                    break res
+                    break res;
                 } else {
                     tracing::warn!(
                         ?block,
@@ -307,7 +306,7 @@ impl<T: TracingProvider, CH: ClickhouseHandle> MetadataLoader<T, CH> {
                         trades.merge_in_map(range.value);
                     }
 
-                    break trades
+                    break trades;
                 } else {
                     tracing::warn!(
                         ?block,
@@ -336,10 +335,10 @@ impl<T: TracingProvider, CH: ClickhouseHandle> Stream for MetadataLoader<T, CH>
     ) -> std::task::Poll<Option<Self::Item>> {
         if self.force_no_dex_pricing {
             if let Some(res) = self.result_buf.pop_front() {
-                return Poll::Ready(Some(res))
+                return Poll::Ready(Some(res));
             }
             cx.waker().wake_by_ref();
-            return Poll::Pending
+            return Poll::Pending;
         }
 
         while let Poll::Ready(Some((block, tree, meta))) =
diff --git a/crates/bin/src/executors/shared/state_collector.rs b/crates/bin/src/executors/shared/state_collector.rs
index 33ff7e5fa..946fe59cf 100644
--- a/crates/bin/src/executors/shared/state_collector.rs
+++ b/crates/bin/src/executors/shared/state_collector.rs
@@ -7,7 +7,8 @@ use std::{
     task::{Poll, Waker},
 };
 
-use alloy_primitives::Address;
+use alloy_primitives::{Address, BlockHash};
+use alloy_rpc_types::Header;
 use brontes_classifier::Classifier;
 use brontes_core::decoding::Parser;
 use brontes_database::clickhouse::ClickhouseHandle;
@@ -21,7 +22,6 @@ use brontes_types::{
 };
 use eyre::eyre;
 use futures::{Future, FutureExt, Stream, StreamExt};
-use reth_primitives::{BlockHash, Header};
 use tracing::{span, trace, Instrument, Level};
 
 use super::{metadata_loader::MetadataLoader, multi_block_window::MultiBlockWindow};
diff --git a/crates/brontes-classifier/Cargo.toml b/crates/brontes-classifier/Cargo.toml
index f644d2114..fca758041 100644
--- a/crates/brontes-classifier/Cargo.toml
+++ b/crates/brontes-classifier/Cargo.toml
@@ -29,7 +29,7 @@ alloy-rlp.workspace = true
 
 # reth
 reth-rpc-types.workspace = true
-reth-primitives.workspace = true
+reth-primitives-traits.workspace = true
 reth-db.workspace = true
 
 # tracing
@@ -96,5 +96,3 @@ local-clickhouse = [
   "brontes-database/local-clickhouse",
   "brontes-core/local-clickhouse",
 ]
-
-
diff --git a/crates/brontes-classifier/src/classifiers/balancer/balancer_v2.rs b/crates/brontes-classifier/src/classifiers/balancer/balancer_v2.rs
index 083a19a22..015d7a79d 100644
--- a/crates/brontes-classifier/src/classifiers/balancer/balancer_v2.rs
+++ b/crates/brontes-classifier/src/classifiers/balancer/balancer_v2.rs
@@ -1,4 +1,4 @@
-use alloy_primitives::{Address, FixedBytes};
+use alloy_primitives::{Address, FixedBytes, U256};
 use brontes_database::libmdbx::{DBWriter, LibmdbxReader};
 use brontes_macros::action_impl;
 use brontes_pricing::Protocol;
@@ -13,7 +13,6 @@ use brontes_types::{
 };
 use eyre::Error;
 use malachite::Rational;
-use reth_primitives::U256;
 
 use crate::BalancerV2Vault::PoolBalanceChanged;
 
diff --git a/crates/brontes-classifier/src/classifiers/dodo/dodo_v2.rs b/crates/brontes-classifier/src/classifiers/dodo/dodo_v2.rs
index b8bc91835..f3cbd08ce 100644
--- a/crates/brontes-classifier/src/classifiers/dodo/dodo_v2.rs
+++ b/crates/brontes-classifier/src/classifiers/dodo/dodo_v2.rs
@@ -1,10 +1,10 @@
+use alloy_primitives::U256;
 use brontes_macros::action_impl;
 use brontes_types::{
     normalized_actions::{NormalizedBurn, NormalizedFlashLoan, NormalizedMint, NormalizedSwap},
     structured_trace::CallInfo,
     Protocol, ToScaledRational,
 };
-use reth_primitives::U256;
 
 action_impl!(
     Protocol::Dodo,
diff --git a/crates/brontes-classifier/src/classifiers/erc20.rs b/crates/brontes-classifier/src/classifiers/erc20.rs
index 2c11a6851..5d6b696a7 100644
--- a/crates/brontes-classifier/src/classifiers/erc20.rs
+++ b/crates/brontes-classifier/src/classifiers/erc20.rs
@@ -1,6 +1,6 @@
 use std::sync::Arc;
 
-use alloy_primitives::{Address, Bytes};
+use alloy_primitives::{Address, Bytes, U256};
 use alloy_sol_types::SolCall;
 use brontes_core::missing_token_info::load_missing_token_info;
 use brontes_types::{
@@ -10,7 +10,6 @@ use brontes_types::{
     ToScaledRational,
 };
 use malachite::{num::basic::traits::Zero, Rational};
-use reth_primitives::U256;
 
 alloy_sol_macro::sol!(
     function transfer(address, uint) returns(bool);
@@ -43,7 +42,7 @@ pub async fn try_decode_transfer<T: TracingProvider, DB: LibmdbxReader + DBWrite
     } else if depositCall::abi_decode(&calldata, false).is_ok() {
         (token, from, value)
     } else {
-        return Err(eyre::eyre!("failed to decode transfer for token: {:?}", token))
+        return Err(eyre::eyre!("failed to decode transfer for token: {:?}", token));
     };
 
     if db.try_fetch_token_info(token).is_err() {
diff --git a/crates/brontes-classifier/src/classifiers/maker/dss_flash.rs b/crates/brontes-classifier/src/classifiers/maker/dss_flash.rs
index b90909f82..d633899c7 100644
--- a/crates/brontes-classifier/src/classifiers/maker/dss_flash.rs
+++ b/crates/brontes-classifier/src/classifiers/maker/dss_flash.rs
@@ -42,14 +42,13 @@ action_impl!(
 mod tests {
     use std::str::FromStr;
 
-    use alloy_primitives::{hex, Address, B256};
+    use alloy_primitives::{hex, Address, B256, U256};
     use brontes_classifier::test_utils::ClassifierTestUtils;
     use brontes_types::{
         db::token_info::{TokenInfo, TokenInfoWithAddress},
         normalized_actions::{Action, NormalizedTransfer},
         TreeSearchBuilder,
     };
-    use reth_primitives::U256;
 
     use super::*;
 
diff --git a/crates/brontes-classifier/src/classifiers/oneinch/one_inch_fusion.rs b/crates/brontes-classifier/src/classifiers/oneinch/one_inch_fusion.rs
index 8fe133a5e..db952b709 100644
--- a/crates/brontes-classifier/src/classifiers/oneinch/one_inch_fusion.rs
+++ b/crates/brontes-classifier/src/classifiers/oneinch/one_inch_fusion.rs
@@ -1,7 +1,7 @@
+use alloy_primitives::Address;
 use brontes_macros::action_impl;
 use brontes_pricing::Protocol;
 use brontes_types::{normalized_actions::NormalizedAggregator, structured_trace::CallInfo};
-use reth_primitives::Address;
 
 action_impl!(
     Protocol::OneInchFusion,
@@ -17,7 +17,7 @@ action_impl!(
             recipient:     Address::default(),
             child_actions: vec![],
             msg_value:     info.msg_value,
-        })
+        });
     }
 );
 
diff --git a/crates/brontes-classifier/src/discovery_only.rs b/crates/brontes-classifier/src/discovery_only.rs
index 458c71ba2..a3c7801b6 100644
--- a/crates/brontes-classifier/src/discovery_only.rs
+++ b/crates/brontes-classifier/src/discovery_only.rs
@@ -1,6 +1,7 @@
 use std::sync::Arc;
 
-use alloy_primitives::Log;
+use alloy_primitives::{Address, Log};
+use alloy_rpc_types::Header;
 use brontes_core::missing_token_info::load_missing_token_info;
 use brontes_database::libmdbx::{DBWriter, LibmdbxReader};
 use brontes_pricing::types::DexPriceMsg;
@@ -11,7 +12,6 @@ use brontes_types::{
     tree::{root::NodeData, GasDetails, Node, Root},
 };
 use futures::future::join_all;
-use reth_primitives::{Address, Header};
 use reth_rpc_types::trace::parity::{Action as TraceAction, CallType};
 use tracing::{error, trace};
 
@@ -56,7 +56,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> DiscoveryOnlyClassif
                             empty = trace.trace.is_empty(),
                             is_success = trace.is_success
                         );
-                        return
+                        return;
                     }
 
                     let root_trace = trace.trace.remove(0);
@@ -64,7 +64,9 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> DiscoveryOnlyClassif
                     let trace_idx = root_trace.trace_idx;
 
                     self.process_classification(
-                        header.number,
+                        header
+                            .number
+                            .expect("No block number in header while processing classification"),
                         None,
                         &NodeData(vec![]),
                         tx_idx as u64,
@@ -88,7 +90,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> DiscoveryOnlyClassif
                             gas_used:            trace.gas_used,
                             effective_gas_price: trace.effective_price,
                             priority_fee:        trace.effective_price
-                                - (header.base_fee_per_gas.unwrap_or_default() as u128),
+                                - header.base_fee_per_gas.unwrap_or_default(),
                         },
                         data_store: NodeData(vec![Some(action)]),
                     };
@@ -104,7 +106,9 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> DiscoveryOnlyClassif
                         );
 
                         self.process_classification(
-                            header.number,
+                            header.number.expect(
+                                "No block number in header while processing classification",
+                            ),
                             Some(&tx_root.head),
                             &tx_root.data_store,
                             tx_idx as u64,
@@ -159,7 +163,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> DiscoveryOnlyClassif
         trace_index: u64,
     ) {
         if trace.trace.error.is_some() {
-            return
+            return;
         }
         match trace.action_type() {
             TraceAction::Call(_) => {
@@ -190,7 +194,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> DiscoveryOnlyClassif
         trace_index: u64,
     ) {
         if trace.is_static_call() {
-            return
+            return;
         }
 
         let mut call_info = trace.get_callframe_info();
@@ -241,7 +245,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> DiscoveryOnlyClassif
         block: u64,
     ) {
         if trace.is_delegate_call() {
-            return
+            return;
         };
 
         // Attempt to decode the transfer
@@ -303,7 +307,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> DiscoveryOnlyClassif
             .collect::<Vec<_>>();
 
         if search_data.is_empty() {
-            return
+            return;
         }
 
         join_all(
diff --git a/crates/brontes-classifier/src/tree_builder/mod.rs b/crates/brontes-classifier/src/tree_builder/mod.rs
index c9fecd8c6..144256140 100644
--- a/crates/brontes-classifier/src/tree_builder/mod.rs
+++ b/crates/brontes-classifier/src/tree_builder/mod.rs
@@ -15,6 +15,7 @@ use malachite::{num::basic::traits::Zero, Rational};
 
 mod tree_pruning;
 pub(crate) mod utils;
+use alloy_primitives::Address;
 use brontes_database::libmdbx::{DBWriter, LibmdbxReader};
 use brontes_pricing::types::DexPriceMsg;
 use brontes_types::{
@@ -26,8 +27,10 @@ use brontes_types::{
 use futures::future::join_all;
 use itertools::Itertools;
 use malachite::num::arithmetic::traits::Abs;
-use reth_primitives::{Address, Header};
-use reth_rpc_types::trace::parity::{Action as TraceAction, CallType};
+use reth_rpc_types::{
+    trace::parity::{Action as TraceAction, CallType},
+    Header,
+};
 use tokio::sync::mpsc::UnboundedSender;
 use tracing::{error, trace};
 use tree_pruning::{account_for_tax_tokens, remove_possible_transfer_double_counts};
@@ -71,7 +74,9 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
         let block_number = header.number;
         if !generate_pricing {
             self.pricing_update_sender
-                .send(DexPriceMsg::DisablePricingFor(block_number))
+                .send(DexPriceMsg::DisablePricingFor(
+                    block_number.expect("No block number in header"),
+                ))
                 .unwrap();
         }
 
@@ -79,8 +84,11 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
         let mut tree = BlockTree::new(header, tx_roots.len());
 
         // send out all updates
-        let further_classification_requests =
-            self.process_tx_roots(tx_roots, &mut tree, block_number);
+        let further_classification_requests = self.process_tx_roots(
+            tx_roots,
+            &mut tree,
+            block_number.expect("No block number in header"),
+        );
 
         account_for_tax_tokens(&mut tree);
         remove_possible_transfer_double_counts(&mut tree);
@@ -142,7 +150,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
                             empty = trace.trace.is_empty(),
                             is_success = trace.is_success
                         );
-                        return None
+                        return None;
                     }
                     // post classification processing collectors
                     let mut further_classification_requests = Vec::new();
@@ -155,7 +163,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
 
                     let classification = self
                         .process_classification(
-                            header.number,
+                            header.number.expect("No block number in header"),
                             None,
                             &NodeData(vec![]),
                             tx_idx as u64,
@@ -185,7 +193,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
                             gas_used:            trace.gas_used,
                             effective_gas_price: trace.effective_price,
                             priority_fee:        trace.effective_price
-                                - (header.base_fee_per_gas.unwrap_or_default() as u128),
+                                - header.base_fee_per_gas.unwrap_or_default(),
                         },
                         data_store: NodeData(vec![Some(classification)]),
                     };
@@ -202,7 +210,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
 
                         if trace.trace.error.is_none() {
                             if let Some(coinbase_transfer) =
-                                get_coinbase_transfer(header.beneficiary, &trace.trace.action)
+                                get_coinbase_transfer(header.miner, &trace.trace.action)
                             {
                                 if let Some(coinbase) = &mut tx_root.gas_details.coinbase_transfer {
                                     *coinbase += coinbase_transfer;
@@ -219,13 +227,15 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
                                 });
 
                                 tx_root.insert(node, vec![classification]);
-                                continue
+                                continue;
                             }
                         }
 
                         let classification = self
                             .process_classification(
-                                header.number,
+                                header
+                                    .number
+                                    .expect("No block number in header while building tree"),
                                 Some(&tx_root.head),
                                 &tx_root.data_store,
                                 tx_idx as u64,
@@ -328,7 +338,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
         trace_index: u64,
     ) -> (Vec<DexPriceMsg>, Vec<Action>) {
         if trace.trace.error.is_some() {
-            return (vec![], vec![Action::Revert])
+            return (vec![], vec![Action::Revert]);
         }
         let (pricing, base_action) = match trace.action_type() {
             TraceAction::Call(_) => {
@@ -364,7 +374,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
         trace_index: u64,
     ) -> (Vec<DexPriceMsg>, Vec<Action>) {
         if trace.is_static_call() {
-            return (vec![], vec![Action::Unclassified(trace)])
+            return (vec![], vec![Action::Unclassified(trace)]);
         }
         let mut call_info = trace.get_callframe_info();
 
@@ -409,14 +419,14 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
             .classify_transfer(tx_idx, trace_index, &trace, block)
             .await
         {
-            return transfer
+            return transfer;
         } else {
             return (
                 vec![],
                 vec![self
                     .classify_eth_transfer(&trace, trace_index)
                     .unwrap_or(Action::Unclassified(trace))],
-            )
+            );
         }
     }
 
@@ -428,7 +438,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
         block: u64,
     ) -> Option<(Vec<DexPriceMsg>, Vec<Action>)> {
         if trace.is_delegate_call() {
-            return None
+            return None;
         };
 
         // Attempt to decode the transfer
@@ -452,7 +462,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
                             || transfer.from != from
                             || transfer.to != to
                         {
-                            continue
+                            continue;
                         }
 
                         let decimals = transfer.token.decimals;
@@ -464,7 +474,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
                             transfer.amount = transferred_amount;
                             transfer.fee = fee;
                         }
-                        break
+                        break;
                     }
                 }
 
@@ -517,7 +527,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
                                 action: Action::Transfer(transfer.clone()),
                             })],
                             vec![Action::Transfer(transfer)],
-                        ))
+                        ));
                     }
                 }
                 None
@@ -554,7 +564,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
 
         if created_addr == Address::ZERO {
             tracing::error!(target: "brontes_classifier::discovery", "created address is zero address");
-            return (vec![], vec![Action::Unclassified(trace)])
+            return (vec![], vec![Action::Unclassified(trace)]);
         }
 
         // get the immediate parent node of this create action so that we can decode the
@@ -588,7 +598,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
                     "No root head found for trace index: {}",
                     trace_index
                 );
-                return (vec![], vec![Action::Unclassified(trace)])
+                return (vec![], vec![Action::Unclassified(trace)]);
             }
         };
 
@@ -605,7 +615,7 @@ impl<'db, T: TracingProvider, DB: LibmdbxReader + DBWriter> Classifier<'db, T, D
                 "No parent calldata found for created address: {}",
                 created_addr
             );
-            return (vec![], vec![Action::Unclassified(trace)])
+            return (vec![], vec![Action::Unclassified(trace)]);
         }
 
         join_all(
diff --git a/crates/brontes-core/Cargo.toml b/crates/brontes-core/Cargo.toml
index 94dabaff3..ea07cba99 100644
--- a/crates/brontes-core/Cargo.toml
+++ b/crates/brontes-core/Cargo.toml
@@ -13,14 +13,15 @@ reth-tasks.workspace = true
 reth-rpc.workspace = true
 reth-rpc-api.workspace = true
 reth-rpc-types.workspace = true
+reth-primitives-traits.workspace = true
 reth-primitives.workspace = true
 reth-provider.workspace = true
 reth-transaction-pool.workspace = true
-reth-network-api.workspace = true
+# reth-network-api.workspace = true
 reth-db.workspace = true
 reth-blockchain-tree.workspace = true
 reth-beacon-consensus.workspace = true
-reth-interfaces.workspace = true
+# reth-interfaces.workspace = true
 reth-metrics.workspace = true
 reth-tracing-ext.workspace = true
 ruint = { workspace = true, features = ["primitive-types", "rlp"] }
@@ -45,7 +46,7 @@ alloy-json-abi.workspace = true
 alloy-dyn-abi = { workspace = true, features = ["default"] }
 alloy-provider.workspace = true
 alloy-transport-http.workspace = true
-alloy-rpc-types = { workspace = true, features = ["jsonrpsee-types"] }
+alloy-rpc-types.workspace = true
 
 # Serde 
 serde.workspace = true
diff --git a/crates/brontes-core/src/decoding/mod.rs b/crates/brontes-core/src/decoding/mod.rs
index 444b3e023..c4814f182 100644
--- a/crates/brontes-core/src/decoding/mod.rs
+++ b/crates/brontes-core/src/decoding/mod.rs
@@ -4,7 +4,8 @@ use brontes_database::libmdbx::{DBWriter, LibmdbxReader};
 use brontes_types::structured_trace::TxTrace;
 pub use brontes_types::traits::TracingProvider;
 use futures::Future;
-use reth_primitives::{BlockHash, BlockNumberOrTag, Header, B256};
+use reth_primitives::{BlockHash, BlockNumberOrTag, B256};
+use reth_rpc_types::Header;
 use tokio::sync::mpsc::UnboundedSender;
 
 use self::parser::TraceParser;
diff --git a/crates/brontes-core/src/decoding/parser.rs b/crates/brontes-core/src/decoding/parser.rs
index 53f7d6b93..cd53dcbbc 100644
--- a/crates/brontes-core/src/decoding/parser.rs
+++ b/crates/brontes-core/src/decoding/parser.rs
@@ -4,11 +4,11 @@ use std::time::Duration;
 use alloy_json_abi::JsonAbi;
 #[cfg(feature = "dyn-decode")]
 use alloy_primitives::Address;
+use alloy_primitives::BlockHash;
 use brontes_metrics::trace::types::{BlockStats, TraceParseErrorKind, TransactionStats};
 #[cfg(feature = "dyn-decode")]
 use brontes_types::FastHashMap;
 use futures::future::join_all;
-use reth_primitives::BlockHash;
 #[cfg(feature = "dyn-decode")]
 use reth_rpc_types::trace::parity::Action;
 use reth_rpc_types::{AnyReceiptEnvelope, Log, TransactionReceipt};
@@ -52,7 +52,10 @@ impl<T: TracingProvider, DB: LibmdbxReader + DBWriter> TraceParser<T, DB> {
         self.tracer.clone()
     }
 
-    pub async fn load_block_from_db(&self, block_num: u64) -> Option<(Vec<TxTrace>, Header)> {
+    pub async fn load_block_from_db(
+        &self,
+        block_num: u64,
+    ) -> Option<(Vec<TxTrace>, reth_rpc_types::Header)> {
         let mut traces = self.libmdbx.load_trace(block_num).ok()?;
         traces.sort_by(|a, b| a.tx_index.cmp(&b.tx_index));
         traces.dedup_by(|a, b| a.tx_index.eq(&b.tx_index));
@@ -65,7 +68,7 @@ impl<T: TracingProvider, DB: LibmdbxReader + DBWriter> TraceParser<T, DB> {
         let receipts = self.get_receipts(block_num).await;
 
         if parity_trace.0.is_none() && receipts.0.is_none() {
-            return
+            return;
         }
 
         #[cfg(feature = "dyn-decode")]
@@ -88,7 +91,7 @@ impl<T: TracingProvider, DB: LibmdbxReader + DBWriter> TraceParser<T, DB> {
             cnt += 1;
             if cnt > 20 {
                 error!(%block_num, "attempted 20 inserts for db but all failed");
-                break
+                break;
             }
 
             tokio::time::sleep(Duration::from_secs(3)).await;
@@ -97,7 +100,10 @@ impl<T: TracingProvider, DB: LibmdbxReader + DBWriter> TraceParser<T, DB> {
 
     /// executes the tracing of a given block
     #[allow(unreachable_code)]
-    pub async fn execute_block(self, block_num: u64) -> Option<(BlockHash, Vec<TxTrace>, Header)> {
+    pub async fn execute_block(
+        self,
+        block_num: u64,
+    ) -> Option<(BlockHash, Vec<TxTrace>, reth_rpc_types::Header)> {
         if let Some(res) = self.load_block_from_db(block_num).await {
             tracing::debug!(%block_num, traces_in_block= res.0.len(),"loaded trace for db");
 
@@ -107,12 +113,12 @@ impl<T: TracingProvider, DB: LibmdbxReader + DBWriter> TraceParser<T, DB> {
                 error!(%block_num, "failed to get block hash for block");
             }
 
-            return block_hash.map(|b| (b, res.0, res.1))
+            return block_hash.map(|b| (b, res.0, res.1));
         }
         #[cfg(not(feature = "local-reth"))]
         {
             tracing::error!("no block found in db");
-            return None
+            return None;
         }
 
         let parity_trace = self.trace_block(block_num).await;
@@ -127,7 +133,7 @@ impl<T: TracingProvider, DB: LibmdbxReader + DBWriter> TraceParser<T, DB> {
             let _ = self
                 .metrics_tx
                 .send(TraceMetricEvent::BlockMetricRecieved(parity_trace.1).into());
-            return None
+            return None;
         }
         #[cfg(feature = "dyn-decode")]
         let traces = self
@@ -164,7 +170,7 @@ impl<T: TracingProvider, DB: LibmdbxReader + DBWriter> TraceParser<T, DB> {
     pub async fn execute_block_discovery(
         self,
         block_num: u64,
-    ) -> Option<(BlockHash, Vec<TxTrace>, Header)> {
+    ) -> Option<(BlockHash, Vec<TxTrace>, reth_rpc_types::Header)> {
         if let Some(res) = self.load_block_from_db(block_num).await {
             tracing::debug!(%block_num, traces_in_block= res.0.len(),"loaded trace for db");
 
@@ -174,12 +180,12 @@ impl<T: TracingProvider, DB: LibmdbxReader + DBWriter> TraceParser<T, DB> {
                 error!(%block_num, "failed to get block hash for block");
             }
 
-            return block_hash.map(|b| (b, res.0, res.1))
+            return block_hash.map(|b| (b, res.0, res.1));
         }
         #[cfg(not(feature = "local-reth"))]
         {
             tracing::error!("no block found in db");
-            return None
+            return None;
         }
 
         let parity_trace = self.trace_block(block_num).await;
@@ -194,7 +200,7 @@ impl<T: TracingProvider, DB: LibmdbxReader + DBWriter> TraceParser<T, DB> {
             let _ = self
                 .metrics_tx
                 .send(TraceMetricEvent::BlockMetricRecieved(parity_trace.1).into());
-            return None
+            return None;
         }
         #[cfg(feature = "dyn-decode")]
         let traces = self
@@ -315,7 +321,7 @@ impl<T: TracingProvider, DB: LibmdbxReader + DBWriter> TraceParser<T, DB> {
         #[cfg(feature = "dyn-decode")] dyn_json: FastHashMap<Address, JsonAbi>,
         block_receipts: Vec<TransactionReceipt<AnyReceiptEnvelope<Log>>>,
         block_num: u64,
-    ) -> (Vec<TxTrace>, BlockStats, Header) {
+    ) -> (Vec<TxTrace>, BlockStats, reth_rpc_types::Header) {
         let mut stats = BlockStats::new(block_num, None);
 
         let (traces, tx_stats): (Vec<_>, Vec<_>) =
diff --git a/crates/brontes-core/src/errors.rs b/crates/brontes-core/src/errors.rs
index 5e04652bf..777aedfc1 100644
--- a/crates/brontes-core/src/errors.rs
+++ b/crates/brontes-core/src/errors.rs
@@ -1,5 +1,5 @@
+use alloy_primitives::B256;
 use brontes_metrics::trace::types::TraceParseErrorKind;
-use reth_primitives::B256;
 use reth_rpc::eth::error::EthApiError;
 use thiserror::Error;
 
diff --git a/crates/brontes-core/src/executor.rs b/crates/brontes-core/src/executor.rs
index 1dad7b925..5c288e6ec 100644
--- a/crates/brontes-core/src/executor.rs
+++ b/crates/brontes-core/src/executor.rs
@@ -5,7 +5,6 @@ use tokio::task::JoinHandle;
 
 /// executes tasks on the runtime
 /// used for a thread pool for the simulator
-
 pub struct Executor;
 
 impl Executor {
diff --git a/crates/brontes-core/src/lib.rs b/crates/brontes-core/src/lib.rs
index 2ed6269bc..d878f3314 100644
--- a/crates/brontes-core/src/lib.rs
+++ b/crates/brontes-core/src/lib.rs
@@ -1,4 +1,3 @@
-#![feature(trait_alias)]
 pub mod decoding;
 pub mod errors;
 pub mod executor;
diff --git a/crates/brontes-core/src/local_provider.rs b/crates/brontes-core/src/local_provider.rs
index 2e1ba0eed..5c9e88227 100644
--- a/crates/brontes-core/src/local_provider.rs
+++ b/crates/brontes-core/src/local_provider.rs
@@ -1,16 +1,15 @@
 use std::sync::Arc;
 
+use alloy_primitives::{Address, BlockNumber, Bytes, StorageValue, TxHash, B256};
 use alloy_provider::{Provider, RootProvider};
 use alloy_rpc_types::AnyReceiptEnvelope;
 use alloy_transport_http::Http;
 use brontes_types::{structured_trace::TxTrace, traits::TracingProvider};
 use itertools::Itertools;
-use reth_primitives::{
-    Address, BlockId, BlockNumber, BlockNumberOrTag, Bytecode, Bytes, Header, StorageValue, TxHash,
-    B256,
-};
+use reth_primitives::Bytecode;
 use reth_rpc_types::{
-    state::StateOverride, BlockOverrides, Log, TransactionReceipt, TransactionRequest,
+    state::StateOverride, BlockId, BlockNumberOrTag, BlockOverrides, BlockTransactionsKind, Log,
+    TransactionReceipt, TransactionRequest,
 };
 
 #[derive(Debug, Clone)]
@@ -42,10 +41,11 @@ impl TracingProvider for LocalProvider {
         loop {
             let res = self
                 .provider
-                .call(&request.clone(), block_number.unwrap_or(BlockId::latest()))
+                .call(&request.clone())
+                .block(block_number.unwrap_or(BlockId::latest()))
                 .await;
             if res.is_ok() || attempts > self.retries {
-                return res.map_err(Into::into)
+                return res.map_err(Into::into);
             }
             attempts += 1
         }
@@ -53,7 +53,10 @@ impl TracingProvider for LocalProvider {
 
     async fn block_hash_for_id(&self, block_num: u64) -> eyre::Result<Option<B256>> {
         self.provider
-            .get_block(BlockId::Number(BlockNumberOrTag::Number(block_num)), true)
+            .get_block(
+                BlockId::Number(BlockNumberOrTag::Number(block_num)),
+                BlockTransactionsKind::Full,
+            )
             .await
             .map(|op| op.map(|block| block.header.hash.unwrap()))
             .map_err(Into::into)
@@ -94,48 +97,58 @@ impl TracingProvider for LocalProvider {
     }
 
     async fn block_and_tx_index(&self, hash: TxHash) -> eyre::Result<(u64, usize)> {
-        let tx = self.provider.get_transaction_by_hash(hash).await?;
         let err = || eyre::eyre!("failed to unwrap option");
+        let tx = self
+            .provider
+            .get_transaction_by_hash(hash)
+            .await?
+            .ok_or(err())?;
 
         Ok((tx.block_number.ok_or_else(err)?, tx.transaction_index.ok_or_else(err)? as usize))
     }
 
-    async fn header_by_number(&self, number: BlockNumber) -> eyre::Result<Option<Header>> {
+    async fn header_by_number(
+        &self,
+        number: BlockNumber,
+    ) -> eyre::Result<Option<reth_rpc_types::Header>> {
         let err = || eyre::eyre!("failed to unwrap option");
         let block = self
             .provider
-            .get_block(BlockId::Number(BlockNumberOrTag::Number(number)), true)
+            .get_block(
+                BlockId::Number(BlockNumberOrTag::Number(number)),
+                BlockTransactionsKind::Full,
+            )
             .await?
             .ok_or_else(err)?;
 
-        let header = Header {
-            number:                   block.header.number.ok_or_else(err)?,
-            base_fee_per_gas:         block.header.base_fee_per_gas.map(|f| f as u64),
-            mix_hash:                 block.header.mix_hash.ok_or_else(err)?,
-            withdrawals_root:         block.header.withdrawals_root,
-            parent_beacon_block_root: block.header.parent_beacon_block_root,
-            nonce:                    block
-                .header
-                .nonce
-                .map(|i| u64::from_be_bytes(*i))
-                .ok_or_else(err)?,
-            gas_used:                 block.header.gas_used as u64,
-            gas_limit:                block.header.gas_limit as u64,
-            timestamp:                block.header.timestamp,
-            difficulty:               block.header.difficulty,
-            state_root:               block.header.state_root,
-            parent_hash:              block.header.parent_hash,
-            receipts_root:            block.header.receipts_root,
-            transactions_root:        block.header.transactions_root,
-            logs_bloom:               block.header.logs_bloom,
-            extra_data:               block.header.extra_data,
-            blob_gas_used:            block.header.blob_gas_used.map(|f| f as u64),
-            excess_blob_gas:          block.header.excess_blob_gas.map(|f| f as u64),
-            ommers_hash:              block.header.uncles_hash,
-            beneficiary:              block.header.miner,
-        };
-
-        Ok(Some(header))
+        // let inner = block.header;
+        // let header = reth_rpc_types::Header {
+        //     hash: inner.hash,
+        //     parent_hash: inner.parent_hash,
+        //     uncles_hash: inner.parent_hash,
+        //     miner: inner.miner,
+        //     state_root: inner.state_root,
+        //     transactions_root: inner.transactions_root,
+        //     receipts_root: inner.receipts_root,
+        //     logs_bloom: inner.logs_bloom,
+        //     difficulty: inner.difficulty,
+        //     number: inner.number,
+        //     gas_limit: inner.gas_limit as u128,
+        //     gas_used: inner.gas_used as u128,
+        //     timestamp: inner.timestamp,
+        //     total_difficulty: Some(inner.difficulty),
+        //     extra_data: inner.extra_data,
+        //     mix_hash: inner.mix_hash,
+        //     nonce: inner.nonce,
+        //     base_fee_per_gas: inner.base_fee_per_gas.map(|v| v as u128),
+        //     withdrawals_root: inner.withdrawals_root,
+        //     blob_gas_used: inner.blob_gas_used.map(|v| v as u128),
+        //     excess_blob_gas: inner.excess_blob_gas.map(|v| v as u128),
+        //     parent_beacon_block_root: inner.parent_beacon_block_root,
+        //     requests_root: inner.requests_root,
+        // };
+
+        Ok(Some(block.header))
     }
 
     async fn get_storage(
@@ -150,7 +163,8 @@ impl TracingProvider for LocalProvider {
         };
         let storage_value = self
             .provider
-            .get_storage_at(address, storage_key.into(), block_id)
+            .get_storage_at(address, storage_key.into())
+            .block_id(block_id)
             .await?;
 
         Ok(Some(storage_value))
@@ -165,7 +179,11 @@ impl TracingProvider for LocalProvider {
             Some(number) => BlockId::Number(BlockNumberOrTag::Number(number)),
             None => BlockId::Number(BlockNumberOrTag::Latest),
         };
-        let bytes = self.provider.get_code_at(address, block_id).await?;
+        let bytes = self
+            .provider
+            .get_code_at(address)
+            .block_id(block_id)
+            .await?;
 
         let bytecode = Bytecode::new_raw(bytes);
         Ok(Some(bytecode))
diff --git a/crates/brontes-core/src/test_utils/mod.rs b/crates/brontes-core/src/test_utils/mod.rs
index 81bcd2c2e..f79fd82f6 100644
--- a/crates/brontes-core/src/test_utils/mod.rs
+++ b/crates/brontes-core/src/test_utils/mod.rs
@@ -27,8 +27,9 @@ use futures::future::join_all;
 use indicatif::MultiProgress;
 #[cfg(feature = "local-reth")]
 use reth_db::DatabaseEnv;
-use reth_primitives::{BlockHash, Header, B256};
+use reth_primitives::{BlockHash, B256};
 use reth_provider::ProviderError;
+use reth_rpc_types::Header;
 #[cfg(feature = "local-reth")]
 use reth_tracing_ext::init_db;
 #[cfg(feature = "local-reth")]
@@ -112,7 +113,7 @@ impl TraceLoader {
             tracing::info!("fetched missing data");
             return self
                 .test_metadata(block, USDT_ADDRESS)
-                .map_err(|_| TraceLoaderError::NoMetadataFound(block))
+                .map_err(|_| TraceLoaderError::NoMetadataFound(block));
         }
     }
 
@@ -521,13 +522,13 @@ fn init_crit_tables(db: &LibmdbxReadWriter) -> bool {
         tracing::info!("no highest block found");
         write_fn(0);
 
-        return true
+        return true;
     };
     // try load file.
     let Ok(cache_data) = std::fs::read_to_string(".test_cache.json") else {
         tracing::info!("no .test_cache.json found");
         write_fn(max_block);
-        return true
+        return true;
     };
 
     let stats: CritTablesCache = serde_json::from_str(&cache_data).unwrap();
diff --git a/crates/brontes-database/brontes-db/Cargo.toml b/crates/brontes-database/brontes-db/Cargo.toml
index d10459f4e..0f448235b 100644
--- a/crates/brontes-database/brontes-db/Cargo.toml
+++ b/crates/brontes-database/brontes-db/Cargo.toml
@@ -28,13 +28,13 @@ alloy-json-abi = { workspace = true, features = ["serde_json"] }
 
 
 # reth
-reth-primitives.workspace = true
-reth-interfaces.workspace = true
+reth-primitives-traits.workspace = true
+# reth-interfaces.workspace = true
 reth-libmdbx = { workspace = true, features = [
   "return-borrowed",
   "read-tx-timeouts",
 ] }
-reth-mdbx-sys = { git = "https://github.com/paradigmxyz/reth", rev = "ac29b4b" }
+reth-mdbx-sys = { git = "https://github.com/paradigmxyz/reth", rev = "560080e" }
 reth-db.workspace = true
 reth-rpc.workspace = true
 reth-rpc-types.workspace = true
@@ -51,6 +51,7 @@ parity-scale-codec = { version = "3.2.1", features = ["derive", "bytes"] }
 reth-codecs.workspace = true
 reth-codecs-derive.workspace = true
 proptest = "1.4"
+reth-storage-errors.workspace = true
 proptest-derive = "0.4"
 arbitrary = "1.3"
 rand = "0.8.5"
@@ -118,7 +119,7 @@ toml = "0.8.9"
 indicatif.workspace = true
 page_size = "0.6.0"
 schnellru = "0.2.2"
-
+# reth-interfaces.workspace = true
 # benches
 criterion = "0.5"
 human_bytes = "0.4.3"
diff --git a/crates/brontes-database/brontes-db/src/clickhouse/db_client.rs b/crates/brontes-database/brontes-db/src/clickhouse/db_client.rs
index be9163619..9818e1a28 100644
--- a/crates/brontes-database/brontes-db/src/clickhouse/db_client.rs
+++ b/crates/brontes-database/brontes-db/src/clickhouse/db_client.rs
@@ -1,7 +1,7 @@
 use std::{fmt::Debug, str::FromStr};
 
 use ::clickhouse::DbRow;
-use alloy_primitives::Address;
+use alloy_primitives::{Address, BlockHash, TxHash};
 use async_rate_limiter::{RateLimiter, RateLimiterBuilder, TimeUnit};
 use backon::{ExponentialBuilder, Retryable};
 #[cfg(feature = "local-clickhouse")]
@@ -40,7 +40,6 @@ use db_interfaces::{
 };
 use eyre::Result;
 use itertools::Itertools;
-use reth_primitives::{BlockHash, TxHash};
 use serde::{Deserialize, Serialize};
 use tokio::{sync::mpsc::UnboundedSender, time::Duration};
 use tracing::{debug, error, warn};
@@ -229,7 +228,15 @@ impl Clickhouse {
         let roots: Vec<TransactionRoot> = tree
             .tx_roots
             .iter()
-            .map(|root| (root, tree.header.number).into())
+            .map(|root| {
+                (
+                    root,
+                    tree.header
+                        .number
+                        .expect("No block number in header while inserting tree"),
+                )
+                    .into()
+            })
             .collect::<Vec<_>>();
 
         if let Some(tx) = self.buffered_insert_tx.as_ref() {
@@ -1387,7 +1394,7 @@ mod tests {
             .iter()
             .map(|root| {
                 DbDataWithRunId::<TransactionRoot>::new_with_run_id(
-                    (root, tree.header.number).into(),
+                    (root, tree.header.number.expect("Block number not set in header")).into(),
                     0,
                 )
             })
diff --git a/crates/brontes-database/brontes-db/src/clickhouse/http_client.rs b/crates/brontes-database/brontes-db/src/clickhouse/http_client.rs
index 89195c6b3..89543fc85 100644
--- a/crates/brontes-database/brontes-db/src/clickhouse/http_client.rs
+++ b/crates/brontes-database/brontes-db/src/clickhouse/http_client.rs
@@ -1,6 +1,6 @@
 use std::fmt::Debug;
 
-use alloy_primitives::{Address, TxHash};
+use alloy_primitives::{Address, BlockHash, TxHash};
 use brontes_types::{
     db::{
         dex::{DexPrices, DexQuotes},
@@ -13,7 +13,6 @@ use clickhouse::{remote_cursor::RemoteCursor, DbRow};
 use futures::TryStreamExt;
 use itertools::Itertools;
 use reqwest::StatusCode;
-use reth_primitives::BlockHash;
 use serde::Deserialize;
 
 use crate::{
diff --git a/crates/brontes-database/brontes-db/src/clickhouse/mod.rs b/crates/brontes-database/brontes-db/src/clickhouse/mod.rs
index 7aba3c281..2863c1b8a 100644
--- a/crates/brontes-database/brontes-db/src/clickhouse/mod.rs
+++ b/crates/brontes-database/brontes-db/src/clickhouse/mod.rs
@@ -9,9 +9,9 @@ pub mod errors;
 pub use db_client::*;
 #[cfg(feature = "local-clickhouse")]
 pub mod split_db;
+use alloy_primitives::{Address, BlockHash, TxHash};
 #[cfg(feature = "local-clickhouse")]
 pub use db_interfaces::clickhouse::config::ClickhouseConfig;
-use reth_primitives::{Address, BlockHash, TxHash};
 #[cfg(feature = "local-clickhouse")]
 pub use split_db::*;
 #[cfg(not(feature = "local-clickhouse"))]
diff --git a/crates/brontes-database/brontes-db/src/lib.rs b/crates/brontes-database/brontes-db/src/lib.rs
index 31f378609..7e5e1050a 100644
--- a/crates/brontes-database/brontes-db/src/lib.rs
+++ b/crates/brontes-database/brontes-db/src/lib.rs
@@ -1,8 +1,3 @@
-#![feature(trivial_bounds)]
-#![feature(associated_type_defaults)]
-#![feature(const_trait_impl)]
-#![feature(noop_waker)]
-
 pub mod clickhouse;
 pub mod libmdbx;
 pub mod parquet;
diff --git a/crates/brontes-database/brontes-db/src/libmdbx/db_utils/rclone_wrapper.rs b/crates/brontes-database/brontes-db/src/libmdbx/db_utils/rclone_wrapper.rs
index a7a81d505..99f9011a2 100644
--- a/crates/brontes-database/brontes-db/src/libmdbx/db_utils/rclone_wrapper.rs
+++ b/crates/brontes-database/brontes-db/src/libmdbx/db_utils/rclone_wrapper.rs
@@ -34,7 +34,9 @@ impl RCloneWrapper {
         self.get_all_tarballs()
             .await?
             .into_iter()
-            .filter_map(|files| u64::from_str(files.split('-').last()?.split('.').next()?).ok())
+            .filter_map(|files| {
+                u64::from_str(files.split('-').next_back()?.split('.').next()?).ok()
+            })
             .max()
             .ok_or_else(|| eyre!("no files found on r2"))
     }
@@ -133,7 +135,7 @@ impl RCloneWrapper {
     ) -> eyre::Result<()> {
         let mut directory_name = directory
             .components()
-            .last()
+            .next_back()
             .unwrap()
             .as_os_str()
             .to_str()
@@ -231,7 +233,7 @@ impl RCloneWrapper {
 
                     let directory = pathed
                         .components()
-                        .last()
+                        .next_back()
                         .unwrap()
                         .as_os_str()
                         .to_str()?
diff --git a/crates/brontes-database/brontes-db/src/libmdbx/env.rs b/crates/brontes-database/brontes-db/src/libmdbx/env.rs
index 21be00144..1f73ef217 100644
--- a/crates/brontes-database/brontes-db/src/libmdbx/env.rs
+++ b/crates/brontes-database/brontes-db/src/libmdbx/env.rs
@@ -3,16 +3,18 @@
 use std::{ops::Deref, path::Path};
 
 use brontes_libmdbx::{
-    DatabaseFlags, Environment, EnvironmentFlags, Geometry, MaxReadTransactionDuration, Mode,
-    PageSize, SyncMode,
+    DatabaseFlags, Environment, EnvironmentFlags, Geometry, HandleSlowReadersReturnCode,
+    MaxReadTransactionDuration, Mode, PageSize, SyncMode,
 };
 use reth_db::{
     database_metrics::{DatabaseMetadata, DatabaseMetadataValue},
+    mdbx::ffi,
     models::client_version::ClientVersion,
     tables::{TableType, Tables},
     DatabaseError,
 };
-use reth_interfaces::db::LogLevel;
+use reth_storage_errors::db::LogLevel;
+const TERABYTE: usize = GIGABYTE * 1024;
 const GIGABYTE: usize = 1024 * 1024 * 1024;
 
 /// MDBX allows up to 32767 readers (`MDBX_READERS_LIMIT`), but we limit it to
@@ -134,19 +136,28 @@ impl DatabaseMetadata for DatabaseEnv {
 
 impl DatabaseEnv {
     /// Opens the database at the specified path with the given `EnvKind`.
-
     pub fn open(
         path: &Path,
         kind: DatabaseEnvKind,
         args: DatabaseArguments,
-    ) -> Result<DatabaseEnv, DatabaseError> {
+    ) -> Result<Self, DatabaseError> {
+        let _lock_file = if kind.is_rw() {
+            Some(
+                reth_db::lockfile::StorageLock::try_acquire(path)
+                    .map_err(|err| DatabaseError::Other(err.to_string()))?,
+            )
+        } else {
+            None
+        };
+
         let mut inner_env = Environment::builder();
 
         let mode = match kind {
             DatabaseEnvKind::RO => Mode::ReadOnly,
             DatabaseEnvKind::RW => {
+                // enable writemap mode in RW mode
                 inner_env.write_map();
-                Mode::ReadWrite { sync_mode: SyncMode::SafeNoSync }
+                Mode::ReadWrite { sync_mode: SyncMode::Durable }
             }
         };
 
@@ -155,60 +166,55 @@ impl DatabaseEnv {
         debug_assert!(Tables::ALL.len() <= 256, "number of tables exceed max dbs");
         inner_env.set_max_dbs(256);
         inner_env.set_geometry(Geometry {
-            // Maximum database size of 4 TB
-            size:             Some(0..(4000 * GIGABYTE)),
-            // We grow the database in increments of a gigabyte
-            growth_step:      Some(GIGABYTE as isize),
-            shrink_threshold: Some(GIGABYTE as isize),
+            // Maximum database size of 4 terabytes
+            size:             Some(0..(4 * TERABYTE)),
+            // We grow the database in increments of 4 gigabytes
+            growth_step:      Some(4 * GIGABYTE as isize),
+            // The database never shrinks
+            shrink_threshold: Some(0),
             page_size:        Some(PageSize::Set(default_page_size())),
         });
-        #[cfg(not(windows))]
-        {
-            fn is_current_process(id: u32) -> bool {
-                #[cfg(unix)]
-                {
-                    id == std::os::unix::process::parent_id() || id == std::process::id()
-                }
-
-                #[cfg(not(unix))]
-                {
-                    id == std::process::id()
-                }
+
+        fn is_current_process(id: u32) -> bool {
+            #[cfg(unix)]
+            {
+                id == std::os::unix::process::parent_id() || id == std::process::id()
+            }
+
+            #[cfg(not(unix))]
+            {
+                id == std::process::id()
             }
-            inner_env.set_handle_slow_readers(
-                |process_id: u32,
-                 thread_id: u32,
-                 read_txn_id: u64,
-                 gap: usize,
-                 space: usize,
-                 retry: isize| {
-                    if space > MAX_SAFE_READER_SPACE {
-                        let message = if is_current_process(process_id) {
-                            "Current process has a long-lived database transaction that grows the \
-                             database file."
-                        } else {
-                            "External process has a long-lived database transaction that grows the \
-                             database file. Use shorter-lived read transactions or shut down the \
-                             node."
-                        };
-                        tracing::warn!(
-                            target: "brontes::db::mdbx",
-                            ?process_id,
-                            ?thread_id,
-                            ?read_txn_id,
-                            ?gap,
-                            ?space,
-                            ?retry,
-                            message
-                        )
-                    }
-
-                    brontes_libmdbx::HandleSlowReadersReturnCode::ProceedWithoutKillingReader
-                },
-            );
         }
+
+        extern "C" fn handle_slow_readers(
+            _env: *const ffi::MDBX_env,
+            _txn: *const ffi::MDBX_txn,
+            process_id: ffi::mdbx_pid_t,
+            _thread_id: ffi::mdbx_tid_t,
+            _read_txn_id: u64,
+            _gap: std::ffi::c_uint,
+            space: usize,
+            _retry: std::ffi::c_int,
+        ) -> HandleSlowReadersReturnCode {
+            if space > MAX_SAFE_READER_SPACE {
+                let _message = if is_current_process(process_id as u32) {
+                    "Current process has a long-lived database transaction that grows the database \
+                     file."
+                } else {
+                    "External process has a long-lived database transaction that grows the \
+                     database file. Use shorter-lived read transactions or shut down the node."
+                };
+            }
+
+            brontes_libmdbx::HandleSlowReadersReturnCode::ProceedWithoutKillingReader
+        }
+        inner_env.set_handle_slow_readers(handle_slow_readers);
+
         inner_env.set_flags(EnvironmentFlags {
             mode,
+            // We disable readahead because it improves performance for linear scans, but
+            // worsens it for random access (which is our access pattern outside of sync)
             no_rdahead: true,
             coalesce: true,
             exclusive: args.exclusive.unwrap_or_default(),
@@ -216,7 +222,33 @@ impl DatabaseEnv {
         });
         // Configure more readers
         inner_env.set_max_readers(DEFAULT_MAX_READERS);
-
+        // This parameter sets the maximum size of the "reclaimed list", and the unit of
+        // measurement is "pages". Reclaimed list is the list of freed pages
+        // that's populated during the lifetime of DB transaction, and through
+        // which MDBX searches when it needs to insert new record with overflow
+        // pages. The flow is roughly the following:
+        // 0. We need to insert a record that requires N number of overflow pages (in
+        //    consecutive sequence inside the DB file).
+        // 1. Get some pages from the freelist, put them into the reclaimed list.
+        // 2. Search through the reclaimed list for the sequence of size N.
+        // 3. a. If found, return the sequence.
+        // 3. b. If not found, repeat steps 1-3. If the reclaimed list size is larger than
+        //    the `rp augment limit`, stop the search and allocate new pages at the end of the file:
+        //    https://github.com/paradigmxyz/reth/blob/2a4c78759178f66e30c8976ec5d243b53102fc9a/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/mdbx.c#L11479-L11480.
+        //
+        // Basically, this parameter controls for how long do we search through the
+        // freelist before trying to allocate new pages. Smaller value will make
+        // MDBX to fallback to allocation faster, higher value will force MDBX
+        // to search through the freelist longer until the sequence of pages is
+        // found.
+        //
+        // The default value of this parameter is set depending on the DB size. The
+        // bigger the database, the larger is `rp augment limit`.
+        // https://github.com/paradigmxyz/reth/blob/2a4c78759178f66e30c8976ec5d243b53102fc9a/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/mdbx.c#L10018-L10024.
+        //
+        // Previously, MDBX set this value as `256 * 1024` constant. Let's fallback to
+        // this, because we want to prioritize freelist lookup speed over
+        // database growth. https://github.com/paradigmxyz/reth/blob/fa2b9b685ed9787636d962f4366caf34a9186e66/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/mdbx.c#L16017.
         inner_env.set_rp_augment_limit(256 * 1024);
 
         if let Some(log_level) = args.log_level {
@@ -242,7 +274,7 @@ impl DatabaseEnv {
                     LogLevel::Extra => 7,
                 });
             } else {
-                return Err(DatabaseError::LogLevelUnavailable(log_level))
+                return Err(DatabaseError::LogLevelUnavailable(log_level));
             }
         }
 
@@ -250,7 +282,7 @@ impl DatabaseEnv {
             inner_env.set_max_read_transaction_duration(max_read_transaction_duration);
         }
 
-        let env = DatabaseEnv {
+        let env = Self {
             inner: inner_env
                 .open(path)
                 .map_err(|e| DatabaseError::Open(e.into()))?,
diff --git a/crates/brontes-database/brontes-db/src/libmdbx/implementation/compressed_wrappers/tx.rs b/crates/brontes-database/brontes-db/src/libmdbx/implementation/compressed_wrappers/tx.rs
index e5cf17411..2b5a52f80 100644
--- a/crates/brontes-database/brontes-db/src/libmdbx/implementation/compressed_wrappers/tx.rs
+++ b/crates/brontes-database/brontes-db/src/libmdbx/implementation/compressed_wrappers/tx.rs
@@ -1,4 +1,4 @@
-use brontes_libmdbx::{ffi::DBI, TransactionKind, RO, RW};
+use brontes_libmdbx::{TransactionKind, DBI, RO, RW};
 use reth_db::{
     table::DupSort,
     transaction::{DbTx, DbTxMut},
diff --git a/crates/brontes-database/brontes-db/src/libmdbx/implementation/native/cursor.rs b/crates/brontes-database/brontes-db/src/libmdbx/implementation/native/cursor.rs
index a55dc8a6a..f4a0f67fa 100644
--- a/crates/brontes-database/brontes-db/src/libmdbx/implementation/native/cursor.rs
+++ b/crates/brontes-database/brontes-db/src/libmdbx/implementation/native/cursor.rs
@@ -14,7 +14,7 @@ use reth_db::{
     table::{DupSort, Encode, Table},
     DatabaseError, DatabaseWriteOperation,
 };
-use reth_interfaces::db::DatabaseWriteError;
+use reth_storage_errors::db::DatabaseWriteError;
 
 use super::utils::{decode_one, decode_value, decoder, uncompressable_ref_util};
 
@@ -47,7 +47,6 @@ impl<T: Table, K: TransactionKind> LibmdbxCursor<T, K> {
 }
 
 /// Takes `(key, value)` from the database and decodes it appropriately.
-
 impl<T: Table, K: TransactionKind> DbCursorRO<T> for LibmdbxCursor<T, K> {
     fn first(&mut self) -> PairResult<T> {
         decode!(self.inner.first())
diff --git a/crates/brontes-database/brontes-db/src/libmdbx/implementation/native/tx.rs b/crates/brontes-database/brontes-db/src/libmdbx/implementation/native/tx.rs
index e595f4f7c..b8d31612b 100644
--- a/crates/brontes-database/brontes-db/src/libmdbx/implementation/native/tx.rs
+++ b/crates/brontes-database/brontes-db/src/libmdbx/implementation/native/tx.rs
@@ -1,13 +1,13 @@
 use std::{str::FromStr, sync::Arc};
 
-use brontes_libmdbx::{ffi::DBI, DatabaseFlags, Transaction, TransactionKind, WriteFlags, RO, RW};
+use brontes_libmdbx::{DatabaseFlags, Transaction, TransactionKind, WriteFlags, DBI, RO, RW};
 use parking_lot::RwLock;
 use reth_db::{
     table::{Compress, DupSort, Encode, Table},
     transaction::{DbTx, DbTxMut},
     DatabaseError, DatabaseWriteOperation, TableType,
 };
-use reth_interfaces::db::DatabaseWriteError;
+use reth_storage_errors::db::DatabaseWriteError;
 
 use super::{cursor::LibmdbxCursor, utils::decode_one};
 use crate::libmdbx::{
diff --git a/crates/brontes-database/brontes-db/src/libmdbx/libmdbx_read_write.rs b/crates/brontes-database/brontes-db/src/libmdbx/libmdbx_read_write.rs
index 9cd8fbf83..552cc1422 100644
--- a/crates/brontes-database/brontes-db/src/libmdbx/libmdbx_read_write.rs
+++ b/crates/brontes-database/brontes-db/src/libmdbx/libmdbx_read_write.rs
@@ -34,7 +34,7 @@ use indicatif::ProgressBar;
 use itertools::Itertools;
 use malachite::Rational;
 use reth_db::table::{Compress, Encode};
-use reth_interfaces::db::LogLevel;
+use reth_storage_errors::db::LogLevel;
 use tokio::sync::mpsc::{unbounded_channel, UnboundedSender};
 use tracing::{info, instrument};
 
@@ -220,7 +220,7 @@ impl LibmdbxInit for LibmdbxReadWriter {
             for table in tables_to_init {
                 result.insert(table, vec![start_block as usize..=end_block as usize]);
             }
-            return Ok(StateToInitialize { ranges_to_init: result })
+            return Ok(StateToInitialize { ranges_to_init: result });
         }
 
         let start_block = start_block as usize;
@@ -258,7 +258,7 @@ impl LibmdbxInit for LibmdbxReadWriter {
                 for (i, mut range) in table_res.into_iter().enumerate() {
                     // if there are no zeros, then this chuck is fully init
                     if range.count_zeros() == 0 {
-                        continue
+                        continue;
                     }
 
                     let mut sft_cnt = 0;
@@ -274,7 +274,7 @@ impl LibmdbxInit for LibmdbxReadWriter {
                     while range.count_ones() != 0 && sft_cnt <= 127 {
                         let leading_zeros = range.leading_zeros();
                         if leading_zeros == 127 {
-                            break
+                            break;
                         }
                         // if we have leading 1's, skip to the end of the leading ones
                         else if leading_zeros == 0 {
@@ -287,11 +287,11 @@ impl LibmdbxInit for LibmdbxReadWriter {
                             // mark the start_block now that we have shifted these out
                             let block = start_block + (i * 128) + sft_cnt as usize;
                             if range_start_block.is_some() || sft_cnt >= 128 {
-                                continue
+                                continue;
                             }
                             range_start_block = Some(block);
 
-                            continue
+                            continue;
                         } else {
                             // take range,
                             range <<= leading_zeros;
@@ -373,7 +373,7 @@ impl StateToInitialize {
                             let end = *f.end();
                             // if start or end out of range
                             if end < start_block || start > end_block {
-                                return None
+                                return None;
                             }
 
                             let new_start = std::cmp::max(start_block, start) as u64;
diff --git a/crates/brontes-database/brontes-db/src/libmdbx/mod.rs b/crates/brontes-database/brontes-db/src/libmdbx/mod.rs
index 421f8914f..943eba196 100644
--- a/crates/brontes-database/brontes-db/src/libmdbx/mod.rs
+++ b/crates/brontes-database/brontes-db/src/libmdbx/mod.rs
@@ -33,7 +33,6 @@ use reth_db::{
     version::{check_db_version_file, create_db_version_file, DatabaseVersionError},
     DatabaseError,
 };
-use reth_interfaces::db::LogLevel;
 use tables::*;
 use tracing::info;
 
@@ -47,7 +46,7 @@ pub use implementation::compressed_wrappers::*;
 pub mod tables;
 pub mod types;
 pub mod utils;
-
+use reth_storage_errors::db::LogLevel;
 #[cfg(feature = "tests")]
 pub mod test_utils;
 
@@ -197,7 +196,7 @@ impl Libmdbx {
             if let Some(key) = cur.prev()? {
                 start = Some(key.0);
             } else {
-                return Ok(res)
+                return Ok(res);
             }
             tracing::info!("recycling tx on long lived read");
             tx.commit()?;
diff --git a/crates/brontes-database/brontes-db/src/libmdbx/tables/mod.rs b/crates/brontes-database/brontes-db/src/libmdbx/tables/mod.rs
index 772f5db9a..41231690e 100644
--- a/crates/brontes-database/brontes-db/src/libmdbx/tables/mod.rs
+++ b/crates/brontes-database/brontes-db/src/libmdbx/tables/mod.rs
@@ -566,7 +566,6 @@ macro_rules! compressed_table {
         impl reth_db::table::Table for $table_name {
             // this type is needed for the trait impl but we never actually use it,
             // so an arbitrary table will do
-            const TABLE: reth_db::Tables = reth_db::Tables::CanonicalHeaders;
             const NAME: &'static str = stringify!($table_name);
             type Key = $key;
             type Value = $c_val;
diff --git a/crates/brontes-database/libmdbx-rs/Cargo.toml b/crates/brontes-database/libmdbx-rs/Cargo.toml
index 7959ffa25..bd4852cfe 100644
--- a/crates/brontes-database/libmdbx-rs/Cargo.toml
+++ b/crates/brontes-database/libmdbx-rs/Cargo.toml
@@ -18,21 +18,14 @@ thiserror.workspace = true
 dashmap = { version = "5.5.3", features = ["inline"], optional = true }
 tracing.workspace = true
 
-ffi = { package = "reth-mdbx-sys", git = "https://github.com/paradigmxyz/reth", rev = "ac29b4b" }
+ffi = { package = "reth-mdbx-sys", git = "https://github.com/paradigmxyz/reth", rev = "560080e" }
 
 [dev-dependencies]
 tempfile = "3.8"
 criterion = "0.5"
 pprof = "0.13"
 
-[target.'cfg(not(windows))'.dependencies]
-libffi = "3.2.0"
-
 [features]
 default = []
 return-borrowed = []
 read-tx-timeouts = ["dashmap", "dashmap/inline"]
-
-
-
-
diff --git a/crates/brontes-database/libmdbx-rs/src/codec.rs b/crates/brontes-database/libmdbx-rs/src/codec.rs
index d422fa3c9..6b024ee71 100644
--- a/crates/brontes-database/libmdbx-rs/src/codec.rs
+++ b/crates/brontes-database/libmdbx-rs/src/codec.rs
@@ -24,7 +24,7 @@ pub trait TableObject: Sized {
     }
 }
 
-impl<'tx> TableObject for Cow<'tx, [u8]> {
+impl TableObject for Cow<'_, [u8]> {
     fn decode(_: &[u8]) -> Result<Self, Error> {
         unreachable!()
     }
@@ -83,7 +83,7 @@ impl TableObject for ObjectLength {
 impl<const LEN: usize> TableObject for [u8; LEN] {
     fn decode(data_val: &[u8]) -> Result<Self, Error> {
         if data_val.len() != LEN {
-            return Err(Error::DecodeErrorLenDiff)
+            return Err(Error::DecodeErrorLenDiff);
         }
         let mut a = [0; LEN];
         a[..].copy_from_slice(data_val);
diff --git a/crates/brontes-database/libmdbx-rs/src/cursor.rs b/crates/brontes-database/libmdbx-rs/src/cursor.rs
index a16520f7a..56ccbab29 100644
--- a/crates/brontes-database/libmdbx-rs/src/cursor.rs
+++ b/crates/brontes-database/libmdbx-rs/src/cursor.rs
@@ -1,5 +1,5 @@
 use std::{borrow::Cow, fmt, marker::PhantomData, mem, ptr};
-extern crate ffi;
+
 use ffi::{
     MDBX_cursor_op, MDBX_FIRST, MDBX_FIRST_DUP, MDBX_GET_BOTH, MDBX_GET_BOTH_RANGE,
     MDBX_GET_CURRENT, MDBX_GET_MULTIPLE, MDBX_LAST, MDBX_LAST_DUP, MDBX_NEXT, MDBX_NEXT_DUP,
@@ -57,7 +57,7 @@ where
     ///
     /// The caller **must** ensure that the pointer is not used after the
     /// lifetime of the cursor.
-    pub fn cursor(&self) -> *mut ffi::MDBX_cursor {
+    pub const fn cursor(&self) -> *mut ffi::MDBX_cursor {
         self.cursor
     }
 
@@ -104,7 +104,7 @@ where
                 assert_ne!(data_ptr, data_val.iov_base);
                 let key_out = {
                     // MDBX wrote in new key
-                    if key_ptr != key_val.iov_base {
+                    if !std::ptr::eq(key_ptr, key_val.iov_base) {
                         Some(Key::decode_val::<K>(txn, key_val)?)
                     } else {
                         None
@@ -154,7 +154,7 @@ where
         self.get_full(None, None, MDBX_FIRST)
     }
 
-    /// [DatabaseFlags::DUP_SORT]-only: Position at first data item of current
+    /// [`DatabaseFlags::DUP_SORT`]-only: Position at first data item of current
     /// key.
     pub fn first_dup<Value>(&mut self) -> Result<Option<Value>>
     where
@@ -163,7 +163,7 @@ where
         self.get_value(None, None, MDBX_FIRST_DUP)
     }
 
-    /// [DatabaseFlags::DUP_SORT]-only: Position at key/data pair.
+    /// [`DatabaseFlags::DUP_SORT`]-only: Position at key/data pair.
     pub fn get_both<Value>(&mut self, k: &[u8], v: &[u8]) -> Result<Option<Value>>
     where
         Value: TableObject,
@@ -171,8 +171,8 @@ where
         self.get_value(Some(k), Some(v), MDBX_GET_BOTH)
     }
 
-    /// [DatabaseFlags::DUP_SORT]-only: Position at given key and at first data
-    /// greater than or equal to specified data.
+    /// [`DatabaseFlags::DUP_SORT`]-only: Position at given key and at first
+    /// data greater than or equal to specified data.
     pub fn get_both_range<Value>(&mut self, k: &[u8], v: &[u8]) -> Result<Option<Value>>
     where
         Value: TableObject,
@@ -190,7 +190,8 @@ where
     }
 
     /// DupFixed-only: Return up to a page of duplicate data items from current
-    /// cursor position. Move cursor to prepare for [Self::next_multiple()].
+    /// cursor position. Move cursor to prepare for
+    /// [`Self::next_multiple()`].
     pub fn get_multiple<Value>(&mut self) -> Result<Option<Value>>
     where
         Value: TableObject,
@@ -225,7 +226,7 @@ where
         self.get_full(None, None, MDBX_NEXT)
     }
 
-    /// [DatabaseFlags::DUP_SORT]-only: Position at next data item of current
+    /// [`DatabaseFlags::DUP_SORT`]-only: Position at next data item of current
     /// key.
     pub fn next_dup<Key, Value>(&mut self) -> Result<Option<(Key, Value)>>
     where
@@ -235,9 +236,9 @@ where
         self.get_full(None, None, MDBX_NEXT_DUP)
     }
 
-    /// [DatabaseFlags::DUP_FIXED]-only: Return up to a page of duplicate data
+    /// [`DatabaseFlags::DUP_FIXED`]-only: Return up to a page of duplicate data
     /// items from next cursor position. Move cursor to prepare for
-    /// MDBX_NEXT_MULTIPLE.
+    /// `MDBX_NEXT_MULTIPLE`.
     pub fn next_multiple<Key, Value>(&mut self) -> Result<Option<(Key, Value)>>
     where
         Key: TableObject,
@@ -264,7 +265,7 @@ where
         self.get_full(None, None, MDBX_PREV)
     }
 
-    /// [DatabaseFlags::DUP_SORT]-only: Position at previous data item of
+    /// [`DatabaseFlags::DUP_SORT`]-only: Position at previous data item of
     /// current key.
     pub fn prev_dup<Key, Value>(&mut self) -> Result<Option<(Key, Value)>>
     where
@@ -309,8 +310,8 @@ where
         self.get_full(Some(key), None, MDBX_SET_RANGE)
     }
 
-    /// [DatabaseFlags::DUP_FIXED]-only: Position at previous page and return up
-    /// to a page of duplicate data items.
+    /// [`DatabaseFlags::DUP_FIXED`]-only: Position at previous page and return
+    /// up to a page of duplicate data items.
     pub fn prev_multiple<Key, Value>(&mut self) -> Result<Option<(Key, Value)>>
     where
         Key: TableObject,
@@ -324,7 +325,7 @@ where
     /// match.
     ///
     /// For non DupSort-ed collections this works the same as
-    /// [Self::set_range()], but returns [false] if key found exactly and
+    /// [`Self::set_range()`], but returns [false] if key found exactly and
     /// [true] if greater key was found.
     ///
     /// For DupSort-ed a data value is taken into account for duplicates, i.e.
@@ -347,9 +348,9 @@ where
     /// until the end of the database. For new cursors, the iterator will
     /// begin with the first item in the database.
     ///
-    /// For databases with duplicate data items ([DatabaseFlags::DUP_SORT]), the
-    /// duplicate data items of each key will be returned before moving on to
-    /// the next key.
+    /// For databases with duplicate data items ([`DatabaseFlags::DUP_SORT`]),
+    /// the duplicate data items of each key will be returned before moving
+    /// on to the next key.
     pub fn iter<Key, Value>(&mut self) -> Iter<'_, K, Key, Value>
     where
         Key: TableObject,
@@ -360,9 +361,9 @@ where
 
     /// Iterate over database items starting from the beginning of the database.
     ///
-    /// For databases with duplicate data items ([DatabaseFlags::DUP_SORT]), the
-    /// duplicate data items of each key will be returned before moving on to
-    /// the next key.
+    /// For databases with duplicate data items ([`DatabaseFlags::DUP_SORT`]),
+    /// the duplicate data items of each key will be returned before moving
+    /// on to the next key.
     pub fn iter_start<Key, Value>(&mut self) -> Iter<'_, K, Key, Value>
     where
         Key: TableObject,
@@ -373,9 +374,9 @@ where
 
     /// Iterate over database items starting from the given key.
     ///
-    /// For databases with duplicate data items ([DatabaseFlags::DUP_SORT]), the
-    /// duplicate data items of each key will be returned before moving on to
-    /// the next key.
+    /// For databases with duplicate data items ([`DatabaseFlags::DUP_SORT`]),
+    /// the duplicate data items of each key will be returned before moving
+    /// on to the next key.
     pub fn iter_from<Key, Value>(&mut self, key: &[u8]) -> Iter<'_, K, Key, Value>
     where
         Key: TableObject,
@@ -383,7 +384,7 @@ where
     {
         let res: Result<Option<((), ())>> = self.set_range(key);
         if let Err(error) = res {
-            return Iter::Err(Some(error))
+            return Iter::Err(Some(error));
         };
         Iter::new(self, ffi::MDBX_GET_CURRENT, ffi::MDBX_NEXT)
     }
@@ -418,7 +419,7 @@ where
     {
         let res: Result<Option<((), ())>> = self.set_range(key);
         if let Err(error) = res {
-            return IterDup::Err(Some(error))
+            return IterDup::Err(Some(error));
         };
         IterDup::new(self, ffi::MDBX_GET_CURRENT)
     }
@@ -435,7 +436,7 @@ where
             Ok(Some(_)) => (),
             Ok(None) => {
                 let _: Result<Option<((), ())>> = self.last();
-                return Iter::new(self, ffi::MDBX_NEXT, ffi::MDBX_NEXT)
+                return Iter::new(self, ffi::MDBX_NEXT, ffi::MDBX_NEXT);
             }
             Err(error) => return Iter::Err(Some(error)),
         };
@@ -464,8 +465,9 @@ impl Cursor<RW> {
     ///
     /// ### Flags
     ///
-    /// [WriteFlags::NO_DUP_DATA] may be used to delete all data items for the
-    /// current key, if the database was opened with [DatabaseFlags::DUP_SORT].
+    /// [`WriteFlags::NO_DUP_DATA`] may be used to delete all data items for the
+    /// current key, if the database was opened with
+    /// [`DatabaseFlags::DUP_SORT`].
     pub fn del(&mut self, flags: WriteFlags) -> Result<()> {
         mdbx_result(unsafe {
             self.txn
@@ -507,7 +509,7 @@ where
     }
 }
 
-unsafe fn slice_to_val(slice: Option<&[u8]>) -> ffi::MDBX_val {
+const unsafe fn slice_to_val(slice: Option<&[u8]>) -> ffi::MDBX_val {
     match slice {
         Some(slice) => {
             ffi::MDBX_val { iov_len: slice.len(), iov_base: slice.as_ptr() as *mut c_void }
@@ -527,14 +529,14 @@ where
     Key: TableObject,
     Value: TableObject,
 {
-    /// An iterator that returns an error on every call to [Iter::next()].
+    /// An iterator that returns an error on every call to [`Iter::next()`].
     /// Cursor.iter*() creates an Iter of this type when MDBX returns an error
     /// on retrieval of a cursor.  Using this variant instead of returning
-    /// an error makes Cursor.iter()* methods infallible, so consumers only
-    /// need to check the result of Iter.next().
+    /// an error makes `Cursor.iter()`* methods infallible, so consumers only
+    /// need to check the result of `Iter.next()`.
     Err(Option<Error>),
 
-    /// An iterator that returns an Item on calls to [Iter::next()].
+    /// An iterator that returns an Item on calls to [`Iter::next()`].
     /// The Item is a [Result], so this variant
     /// might still return an error, if retrieval of the key/value pair
     /// fails for some reason.
@@ -543,7 +545,7 @@ where
         cursor: Cursor<K>,
 
         /// The first operation to perform when the consumer calls
-        /// [Iter::next()].
+        /// [`Iter::next()`].
         op: ffi::MDBX_cursor_op,
 
         /// The next and subsequent operations to perform.
@@ -553,7 +555,7 @@ where
     },
 }
 
-impl<'cur, K, Key, Value> IntoIter<'cur, K, Key, Value>
+impl<K, Key, Value> IntoIter<'_, K, Key, Value>
 where
     K: TransactionKind,
     Key: TableObject,
@@ -565,7 +567,7 @@ where
     }
 }
 
-impl<'cur, K, Key, Value> Iterator for IntoIter<'cur, K, Key, Value>
+impl<K, Key, Value> Iterator for IntoIter<'_, K, Key, Value>
 where
     K: TransactionKind,
     Key: TableObject,
@@ -619,14 +621,14 @@ where
     Key: TableObject,
     Value: TableObject,
 {
-    /// An iterator that returns an error on every call to [Iter::next()].
+    /// An iterator that returns an error on every call to [`Iter::next()`].
     /// Cursor.iter*() creates an Iter of this type when MDBX returns an error
     /// on retrieval of a cursor.  Using this variant instead of returning
-    /// an error makes Cursor.iter()* methods infallible, so consumers only
-    /// need to check the result of Iter.next().
+    /// an error makes `Cursor.iter()`* methods infallible, so consumers only
+    /// need to check the result of `Iter.next()`.
     Err(Option<Error>),
 
-    /// An iterator that returns an Item on calls to [Iter::next()].
+    /// An iterator that returns an Item on calls to [`Iter::next()`].
     /// The Item is a [Result], so this variant
     /// might still return an error, if retrieval of the key/value pair
     /// fails for some reason.
@@ -635,7 +637,7 @@ where
         cursor: &'cur mut Cursor<K>,
 
         /// The first operation to perform when the consumer calls
-        /// [Iter::next()].
+        /// [`Iter::next()`].
         op: ffi::MDBX_cursor_op,
 
         /// The next and subsequent operations to perform.
@@ -661,7 +663,7 @@ where
     }
 }
 
-impl<'cur, K, Key, Value> Iterator for Iter<'cur, K, Key, Value>
+impl<K, Key, Value> Iterator for Iter<'_, K, Key, Value>
 where
     K: TransactionKind,
     Key: TableObject,
@@ -717,14 +719,14 @@ where
     Key: TableObject,
     Value: TableObject,
 {
-    /// An iterator that returns an error on every call to Iter.next().
+    /// An iterator that returns an error on every call to `Iter.next()`.
     /// Cursor.iter*() creates an Iter of this type when MDBX returns an error
     /// on retrieval of a cursor.  Using this variant instead of returning
-    /// an error makes Cursor.iter()* methods infallible, so consumers only
-    /// need to check the result of Iter.next().
+    /// an error makes `Cursor.iter()`* methods infallible, so consumers only
+    /// need to check the result of `Iter.next()`.
     Err(Option<Error>),
 
-    /// An iterator that returns an Item on calls to Iter.next().
+    /// An iterator that returns an Item on calls to `Iter.next()`.
     /// The Item is a Result<(&'txn [u8], &'txn [u8])>, so this variant
     /// might still return an error, if retrieval of the key/value pair
     /// fails for some reason.
@@ -732,7 +734,8 @@ where
         /// The MDBX cursor with which to iterate.
         cursor: &'cur mut Cursor<K>,
 
-        /// The first operation to perform when the consumer calls Iter.next().
+        /// The first operation to perform when the consumer calls
+        /// `Iter.next()`.
         op: MDBX_cursor_op,
 
         _marker: PhantomData<fn(&'cur (Key, Value))>,
@@ -751,7 +754,7 @@ where
     }
 }
 
-impl<'cur, K, Key, Value> fmt::Debug for IterDup<'cur, K, Key, Value>
+impl<K, Key, Value> fmt::Debug for IterDup<'_, K, Key, Value>
 where
     K: TransactionKind,
     Key: TableObject,
diff --git a/crates/brontes-database/libmdbx-rs/src/database.rs b/crates/brontes-database/libmdbx-rs/src/database.rs
index a9e05303a..4ea050905 100644
--- a/crates/brontes-database/libmdbx-rs/src/database.rs
+++ b/crates/brontes-database/libmdbx-rs/src/database.rs
@@ -39,20 +39,20 @@ impl Database {
         Ok(Self::new_from_ptr(dbi, txn.env().clone()))
     }
 
-    pub(crate) fn new_from_ptr(dbi: ffi::MDBX_dbi, env: Environment) -> Self {
+    pub(crate) const fn new_from_ptr(dbi: ffi::MDBX_dbi, env: Environment) -> Self {
         Self { dbi, _env: Some(env) }
     }
 
     /// Opens the freelist database with DBI `0`.
-    pub fn freelist_db() -> Self {
-        Database { dbi: 0, _env: None }
+    pub const fn freelist_db() -> Self {
+        Self { dbi: 0, _env: None }
     }
 
     /// Returns the underlying MDBX database handle.
     ///
     /// The caller **must** ensure that the handle is not used after the
     /// lifetime of the environment, or after the database has been closed.
-    pub fn dbi(&self) -> ffi::MDBX_dbi {
+    pub const fn dbi(&self) -> ffi::MDBX_dbi {
         self.dbi
     }
 }
diff --git a/crates/brontes-database/libmdbx-rs/src/environment.rs b/crates/brontes-database/libmdbx-rs/src/environment.rs
index de294e977..a4df31fed 100644
--- a/crates/brontes-database/libmdbx-rs/src/environment.rs
+++ b/crates/brontes-database/libmdbx-rs/src/environment.rs
@@ -1,7 +1,6 @@
 use std::{
     ffi::CString,
-    fmt,
-    fmt::Debug,
+    fmt::{self, Debug},
     mem,
     ops::{Bound, RangeBounds},
     path::Path,
@@ -26,7 +25,7 @@ use crate::{
 
 /// The default maximum duration of a read transaction.
 #[cfg(feature = "read-tx-timeouts")]
-const DEFAULT_MAX_READ_TRANSACTION_DURATION: Duration = Duration::from_secs(120);
+const DEFAULT_MAX_READ_TRANSACTION_DURATION: Duration = Duration::from_secs(5 * 60);
 
 /// An environment supports multiple databases, all residing in the same
 /// shared-memory map.
@@ -56,7 +55,6 @@ impl Environment {
             geometry: None,
             log_level: None,
             kind: Default::default(),
-            #[cfg(not(windows))]
             handle_slow_readers: None,
             #[cfg(feature = "read-tx-timeouts")]
             max_read_transaction_duration: None,
@@ -75,14 +73,14 @@ impl Environment {
         self.inner.env_kind
     }
 
-    /// Returns true if the environment was opened in [crate::Mode::ReadWrite]
+    /// Returns true if the environment was opened in [`crate::Mode::ReadWrite`]
     /// mode.
     #[inline]
     pub fn is_read_write(&self) -> bool {
         self.inner.env_kind.is_write_map()
     }
 
-    /// Returns true if the environment was opened in [crate::Mode::ReadOnly]
+    /// Returns true if the environment was opened in [`crate::Mode::ReadOnly`]
     /// mode.
     #[inline]
     pub fn is_read_only(&self) -> bool {
@@ -127,13 +125,13 @@ impl Environment {
             if matches!(&res, Err(Error::Busy)) {
                 if !warned {
                     warned = true;
-                    warn!(target: "brontes-libmdbx", "Process stalled, awaiting read-write transaction lock.");
+                    warn!(target: "libmdbx", "Process stalled, awaiting read-write transaction lock.");
                 }
-                sleep(Duration::from_millis(15));
-                continue
+                sleep(Duration::from_millis(250));
+                continue;
             }
 
-            break res
+            break res;
         }?;
         Ok(Transaction::new_from_ptr(self.clone(), txn.0))
     }
@@ -198,12 +196,12 @@ impl Environment {
 
     /// Retrieves the total number of pages on the freelist.
     ///
-    /// Along with [Environment::info()], this can be used to calculate the
+    /// Along with [`Environment::info()`], this can be used to calculate the
     /// exact number of used pages as well as free pages in this
     /// environment.
     ///
     /// ```
-    /// # use brontes_libmdbx::Environment;
+    /// # use reth_libmdbx::Environment;
     /// let dir = tempfile::tempdir().unwrap();
     /// let env = Environment::builder().open(dir.path()).unwrap();
     /// let info = env.info().unwrap();
@@ -231,7 +229,7 @@ impl Environment {
         for result in cursor.iter_slices() {
             let (_key, value) = result?;
             if value.len() < size_of::<usize>() {
-                return Err(Error::Corrupted)
+                return Err(Error::Corrupted);
             }
 
             let s = &value[..size_of::<usize>()];
@@ -245,7 +243,7 @@ impl Environment {
 /// Container type for Environment internals.
 ///
 /// This holds the raw pointer to the MDBX environment and the transaction
-/// manager. The env is opened via [mdbx_env_create](ffi::mdbx_env_create) and
+/// manager. The env is opened via [`mdbx_env_create`](ffi::mdbx_env_create) and
 /// closed when this type drops.
 struct EnvironmentInner {
     /// The raw pointer to the MDBX environment.
@@ -283,10 +281,10 @@ pub enum EnvironmentKind {
     Default,
     /// Open the environment as mdbx-WRITEMAP.
     /// Use a writeable memory map unless the environment is opened as
-    /// MDBX_RDONLY ([crate::Mode::ReadOnly]).
+    /// `MDBX_RDONLY` ([`crate::Mode::ReadOnly`]).
     ///
     /// All data will be mapped into memory in the read-write mode
-    /// [crate::Mode::ReadWrite]. This offers a significant performance
+    /// [`crate::Mode::ReadWrite`]. This offers a significant performance
     /// benefit, since the data will be modified directly in mapped memory
     /// and then flushed to disk by single system call, without any memory
     /// management nor copying.
@@ -299,14 +297,14 @@ impl EnvironmentKind {
     /// Returns true if the environment was opened as WRITEMAP.
     #[inline]
     pub const fn is_write_map(&self) -> bool {
-        matches!(self, EnvironmentKind::WriteMap)
+        matches!(self, Self::WriteMap)
     }
 
     /// Additional flags required when opening the environment.
-    pub(crate) fn extra_flags(&self) -> ffi::MDBX_env_flags_t {
+    pub(crate) const fn extra_flags(&self) -> ffi::MDBX_env_flags_t {
         match self {
-            EnvironmentKind::Default => ffi::MDBX_ENV_DEFAULTS,
-            EnvironmentKind::WriteMap => ffi::MDBX_WRITEMAP,
+            Self::Default => ffi::MDBX_ENV_DEFAULTS,
+            Self::WriteMap => ffi::MDBX_WRITEMAP,
         }
     }
 }
@@ -326,8 +324,8 @@ pub struct Stat(ffi::MDBX_stat);
 
 impl Stat {
     /// Create a new Stat with zero'd inner struct `ffi::MDB_stat`.
-    pub(crate) fn new() -> Stat {
-        unsafe { Stat(mem::zeroed()) }
+    pub(crate) const fn new() -> Self {
+        unsafe { Self(mem::zeroed()) }
     }
 
     /// Returns a mut pointer to `ffi::MDB_stat`.
@@ -340,37 +338,37 @@ impl Stat {
     /// Size of a database page. This is the same for all databases in the
     /// environment.
     #[inline]
-    pub fn page_size(&self) -> u32 {
+    pub const fn page_size(&self) -> u32 {
         self.0.ms_psize
     }
 
     /// Depth (height) of the B-tree.
     #[inline]
-    pub fn depth(&self) -> u32 {
+    pub const fn depth(&self) -> u32 {
         self.0.ms_depth
     }
 
     /// Number of internal (non-leaf) pages.
     #[inline]
-    pub fn branch_pages(&self) -> usize {
+    pub const fn branch_pages(&self) -> usize {
         self.0.ms_branch_pages as usize
     }
 
     /// Number of leaf pages.
     #[inline]
-    pub fn leaf_pages(&self) -> usize {
+    pub const fn leaf_pages(&self) -> usize {
         self.0.ms_leaf_pages as usize
     }
 
     /// Number of overflow pages.
     #[inline]
-    pub fn overflow_pages(&self) -> usize {
+    pub const fn overflow_pages(&self) -> usize {
         self.0.ms_overflow_pages as usize
     }
 
     /// Number of data items.
     #[inline]
-    pub fn entries(&self) -> usize {
+    pub const fn entries(&self) -> usize {
         self.0.ms_entries as usize
     }
 }
@@ -380,7 +378,7 @@ impl Stat {
 pub struct GeometryInfo(ffi::MDBX_envinfo__bindgen_ty_1);
 
 impl GeometryInfo {
-    pub fn min(&self) -> u64 {
+    pub const fn min(&self) -> u64 {
         self.0.lower
     }
 }
@@ -394,43 +392,43 @@ impl GeometryInfo {
 pub struct Info(ffi::MDBX_envinfo);
 
 impl Info {
-    pub fn geometry(&self) -> GeometryInfo {
+    pub const fn geometry(&self) -> GeometryInfo {
         GeometryInfo(self.0.mi_geo)
     }
 
     /// Size of memory map.
     #[inline]
-    pub fn map_size(&self) -> usize {
+    pub const fn map_size(&self) -> usize {
         self.0.mi_mapsize as usize
     }
 
     /// Last used page number
     #[inline]
-    pub fn last_pgno(&self) -> usize {
+    pub const fn last_pgno(&self) -> usize {
         self.0.mi_last_pgno as usize
     }
 
     /// Last transaction ID
     #[inline]
-    pub fn last_txnid(&self) -> usize {
+    pub const fn last_txnid(&self) -> usize {
         self.0.mi_recent_txnid as usize
     }
 
     /// Max reader slots in the environment
     #[inline]
-    pub fn max_readers(&self) -> usize {
+    pub const fn max_readers(&self) -> usize {
         self.0.mi_maxreaders as usize
     }
 
     /// Max reader slots used in the environment
     #[inline]
-    pub fn num_readers(&self) -> usize {
+    pub const fn num_readers(&self) -> usize {
         self.0.mi_numreaders as usize
     }
 
     /// Return the internal page ops metrics
     #[inline]
-    pub fn page_ops(&self) -> PageOps {
+    pub const fn page_ops(&self) -> PageOps {
         PageOps {
             newly:    self.0.mi_pgop_stat.newly,
             cow:      self.0.mi_pgop_stat.cow,
@@ -492,7 +490,7 @@ pub struct PageOps {
     pub fsync:    u64,
     /// Number of prefault write operations
     pub prefault: u64,
-    /// Number of mincore() calls
+    /// Number of `mincore()` calls
     pub mincore:  u64,
 }
 
@@ -545,6 +543,7 @@ impl<R> Default for Geometry<R> {
 ///   timeout reset logic while waiting for a readers.
 ///
 /// # Returns
+///
 /// A return code that determines the further actions for MDBX and must match
 /// the action which was executed by the callback:
 /// * `-2` or less – An error condition and the reader was not killed.
@@ -561,48 +560,39 @@ impl<R> Default for Geometry<R> {
 ///   `mdbx_txn_abort()` nor `mdbx_txn_reset()` will be called later.
 /// * `2` or greater – The reader process was terminated or killed, and MDBX
 ///   should entirely reset reader registration.
-pub type HandleSlowReadersCallback = fn(
-    process_id: u32,
-    thread_id: u32,
-    read_txn_id: u64,
-    gap: usize,
+pub type HandleSlowReadersCallback = extern "C" fn(
+    env: *const ffi::MDBX_env,
+    txn: *const ffi::MDBX_txn,
+    pid: ffi::mdbx_pid_t,
+    tid: ffi::mdbx_tid_t,
+    laggard: u64,
+    gap: std::ffi::c_uint,
     space: usize,
-    retry: isize,
+    retry: std::ffi::c_int,
 ) -> HandleSlowReadersReturnCode;
 
 #[derive(Debug)]
+#[repr(i32)]
 pub enum HandleSlowReadersReturnCode {
     /// An error condition and the reader was not killed.
-    Error,
+    Error           = -2,
     /// The callback was unable to solve the problem and agreed on
     /// `MDBX_MAP_FULL` error; MDBX should increase the database size or
     /// return `MDBX_MAP_FULL` error.
-    ProceedWithoutKillingReader,
+    ProceedWithoutKillingReader = -1,
     /// The callback solved the problem or just waited for a while, libmdbx
     /// should rescan the reader lock table and retry. This also includes a
     /// situation when corresponding transaction terminated in normal way by
     /// `mdbx_txn_abort()` or `mdbx_txn_reset()`, and may be restarted. I.e.
     /// reader slot isn't needed to be cleaned from transaction.
-    Success,
+    Success         = 0,
     /// Transaction aborted asynchronous and reader slot should be cleared
     /// immediately, i.e. read transaction will not continue but
     /// `mdbx_txn_abort()` nor `mdbx_txn_reset()` will be called later.
-    ClearReaderSlot,
+    ClearReaderSlot = 1,
     /// The reader process was terminated or killed, and MDBX should entirely
     /// reset reader registration.
-    ReaderProcessTerminated,
-}
-
-impl From<HandleSlowReadersReturnCode> for i32 {
-    fn from(value: HandleSlowReadersReturnCode) -> Self {
-        match value {
-            HandleSlowReadersReturnCode::Error => -2,
-            HandleSlowReadersReturnCode::ProceedWithoutKillingReader => -1,
-            HandleSlowReadersReturnCode::Success => 0,
-            HandleSlowReadersReturnCode::ClearReaderSlot => 1,
-            HandleSlowReadersReturnCode::ReaderProcessTerminated => 2,
-        }
-    }
+    ReaderProcessTerminated = 2,
 }
 
 /// Options for opening or creating an environment.
@@ -620,12 +610,11 @@ pub struct EnvironmentBuilder {
     geometry: Option<Geometry<(Option<usize>, Option<usize>)>>,
     log_level: Option<ffi::MDBX_log_level_t>,
     kind: EnvironmentKind,
-    #[cfg(not(windows))]
     handle_slow_readers: Option<HandleSlowReadersCallback>,
     #[cfg(feature = "read-tx-timeouts")]
     /// The maximum duration of a read transaction. If [None], but the
     /// `read-tx-timeout` feature is enabled, the default value of
-    /// [DEFAULT_MAX_READ_TRANSACTION_DURATION] is used.
+    /// [`DEFAULT_MAX_READ_TRANSACTION_DURATION`] is used.
     max_read_transaction_duration: Option<read_transactions::MaxReadTransactionDuration>,
 }
 
@@ -707,11 +696,10 @@ impl EnvironmentBuilder {
                     ))?;
                 }
 
-                #[cfg(not(windows))]
                 if let Some(handle_slow_readers) = self.handle_slow_readers {
                     mdbx_result(ffi::mdbx_env_set_hsr(
                         env,
-                        handle_slow_readers_callback(handle_slow_readers),
+                        convert_hsr_fn(Some(handle_slow_readers)),
                     ))?;
                 }
 
@@ -744,7 +732,7 @@ impl EnvironmentBuilder {
             })() {
                 ffi::mdbx_env_close_ex(env, false);
 
-                return Err(e)
+                return Err(e);
             }
         }
 
@@ -780,7 +768,7 @@ impl EnvironmentBuilder {
 
     /// Opens the environment with mdbx WRITEMAP
     ///
-    /// See also [EnvironmentKind]
+    /// See also [`EnvironmentKind`]
     pub fn write_map(&mut self) -> &mut Self {
         self.set_kind(EnvironmentKind::WriteMap)
     }
@@ -810,7 +798,7 @@ impl EnvironmentBuilder {
     ///
     /// Currently a moderate number of slots are cheap but a huge number gets
     /// expensive: 7-120 words per transaction, and every
-    /// [Transaction::open_db()] does a linear search of the opened slots.
+    /// [`Transaction::open_db()`] does a linear search of the opened slots.
     pub fn set_max_dbs(&mut self, v: usize) -> &mut Self {
         self.max_dbs = Some(v as u64);
         self
@@ -869,9 +857,8 @@ impl EnvironmentBuilder {
         self
     }
 
-    /// Set the Handle-Slow-Readers callback. See [HandleSlowReadersCallback]
+    /// Set the Handle-Slow-Readers callback. See [`HandleSlowReadersCallback`]
     /// for more information.
-    #[cfg(not(windows))]
     pub fn set_handle_slow_readers(&mut self, hsr: HandleSlowReadersCallback) -> &mut Self {
         self.handle_slow_readers = Some(hsr);
         self
@@ -897,10 +884,10 @@ pub(crate) mod read_transactions {
 
     #[cfg(feature = "read-tx-timeouts")]
     impl MaxReadTransactionDuration {
-        pub fn as_duration(&self) -> Option<Duration> {
+        pub const fn as_duration(&self) -> Option<Duration> {
             match self {
-                MaxReadTransactionDuration::Unbounded => None,
-                MaxReadTransactionDuration::Set(duration) => Some(*duration),
+                Self::Unbounded => None,
+                Self::Set(duration) => Some(*duration),
             }
         }
     }
@@ -917,41 +904,93 @@ pub(crate) mod read_transactions {
     }
 }
 
-/// Creates an instance of `MDBX_hsr_func`.
-///
-/// Caution: this leaks the memory for callbacks, so they're alive throughout
-/// the program. It's fine, because we also expect the database environment to
-/// be alive during this whole time.
-#[cfg(not(windows))]
-unsafe fn handle_slow_readers_callback(callback: HandleSlowReadersCallback) -> ffi::MDBX_hsr_func {
-    // Move the callback function to heap and intentionally leak it, so it's not
-    // dropped and the MDBX env can use it throughout the whole program.
-    let callback = Box::leak(Box::new(callback));
-
-    // Wrap the callback into an ffi binding. The callback is needed for a nicer UX
-    // with Rust types, and without `env` and `txn` arguments that we don't want
-    // to expose to the user. Again, move the closure to heap and leak.
-    let hsr = Box::leak(Box::new(
-        |_env: *const ffi::MDBX_env,
-         _txn: *const ffi::MDBX_txn,
-         pid: ffi::mdbx_pid_t,
-         tid: ffi::mdbx_tid_t,
-         laggard: u64,
-         gap: ::libc::c_uint,
-         space: usize,
-         retry: ::libc::c_int|
-         -> i32 {
-            callback(pid as u32, tid as u32, laggard, gap as usize, space, retry as isize).into()
-        },
-    ));
-
-    // Create a pointer to the C function from the Rust closure, and forcefully
-    // forget the original closure.
-    let closure = libffi::high::Closure8::new(hsr);
-    let closure_ptr = *closure.code_ptr();
-    std::mem::forget(closure);
-
-    // Cast the closure to FFI `extern fn` type.
-    #[allow(clippy::missing_transmute_annotations)]
-    Some(std::mem::transmute(closure_ptr))
+/// Converts a [`HandleSlowReadersCallback`] to the actual FFI function pointer.
+#[allow(clippy::missing_transmute_annotations)]
+fn convert_hsr_fn(callback: Option<HandleSlowReadersCallback>) -> ffi::MDBX_hsr_func {
+    unsafe { std::mem::transmute(callback) }
+}
+
+#[cfg(test)]
+mod tests {
+    use std::{
+        ops::RangeInclusive,
+        sync::atomic::{AtomicBool, Ordering},
+    };
+
+    use crate::{Environment, Error, Geometry, HandleSlowReadersReturnCode, PageSize, WriteFlags};
+
+    #[test]
+    fn test_handle_slow_readers_callback() {
+        static CALLED: AtomicBool = AtomicBool::new(false);
+
+        extern "C" fn handle_slow_readers(
+            _env: *const ffi::MDBX_env,
+            _txn: *const ffi::MDBX_txn,
+            _pid: ffi::mdbx_pid_t,
+            _tid: ffi::mdbx_tid_t,
+            _laggard: u64,
+            _gap: std::ffi::c_uint,
+            _space: usize,
+            _retry: std::ffi::c_int,
+        ) -> HandleSlowReadersReturnCode {
+            CALLED.store(true, Ordering::Relaxed);
+            HandleSlowReadersReturnCode::ProceedWithoutKillingReader
+        }
+
+        let tempdir = tempfile::tempdir().unwrap();
+        let env = Environment::builder()
+            .set_geometry(Geometry::<RangeInclusive<usize>> {
+                size: Some(0..=1024 * 1024), // Max 1MB, so we can hit the limit
+                page_size: Some(PageSize::MinimalAcceptable), // To create as many pages as possible
+                ..Default::default()
+            })
+            .set_handle_slow_readers(handle_slow_readers)
+            .open(tempdir.path())
+            .unwrap();
+
+        // Insert some data in the database, so the read transaction can lock on the
+        // snapshot of it
+        {
+            let tx = env.begin_rw_txn().unwrap();
+            let db = tx.open_db(None).unwrap();
+            for i in 0usize..1_000 {
+                tx.put(db.dbi(), i.to_le_bytes(), b"0", WriteFlags::empty())
+                    .unwrap()
+            }
+            tx.commit().unwrap();
+        }
+
+        // Create a read transaction
+        let _tx_ro = env.begin_ro_txn().unwrap();
+
+        // Change previously inserted data, so the read transaction would use the
+        // previous snapshot
+        {
+            let tx = env.begin_rw_txn().unwrap();
+            let db = tx.open_db(None).unwrap();
+            for i in 0usize..1_000 {
+                tx.put(db.dbi(), i.to_le_bytes(), b"1", WriteFlags::empty())
+                    .unwrap();
+            }
+            tx.commit().unwrap();
+        }
+
+        // Insert more data in the database, so we hit the DB size limit error, and MDBX
+        // tries to kick long-lived readers and delete their snapshots
+        {
+            let tx = env.begin_rw_txn().unwrap();
+            let db = tx.open_db(None).unwrap();
+            for i in 1_000usize..1_000_000 {
+                match tx.put(db.dbi(), i.to_le_bytes(), b"0", WriteFlags::empty()) {
+                    Ok(_) => continue,
+                    Err(Error::MapFull) => break,
+                    result @ Err(_) => result.unwrap(),
+                }
+            }
+            tx.commit().unwrap();
+        }
+
+        // Expect the HSR to be called
+        assert!(CALLED.load(Ordering::Relaxed));
+    }
 }
diff --git a/crates/brontes-database/libmdbx-rs/src/error.rs b/crates/brontes-database/libmdbx-rs/src/error.rs
index bbb5502df..a66bb586a 100644
--- a/crates/brontes-database/libmdbx-rs/src/error.rs
+++ b/crates/brontes-database/libmdbx-rs/src/error.rs
@@ -116,12 +116,12 @@ pub enum Error {
     #[error("invalid parameter specified or active write transaction")]
     DecodeErrorLenDiff,
     /// If the [Environment](crate::Environment) was opened with
-    /// [EnvironmentKind::WriteMap](crate::EnvironmentKind::WriteMap) flag,
+    /// [`EnvironmentKind::WriteMap`](crate::EnvironmentKind::WriteMap) flag,
     /// nested transactions are not supported.
     #[error("nested transactions are not supported with WriteMap")]
     NestedTransactionsUnsupportedWithWriteMap,
     /// If the [Environment](crate::Environment) was opened with in read-only
-    /// mode [Mode::ReadOnly](crate::flags::Mode::ReadOnly), write
+    /// mode [`Mode::ReadOnly`](crate::flags::Mode::ReadOnly), write
     /// transactions can't be opened.
     #[error("write transactions are not supported in read-only mode")]
     WriteTransactionUnsupportedInReadOnlyMode,
@@ -135,77 +135,77 @@ pub enum Error {
 
 impl Error {
     /// Converts a raw error code to an [Error].
-    pub fn from_err_code(err_code: c_int) -> Error {
+    pub const fn from_err_code(err_code: c_int) -> Self {
         match err_code {
-            ffi::MDBX_KEYEXIST => Error::KeyExist,
-            ffi::MDBX_NOTFOUND => Error::NotFound,
-            ffi::MDBX_ENODATA => Error::NoData,
-            ffi::MDBX_PAGE_NOTFOUND => Error::PageNotFound,
-            ffi::MDBX_CORRUPTED => Error::Corrupted,
-            ffi::MDBX_PANIC => Error::Panic,
-            ffi::MDBX_VERSION_MISMATCH => Error::VersionMismatch,
-            ffi::MDBX_INVALID => Error::Invalid,
-            ffi::MDBX_MAP_FULL => Error::MapFull,
-            ffi::MDBX_DBS_FULL => Error::DbsFull,
-            ffi::MDBX_READERS_FULL => Error::ReadersFull,
-            ffi::MDBX_TXN_FULL => Error::TxnFull,
-            ffi::MDBX_CURSOR_FULL => Error::CursorFull,
-            ffi::MDBX_PAGE_FULL => Error::PageFull,
-            ffi::MDBX_UNABLE_EXTEND_MAPSIZE => Error::UnableExtendMapSize,
-            ffi::MDBX_INCOMPATIBLE => Error::Incompatible,
-            ffi::MDBX_BAD_RSLOT => Error::BadRslot,
-            ffi::MDBX_BAD_TXN => Error::BadTxn,
-            ffi::MDBX_BAD_VALSIZE => Error::BadValSize,
-            ffi::MDBX_BAD_DBI => Error::BadDbi,
-            ffi::MDBX_PROBLEM => Error::Problem,
-            ffi::MDBX_BUSY => Error::Busy,
-            ffi::MDBX_EMULTIVAL => Error::Multival,
-            ffi::MDBX_WANNA_RECOVERY => Error::WannaRecovery,
-            ffi::MDBX_EKEYMISMATCH => Error::KeyMismatch,
-            ffi::MDBX_EINVAL => Error::DecodeError,
-            ffi::MDBX_EACCESS => Error::Access,
-            ffi::MDBX_TOO_LARGE => Error::TooLarge,
-            ffi::MDBX_EBADSIGN => Error::BadSignature,
-            other => Error::Other(other),
+            ffi::MDBX_KEYEXIST => Self::KeyExist,
+            ffi::MDBX_NOTFOUND => Self::NotFound,
+            ffi::MDBX_ENODATA => Self::NoData,
+            ffi::MDBX_PAGE_NOTFOUND => Self::PageNotFound,
+            ffi::MDBX_CORRUPTED => Self::Corrupted,
+            ffi::MDBX_PANIC => Self::Panic,
+            ffi::MDBX_VERSION_MISMATCH => Self::VersionMismatch,
+            ffi::MDBX_INVALID => Self::Invalid,
+            ffi::MDBX_MAP_FULL => Self::MapFull,
+            ffi::MDBX_DBS_FULL => Self::DbsFull,
+            ffi::MDBX_READERS_FULL => Self::ReadersFull,
+            ffi::MDBX_TXN_FULL => Self::TxnFull,
+            ffi::MDBX_CURSOR_FULL => Self::CursorFull,
+            ffi::MDBX_PAGE_FULL => Self::PageFull,
+            ffi::MDBX_UNABLE_EXTEND_MAPSIZE => Self::UnableExtendMapSize,
+            ffi::MDBX_INCOMPATIBLE => Self::Incompatible,
+            ffi::MDBX_BAD_RSLOT => Self::BadRslot,
+            ffi::MDBX_BAD_TXN => Self::BadTxn,
+            ffi::MDBX_BAD_VALSIZE => Self::BadValSize,
+            ffi::MDBX_BAD_DBI => Self::BadDbi,
+            ffi::MDBX_PROBLEM => Self::Problem,
+            ffi::MDBX_BUSY => Self::Busy,
+            ffi::MDBX_EMULTIVAL => Self::Multival,
+            ffi::MDBX_WANNA_RECOVERY => Self::WannaRecovery,
+            ffi::MDBX_EKEYMISMATCH => Self::KeyMismatch,
+            ffi::MDBX_EINVAL => Self::DecodeError,
+            ffi::MDBX_EACCESS => Self::Access,
+            ffi::MDBX_TOO_LARGE => Self::TooLarge,
+            ffi::MDBX_EBADSIGN => Self::BadSignature,
+            other => Self::Other(other),
         }
     }
 
     /// Converts an [Error] to the raw error code.
-    pub fn to_err_code(&self) -> i32 {
+    pub const fn to_err_code(&self) -> i32 {
         match self {
-            Error::KeyExist => ffi::MDBX_KEYEXIST,
-            Error::NotFound => ffi::MDBX_NOTFOUND,
-            Error::NoData => ffi::MDBX_ENODATA,
-            Error::PageNotFound => ffi::MDBX_PAGE_NOTFOUND,
-            Error::Corrupted => ffi::MDBX_CORRUPTED,
-            Error::Panic => ffi::MDBX_PANIC,
-            Error::VersionMismatch => ffi::MDBX_VERSION_MISMATCH,
-            Error::Invalid => ffi::MDBX_INVALID,
-            Error::MapFull => ffi::MDBX_MAP_FULL,
-            Error::DbsFull => ffi::MDBX_DBS_FULL,
-            Error::ReadersFull => ffi::MDBX_READERS_FULL,
-            Error::TxnFull => ffi::MDBX_TXN_FULL,
-            Error::CursorFull => ffi::MDBX_CURSOR_FULL,
-            Error::PageFull => ffi::MDBX_PAGE_FULL,
-            Error::UnableExtendMapSize => ffi::MDBX_UNABLE_EXTEND_MAPSIZE,
-            Error::Incompatible => ffi::MDBX_INCOMPATIBLE,
-            Error::BadRslot => ffi::MDBX_BAD_RSLOT,
-            Error::BadTxn => ffi::MDBX_BAD_TXN,
-            Error::BadValSize => ffi::MDBX_BAD_VALSIZE,
-            Error::BadDbi => ffi::MDBX_BAD_DBI,
-            Error::Problem => ffi::MDBX_PROBLEM,
-            Error::Busy => ffi::MDBX_BUSY,
-            Error::Multival => ffi::MDBX_EMULTIVAL,
-            Error::WannaRecovery => ffi::MDBX_WANNA_RECOVERY,
-            Error::KeyMismatch => ffi::MDBX_EKEYMISMATCH,
-            Error::DecodeErrorLenDiff | Error::DecodeError => ffi::MDBX_EINVAL,
-            Error::Access => ffi::MDBX_EACCESS,
-            Error::TooLarge => ffi::MDBX_TOO_LARGE,
-            Error::BadSignature => ffi::MDBX_EBADSIGN,
-            Error::WriteTransactionUnsupportedInReadOnlyMode => ffi::MDBX_EACCESS,
-            Error::NestedTransactionsUnsupportedWithWriteMap => ffi::MDBX_EACCESS,
-            Error::ReadTransactionTimeout => -96000, // Custom non-MDBX error code
-            Error::Other(err_code) => *err_code,
+            Self::KeyExist => ffi::MDBX_KEYEXIST,
+            Self::NotFound => ffi::MDBX_NOTFOUND,
+            Self::NoData => ffi::MDBX_ENODATA,
+            Self::PageNotFound => ffi::MDBX_PAGE_NOTFOUND,
+            Self::Corrupted => ffi::MDBX_CORRUPTED,
+            Self::Panic => ffi::MDBX_PANIC,
+            Self::VersionMismatch => ffi::MDBX_VERSION_MISMATCH,
+            Self::Invalid => ffi::MDBX_INVALID,
+            Self::MapFull => ffi::MDBX_MAP_FULL,
+            Self::DbsFull => ffi::MDBX_DBS_FULL,
+            Self::ReadersFull => ffi::MDBX_READERS_FULL,
+            Self::TxnFull => ffi::MDBX_TXN_FULL,
+            Self::CursorFull => ffi::MDBX_CURSOR_FULL,
+            Self::PageFull => ffi::MDBX_PAGE_FULL,
+            Self::UnableExtendMapSize => ffi::MDBX_UNABLE_EXTEND_MAPSIZE,
+            Self::Incompatible => ffi::MDBX_INCOMPATIBLE,
+            Self::BadRslot => ffi::MDBX_BAD_RSLOT,
+            Self::BadTxn => ffi::MDBX_BAD_TXN,
+            Self::BadValSize => ffi::MDBX_BAD_VALSIZE,
+            Self::BadDbi => ffi::MDBX_BAD_DBI,
+            Self::Problem => ffi::MDBX_PROBLEM,
+            Self::Busy => ffi::MDBX_BUSY,
+            Self::Multival => ffi::MDBX_EMULTIVAL,
+            Self::WannaRecovery => ffi::MDBX_WANNA_RECOVERY,
+            Self::KeyMismatch => ffi::MDBX_EKEYMISMATCH,
+            Self::DecodeErrorLenDiff | Self::DecodeError => ffi::MDBX_EINVAL,
+            Self::TooLarge => ffi::MDBX_TOO_LARGE,
+            Self::BadSignature => ffi::MDBX_EBADSIGN,
+            Self::Access
+            | Self::WriteTransactionUnsupportedInReadOnlyMode
+            | Self::NestedTransactionsUnsupportedWithWriteMap => ffi::MDBX_EACCESS,
+            Self::ReadTransactionTimeout => -96000, // Custom non-MDBX error code
+            Self::Other(err_code) => *err_code,
         }
     }
 }
@@ -217,7 +217,7 @@ impl From<Error> for i32 {
 }
 
 #[inline]
-pub(crate) fn mdbx_result(err_code: c_int) -> Result<bool> {
+pub(crate) const fn mdbx_result(err_code: c_int) -> Result<bool> {
     match err_code {
         ffi::MDBX_SUCCESS => Ok(false),
         ffi::MDBX_RESULT_TRUE => Ok(true),
@@ -235,3 +235,20 @@ macro_rules! mdbx_try_optional {
         }
     }};
 }
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+
+    #[test]
+    fn test_description() {
+        assert_eq!("the environment opened in read-only", Error::from_err_code(13).to_string());
+
+        assert_eq!("file is not an MDBX file", Error::Invalid.to_string());
+    }
+
+    #[test]
+    fn test_conversion() {
+        assert_eq!(Error::from_err_code(ffi::MDBX_KEYEXIST), Error::KeyExist);
+    }
+}
diff --git a/crates/brontes-database/libmdbx-rs/src/flags.rs b/crates/brontes-database/libmdbx-rs/src/flags.rs
index e0361539b..4641c9510 100644
--- a/crates/brontes-database/libmdbx-rs/src/flags.rs
+++ b/crates/brontes-database/libmdbx-rs/src/flags.rs
@@ -15,8 +15,8 @@ pub enum SyncMode {
     /// Flush system buffers to disk only once per transaction commit, omit the
     /// metadata flush. Defer that until the system flushes files to disk,
     /// or next non-read-only commit or
-    /// [Environment::sync()](crate::Environment::sync). Depending on the
-    /// platform and hardware, with [SyncMode::NoMetaSync] you may get a
+    /// [`Environment::sync()`](crate::Environment::sync). Depending on the
+    /// platform and hardware, with [`SyncMode::NoMetaSync`] you may get a
     /// doubling of write performance.
     ///
     /// This trade-off maintains database integrity, but a system crash may undo
@@ -27,27 +27,27 @@ pub enum SyncMode {
 
     /// Don't sync anything but keep previous steady commits.
     ///
-    /// [SyncMode::UtterlyNoSync] the [SyncMode::SafeNoSync] flag disable
+    /// [`SyncMode::UtterlyNoSync`] the [`SyncMode::SafeNoSync`] flag disable
     /// similarly flush system buffers to disk when committing a
     /// transaction. But there is a huge difference in how are recycled the
-    /// MVCC static_files corresponding to previous "steady" transactions (see
-    /// below).
+    /// MVCC snapshots corresponding to previous "steady" transactions
+    /// (see below).
     ///
-    /// With [crate::EnvironmentKind::WriteMap] the [SyncMode::SafeNoSync]
+    /// With [`crate::EnvironmentKind::WriteMap`] the [`SyncMode::SafeNoSync`]
     /// instructs MDBX to use asynchronous mmap-flushes to disk.
     /// Asynchronous mmap-flushes means that actually all writes will
     /// scheduled and performed by operation system on it own manner, i.e.
     /// unordered. MDBX itself just notify operating system that it would be
     /// nice to write data to disk, but no more.
     ///
-    /// Depending on the platform and hardware, with [SyncMode::SafeNoSync] you
-    /// may get a multiple increase of write performance, even 10 times or
-    /// more.
+    /// Depending on the platform and hardware, with [`SyncMode::SafeNoSync`]
+    /// you may get a multiple increase of write performance, even 10 times
+    /// or more.
     ///
-    /// In contrast to [SyncMode::UtterlyNoSync] mode, with
-    /// [SyncMode::SafeNoSync] flag MDBX will keeps untouched pages within
-    /// B-tree of the last transaction "steady" which was synced to
-    /// disk completely. This has big implications for both data durability and
+    /// In contrast to [`SyncMode::UtterlyNoSync`] mode, with
+    /// [`SyncMode::SafeNoSync`] flag MDBX will keeps untouched pages within
+    /// B-tree of the last transaction "steady" which was synced to disk
+    /// completely. This has big implications for both data durability and
     /// (unfortunately) performance:
     /// - A system crash can't corrupt the database, but you will lose the last
     ///   transactions; because MDBX will rollback to last steady commit since
@@ -61,17 +61,17 @@ pub enum SyncMode {
     ///   insufficient space and before increasing the size of the file on disk.
     ///
     /// In other words, with
-    /// [SyncMode::SafeNoSync] flag MDBX protects you from the whole database
+    /// [`SyncMode::SafeNoSync`] flag MDBX protects you from the whole database
     /// corruption, at the cost increasing database size and/or number of
-    /// disk IOPs. So, [SyncMode::SafeNoSync] flag could be used with
-    /// [Environment::sync()](crate::Environment::sync) as alternatively for
-    /// batch committing or nested transaction (in some cases).
+    /// disk IOPs. So, [`SyncMode::SafeNoSync`] flag could be used with
+    /// [`Environment::sync()`](crate::Environment::sync) as alternatively
+    /// for batch committing or nested transaction (in some cases).
     ///
-    /// The number and volume of of disk IOPs with [SyncMode::SafeNoSync] flag
+    /// The number and volume of of disk IOPs with [`SyncMode::SafeNoSync`] flag
     /// will exactly the as without any no-sync flags. However, you should
     /// expect a larger process's work set and significantly worse a
-    /// locality of reference, due to the more intensive allocation of
-    /// previously unused pages and increase the size of the database.
+    /// locality of reference, due to the more intensive allocation
+    /// of previously unused pages and increase the size of the database.
     SafeNoSync,
 
     /// Don't sync anything and wipe previous steady commits.
@@ -79,40 +79,40 @@ pub enum SyncMode {
     /// Don't flush system buffers to disk when committing a transaction.
     /// This optimization means a system crash can corrupt the database, if
     /// buffers are not yet flushed to disk. Depending on the platform and
-    /// hardware, with [SyncMode::UtterlyNoSync] you may get a multiple
+    /// hardware, with [`SyncMode::UtterlyNoSync`] you may get a multiple
     /// increase of write performance, even 100 times or more.
     ///
     /// If the filesystem preserves write order (which is rare and never
     /// provided unless explicitly noted) and the
-    /// [WriteMap](crate::EnvironmentKind::WriteMap) and
-    /// [EnvironmentFlags::liforeclaim] flags are not used, then a system crash
-    /// can't corrupt the database, but you can lose the last transactions,
-    /// if at least one buffer is not yet flushed to disk. The risk is
-    /// governed by how often the system flushes dirty buffers to
-    /// disk and how often [Environment::sync()](crate::Environment::sync) is
+    /// [`WriteMap`](crate::EnvironmentKind::WriteMap) and
+    /// [`EnvironmentFlags::liforeclaim`] flags are not used, then a system
+    /// crash can't corrupt the database, but you can lose the last
+    /// transactions, if at least one buffer is not yet flushed to disk. The
+    /// risk is governed by how often the system flushes dirty buffers to
+    /// disk and how often [`Environment::sync()`](crate::Environment::sync) is
     /// called. So, transactions exhibit ACPI (atomicity, consistency,
     /// isolation) properties and only lose D (durability). I.e. database
     /// integrity is maintained, but a system crash may undo the
     /// final transactions.
     ///
     /// Otherwise, if the filesystem not preserves write order (which is
-    /// typically) or [WriteMap](crate::EnvironmentKind::WriteMap) or
-    /// [EnvironmentFlags::liforeclaim] flags are used, you should expect
+    /// typically) or [`WriteMap`](crate::EnvironmentKind::WriteMap) or
+    /// [`EnvironmentFlags::liforeclaim`] flags are used, you should expect
     /// the corrupted database after a system crash.
     ///
-    /// So, most important thing about [SyncMode::UtterlyNoSync]:
+    /// So, most important thing about [`SyncMode::UtterlyNoSync`]:
     /// - A system crash immediately after commit the write transaction high
     ///   likely lead to database corruption.
     /// - Successful completion of
-    ///   [Environment::sync(force=true)](crate::Environment::sync) after one or
-    ///   more committed transactions guarantees consistency and durability.
+    ///   [`Environment::sync(force=true`)](crate::Environment::sync) after one
+    ///   or more committed transactions guarantees consistency and durability.
     /// - BUT by committing two or more transactions you back database into a
     ///   weak state, in which a system crash may lead to database corruption!
     ///   In case single transaction after
-    ///   [Environment::sync()](crate::Environment::sync), you may lose
+    ///   [`Environment::sync()`](crate::Environment::sync), you may lose
     ///   transaction itself, but not a whole database.
     ///
-    /// Nevertheless, [SyncMode::UtterlyNoSync] provides "weak" durability in
+    /// Nevertheless, [`SyncMode::UtterlyNoSync`] provides "weak" durability in
     /// case of an application crash (but no durability on system failure), and
     /// therefore may be very useful in scenarios where data durability is
     /// not required over a system failure (e.g for short-lived data), or if
@@ -163,7 +163,7 @@ pub struct EnvironmentFlags {
 
 impl EnvironmentFlags {
     /// Configures the mdbx flags to use when opening the environment.
-    pub(crate) fn make_flags(&self) -> ffi::MDBX_env_flags_t {
+    pub(crate) const fn make_flags(&self) -> ffi::MDBX_env_flags_t {
         let mut flags = 0;
 
         if self.no_sub_dir {
diff --git a/crates/brontes-database/libmdbx-rs/src/lib.rs b/crates/brontes-database/libmdbx-rs/src/lib.rs
index d6bb95119..c9ad154fe 100644
--- a/crates/brontes-database/libmdbx-rs/src/lib.rs
+++ b/crates/brontes-database/libmdbx-rs/src/lib.rs
@@ -5,9 +5,15 @@
     issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
-#![allow(missing_docs)]
+#![allow(missing_docs, clippy::needless_pass_by_ref_mut)]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 
+// pub extern crate ffi as ffi;
+
+pub use ffi::{MDBX_dbi as DBI, MDBX_log_level_t as LogLevel};
+
+#[cfg(feature = "read-tx-timeouts")]
+pub use crate::environment::read_transactions::MaxReadTransactionDuration;
 pub use crate::{
     codec::*,
     cursor::{Cursor, Iter, IterDup},
@@ -20,12 +26,6 @@ pub use crate::{
     flags::*,
     transaction::{CommitLatency, Transaction, TransactionKind, RO, RW},
 };
-pub mod ffi {
-    pub use ffi::{MDBX_dbi as DBI, MDBX_log_level_t as LogLevel};
-}
-
-#[cfg(feature = "read-tx-timeouts")]
-pub use crate::environment::read_transactions::MaxReadTransactionDuration;
 
 mod codec;
 mod cursor;
@@ -43,7 +43,7 @@ mod test_utils {
 
     use super::*;
 
-    /// Regression test for https://github.com/danburkert/lmdb-rs/issues/21.
+    /// Regression test for <https://github.com/danburkert/lmdb-rs/issues/21>.
     /// This test reliably segfaults when run against lmbdb compiled with opt
     /// level -O3 and newer GCC compilers.
     #[test]
diff --git a/crates/brontes-database/libmdbx-rs/src/transaction.rs b/crates/brontes-database/libmdbx-rs/src/transaction.rs
index 6d59047cd..9ac1e502d 100644
--- a/crates/brontes-database/libmdbx-rs/src/transaction.rs
+++ b/crates/brontes-database/libmdbx-rs/src/transaction.rs
@@ -137,8 +137,8 @@ where
     ///
     /// This function retrieves the data associated with the given key in the
     /// database. If the database supports duplicate keys
-    /// ([DatabaseFlags::DUP_SORT]) then the first data item for the key will be
-    /// returned. Retrieval of other items requires the use of
+    /// ([`DatabaseFlags::DUP_SORT`]) then the first data item for the key will
+    /// be returned. Retrieval of other items requires the use of
     /// [Cursor]. If the item is not in the database, then
     /// [None] will be returned.
     pub fn get<Key>(&self, dbi: ffi::MDBX_dbi, key: &[u8]) -> Result<Option<Key>>
@@ -217,7 +217,7 @@ where
     /// If `name` is not [None], then the returned handle will be for a named
     /// database. In this case the environment must be configured to allow
     /// named databases through
-    /// [EnvironmentBuilder::set_max_dbs()](crate::EnvironmentBuilder::set_max_dbs).
+    /// [`EnvironmentBuilder::set_max_dbs()`](crate::EnvironmentBuilder::set_max_dbs).
     ///
     /// The returned database handle may be shared among any transaction in the
     /// environment.
@@ -380,9 +380,9 @@ impl Transaction<RW> {
     /// If `name` is not [None], then the returned handle will be for a named
     /// database. In this case the environment must be configured to allow
     /// named databases through
-    /// [EnvironmentBuilder::set_max_dbs()](crate::EnvironmentBuilder::set_max_dbs).
+    /// [`EnvironmentBuilder::set_max_dbs()`](crate::EnvironmentBuilder::set_max_dbs).
     ///
-    /// This function will fail with [Error::BadRslot] if called by a thread
+    /// This function will fail with [`Error::BadRslot`] if called by a thread
     /// with an open transaction.
     pub fn create_db(&self, name: Option<&str>, flags: DatabaseFlags) -> Result<Database> {
         self.open_db_with_flags(name, flags | DatabaseFlags::CREATE)
@@ -393,7 +393,7 @@ impl Transaction<RW> {
     /// This function stores key/data pairs in the database. The default
     /// behavior is to enter the new key/data pair, replacing any previously
     /// existing key if duplicates are disallowed, or adding a duplicate data
-    /// item if duplicates are allowed ([DatabaseFlags::DUP_SORT]).
+    /// item if duplicates are allowed ([`DatabaseFlags::DUP_SORT`]).
     pub fn put(
         &self,
         dbi: ffi::MDBX_dbi,
@@ -517,9 +517,9 @@ impl Transaction<RO> {
 
 impl Transaction<RW> {
     /// Begins a new nested transaction inside of this transaction.
-    pub fn begin_nested_txn(&mut self) -> Result<Transaction<RW>> {
+    pub fn begin_nested_txn(&mut self) -> Result<Self> {
         if self.inner.env.is_write_map() {
-            return Err(Error::NestedTransactionsUnsupportedWithWriteMap)
+            return Err(Error::NestedTransactionsUnsupportedWithWriteMap);
         }
         self.txn_execute(|txn| {
             let (tx, rx) = sync_channel(0);
@@ -533,7 +533,7 @@ impl Transaction<RW> {
 
             rx.recv()
                 .unwrap()
-                .map(|ptr| Transaction::new_from_ptr(self.env().clone(), ptr.0))
+                .map(|ptr| Self::new_from_ptr(self.env().clone(), ptr.0))
         })?
     }
 }
@@ -542,28 +542,36 @@ impl Transaction<RW> {
 #[derive(Debug, Clone)]
 pub(crate) struct TransactionPtr {
     txn:       *mut ffi::MDBX_txn,
+    #[cfg(feature = "read-tx-timeouts")]
     timed_out: Arc<AtomicBool>,
     lock:      Arc<Mutex<()>>,
 }
 
 impl TransactionPtr {
     fn new(txn: *mut ffi::MDBX_txn) -> Self {
-        Self { txn, timed_out: Arc::new(AtomicBool::new(false)), lock: Arc::new(Mutex::new(())) }
-    }
-
-    // Returns `true` if the transaction is timed out.
-    //
-    // When transaction is timed out via `TxnManager`, it's actually reset using
-    // `mdbx_txn_reset`. It makes the transaction unusable (MDBX fails on any usages
-    // of such transactions).
-    //
-    // Importantly, we can't rely on `MDBX_TXN_FINISHED` flag to check if the
-    // transaction is timed out using `mdbx_txn_reset`, because MDBX uses it in
-    // other cases too.
+        Self {
+            txn,
+            #[cfg(feature = "read-tx-timeouts")]
+            timed_out: Arc::new(AtomicBool::new(false)),
+            lock: Arc::new(Mutex::new(())),
+        }
+    }
+
+    /// Returns `true` if the transaction is timed out.
+    ///
+    /// When transaction is timed out via `TxnManager`, it's actually reset
+    /// using `mdbx_txn_reset`. It makes the transaction unusable (MDBX
+    /// fails on any usages of such transactions).
+    ///
+    /// Importantly, we can't rely on `MDBX_TXN_FINISHED` flag to check if the
+    /// transaction is timed out using `mdbx_txn_reset`, because MDBX uses
+    /// it in other cases too.
+    #[cfg(feature = "read-tx-timeouts")]
     fn is_timed_out(&self) -> bool {
         self.timed_out.load(std::sync::atomic::Ordering::SeqCst)
     }
 
+    #[cfg(feature = "read-tx-timeouts")]
     pub(crate) fn set_timed_out(&self) {
         self.timed_out
             .store(true, std::sync::atomic::Ordering::SeqCst);
@@ -597,8 +605,9 @@ impl TransactionPtr {
         // No race condition with the `TxnManager` timing out the transaction is
         // possible here, because we're taking a lock for any actions on the
         // transaction pointer, including a call to the `mdbx_txn_reset`.
+        #[cfg(feature = "read-tx-timeouts")]
         if self.is_timed_out() {
-            return Err(Error::ReadTransactionTimeout)
+            return Err(Error::ReadTransactionTimeout);
         }
 
         Ok((f)(self.txn))
@@ -618,6 +627,7 @@ impl TransactionPtr {
 
         // To be able to do any operations on the transaction, we need to renew it
         // first.
+        #[cfg(feature = "read-tx-timeouts")]
         if self.is_timed_out() {
             mdbx_result(unsafe { mdbx_txn_renew(self.txn) })?;
         }
@@ -635,9 +645,9 @@ impl TransactionPtr {
 pub struct CommitLatency(ffi::MDBX_commit_latency);
 
 impl CommitLatency {
-    /// Create a new CommitLatency with zero'd inner struct
+    /// Create a new `CommitLatency` with zero'd inner struct
     /// `ffi::MDBX_commit_latency`.
-    pub(crate) fn new() -> Self {
+    pub(crate) const fn new() -> Self {
         unsafe { Self(std::mem::zeroed()) }
     }
 
@@ -651,56 +661,56 @@ impl CommitLatency {
     /// Duration of preparation (commit child transactions, update
     /// sub-databases records and cursors destroying).
     #[inline]
-    pub fn preparation(&self) -> Duration {
+    pub const fn preparation(&self) -> Duration {
         Self::time_to_duration(self.0.preparation)
     }
 
     /// Duration of GC update by wall clock.
     #[inline]
-    pub fn gc_wallclock(&self) -> Duration {
+    pub const fn gc_wallclock(&self) -> Duration {
         Self::time_to_duration(self.0.gc_wallclock)
     }
 
     /// Duration of internal audit if enabled.
     #[inline]
-    pub fn audit(&self) -> Duration {
+    pub const fn audit(&self) -> Duration {
         Self::time_to_duration(self.0.audit)
     }
 
     /// Duration of writing dirty/modified data pages to a filesystem,
     /// i.e. the summary duration of a `write()` syscalls during commit.
     #[inline]
-    pub fn write(&self) -> Duration {
+    pub const fn write(&self) -> Duration {
         Self::time_to_duration(self.0.write)
     }
 
     /// Duration of syncing written data to the disk/storage, i.e.
     /// the duration of a `fdatasync()` or a `msync()` syscall during commit.
     #[inline]
-    pub fn sync(&self) -> Duration {
+    pub const fn sync(&self) -> Duration {
         Self::time_to_duration(self.0.sync)
     }
 
     /// Duration of transaction ending (releasing resources).
     #[inline]
-    pub fn ending(&self) -> Duration {
+    pub const fn ending(&self) -> Duration {
         Self::time_to_duration(self.0.ending)
     }
 
     /// The total duration of a commit.
     #[inline]
-    pub fn whole(&self) -> Duration {
+    pub const fn whole(&self) -> Duration {
         Self::time_to_duration(self.0.whole)
     }
 
     /// User-mode CPU time spent on GC update.
     #[inline]
-    pub fn gc_cputime(&self) -> Duration {
+    pub const fn gc_cputime(&self) -> Duration {
         Self::time_to_duration(self.0.gc_cputime)
     }
 
     #[inline]
-    fn time_to_duration(time: u32) -> Duration {
+    const fn time_to_duration(time: u32) -> Duration {
         Duration::from_nanos(time as u64 * (1_000_000_000 / 65_536))
     }
 }
@@ -715,10 +725,10 @@ unsafe impl Sync for TransactionPtr {}
 mod tests {
     use super::*;
 
-    fn assert_send_sync<T: Send + Sync>() {}
+    const fn assert_send_sync<T: Send + Sync>() {}
 
     #[allow(dead_code)]
-    fn test_txn_send_sync() {
+    const fn test_txn_send_sync() {
         assert_send_sync::<Transaction<RO>>();
         assert_send_sync::<Transaction<RW>>();
     }
diff --git a/crates/brontes-database/libmdbx-rs/src/txn_manager.rs b/crates/brontes-database/libmdbx-rs/src/txn_manager.rs
index 080be4c98..3080401b5 100644
--- a/crates/brontes-database/libmdbx-rs/src/txn_manager.rs
+++ b/crates/brontes-database/libmdbx-rs/src/txn_manager.rs
@@ -22,7 +22,7 @@ pub(crate) enum TxnManagerMessage {
 
 /// Manages transactions by doing two things:
 /// - Opening, aborting, and committing transactions using
-///   [TxnManager::send_message] with the corresponding [TxnManagerMessage]
+///   [`TxnManager::send_message`] with the corresponding [`TxnManagerMessage`]
 /// - Aborting long-lived read transactions (if the `read-tx-timeouts` feature
 ///   is enabled and `TxnManager::with_max_read_transaction_duration` is called)
 #[derive(Debug)]
@@ -46,18 +46,18 @@ impl TxnManager {
         txn_manager
     }
 
-    /// Spawns a new thread with [std::thread::spawn] that listens to incoming
-    /// [TxnManagerMessage] messages, executes an FFI function, and returns
-    /// the result on the provided channel.
+    /// Spawns a new [`std::thread`] that listens to incoming
+    /// [`TxnManagerMessage`] messages, executes an FFI function, and
+    /// returns the result on the provided channel.
     ///
-    /// - [TxnManagerMessage::Begin] opens a new transaction with
-    ///   [ffi::mdbx_txn_begin_ex]
-    /// - [TxnManagerMessage::Abort] aborts a transaction with
-    ///   [ffi::mdbx_txn_abort]
-    /// - [TxnManagerMessage::Commit] commits a transaction with
-    ///   [ffi::mdbx_txn_commit_ex]
+    /// - [`TxnManagerMessage::Begin`] opens a new transaction with
+    ///   [`ffi::mdbx_txn_begin_ex`]
+    /// - [`TxnManagerMessage::Abort`] aborts a transaction with
+    ///   [`ffi::mdbx_txn_abort`]
+    /// - [`TxnManagerMessage::Commit`] commits a transaction with
+    ///   [`ffi::mdbx_txn_commit_ex`]
     fn start_message_listener(&self, env: EnvPtr, rx: Receiver<TxnManagerMessage>) {
-        std::thread::spawn(move || {
+        let task = move || {
             #[allow(clippy::redundant_locals)]
             let env = env;
             loop {
@@ -97,7 +97,11 @@ impl TxnManager {
                     Err(_) => return,
                 }
             }
-        });
+        };
+        std::thread::Builder::new()
+            .name("mbdx-rs-txn-manager".to_string())
+            .spawn(task)
+            .unwrap();
     }
 
     pub(crate) fn send_message(&self, message: TxnManagerMessage) {
@@ -173,7 +177,7 @@ mod read_transactions {
     #[derive(Debug, Default)]
     pub(super) struct ReadTransactions {
         /// Maximum duration that a read transaction can be open until the
-        /// [ReadTransactions::start_monitor] aborts it.
+        /// [`ReadTransactions::start_monitor`] aborts it.
         max_duration:          Duration,
         /// List of currently active read transactions.
         ///
@@ -211,11 +215,11 @@ mod read_transactions {
             self.timed_out_not_aborted.len()
         }
 
-        /// Spawns a new thread with [std::thread::spawn] that monitors the list
-        /// of active read transactions and timeouts those that are open
-        /// for longer than `ReadTransactions.max_duration`.
+        /// Spawns a new [`std::thread`] that monitors the list of active read
+        /// transactions and timeouts those that are open for longer
+        /// than `ReadTransactions.max_duration`.
         pub(super) fn start_monitor(self: Arc<Self>) {
-            std::thread::spawn(move || {
+            let task = move || {
                 let mut timed_out_active = Vec::new();
 
                 loop {
@@ -224,7 +228,7 @@ mod read_transactions {
 
                     // Iterate through active read transactions and time out those that's open for
                     // longer than `self.max_duration`.
-                    for entry in self.active.iter() {
+                    for entry in &self.active {
                         let (tx, start) = entry.value();
                         let duration = now - *start;
 
@@ -308,7 +312,11 @@ mod read_transactions {
                         READ_TRANSACTIONS_CHECK_INTERVAL.min(duration_until_closest_deadline),
                     );
                 }
-            });
+            };
+            std::thread::Builder::new()
+                .name("mdbx-rs-read-tx-timeouts".to_string())
+                .spawn(task)
+                .unwrap();
         }
     }
 
diff --git a/crates/brontes-inspect/Cargo.toml b/crates/brontes-inspect/Cargo.toml
index 9b494e516..42dca04c4 100644
--- a/crates/brontes-inspect/Cargo.toml
+++ b/crates/brontes-inspect/Cargo.toml
@@ -36,7 +36,7 @@ tokio.workspace = true
 async-scoped = { version = "0.7.1", features = ["use-tokio"] }
 
 # reth
-reth-primitives.workspace = true
+reth-primitives-traits.workspace = true
 reth-rpc-types.workspace = true
 
 # tracing
diff --git a/crates/brontes-inspect/src/composer/utils.rs b/crates/brontes-inspect/src/composer/utils.rs
index 2a95ada5a..517bd57d2 100644
--- a/crates/brontes-inspect/src/composer/utils.rs
+++ b/crates/brontes-inspect/src/composer/utils.rs
@@ -22,10 +22,7 @@ pub(crate) fn build_mev_header<DB: LibmdbxReader>(
     db: &'static DB,
 ) -> MevBlock {
     let (total_mev_priority_fee_paid, total_mev_profit_usd, total_mev_bribe) =
-        calculate_block_mev_stats(
-            orchestra_data,
-            tree.header.base_fee_per_gas.unwrap_or_default().into(),
-        );
+        calculate_block_mev_stats(orchestra_data, tree.header.base_fee_per_gas.unwrap_or_default());
 
     let eth_price = metadata.get_eth_price(quote_token);
 
@@ -246,7 +243,7 @@ pub fn calculate_builder_profit(
     bundles: &[Bundle],
     pre_processing: &BlockPreprocessing,
 ) -> BlockPnL {
-    let builder_address = tree.header.beneficiary;
+    let builder_address = tree.header.miner;
     let builder_payments: i128 =
         (pre_processing.total_priority_fee + pre_processing.total_bribe) as i128;
 
@@ -314,12 +311,12 @@ fn proposer_payment(
         let from_address = root.get_from_address();
         let to_address = root.get_to_address();
 
-        let from_match = from_address == builder_address
-            || collateral_address.map_or(false, |addr| from_address == addr);
+        let from_match =
+            from_address == builder_address || (collateral_address == Some(from_address));
 
-        let to_match = proposer_fee_recipient.map_or(false, |addr| to_address == addr);
+        let to_match = proposer_fee_recipient == Some(to_address);
 
-        let is_from_collateral = collateral_address.map_or(false, |addr| from_address == addr);
+        let is_from_collateral = collateral_address == Some(from_address);
 
         if from_match || to_match {
             if let Action::EthTransfer(transfer) = root.get_root_action() {
@@ -412,7 +409,7 @@ pub struct BlockPreprocessing {
 
 /// Pre-processes the block data for the Builder PNL calculation
 pub(crate) fn pre_process(tree: Arc<BlockTree<Action>>) -> BlockPreprocessing {
-    let builder_address = tree.header.beneficiary;
+    let builder_address = tree.header.miner;
 
     let (gas_details_by_address, total_gas_used, total_priority_fee, total_bribe) =
         tree.tx_roots.iter().fold(
diff --git a/crates/brontes-inspect/src/discovery.rs b/crates/brontes-inspect/src/discovery.rs
index 7c713a139..1a697990e 100644
--- a/crates/brontes-inspect/src/discovery.rs
+++ b/crates/brontes-inspect/src/discovery.rs
@@ -40,7 +40,7 @@ impl DiscoveryInspector {
             .filter_map(|(tx_idx, root)| {
                 let mut triggers = PossibleMevTriggers::default();
 
-                if root.gas_details.priority_fee(base_fee.into()) as f64
+                if root.gas_details.priority_fee(base_fee) as f64
                     > avr_priority + (tree.priority_fee_std_dev * self.std_dev_threshold)
                 {
                     triggers.high_priority_fee = true;
diff --git a/crates/brontes-inspect/src/mev_inspectors/atomic_arb.rs b/crates/brontes-inspect/src/mev_inspectors/atomic_arb.rs
index bdf247b89..68cbd1fec 100644
--- a/crates/brontes-inspect/src/mev_inspectors/atomic_arb.rs
+++ b/crates/brontes-inspect/src/mev_inspectors/atomic_arb.rs
@@ -1,5 +1,6 @@
 use std::sync::Arc;
 
+use alloy_primitives::{Address, B256};
 use brontes_database::libmdbx::LibmdbxReader;
 use brontes_metrics::inspectors::OutlierMetrics;
 use brontes_types::{
@@ -15,7 +16,6 @@ use brontes_types::{
 };
 use itertools::Itertools;
 use malachite::{num::basic::traits::Zero, Rational};
-use reth_primitives::{Address, B256};
 
 use crate::{
     shared_utils::SharedInspectorUtils, BlockTree, Inspector, Metadata, MAX_PROFIT, MIN_PROFIT,
diff --git a/crates/brontes-inspect/src/mev_inspectors/cex_dex/markout/cex_dex_markout.rs b/crates/brontes-inspect/src/mev_inspectors/cex_dex/markout/cex_dex_markout.rs
index ecbb38ba2..15d5abe0c 100644
--- a/crates/brontes-inspect/src/mev_inspectors/cex_dex/markout/cex_dex_markout.rs
+++ b/crates/brontes-inspect/src/mev_inspectors/cex_dex/markout/cex_dex_markout.rs
@@ -3,7 +3,7 @@ use std::{
     sync::Arc,
 };
 
-use alloy_primitives::FixedBytes;
+use alloy_primitives::{Address, FixedBytes};
 use brontes_database::libmdbx::LibmdbxReader;
 use brontes_metrics::inspectors::OutlierMetrics;
 use brontes_types::{
@@ -34,7 +34,6 @@ use malachite::{
     },
     Rational,
 };
-use reth_primitives::Address;
 use tracing::trace;
 
 use super::{
@@ -606,7 +605,6 @@ impl<DB: LibmdbxReader> CexDexMarkoutInspector<'_, DB> {
     /// # Returns
     /// A `PossibleCexDex` instance representing the finalized arbitrage
     /// opportunity after accounting for gas costs.
-
     pub fn gas_accounting(
         &self,
         cex_dex: &mut CexDexProcessing,
@@ -670,7 +668,7 @@ impl<DB: LibmdbxReader> CexDexMarkoutInspector<'_, DB> {
                 || info
                     .contract_type
                     .as_ref()
-                    .map_or(false, |contract_type| contract_type.could_be_mev_contract()));
+                    .is_some_and(|contract_type| contract_type.could_be_mev_contract()));
 
         let is_cex_dex_based_on_historical_activity =
             is_cex_dex_bot_with_significant_activity || is_labelled_cex_dex_bot;
@@ -690,19 +688,20 @@ impl<DB: LibmdbxReader> CexDexMarkoutInspector<'_, DB> {
         }
     }
 
-    /// Filters out triangular arbitrage
-    //TODO: Check for bug on tx:
-    // https://dashboard.tenderly.co/tx/mainnet/0x310430b40132df960020af330b2e3b6a281751d45786f6b790e1cf1daf9a78bb?trace=0
     pub fn is_triangular_arb(&self, dex_swaps: &[NormalizedSwap]) -> bool {
-        // Not enough swaps to form a cycle, thus cannot be arbitrage.
+        // Need at least 2 swaps to form a cycle
         if dex_swaps.len() < 2 {
-            return false
+            return false;
         }
 
         let original_token = dex_swaps[0].token_in.address;
         let final_token = dex_swaps.last().unwrap().token_out.address;
 
+        // Check if it's a cycle (same start and end token) with profitable but
+        // reasonable output
         original_token == final_token
+            && dex_swaps[0].amount_in < dex_swaps.last().unwrap().amount_out
+            && dex_swaps.last().unwrap().amount_out < &dex_swaps[0].amount_in * &Rational::from(3)
     }
 }
 
@@ -722,7 +721,7 @@ pub fn max_arb_delta(tx_info: &TxInfo, pnl: &Rational) -> Rational {
     } else if tx_info
         .contract_type
         .as_ref()
-        .map_or(false, |c| c.is_mev_contract())
+        .is_some_and(|c| c.is_mev_contract())
     {
         base_diff += 2;
     }
@@ -741,6 +740,20 @@ mod tests {
         Inspectors,
     };
 
+    #[brontes_macros::test]
+    async fn test_wincent_cex_dex() {
+        let inspector_util = InspectorTestUtils::new(USDT_ADDRESS, 50.5).await;
+
+        let tx = hex!("bc5cf4aa1c0cd76504eb3f1d5ae03f417ec4fd7b22a9adab1c634c8165e88734").into();
+
+        let config = InspectorTxRunConfig::new(Inspectors::CexDex)
+            .with_mev_tx_hashes(vec![tx])
+            .with_expected_profit_usd(1931.53)
+            .with_gas_paid_usd(78939.82);
+
+        inspector_util.run_inspector(config, None).await.unwrap();
+    }
+
     // //TODO: Verify that the load config is working as expected for both tests and
     // // regular runs
     // #[brontes_macros::test]
diff --git a/crates/brontes-inspect/src/mev_inspectors/cex_dex/markout/types.rs b/crates/brontes-inspect/src/mev_inspectors/cex_dex/markout/types.rs
index fca3d25c4..5697c6dc1 100644
--- a/crates/brontes-inspect/src/mev_inspectors/cex_dex/markout/types.rs
+++ b/crates/brontes-inspect/src/mev_inspectors/cex_dex/markout/types.rs
@@ -1,6 +1,6 @@
 use std::{fmt, sync::Arc};
 
-use alloy_primitives::FixedBytes;
+use alloy_primitives::{Address, FixedBytes};
 use brontes_types::{
     db::cex::{
         trades::{
@@ -17,7 +17,6 @@ use brontes_types::{
 use colored::Colorize;
 use itertools::Itertools;
 use malachite::{num::basic::traits::Zero, Rational};
-use reth_primitives::Address;
 use strum::Display;
 use tracing::warn;
 
@@ -36,7 +35,10 @@ pub struct CexPricesForSwaps {
 }
 
 impl CexPricesForSwaps {
-    pub fn per_exchange_trades<'a>(&'a self, exchanges: &'a [CexExchange]) -> PerExchangePrices {
+    pub fn per_exchange_trades<'a>(
+        &'a self,
+        exchanges: &'a [CexExchange],
+    ) -> PerExchangePrices<'a> {
         exchanges
             .iter()
             .map(|exchange| {
@@ -169,7 +171,7 @@ impl CexDexProcessing {
         self.per_exchange_pnl.retain(|possible_cex_dex| {
             possible_cex_dex
                 .as_ref()
-                .map_or(false, |cex_dex| cex_dex.arb_legs.iter().all(Option::is_some))
+                .is_some_and(|cex_dex| cex_dex.arb_legs.iter().all(Option::is_some))
         });
 
         Some(())
diff --git a/crates/brontes-inspect/src/mev_inspectors/cex_dex/quotes/cex_dex.rs b/crates/brontes-inspect/src/mev_inspectors/cex_dex/quotes/cex_dex.rs
index 4811a9928..25dcec9c8 100644
--- a/crates/brontes-inspect/src/mev_inspectors/cex_dex/quotes/cex_dex.rs
+++ b/crates/brontes-inspect/src/mev_inspectors/cex_dex/quotes/cex_dex.rs
@@ -264,12 +264,11 @@ impl<DB: LibmdbxReader> CexDexQuotesInspector<'_, DB> {
         metadata: &Metadata,
         tx_info: &TxInfo,
     ) -> Option<CexDexProcessing> {
-        //TODO: Add smiths map to query most liquid dex for given pair
-        //
         let swaps = SharedInspectorUtils::<DB>::cex_merge_possible_swaps(dex_swaps);
 
         let quotes = self.cex_quotes_for_swap(&swaps, metadata, 0, None);
         let cex_dex = self.detect_cex_dex_opportunity(&swaps, quotes, metadata, tx_info)?;
+        println!("possible cex_dex {:#?}", cex_dex);
         let cex_dex_processing = CexDexProcessing { dex_swaps: swaps, pnl: cex_dex };
         Some(cex_dex_processing)
     }
@@ -432,6 +431,7 @@ impl<DB: LibmdbxReader> CexDexQuotesInspector<'_, DB> {
         metadata: Arc<Metadata>,
     ) {
         let gas_cost = metadata.get_gas_price_usd(gas_details.gas_paid(), self.utils.quote);
+        println!("gas cost: {}", gas_cost.clone().to_float());
 
         cex_dex.pnl.adjust_for_gas_cost(gas_cost);
     }
@@ -454,8 +454,16 @@ impl<DB: LibmdbxReader> CexDexQuotesInspector<'_, DB> {
     ) -> Option<(f64, BundleData)> {
         let is_cex_dex_bot_with_significant_activity =
             info.is_searcher_of_type_with_count_threshold(MevType::CexDexQuotes, FILTER_THRESHOLD);
+
         let is_labelled_cex_dex_bot = info.is_labelled_searcher_of_type(MevType::CexDexQuotes);
 
+        println!(
+            "is ce-dex bot with significant activity: {}",
+            is_cex_dex_bot_with_significant_activity
+        );
+
+        println!("is labelled ce-dex bot: {}", is_labelled_cex_dex_bot);
+
         let should_include_based_on_pnl = possible_cex_dex.pnl.aggregate_pnl > 1.5;
 
         let should_include_if_know_cex_dex = possible_cex_dex.pnl.aggregate_pnl > 0.0;
@@ -507,22 +515,42 @@ impl<DB: LibmdbxReader> CexDexQuotesInspector<'_, DB> {
 
             possible_cex_dex.into_bundle(info, metadata.block_timestamp, t2, t12, t30, t60, t300)
         } else {
+            let pnl = possible_cex_dex.pnl.aggregate_pnl;
+            let reason = if pnl <= 0.0 {
+                format!("PNL ({:.2}) is not positive.", pnl)
+            } else {
+                format!(
+                    "PNL ({:.2}) <= 1.5 AND not identified as historical bot (Significant: {}, \
+                     Labelled: {})",
+                    pnl, is_cex_dex_bot_with_significant_activity, is_labelled_cex_dex_bot
+                )
+            };
+
+            debug!(
+                target: "brontes::cex-dex-quotes",
+                tx_hash = %info.tx_hash,
+                %reason,
+                "Filtered CEX-DEX opportunity"
+            );
             None
         }
     }
 
     /// Filters out triangular arbitrage
     pub fn is_triangular_arb(&self, dex_swaps: &[NormalizedSwap]) -> bool {
-        // Not enough swaps to form a cycle, thus cannot be an atomic triangular
-        // arbitrage.
+        // Need at least 2 swaps to form a cycle
         if dex_swaps.len() < 2 {
-            return false
+            return false;
         }
 
         let original_token = dex_swaps[0].token_in.address;
         let final_token = dex_swaps.last().unwrap().token_out.address;
 
+        // Check if it's a cycle (same start and end token) with profitable but
+        // reasonable output
         original_token == final_token
+            && dex_swaps[0].amount_in < dex_swaps.last().unwrap().amount_out
+            && dex_swaps.last().unwrap().amount_out < &dex_swaps[0].amount_in * &Rational::from(3)
     }
 }
 
@@ -542,7 +570,7 @@ pub fn max_arb_delta(tx_info: &TxInfo, pnl: &Rational) -> Rational {
     } else if tx_info
         .contract_type
         .as_ref()
-        .map_or(false, |c| c.is_mev_contract())
+        .is_some_and(|c| c.is_mev_contract())
     {
         base_diff += 1;
     }
@@ -552,7 +580,6 @@ pub fn max_arb_delta(tx_info: &TxInfo, pnl: &Rational) -> Rational {
 
 #[cfg(test)]
 mod tests {
-
     use alloy_primitives::hex;
     use brontes_types::constants::{USDT_ADDRESS, WBTC_ADDRESS, WETH_ADDRESS};
 
@@ -562,6 +589,20 @@ mod tests {
     };
     // 0x77d0b50f0da1a77856a44821599aa1cdd06558c4bcdfdb323e14969619be6d2c
 
+    #[brontes_macros::test]
+    async fn test_wincnet_cex_dex() {
+        let inspector_util = InspectorTestUtils::new(USDT_ADDRESS, 50.5).await;
+
+        let tx = hex!("bc5cf4aa1c0cd76504eb3f1d5ae03f417ec4fd7b22a9adab1c634c8165e88734").into();
+
+        let config = InspectorTxRunConfig::new(Inspectors::CexDex)
+            .with_mev_tx_hashes(vec![tx])
+            .with_expected_profit_usd(1931.53)
+            .with_gas_paid_usd(78939.82);
+
+        inspector_util.run_inspector(config, None).await.unwrap();
+    }
+
     #[brontes_macros::test]
     async fn test_cex_dex() {
         let inspector_util = InspectorTestUtils::new(USDT_ADDRESS, 50.5).await;
@@ -571,7 +612,7 @@ mod tests {
         let config = InspectorTxRunConfig::new(Inspectors::CexDex)
             .with_mev_tx_hashes(vec![tx])
             .with_expected_profit_usd(1931.53)
-            .with_gas_paid_usd(78754.85);
+            .with_gas_paid_usd(78939.82);
 
         inspector_util.run_inspector(config, None).await.unwrap();
     }
diff --git a/crates/brontes-inspect/src/mev_inspectors/cex_dex/quotes/types.rs b/crates/brontes-inspect/src/mev_inspectors/cex_dex/quotes/types.rs
index 89e6d62a8..08e180804 100644
--- a/crates/brontes-inspect/src/mev_inspectors/cex_dex/quotes/types.rs
+++ b/crates/brontes-inspect/src/mev_inspectors/cex_dex/quotes/types.rs
@@ -1,3 +1,4 @@
+use alloy_primitives::Address;
 use brontes_types::{
     db::cex::CexExchange,
     mev::{BundleData, CexDexQuote},
@@ -5,7 +6,6 @@ use brontes_types::{
     ToFloatNearest, TxInfo,
 };
 use malachite::{num::basic::traits::Zero, Rational};
-use reth_primitives::Address;
 use tracing::warn;
 
 #[derive(Debug, Default)]
diff --git a/crates/brontes-inspect/src/mev_inspectors/jit/jit_liquidity.rs b/crates/brontes-inspect/src/mev_inspectors/jit/jit_liquidity.rs
index aa92daf4c..636077874 100644
--- a/crates/brontes-inspect/src/mev_inspectors/jit/jit_liquidity.rs
+++ b/crates/brontes-inspect/src/mev_inspectors/jit/jit_liquidity.rs
@@ -1,6 +1,6 @@
 use std::{collections::hash_map::Entry, sync::Arc};
 
-use alloy_primitives::{Address, B256};
+use alloy_primitives::{Address, TxHash, B256};
 use brontes_database::libmdbx::LibmdbxReader;
 use brontes_metrics::inspectors::OutlierMetrics;
 use brontes_types::{
@@ -15,7 +15,6 @@ use brontes_types::{
 };
 use itertools::Itertools;
 use malachite::{num::basic::traits::Zero, Rational};
-use reth_primitives::TxHash;
 
 use super::types::{PossibleJit, PossibleJitWithInfo};
 use crate::{
diff --git a/crates/brontes-inspect/src/mev_inspectors/liquidations.rs b/crates/brontes-inspect/src/mev_inspectors/liquidations.rs
index f7dc6a2a5..d15500974 100644
--- a/crates/brontes-inspect/src/mev_inspectors/liquidations.rs
+++ b/crates/brontes-inspect/src/mev_inspectors/liquidations.rs
@@ -1,5 +1,6 @@
 use std::sync::Arc;
 
+use alloy_primitives::{b256, Address};
 use brontes_database::libmdbx::LibmdbxReader;
 use brontes_metrics::inspectors::OutlierMetrics;
 use brontes_types::{
@@ -10,7 +11,6 @@ use brontes_types::{
 };
 use itertools::multizip;
 use malachite::{num::basic::traits::Zero, Rational};
-use reth_primitives::{b256, Address};
 
 use super::{MAX_PROFIT, MIN_PROFIT};
 use crate::{shared_utils::SharedInspectorUtils, Inspector, Metadata};
diff --git a/crates/brontes-inspect/src/mev_inspectors/sandwich/mod.rs b/crates/brontes-inspect/src/mev_inspectors/sandwich/mod.rs
index 79a252f19..507d3442c 100644
--- a/crates/brontes-inspect/src/mev_inspectors/sandwich/mod.rs
+++ b/crates/brontes-inspect/src/mev_inspectors/sandwich/mod.rs
@@ -6,6 +6,7 @@ use std::{
 use alloy_primitives::TxHash;
 use tracing::trace;
 mod types;
+use alloy_primitives::{Address, B256};
 use brontes_database::libmdbx::LibmdbxReader;
 use brontes_metrics::inspectors::OutlierMetrics;
 use brontes_types::{
@@ -20,7 +21,6 @@ use brontes_types::{
 };
 use itertools::Itertools;
 use malachite::{num::basic::traits::Zero, Rational};
-use reth_primitives::{Address, B256};
 use types::{PossibleSandwich, PossibleSandwichWithTxInfo};
 
 use super::MAX_PROFIT;
@@ -985,16 +985,12 @@ impl<DB: LibmdbxReader> SandwichInspector<'_, DB> {
                     .t_full_filter_map(|(tree, rest)| {
                         let (swap, hashes): (Vec<_>, Vec<_>) = UnzipPadded::unzip_padded(rest);
 
-                        if !hashes
-                            .iter()
-                            .map(|v| {
-                                let tree = &(*tree.clone());
-                                let d = tree.get_root(*v).unwrap().get_root_action();
+                        if !hashes.iter().any(|v| {
+                            let tree = &(*tree.clone());
+                            let d = tree.get_root(*v).unwrap().get_root_action();
 
-                                d.is_revert() || mev_executor_contract == d.get_to_address()
-                            })
-                            .any(|d| d)
-                        {
+                            d.is_revert() || mev_executor_contract == d.get_to_address()
+                        }) {
                             Some(swap)
                         } else {
                             None
diff --git a/crates/brontes-inspect/src/mev_inspectors/sandwich/types.rs b/crates/brontes-inspect/src/mev_inspectors/sandwich/types.rs
index 1e6d1224e..fa496055c 100644
--- a/crates/brontes-inspect/src/mev_inspectors/sandwich/types.rs
+++ b/crates/brontes-inspect/src/mev_inspectors/sandwich/types.rs
@@ -1,7 +1,7 @@
 use std::hash::Hash;
 
+use alloy_primitives::{Address, B256};
 use brontes_types::{FastHashMap, TxInfo};
-use reth_primitives::{Address, B256};
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash)]
 pub struct PossibleSandwich {
diff --git a/crates/brontes-inspect/src/mev_inspectors/searcher_activity.rs b/crates/brontes-inspect/src/mev_inspectors/searcher_activity.rs
index aefbb0044..990aad864 100644
--- a/crates/brontes-inspect/src/mev_inspectors/searcher_activity.rs
+++ b/crates/brontes-inspect/src/mev_inspectors/searcher_activity.rs
@@ -1,5 +1,6 @@
 use std::sync::Arc;
 
+use alloy_primitives::Address;
 use brontes_database::libmdbx::LibmdbxReader;
 use brontes_metrics::inspectors::OutlierMetrics;
 use brontes_types::{
@@ -11,7 +12,6 @@ use brontes_types::{
 };
 use itertools::multizip;
 use malachite::{num::basic::traits::Zero, Rational};
-use reth_primitives::Address;
 
 use super::{MAX_PROFIT, MIN_PROFIT};
 use crate::{shared_utils::SharedInspectorUtils, Inspector, Metadata};
diff --git a/crates/brontes-inspect/src/mev_inspectors/shared_utils.rs b/crates/brontes-inspect/src/mev_inspectors/shared_utils.rs
index 2c182bcb2..bd2236789 100644
--- a/crates/brontes-inspect/src/mev_inspectors/shared_utils.rs
+++ b/crates/brontes-inspect/src/mev_inspectors/shared_utils.rs
@@ -1,6 +1,6 @@
 use std::sync::Arc;
 
-use alloy_primitives::{Address, FixedBytes};
+use alloy_primitives::{Address, FixedBytes, TxHash};
 use brontes_database::libmdbx::LibmdbxReader;
 use brontes_metrics::inspectors::OutlierMetrics;
 use brontes_types::{
@@ -29,7 +29,6 @@ use malachite::{
     },
     Rational,
 };
-use reth_primitives::TxHash;
 
 const CONNECTION_TH: usize = 2;
 const LOW_LIQ_TH: Rational = Rational::const_from_unsigned(50_000u64);
@@ -71,7 +70,7 @@ impl<DB: LibmdbxReader> SharedInspectorUtils<'_, DB> {
         for (address, token_deltas) in deltas {
             for (token_addr, amount) in token_deltas {
                 if amount == &Rational::ZERO {
-                    continue
+                    continue;
                 }
 
                 let pair = Pair(*token_addr, self.quote);
@@ -168,7 +167,7 @@ impl<DB: LibmdbxReader> SharedInspectorUtils<'_, DB> {
             // we do this so if the transfer is from a mev contract or a searcher, it gets
             // ignored
             if invalid_addresses.contains(&t.from) {
-                continue
+                continue;
             }
 
             pools.entry(t.to).or_default().push((
@@ -192,14 +191,14 @@ impl<DB: LibmdbxReader> SharedInspectorUtils<'_, DB> {
             .into_iter()
             .filter_map(|(pool, mut possible_swaps)| {
                 if possible_swaps.len() != 2 {
-                    return None
+                    return None;
                 }
 
                 let (f_token, f_direction, f_am, f_addr, f_trace) = possible_swaps.pop()?;
                 let (s_token, s_direction, s_am, s_addr, s_trace) = possible_swaps.pop()?;
 
                 if s_token == f_token || s_direction == f_direction {
-                    return None
+                    return None;
                 }
                 let trace_index = std::cmp::min(f_trace, s_trace);
 
@@ -233,7 +232,7 @@ impl<DB: LibmdbxReader> SharedInspectorUtils<'_, DB> {
         metadata: &Arc<Metadata>,
     ) -> Option<Rational> {
         if token_address == self.quote {
-            return Some(amount.clone())
+            return Some(amount.clone());
         }
         let price = self.get_token_price_on_dex(tx_index, at, token_address, metadata)?;
         Some(price * amount)
@@ -247,7 +246,7 @@ impl<DB: LibmdbxReader> SharedInspectorUtils<'_, DB> {
         metadata: &Arc<Metadata>,
     ) -> Option<Rational> {
         if token_address == self.quote {
-            return Some(amount.clone())
+            return Some(amount.clone());
         }
         let price = self.get_token_price_on_dex_block(block_price, token_address, metadata)?;
         Some(price * amount)
@@ -261,7 +260,7 @@ impl<DB: LibmdbxReader> SharedInspectorUtils<'_, DB> {
         metadata: &Arc<Metadata>,
     ) -> Option<Rational> {
         if token_address == self.quote {
-            return Some(Rational::ONE)
+            return Some(Rational::ONE);
         }
 
         let pair = Pair(token_address, self.quote);
@@ -282,7 +281,7 @@ impl<DB: LibmdbxReader> SharedInspectorUtils<'_, DB> {
         metadata: &Arc<Metadata>,
     ) -> Option<Rational> {
         if token_address == self.quote {
-            return Some(Rational::ONE)
+            return Some(Rational::ONE);
         }
 
         let pair = Pair(token_address, self.quote);
@@ -553,7 +552,7 @@ impl<DB: LibmdbxReader> SharedInspectorUtils<'_, DB> {
         mev_type: MevType,
     ) -> bool {
         if swaps.is_empty() {
-            return true
+            return true;
         }
 
         let pcts = tokens
@@ -636,7 +635,7 @@ impl<DB: LibmdbxReader> SharedInspectorUtils<'_, DB> {
             .collect_vec();
 
         if pcts.is_empty() {
-            return true
+            return true;
         }
 
         pcts.into_iter()
@@ -663,12 +662,12 @@ impl<DB: LibmdbxReader> SharedInspectorUtils<'_, DB> {
 
         for i in 0..len {
             if removals.contains(&i) {
-                continue
+                continue;
             }
 
             for j in 0..len {
                 if i == j || removals.contains(&j) {
-                    continue
+                    continue;
                 }
 
                 let i_hash = &bundles[i].0;
@@ -715,7 +714,7 @@ impl<DB: LibmdbxReader> SharedInspectorUtils<'_, DB> {
         mev_type: MevType,
     ) -> Option<NormalizedSwap> {
         if !(transfers.len() == 2 && (info.is_labelled_searcher_of_type(mev_type) || cfg!(test))) {
-            return None
+            return None;
         }
         let ingore_addresses = info.collect_address_set_for_accounting();
 
@@ -746,7 +745,7 @@ impl<DB: LibmdbxReader> SharedInspectorUtils<'_, DB> {
                 let s1 = swaps.remove(0);
 
                 if voided.contains(s0) || voided.contains(s1) {
-                    return None
+                    return None;
                 }
                 // if s0 is first hop
                 if s0.token_out == intermediary
diff --git a/crates/brontes-inspect/src/test_utils/benches.rs b/crates/brontes-inspect/src/test_utils/benches.rs
index a2103cd08..cf46f19db 100644
--- a/crates/brontes-inspect/src/test_utils/benches.rs
+++ b/crates/brontes-inspect/src/test_utils/benches.rs
@@ -112,7 +112,10 @@ impl InspectorBenchUtils {
 
         if trees.len() != 1 {
             return Err(InspectorTestUtilsError::MultipleBlockError(
-                trees.into_iter().map(|(t, _)| t.header.number).collect(),
+                trees
+                    .into_iter()
+                    .map(|(t, _)| t.header.number.expect("Block number not in header"))
+                    .collect(),
             ))
         }
 
@@ -121,7 +124,12 @@ impl InspectorBenchUtils {
         let mut metadata = self.rt.block_on(async move {
             let res = self
                 .classifier_inspector
-                .get_metadata(tree.header.number, false)
+                .get_metadata(
+                    tree.header
+                        .number
+                        .expect("Block number not present in header"),
+                    false,
+                )
                 .await;
 
             if inspector_type == Inspectors::CexDex || inspector_type == Inspectors::CexDexMarkout {
@@ -176,7 +184,7 @@ impl InspectorBenchUtils {
         let mut metadata = self.rt.block_on(async move {
             let res = self
                 .classifier_inspector
-                .get_metadata(tree.header.number, false)
+                .get_metadata(tree.header.number.expect("Block number not in header"), false)
                 .await;
 
             if inspector_type == Inspectors::CexDex || inspector_type == Inspectors::CexDexMarkout {
@@ -225,7 +233,10 @@ impl InspectorBenchUtils {
 
         if trees.len() != 1 {
             return Err(InspectorTestUtilsError::MultipleBlockError(
-                trees.into_iter().map(|t| t.header.number).collect(),
+                trees
+                    .into_iter()
+                    .map(|t| t.header.number.expect("Block number not present in header"))
+                    .collect(),
             ))
         }
 
@@ -278,14 +289,17 @@ impl InspectorBenchUtils {
 
         if trees.len() != 1 {
             return Err(InspectorTestUtilsError::MultipleBlockError(
-                trees.into_iter().map(|(t, _)| t.header.number).collect(),
+                trees
+                    .into_iter()
+                    .map(|(t, _)| t.header.number.expect("Block number not in header"))
+                    .collect(),
             ))
         }
         let (tree, prices) = trees.remove(0);
 
         let mut metadata = self.rt.block_on(
             self.classifier_inspector
-                .get_metadata(tree.header.number, false),
+                .get_metadata(tree.header.number.expect("Block number not in header"), false),
         )?;
         metadata.dex_quotes = Some(prices);
 
@@ -336,8 +350,12 @@ impl InspectorBenchUtils {
                 ))?;
 
         let mut metadata = self.rt.block_on(
-            self.classifier_inspector
-                .get_metadata(tree.header.number, false),
+            self.classifier_inspector.get_metadata(
+                tree.header
+                    .number
+                    .expect("Block number not present in header"),
+                false,
+            ),
         )?;
         metadata.dex_quotes = prices;
 
diff --git a/crates/brontes-inspect/src/test_utils/tests.rs b/crates/brontes-inspect/src/test_utils/tests.rs
index 22e22e246..4a878a52d 100644
--- a/crates/brontes-inspect/src/test_utils/tests.rs
+++ b/crates/brontes-inspect/src/test_utils/tests.rs
@@ -63,7 +63,10 @@ impl InspectorTestUtils {
 
         if trees.len() != 1 {
             return Err(InspectorTestUtilsError::MultipleBlockError(
-                trees.into_iter().map(|t| t.header.number).collect(),
+                trees
+                    .into_iter()
+                    .map(|t| t.header.number.expect("Block number not in header"))
+                    .collect(),
             ))
         }
         Ok(trees.remove(0))
@@ -81,7 +84,10 @@ impl InspectorTestUtils {
 
         if trees.len() != 1 {
             return Err(InspectorTestUtilsError::MultipleBlockError(
-                trees.into_iter().map(|(t, _)| t.header.number).collect(),
+                trees
+                    .into_iter()
+                    .map(|(t, _)| t.header.number.expect("Block number not in header"))
+                    .collect(),
             ))
         }
         Ok(trees.remove(0))
@@ -140,7 +146,7 @@ impl InspectorTestUtils {
             return Err(err())
         };
 
-        let block = tree.header.number;
+        let block = tree.header.number.expect("Block number not in header");
 
         let mut metadata = if let Some(meta) = config.metadata_override {
             meta
@@ -220,7 +226,7 @@ impl InspectorTestUtils {
         } else {
             let res = self
                 .classifier_inspector
-                .get_metadata(tree.header.number, false)
+                .get_metadata(tree.header.number.expect("Block number not in header"), false)
                 .await;
 
             if config.expected_mev_type == Inspectors::CexDexMarkout
@@ -334,7 +340,7 @@ impl InspectorTestUtils {
             return Err(err())
         };
 
-        let block = tree.header.number;
+        let block = tree.header.number.expect("Block number not in header");
 
         let mut metadata = if let Some(meta) = config.metadata_override {
             meta
diff --git a/crates/brontes-macros/src/libmdbx_test.rs b/crates/brontes-macros/src/libmdbx_test.rs
index 7873af451..368469d77 100644
--- a/crates/brontes-macros/src/libmdbx_test.rs
+++ b/crates/brontes-macros/src/libmdbx_test.rs
@@ -15,7 +15,7 @@ pub fn parse(item: ItemFn, attr: TokenStream) -> syn::Result<TokenStream> {
             if name_val.path.segments.last()?.ident == "threads" {
                 let Expr::Lit(ref a) = name_val.value else { return None };
                 match &a.lit {
-                    syn::Lit::Int(i) => return Some(usize::from_str(i.base10_digits()).unwrap()),
+                    syn::Lit::Int(i) => Some(usize::from_str(i.base10_digits()).unwrap()),
                     _ => None,
                 }
             } else {
diff --git a/crates/brontes-metrics/Cargo.toml b/crates/brontes-metrics/Cargo.toml
index 2ac9c6b82..c981003ce 100644
--- a/crates/brontes-metrics/Cargo.toml
+++ b/crates/brontes-metrics/Cargo.toml
@@ -17,9 +17,9 @@ tracing.workspace = true
 tracing-subscriber.workspace = true
 reth-metrics.workspace = true
 alloy-primitives.workspace = true
-reth-primitives.workspace = true
+reth-primitives-traits.workspace = true
 colored.workspace = true
-reth-interfaces.workspace = true
+reth-storage-errors.workspace = true
 # metrics
 metrics-exporter-prometheus.workspace = true
 metrics-util.workspace = true
@@ -36,7 +36,7 @@ clickhouse = { workspace = true, features = ["tls"] }
 eyre.workspace = true
 
 # http/rpc
-hyper.workspace = true
+hyper = { workspace = true, features = ["server"] }
 dashmap = "5.5.3"
 
 [target.'cfg(unix)'.dependencies]
diff --git a/crates/brontes-metrics/src/db_writer.rs b/crates/brontes-metrics/src/db_writer.rs
index dd6edabb5..dfc224588 100644
--- a/crates/brontes-metrics/src/db_writer.rs
+++ b/crates/brontes-metrics/src/db_writer.rs
@@ -1,7 +1,7 @@
 use std::time::{Duration, Instant};
 
 use prometheus::{Histogram, HistogramVec, IntCounterVec, IntGauge, IntGaugeVec};
-use reth_interfaces::db::DatabaseError;
+use reth_storage_errors::db::DatabaseError;
 
 #[derive(Clone)]
 pub struct LibmdbxWriterMetrics {
@@ -148,6 +148,7 @@ impl LibmdbxWriterMetrics {
             DatabaseError::Decode => "Decode",
             DatabaseError::Stats(_) => "Stats",
             DatabaseError::LogLevelUnavailable(_) => "LogLevelUnavailable",
+            DatabaseError::Other(_) => "Other",
         };
 
         self.write_error_types
diff --git a/crates/brontes-metrics/src/inspectors.rs b/crates/brontes-metrics/src/inspectors.rs
index f1b992cb3..dc3d080ac 100644
--- a/crates/brontes-metrics/src/inspectors.rs
+++ b/crates/brontes-metrics/src/inspectors.rs
@@ -1,11 +1,11 @@
 use std::{pin::Pin, time::Instant};
 
+use alloy_primitives::Address;
 use brontes_types::{mev::MevType, pair::Pair, FastHashMap};
 use dashmap::DashMap;
 use metrics::{Counter, Gauge};
 use prometheus::{HistogramVec, IntCounterVec};
 use reth_metrics::Metrics;
-use reth_primitives::Address;
 
 #[derive(Clone)]
 pub struct OutlierMetrics {
diff --git a/crates/brontes-metrics/src/pricing.rs b/crates/brontes-metrics/src/pricing.rs
index c9e8cbd9b..3bd4a213a 100644
--- a/crates/brontes-metrics/src/pricing.rs
+++ b/crates/brontes-metrics/src/pricing.rs
@@ -6,24 +6,24 @@ use reth_metrics::Metrics;
 
 #[derive(Clone)]
 pub struct DexPricingMetrics {
-    /// the amount of active subgraphs currently used for pricing
-    pub active_subgraphs:    Gauge,
-    /// the amount of active pool state loaded for the subgraphs
-    pub active_state:        Gauge,
-    /// current state load queries
-    pub state_load_queries:  Gauge,
-    /// state load processing time
-    pub state_load_time_ms:  Histogram,
-    /// blocks processed,
-    pub processed_blocks:    Counter,
-    /// block processing speed by range
-    pub range_processing:    IntCounterVec,
-    /// function call count
-    pub function_call_count: IntCounterVec,
-    /// rate of poll
-    pub poll_rate:           IntCounterVec,
-    /// wants more blocks
-    pub needs_more_data:     IntGaugeVec,
+    // /// the amount of active subgraphs currently used for pricing
+    // pub active_subgraphs:    Gauge,
+    // /// the amount of active pool state loaded for the subgraphs
+    // pub active_state:        Gauge,
+    // /// current state load queries
+    // pub state_load_queries:  Gauge,
+    // /// state load processing time
+    // pub state_load_time_ms:  Histogram,
+    // /// blocks processed,
+    // pub processed_blocks:    Counter,
+    // /// block processing speed by range
+    // pub range_processing:    IntCounterVec,
+    // /// function call count
+    // pub function_call_count: IntCounterVec,
+    // /// rate of poll
+    // pub poll_rate:           IntCounterVec,
+    // /// wants more blocks
+    // pub needs_more_data:     IntGaugeVec,
 }
 impl Default for DexPricingMetrics {
     fn default() -> Self {
@@ -39,88 +39,92 @@ impl Debug for DexPricingMetrics {
 
 impl DexPricingMetrics {
     pub fn new() -> Self {
-        let active_subgraphs = metrics::register_gauge!("dex_pricing_active_subgraphs");
-        let active_state = metrics::register_gauge!("dex_pricing_active_state");
-        let state_load_queries = metrics::register_gauge!("dex_pricing_state_load_queries");
-        let state_load_time_ms = metrics::register_histogram!("dex_pricing_state_load_time_ms");
-        let processed_blocks = metrics::register_counter!("dex_pricing_processed_blocks");
-        let range_processing = prometheus::register_int_counter_vec!(
-            "dex_pricing_range_processed_blocks",
-            "the amount of blocks a range has processed",
-            &["range_id"]
-        )
-        .unwrap();
-        let function_call_count = prometheus::register_int_counter_vec!(
-            "dex_pricing_function_call_count",
-            "for each range and function name the call count",
-            &["range_id", "function_name"]
-        )
-        .unwrap();
+        // let active_subgraphs =
+        // metrics::register_gauge!("dex_pricing_active_subgraphs");
+        // let active_state = metrics::register_gauge!("dex_pricing_active_state");
+        // let state_load_queries =
+        // metrics::register_gauge!("dex_pricing_state_load_queries");
+        // let state_load_time_ms =
+        // metrics::register_histogram!("dex_pricing_state_load_time_ms");
+        // let processed_blocks =
+        // metrics::register_counter!("dex_pricing_processed_blocks");
+        // let range_processing = prometheus::register_int_counter_vec!(
+        //     "dex_pricing_range_processed_blocks",
+        //     "the amount of blocks a range has processed",
+        //     &["range_id"]
+        // )
+        // .unwrap();
+        // let function_call_count = prometheus::register_int_counter_vec!(
+        //     "dex_pricing_function_call_count",
+        //     "for each range and function name the call count",
+        //     &["range_id", "function_name"]
+        // )
+        // .unwrap();
 
-        let poll_rate = prometheus::register_int_counter_vec!(
-            "dex_pricing_range_poll_rate",
-            "the poll rate for the future of the range",
-            &["range_id"]
-        )
-        .unwrap();
+        // let poll_rate = prometheus::register_int_counter_vec!(
+        //     "dex_pricing_range_poll_rate",
+        //     "the poll rate for the future of the range",
+        //     &["range_id"]
+        // )
+        // .unwrap();
 
-        let needs_more_data = prometheus::register_int_gauge_vec!(
-            "dex_pricing_needs_more_data",
-            "wether or not dex pricing is asking for more data",
-            &["range_id"]
-        )
-        .unwrap();
+        // let needs_more_data = prometheus::register_int_gauge_vec!(
+        //     "dex_pricing_needs_more_data",
+        //     "wether or not dex pricing is asking for more data",
+        //     &["range_id"]
+        // )
+        // .unwrap();
 
         Self {
-            needs_more_data,
-            processed_blocks,
-            state_load_time_ms,
-            state_load_queries,
-            active_state,
-            active_subgraphs,
-            range_processing,
-            function_call_count,
-            poll_rate,
+            // needs_more_data,
+            // processed_blocks,
+            // state_load_time_ms,
+            // state_load_queries,
+            // active_state,
+            // active_subgraphs,
+            // range_processing,
+            // function_call_count,
+            // poll_rate,
         }
     }
 
     pub fn needs_more_data(&self, range_id: usize, enabled: bool) {
-        self.needs_more_data
-            .with_label_values(&[&range_id.to_string()])
-            .set(enabled as i64);
+        // self.needs_more_data
+        //     .with_label_values(&[&range_id.to_string()])
+        //     .set(enabled as i64);
     }
 
     pub fn poll_rate(&self, range_id: usize) {
-        self.poll_rate
-            .get_metric_with_label_values(&[&range_id.to_string()])
-            .unwrap()
-            .inc();
+        // self.poll_rate
+        //     .get_metric_with_label_values(&[&range_id.to_string()])
+        //     .unwrap()
+        //     .inc();
     }
 
     pub fn function_call_count(&self, range_id: usize, function_name: &str) {
-        self.function_call_count
-            .with_label_values(&[&range_id.to_string(), function_name])
-            .inc()
+        // self.function_call_count
+        //     .with_label_values(&[&range_id.to_string(), function_name])
+        //     .inc()
     }
 
     pub fn range_finished_block(&self, range_id: usize) {
-        self.processed_blocks.increment(1);
-        self.range_processing
-            .get_metric_with_label_values(&[&range_id.to_string()])
-            .unwrap()
-            .inc();
+        // self.processed_blocks.increment(1);
+        // self.range_processing
+        //     .get_metric_with_label_values(&[&range_id.to_string()])
+        //     .unwrap()
+        //     .inc();
     }
 
     pub async fn meter_state_load<R>(
         self,
         f: impl FnOnce() -> Pin<Box<dyn futures::Future<Output = R> + Send>>,
     ) -> R {
-        self.state_load_queries.increment(1.0);
-        let time = Instant::now();
+        // self.state_load_queries.increment(1.0);
+        // let time = Instant::now();
         let res = f().await;
-        let elapsed = time.elapsed().as_millis() as f64;
-        self.state_load_time_ms.record(elapsed);
-        self.state_load_queries.decrement(1.0);
+        // let elapsed = time.elapsed().as_millis() as f64;
+        // self.state_load_time_ms.record(elapsed);
+        // self.state_load_queries.decrement(1.0);
 
         res
     }
diff --git a/crates/brontes-metrics/src/prometheus_exporter.rs b/crates/brontes-metrics/src/prometheus_exporter.rs
index 7cfdbf0bc..b7b880ba4 100644
--- a/crates/brontes-metrics/src/prometheus_exporter.rs
+++ b/crates/brontes-metrics/src/prometheus_exporter.rs
@@ -2,10 +2,7 @@
 use std::{convert::Infallible, net::SocketAddr, sync::Arc};
 
 use eyre::WrapErr;
-use hyper::{
-    service::{make_service_fn, service_fn},
-    Body, Request, Response, Server,
-};
+use hyper::{body::Incoming, service::service_fn, Request, Response};
 use metrics::describe_gauge;
 use metrics_exporter_prometheus::{PrometheusBuilder, PrometheusHandle};
 use metrics_util::layers::{PrefixLayer, Stack};
@@ -50,31 +47,31 @@ async fn start_endpoint<F: Hook + 'static>(
     handle: PrometheusHandle,
     hook: Arc<F>,
 ) -> eyre::Result<()> {
-    let make_svc = make_service_fn(move |_| {
-        let handle = handle.clone();
-        let hook = Arc::clone(&hook);
-        async move {
-            Ok::<_, Infallible>(service_fn(move |_: Request<Body>| {
-                (hook)();
-                let mut metrics_render = handle.render();
-
-                let mut buffer = Vec::new();
-                let encoder = TextEncoder::new();
-                // Gather the metrics.
-                let metric_families = prometheus::gather();
-                // Encode them to send.
-                encoder.encode(&metric_families, &mut buffer).unwrap();
-                metrics_render += &String::from_utf8(buffer.clone()).unwrap();
-
-                async move { Ok::<_, Infallible>(Response::new(Body::from(metrics_render))) }
-            }))
-        }
-    });
-    let server = Server::try_bind(&listen_addr)
-        .wrap_err("Could not bind to address")?
-        .serve(make_svc);
-
-    tokio::spawn(async move { server.await.expect("Metrics endpoint crashed") });
+    // let make_svc = make_service_fn(move |_| {
+    //     let handle = handle.clone();
+    //     let hook = Arc::clone(&hook);
+    //     async move {
+    //         Ok::<_, Infallible>(service_fn(move |_: Request<Incoming>| {
+    //             (hook)();
+    //             let mut metrics_render = handle.render();
+
+    //             let mut buffer = Vec::new();
+    //             let encoder = TextEncoder::new();
+    //             // Gather the metrics.
+    //             let metric_families = prometheus::gather();
+    //             // Encode them to send.
+    //             encoder.encode(&metric_families, &mut buffer).unwrap();
+    //             metrics_render += &String::from_utf8(buffer.clone()).unwrap();
+
+    //             async move { Ok::<_,
+    // Infallible>(Response::new(Incoming::from(metrics_render))) }         }))
+    //     }
+    // });
+    // let server = Server::try_bind(&listen_addr)
+    //     .wrap_err("Could not bind to address")?
+    //     .serve(make_svc);
+
+    // tokio::spawn(async move { server.await.expect("Metrics endpoint crashed") });
 
     Ok(())
 }
@@ -106,87 +103,87 @@ pub async fn initialize(
 
 #[cfg(all(feature = "jemalloc", unix))]
 fn collect_memory_stats() {
-    use metrics::gauge;
-    use tikv_jemalloc_ctl::{epoch, stats};
-    use tracing::error;
-
-    if epoch::advance()
-        .map_err(|error| error!(%error, "Failed to advance jemalloc epoch"))
-        .is_err()
-    {
-        return
-    }
-
-    if let Ok(value) = stats::active::read()
-        .map_err(|error| error!(%error, "Failed to read jemalloc.stats.active"))
-    {
-        gauge!("jemalloc.active", value as f64);
-    }
-
-    if let Ok(value) = stats::allocated::read()
-        .map_err(|error| error!(%error, "Failed to read jemalloc.stats.allocated"))
-    {
-        gauge!("jemalloc.allocated", value as f64);
-    }
-
-    if let Ok(value) = stats::mapped::read()
-        .map_err(|error| error!(%error, "Failed to read jemalloc.stats.mapped"))
-    {
-        gauge!("jemalloc.mapped", value as f64);
-    }
-
-    if let Ok(value) = stats::metadata::read()
-        .map_err(|error| error!(%error, "Failed to read jemalloc.stats.metadata"))
-    {
-        gauge!("jemalloc.metadata", value as f64);
-    }
-
-    if let Ok(value) = stats::resident::read()
-        .map_err(|error| error!(%error, "Failed to read jemalloc.stats.resident"))
-    {
-        gauge!("jemalloc.resident", value as f64);
-    }
-
-    if let Ok(value) = stats::retained::read()
-        .map_err(|error| error!(%error, "Failed to read jemalloc.stats.retained"))
-    {
-        gauge!("jemalloc.retained", value as f64);
-    }
+    // use metrics::gauge;
+    // use tikv_jemalloc_ctl::{epoch, stats};
+    // use tracing::error;
+
+    // if epoch::advance()
+    //     .map_err(|error| error!(%error, "Failed to advance jemalloc epoch"))
+    //     .is_err()
+    // {
+    //     return;
+    // }
+
+    // if let Ok(value) = stats::active::read()
+    //     .map_err(|error| error!(%error, "Failed to read
+    // jemalloc.stats.active")) {
+    //     gauge!("jemalloc.active", value as f64);
+    // }
+
+    // if let Ok(value) = stats::allocated::read()
+    //     .map_err(|error| error!(%error, "Failed to read
+    // jemalloc.stats.allocated")) {
+    //     gauge!("jemalloc.allocated", value as f64);
+    // }
+
+    // if let Ok(value) = stats::mapped::read()
+    //     .map_err(|error| error!(%error, "Failed to read
+    // jemalloc.stats.mapped")) {
+    //     gauge!("jemalloc.mapped", value as f64);
+    // }
+
+    // if let Ok(value) = stats::metadata::read()
+    //     .map_err(|error| error!(%error, "Failed to read
+    // jemalloc.stats.metadata")) {
+    //     gauge!("jemalloc.metadata", value as f64);
+    // }
+
+    // if let Ok(value) = stats::resident::read()
+    //     .map_err(|error| error!(%error, "Failed to read
+    // jemalloc.stats.resident")) {
+    //     gauge!("jemalloc.resident", value as f64);
+    // }
+
+    // if let Ok(value) = stats::retained::read()
+    //     .map_err(|error| error!(%error, "Failed to read
+    // jemalloc.stats.retained")) {
+    //     gauge!("jemalloc.retained", value as f64);
+    // }
 }
 
 #[cfg(all(feature = "jemalloc", unix))]
 fn describe_memory_stats() {
-    describe_gauge!(
-        "jemalloc.active",
-        Unit::Bytes,
-        "Total number of bytes in active pages allocated by the application"
-    );
-    describe_gauge!(
-        "jemalloc.allocated",
-        Unit::Bytes,
-        "Total number of bytes allocated by the application"
-    );
-    describe_gauge!(
-        "jemalloc.mapped",
-        Unit::Bytes,
-        "Total number of bytes in active extents mapped by the allocator"
-    );
-    describe_gauge!(
-        "jemalloc.metadata",
-        Unit::Bytes,
-        "Total number of bytes dedicated to jemalloc metadata"
-    );
-    describe_gauge!(
-        "jemalloc.resident",
-        Unit::Bytes,
-        "Total number of bytes in physically resident data pages mapped by the allocator"
-    );
-    describe_gauge!(
-        "jemalloc.retained",
-        Unit::Bytes,
-        "Total number of bytes in virtual memory mappings that were retained rather than being \
-         returned to the operating system via e.g. munmap(2)"
-    );
+    // describe_gauge!(
+    //     "jemalloc.active",
+    //     Unit::Bytes,
+    //     "Total number of bytes in active pages allocated by the application"
+    // );
+    // describe_gauge!(
+    //     "jemalloc.allocated",
+    //     Unit::Bytes,
+    //     "Total number of bytes allocated by the application"
+    // );
+    // describe_gauge!(
+    //     "jemalloc.mapped",
+    //     Unit::Bytes,
+    //     "Total number of bytes in active extents mapped by the allocator"
+    // );
+    // describe_gauge!(
+    //     "jemalloc.metadata",
+    //     Unit::Bytes,
+    //     "Total number of bytes dedicated to jemalloc metadata"
+    // );
+    // describe_gauge!(
+    //     "jemalloc.resident",
+    //     Unit::Bytes,
+    //     "Total number of bytes in physically resident data pages mapped by
+    // the allocator" );
+    // describe_gauge!(
+    //     "jemalloc.retained",
+    //     Unit::Bytes,
+    //     "Total number of bytes in virtual memory mappings that were retained
+    // rather than being \      returned to the operating system via e.g.
+    // munmap(2)" );
 }
 
 #[cfg(not(all(feature = "jemalloc", unix)))]
@@ -197,41 +194,42 @@ fn describe_memory_stats() {}
 
 #[cfg(target_os = "linux")]
 fn collect_io_stats() {
-    use metrics::absolute_counter;
-    use tracing::error;
-
-    let Ok(process) = procfs::process::Process::myself()
-        .map_err(|error| error!(%error, "Failed to get currently running process"))
-    else {
-        return
-    };
-
-    let Ok(io) = process.io().map_err(
-        |error| error!(%error, "Failed to get IO stats for the currently running process"),
-    ) else {
-        return
-    };
-
-    absolute_counter!("io.rchar", io.rchar);
-    absolute_counter!("io.wchar", io.wchar);
-    absolute_counter!("io.syscr", io.syscr);
-    absolute_counter!("io.syscw", io.syscw);
-    absolute_counter!("io.read_bytes", io.read_bytes);
-    absolute_counter!("io.write_bytes", io.write_bytes);
-    absolute_counter!("io.cancelled_write_bytes", io.cancelled_write_bytes);
+    // use metrics::absolute_counter;
+    // use tracing::error;
+
+    // let Ok(process) = procfs::process::Process::myself()
+    //     .map_err(|error| error!(%error, "Failed to get currently running
+    // process")) else {
+    //     return;
+    // };
+
+    // let Ok(io) = process.io().map_err(
+    //     |error| error!(%error, "Failed to get IO stats for the currently running process"),
+    // ) else {
+    //     return;
+    // };
+
+    // absolute_counter!("io.rchar", io.rchar);
+    // absolute_counter!("io.wchar", io.wchar);
+    // absolute_counter!("io.syscr", io.syscr);
+    // absolute_counter!("io.syscw", io.syscw);
+    // absolute_counter!("io.read_bytes", io.read_bytes);
+    // absolute_counter!("io.write_bytes", io.write_bytes);
+    // absolute_counter!("io.cancelled_write_bytes", io.cancelled_write_bytes);
 }
 
 #[cfg(target_os = "linux")]
 fn describe_io_stats() {
-    use metrics::describe_counter;
-
-    describe_counter!("io.rchar", "Characters read");
-    describe_counter!("io.wchar", "Characters written");
-    describe_counter!("io.syscr", "Read syscalls");
-    describe_counter!("io.syscw", "Write syscalls");
-    describe_counter!("io.read_bytes", Unit::Bytes, "Bytes read");
-    describe_counter!("io.write_bytes", Unit::Bytes, "Bytes written");
-    describe_counter!("io.cancelled_write_bytes", Unit::Bytes, "Cancelled write bytes");
+    // use metrics::describe_counter;
+
+    // describe_counter!("io.rchar", "Characters read");
+    // describe_counter!("io.wchar", "Characters written");
+    // describe_counter!("io.syscr", "Read syscalls");
+    // describe_counter!("io.syscw", "Write syscalls");
+    // describe_counter!("io.read_bytes", Unit::Bytes, "Bytes read");
+    // describe_counter!("io.write_bytes", Unit::Bytes, "Bytes written");
+    // describe_counter!("io.cancelled_write_bytes", Unit::Bytes, "Cancelled
+    // write bytes");
 }
 
 #[cfg(not(target_os = "linux"))]
diff --git a/crates/brontes-metrics/src/range.rs b/crates/brontes-metrics/src/range.rs
index 1bcdd218b..86b7c6cbb 100644
--- a/crates/brontes-metrics/src/range.rs
+++ b/crates/brontes-metrics/src/range.rs
@@ -10,9 +10,9 @@ use reth_metrics::Metrics;
 #[derive(Clone)]
 pub struct GlobalRangeMetrics {
     /// the amount of blocks all inspectors have completed
-    pub completed_blocks:            Counter,
+    // pub completed_blocks: Counter,
     /// the runtime for inspectors
-    pub processing_run_time_ms:      Histogram,
+    // pub processing_run_time_ms: Histogram,
     /// complete
     pub completed_blocks_range:      IntCounterVec,
     /// the amount of blocks the inspector has completed
@@ -99,8 +99,9 @@ impl GlobalRangeMetrics {
             total_blocks_range,
             block_tracing_throughput: block_tracing,
             classification_throughput: tree_builder,
-            completed_blocks: metrics::register_counter!("brontes_total_completed_blocks"),
-            processing_run_time_ms: metrics::register_histogram!("brontes_processing_runtime_ms"),
+            // completed_blocks: metrics::register_counter!("brontes_total_completed_blocks"),
+            // processing_run_time_ms:
+            // metrics::register_histogram!("brontes_processing_runtime_ms"),
         }
     }
 
@@ -139,7 +140,7 @@ impl GlobalRangeMetrics {
             .unwrap()
             .inc();
 
-        self.completed_blocks.increment(1);
+        // self.completed_blocks.increment(1);
     }
 
     pub async fn tree_builder<R>(
@@ -174,10 +175,10 @@ impl GlobalRangeMetrics {
         self,
         f: impl FnOnce() -> Pin<Box<dyn futures::Future<Output = R> + Send>>,
     ) -> R {
-        let time = Instant::now();
+        // let time = Instant::now();
         let res = f().await;
-        let elapsed = time.elapsed().as_millis() as f64;
-        self.processing_run_time_ms.record(elapsed);
+        // let elapsed = time.elapsed().as_millis() as f64;
+        // self.processing_run_time_ms.record(elapsed);
 
         res
     }
diff --git a/crates/brontes-metrics/src/trace/types.rs b/crates/brontes-metrics/src/trace/types.rs
index 6a0d6a066..c960bc313 100644
--- a/crates/brontes-metrics/src/trace/types.rs
+++ b/crates/brontes-metrics/src/trace/types.rs
@@ -1,5 +1,5 @@
+use alloy_primitives::B256;
 use colored::Colorize;
-use reth_primitives::B256;
 use tracing::debug;
 
 use crate::ParserMetricEvents;
diff --git a/crates/brontes-pricing/Cargo.toml b/crates/brontes-pricing/Cargo.toml
index 60e7ab93f..ef8012118 100644
--- a/crates/brontes-pricing/Cargo.toml
+++ b/crates/brontes-pricing/Cargo.toml
@@ -20,7 +20,7 @@ thiserror.workspace = true
 
 # reth 
 reth-rpc-types.workspace = true
-reth-primitives.workspace = true
+reth-primitives-traits.workspace = true
 reth-db.workspace = true
 reth-codecs.workspace = true
 
@@ -39,6 +39,7 @@ serde_json.workspace = true
 erased-serde = "0.3.31"
 serde_with.workspace = true
 serde_repr.workspace = true
+reth-primitives.workspace = true
 alloy-rlp = { workspace = true, features = ["arrayvec"] }
 
 # pathfinding 
diff --git a/crates/brontes-pricing/pricing-test-utils/Cargo.toml b/crates/brontes-pricing/pricing-test-utils/Cargo.toml
index 3ca1c83d1..f2c221709 100644
--- a/crates/brontes-pricing/pricing-test-utils/Cargo.toml
+++ b/crates/brontes-pricing/pricing-test-utils/Cargo.toml
@@ -14,7 +14,7 @@ thiserror.workspace = true
 
 # reth 
 reth-rpc-types.workspace = true
-reth-primitives.workspace = true
+reth-primitives-traits.workspace = true
 reth-db.workspace = true
 reth-codecs.workspace = true
 
diff --git a/crates/brontes-pricing/src/graphs/dijkstras.rs b/crates/brontes-pricing/src/graphs/dijkstras.rs
index 0d9f68e24..6bd9f03ec 100644
--- a/crates/brontes-pricing/src/graphs/dijkstras.rs
+++ b/crates/brontes-pricing/src/graphs/dijkstras.rs
@@ -14,7 +14,7 @@ type FxIndexMap<K, V> = IndexMap<K, V, FastHasher>;
 
 const MAX_LEN: usize = 4;
 const MAX_OTHER_PATHS: usize = 3;
-
+#[allow(clippy::empty_line_after_doc_comments)]
 /// Compute a shortest path using the [Dijkstra search
 /// algorithm](https://en.wikipedia.org/wiki/Dijkstra's_algorithm).
 ///
diff --git a/crates/brontes-pricing/src/graphs/registry.rs b/crates/brontes-pricing/src/graphs/registry.rs
index 80ba46fe9..8b0ab1824 100644
--- a/crates/brontes-pricing/src/graphs/registry.rs
+++ b/crates/brontes-pricing/src/graphs/registry.rs
@@ -77,10 +77,10 @@ impl SubGraphRegistry {
                     subgraph.get_all_pools().flatten().for_each(|edge| {
                         *removals.entry(edge.pool_addr).or_default() += 1;
                     });
-                    self.metrics
-                        .as_ref()
-                        .inspect(|m| m.active_subgraphs.decrement(1.0));
-                    return false
+                    // self.metrics
+                    //     .as_ref()
+                    //     .inspect(|m| m.active_subgraphs.decrement(1.0));
+                    return false;
                 }
                 true
             });
@@ -108,9 +108,9 @@ impl SubGraphRegistry {
                         });
                     } else {
                         // not replacing
-                        self.metrics
-                            .as_ref()
-                            .inspect(|m| m.active_subgraphs.increment(1.0));
+                        // self.metrics
+                        //     .as_ref()
+                        //     .inspect(|m| m.active_subgraphs.increment(1.0));
                     }
                 }
             });
@@ -200,14 +200,14 @@ impl SubGraphRegistry {
         let mut removals = FastHashMap::default();
         self.sub_graphs.retain(|k, v| {
             if k != &pair.ordered() {
-                return true
+                return true;
             }
             v.retain(|gt, s| {
                 let res = gt != &goes_through.ordered();
                 if !res {
-                    self.metrics
-                        .as_ref()
-                        .inspect(|m| m.active_subgraphs.decrement(1.0));
+                    // self.metrics
+                    //     .as_ref()
+                    //     .inspect(|m| m.active_subgraphs.decrement(1.0));
                     s.get_all_pools().flatten().for_each(|edge| {
                         *removals.entry(edge.pool_addr).or_default() += 1;
                     });
@@ -254,7 +254,7 @@ impl SubGraphRegistry {
         self.sub_graphs.iter_mut().for_each(|(g_pair, sub)| {
             // wrong pair, then retain
             if *g_pair != pair.ordered() {
-                return
+                return;
             }
 
             sub.iter_mut().for_each(|(goes_through, graph)| {
@@ -338,7 +338,7 @@ impl SubGraphRegistry {
             let mut acc = Rational::ZERO;
             for graph in f.values() {
                 if graph.extends_to().is_some() {
-                    continue
+                    continue;
                 };
 
                 let Some(next) = graph.fetch_price(edge_state) else {
diff --git a/crates/brontes-pricing/src/graphs/state_tracker.rs b/crates/brontes-pricing/src/graphs/state_tracker.rs
index e8cfd6654..3f7c09eec 100644
--- a/crates/brontes-pricing/src/graphs/state_tracker.rs
+++ b/crates/brontes-pricing/src/graphs/state_tracker.rs
@@ -70,14 +70,14 @@ impl StateTracker {
     pub fn remove_finalized_state_dep(&mut self, pool: Address, amount: u64) {
         self.finalized_edge_state.retain(|i_pool, state| {
             if pool != *i_pool {
-                return true
+                return true;
             }
             state.dec(amount);
             let keep = state.dependents != 0;
             if !keep {
-                self.metrics
-                    .as_ref()
-                    .inspect(|m| m.active_state.decrement(1.0));
+                // self.metrics
+                //     .as_ref()
+                //     .inspect(|m| m.active_state.decrement(1.0));
                 tracing::debug!(?pool, "removing state");
             }
             keep
@@ -148,7 +148,7 @@ impl StateTracker {
                     .filter(|pool_state| pool_state.contains_block_state(block))
                     .is_some()
                 {
-                    return None
+                    return None;
                 }
 
                 Some(edge.info)
@@ -165,13 +165,13 @@ impl StateTracker {
                 .into_iter()
                 .for_each(|(should_finalize, mut state)| {
                     if should_finalize == 0 {
-                        return
+                        return;
                     }
                     match self.finalized_edge_state.entry(*pool) {
                         std::collections::hash_map::Entry::Vacant(v) => {
-                            self.metrics
-                                .as_ref()
-                                .inspect(|m| m.active_state.increment(1.0));
+                            // self.metrics
+                            //     .as_ref()
+                            //     .inspect(|m| m.active_state.increment(1.0));
                             // we use should finalize here
                             state.dependents = should_finalize;
                             v.insert(state);
@@ -264,7 +264,7 @@ impl PoolStateWithBlock {
         self.0.retain(|(keep, state)| {
             if state.last_update <= block {
                 res.push((*keep, state.clone()));
-                return false
+                return false;
             }
             true
         });
@@ -279,7 +279,7 @@ impl PoolStateWithBlock {
     pub fn contains_block_state(&self, block: u64) -> bool {
         for (_, state) in &self.0 {
             if block == state.last_update {
-                return true
+                return true;
             }
         }
 
diff --git a/crates/brontes-pricing/src/graphs/subgraph.rs b/crates/brontes-pricing/src/graphs/subgraph.rs
index ee9806d93..17e33f3fe 100644
--- a/crates/brontes-pricing/src/graphs/subgraph.rs
+++ b/crates/brontes-pricing/src/graphs/subgraph.rs
@@ -216,25 +216,19 @@ impl PairSubGraph {
     /// checks to see if the liquidity of any pool has dropped by over 50%.
     /// if this has happened, will send the pair for reverification
     pub fn has_stale_liquidity<T: ProtocolState>(&self, state: &FastHashMap<Address, &T>) -> bool {
-        self.graph
-            .edge_weights()
-            .map(|weight| {
-                weight
-                    .iter()
-                    .map(|edge| {
-                        let (r0, r1) = state.get(&edge.pool_addr).unwrap().tvl(edge.token_0);
-                        let tvl_added = r0 + r1;
-                        let start_tvl = self.start_nodes_liq.get(&edge.pool_addr).unwrap();
-
-                        if tvl_added < *start_tvl && start_tvl != &Rational::ZERO {
-                            tvl_added / start_tvl <= Rational::ONE_HALF
-                        } else {
-                            false
-                        }
-                    })
-                    .any(|n| n)
+        self.graph.edge_weights().any(|weight| {
+            weight.iter().any(|edge| {
+                let (r0, r1) = state.get(&edge.pool_addr).unwrap().tvl(edge.token_0);
+                let tvl_added = r0 + r1;
+                let start_tvl = self.start_nodes_liq.get(&edge.pool_addr).unwrap();
+
+                if tvl_added < *start_tvl && start_tvl != &Rational::ZERO {
+                    tvl_added / start_tvl <= Rational::ONE_HALF
+                } else {
+                    false
+                }
             })
-            .any(|n| n)
+        })
     }
 
     // returns list of pools we already have so we can derement there state tracker.
diff --git a/crates/brontes-pricing/src/graphs/yens.rs b/crates/brontes-pricing/src/graphs/yens.rs
index 47f5e0c36..ecc900f66 100644
--- a/crates/brontes-pricing/src/graphs/yens.rs
+++ b/crates/brontes-pricing/src/graphs/yens.rs
@@ -105,7 +105,6 @@ where
 /// );
 /// assert!(empty.is_empty());
 /// ```
-
 pub fn yen<N, C, E, FN, FS, FSE, PV>(
     start: &N,
     second: Option<&N>,
diff --git a/crates/brontes-pricing/src/lib.rs b/crates/brontes-pricing/src/lib.rs
index 47c217abe..f1cbf8826 100644
--- a/crates/brontes-pricing/src/lib.rs
+++ b/crates/brontes-pricing/src/lib.rs
@@ -1,3 +1,5 @@
+#![allow(unused)]
+
 //! [`BrontesBatchPricer`] calculates and track the prices of tokens
 //! on decentralized exchanges on a per-transaction basis. It builds and
 //! maintains a main token graph which is used to derive smaller subgraphs used
@@ -186,7 +188,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
     #[brontes_macros::metrics_call(ptr=metrics,function_call_count, self.range_id, "on_pool_updates")]
     fn on_pool_updates(&mut self, updates: Vec<PoolUpdate>) {
         if updates.is_empty() {
-            return
+            return;
         };
 
         if let Some(msg) = updates.first() {
@@ -256,12 +258,12 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
             |NewGraphDetails { pair, extends_pair, block, edges }| {
                 if edges.is_empty() {
                     tracing::debug!(?pair, ?extends_pair, "new pool has no graph edges");
-                    return
+                    return;
                 }
 
                 if self.graph_manager.has_subgraph_goes_through(pair) {
                     tracing::debug!(?pair, ?extends_pair, "already have pairs");
-                    return
+                    return;
                 }
 
                 self.add_subgraph(pair, extends_pair, block, edges, false);
@@ -300,7 +302,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
         goes_through: Pair,
     ) -> Option<(Rational, Rational, usize)> {
         if pool_pair.0 == pool_pair.1 {
-            return Some((Rational::ONE, Rational::from(1_000_000), usize::MAX))
+            return Some((Rational::ONE, Rational::from(1_000_000), usize::MAX));
         }
         self.graph_manager.get_price(pool_pair, goes_through)
     }
@@ -376,7 +378,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
             let mut bad = false;
             self.failed_pairs.retain(|r_block, s| {
                 if block != *r_block {
-                    return true
+                    return true;
                 }
                 s.retain(|key| {
                     let p = key.get_pair();
@@ -410,7 +412,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
             let mut bad = false;
             self.failed_pairs.retain(|r_block, s| {
                 if block != *r_block {
-                    return true
+                    return true;
                 }
                 s.retain(|key| {
                     let p = key.get_pair();
@@ -469,7 +471,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
             let mut bad = false;
             self.failed_pairs.retain(|r_block, s| {
                 if block != *r_block {
-                    return true
+                    return true;
                 }
                 s.retain(|key| {
                     let p = key.get_pair();
@@ -518,7 +520,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
             let mut bad = false;
             self.failed_pairs.retain(|r_block, s| {
                 if block != *r_block {
-                    return true
+                    return true;
                 }
                 s.retain(|key| {
                     let p = key.get_pair();
@@ -593,7 +595,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
                         self.buffer.overrides.entry(block).or_default().insert(addr);
                     }
 
-                    return None
+                    return None;
                 } else if let LoadResult::Err {
                     block,
                     pool_address,
@@ -627,7 +629,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
                         })
                         .collect_vec();
 
-                    return Some(failed_queries)
+                    return Some(failed_queries);
                 }
                 None
             })
@@ -725,7 +727,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
     #[brontes_macros::metrics_call(ptr=metrics,function_call_count, self.range_id, "bad_state_requery")]
     fn requery_bad_state_par(&mut self, pairs: Vec<RequeryPairs>, frayed_ext: bool) {
         if pairs.is_empty() {
-            return
+            return;
         }
         tracing::debug!("requerying bad state");
 
@@ -746,7 +748,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
                 if edges.is_empty() {
                     tracing::debug!(?pair, ?extends_pair, "no edges found");
 
-                    return Some((pair, block))
+                    return Some((pair, block));
                 }
 
                 let Some((id, need_state, force_rundown)) =
@@ -758,7 +760,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
 
                 if force_rundown && !need_state {
                     tracing::debug!("force rundown requery bad state par");
-                    return Some((pair, block))
+                    return Some((pair, block));
                 } else if !need_state {
                     recusing.push((block, id, pair))
                 }
@@ -785,7 +787,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
     #[brontes_macros::metrics_call(ptr=metrics,function_call_count, self.range_id, "rundown")]
     fn par_rundown(&mut self, pairs: Vec<(PairWithFirstPoolHop, u64)>) {
         if pairs.is_empty() {
-            return
+            return;
         }
 
         let new_subgraphs = execute_on!(target = pricing, {
@@ -866,14 +868,14 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
                     self.add_subgraph(pair, extend, block, edges, frayed_ext)?;
 
                 if !need_state {
-                    return Some((block, id, pair))
+                    return Some((block, id, pair));
                 }
                 None
             })
             .collect_vec();
 
         if verify.is_empty() {
-            return
+            return;
         }
 
         execute_on!(target = pricing, self.try_verify_subgraph(verify));
@@ -956,7 +958,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
     #[brontes_macros::metrics_call(ptr=metrics,function_call_count, self.range_id, "try_flush_out_pending_verification")]
     fn try_flush_out_pending_verification(&mut self) {
         if !self.lazy_loader.can_progress(&self.completed_block) {
-            return
+            return;
         }
 
         let rem_block = self
@@ -965,7 +967,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
             .get_rem_for_block(self.completed_block);
 
         if rem_block.is_empty() {
-            return
+            return;
         }
 
         self.par_rundown(
@@ -1007,7 +1009,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
         // if there are still requests for the given block or the current block isn't
         // complete yet, then we wait
         if !self.can_progress() {
-            return None
+            return None;
         }
 
         self.graph_manager.finalize_block(self.completed_block);
@@ -1103,12 +1105,12 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
             .filter_map(|(key, first_price, last_price)| {
                 let block_movement = if last_price > first_price {
                     if last_price == Rational::ZERO {
-                        return None
+                        return None;
                     }
                     (&last_price - &first_price) / last_price
                 } else {
                     if first_price == Rational::ZERO {
-                        return None
+                        return None;
                     }
                     (&first_price - &last_price) / first_price
                 };
@@ -1141,7 +1143,7 @@ impl<T: TracingProvider> BrontesBatchPricer<T> {
                 .graph_manager
                 .verification_done_for_block(self.completed_block)
         {
-            return None
+            return None;
         }
 
         self.graph_manager.finalize_block(self.completed_block);
@@ -1222,7 +1224,7 @@ impl<T: TracingProvider> Stream for BrontesBatchPricer<T> {
         cx: &mut std::task::Context<'_>,
     ) -> std::task::Poll<Option<Self::Item>> {
         if let Some(new_prices) = self.poll_state_processing(cx) {
-            return new_prices
+            return new_prices;
         }
 
         // ensure clearing when finished
@@ -1270,13 +1272,13 @@ impl<T: TracingProvider> Stream for BrontesBatchPricer<T> {
                             } else {
                                 self.overlap_update = Some(update);
                                 cx.waker().wake_by_ref();
-                                break
+                                break;
                             }
                         }
                     }
                     Poll::Ready(None) => {
                         cx.waker().wake_by_ref();
-                        break
+                        break;
                     }
                     Poll::Pending => {
                         if self.lazy_loader.is_empty()
@@ -1287,15 +1289,15 @@ impl<T: TracingProvider> Stream for BrontesBatchPricer<T> {
                             && block_updates.is_empty()
                             && self.finished.load(SeqCst)
                         {
-                            return Poll::Ready(self.on_close())
+                            return Poll::Ready(self.on_close());
                         }
-                        break
+                        break;
                     }
                 }
             }
 
             if block_updates.is_empty() {
-                break 'outer
+                break 'outer;
             }
 
             #[allow(clippy::blocks_in_conditions)]
@@ -1312,7 +1314,7 @@ impl<T: TracingProvider> Stream for BrontesBatchPricer<T> {
 
             budget -= 1;
             if budget == 0 {
-                break 'outer
+                break 'outer;
             }
         }
 
@@ -1320,6 +1322,7 @@ impl<T: TracingProvider> Stream for BrontesBatchPricer<T> {
     }
 }
 
+#[allow(clippy::large_enum_variant)]
 enum PollResult {
     State(PoolUpdate),
     DiscoveredPool,
diff --git a/crates/brontes-pricing/src/protocols/uniswap_v3/batch_request/mod.rs b/crates/brontes-pricing/src/protocols/uniswap_v3/batch_request/mod.rs
index f6c3311cb..4a9484f1f 100644
--- a/crates/brontes-pricing/src/protocols/uniswap_v3/batch_request/mod.rs
+++ b/crates/brontes-pricing/src/protocols/uniswap_v3/batch_request/mod.rs
@@ -3,11 +3,11 @@ use std::{
     sync::Arc,
 };
 
-use alloy_primitives::{hex, Bytes, FixedBytes, U256};
+use alloy_primitives::{hex, Address, Bytes, FixedBytes, StorageValue, U256};
 use alloy_sol_macro::sol;
 use alloy_sol_types::SolCall;
 use brontes_types::traits::TracingProvider;
-use reth_primitives::{Address, Bytecode, StorageValue};
+use reth_primitives::Bytecode;
 use reth_rpc_types::{request::TransactionInput, TransactionRequest};
 
 mod test_bytecodes;
@@ -134,9 +134,9 @@ pub async fn get_v3_pool_data_batch_request<M: TracingProvider>(
             return Err(AmmError::CallError(eyre::eyre!(
                 "pool bytecode was empty {:?}",
                 pool.address
-            )))
+            )));
         }
-        let pool_bytecode = Bytes::from(hex::encode_prefixed(pool_bytecode.bytecode.as_ref()));
+        let pool_bytecode = Bytes::from(hex::encode_prefixed(pool_bytecode.bytecode().as_ref()));
         let (token0, token1, fee, tick_spacing) = extract_uni_v3_immutables(pool_bytecode)?;
         pool.fee = fee;
         pool.tick_spacing = tick_spacing;
diff --git a/crates/brontes-pricing/src/types.rs b/crates/brontes-pricing/src/types.rs
index 88eefcc32..328c87515 100644
--- a/crates/brontes-pricing/src/types.rs
+++ b/crates/brontes-pricing/src/types.rs
@@ -150,6 +150,7 @@ impl PoolVariants {
     }
 }
 
+#[allow(clippy::large_enum_variant)]
 #[derive(Debug, Clone)]
 pub enum DexPriceMsg {
     /// marker for only updating loaded state and not generating prices
diff --git a/crates/brontes-types/Cargo.toml b/crates/brontes-types/Cargo.toml
index 0e6b1078c..85d424e5a 100644
--- a/crates/brontes-types/Cargo.toml
+++ b/crates/brontes-types/Cargo.toml
@@ -7,12 +7,13 @@ edition = "2021"
 [dependencies]
 # reth 
 reth-rpc-types.workspace = true
+reth-primitives-traits.workspace = true
 reth-primitives.workspace = true
 reth-codecs.workspace = true
 reth-tasks.workspace = true
 reth-db.workspace = true
 async-trait.workspace = true
-reth-interfaces.workspace = true
+# reth-interfaces.workspace = true
 reth-rpc.workspace = true
 
 # alloy
@@ -69,7 +70,7 @@ pin-project = "1.1.4"
 clap.workspace = true
 brontes-macros.workspace = true
 indicatif.workspace = true
-hyper.workspace = true
+hyper = { workspace = true, features = ["server"] }
 prettytable-rs = "0.10"
 
 # stats
@@ -98,8 +99,6 @@ brontes-database = { workspace = true, features = ["tests"] }
 reth-tracing-ext.workspace = true
 
 
-
-
 [features]
 tests = []
 test_pricing = []
diff --git a/crates/brontes-types/src/block_metadata/mod.rs b/crates/brontes-types/src/block_metadata/mod.rs
index 6b338c248..78ac6539d 100644
--- a/crates/brontes-types/src/block_metadata/mod.rs
+++ b/crates/brontes-types/src/block_metadata/mod.rs
@@ -4,8 +4,8 @@ use std::str::FromStr;
 pub use relays::*;
 
 mod bids_payloads;
+use alloy_primitives::Address;
 pub use bids_payloads::*;
-use reth_primitives::Address;
 
 #[derive(Debug, Clone, PartialEq, Eq)]
 pub struct RelayBlockMetadata {
diff --git a/crates/brontes-types/src/block_metadata/relays-openapi/src/models/order_by.rs b/crates/brontes-types/src/block_metadata/relays-openapi/src/models/order_by.rs
index a90c3ce5b..a253928be 100644
--- a/crates/brontes-types/src/block_metadata/relays-openapi/src/models/order_by.rs
+++ b/crates/brontes-types/src/block_metadata/relays-openapi/src/models/order_by.rs
@@ -11,7 +11,6 @@
 /// OrderBy : Sort results in either ascending or descending values.  * `-value`
 /// - descending value (highest value first)  * `value` - ascending value
 /// (lowest value first)
-
 /// Sort results in either ascending or descending values.  * `-value` -
 /// descending value (highest value first)  * `value` - ascending value (lowest
 /// value first)
diff --git a/crates/brontes-types/src/block_metadata/relays.rs b/crates/brontes-types/src/block_metadata/relays.rs
index 3ca0cead8..ac5ff2d5c 100644
--- a/crates/brontes-types/src/block_metadata/relays.rs
+++ b/crates/brontes-types/src/block_metadata/relays.rs
@@ -1,10 +1,10 @@
 use std::collections::HashSet;
 
+use alloy_primitives::BlockHash;
 use relays_openapi::apis::{
     configuration::Configuration,
     data_api::{get_delivered_payloads, get_received_bids},
 };
-use reth_primitives::BlockHash;
 use serde::{Deserialize, Serialize};
 use serde_with::{serde_as, DisplayFromStr};
 use strum::IntoEnumIterator;
diff --git a/crates/brontes-types/src/db/address_metadata.rs b/crates/brontes-types/src/db/address_metadata.rs
index e29ad7625..6e35926aa 100644
--- a/crates/brontes-types/src/db/address_metadata.rs
+++ b/crates/brontes-types/src/db/address_metadata.rs
@@ -31,7 +31,7 @@ impl AddressMetadata {
     pub fn is_verified(&self) -> bool {
         self.contract_info
             .as_ref()
-            .map_or(false, |c| c.verified_contract.unwrap_or(false))
+            .is_some_and(|c| c.verified_contract.unwrap_or(false))
     }
 
     pub fn describe(&self) -> Option<String> {
@@ -96,13 +96,13 @@ impl AddressMetadata {
     fn is_cex(&self) -> bool {
         self.address_type
             .as_deref()
-            .map_or(false, |t| t.eq_ignore_ascii_case("cex"))
+            .is_some_and(|t| t.eq_ignore_ascii_case("cex"))
     }
 
     fn is_aggregator(&self) -> bool {
         self.address_type
             .as_deref()
-            .map_or(false, |t| t.eq_ignore_ascii_case("aggregator"))
+            .is_some_and(|t| t.eq_ignore_ascii_case("aggregator"))
     }
 
     fn is_cex_exchange(&self) -> bool {
diff --git a/crates/brontes-types/src/db/block_analysis.rs b/crates/brontes-types/src/db/block_analysis.rs
index 4724344d9..4d9a4647e 100644
--- a/crates/brontes-types/src/db/block_analysis.rs
+++ b/crates/brontes-types/src/db/block_analysis.rs
@@ -1,11 +1,4 @@
-use std::{collections::HashMap, hash::Hash, str::FromStr};
 use crate::serde_utils::address;
-use alloy_primitives::Address;
-use clickhouse::Row;
-use itertools::Itertools;
-use reth_primitives::TxHash;
-use serde::{Deserialize, Serialize};
-use serde_with::serde_as;
 use crate::serde_utils::vec_address;
 use crate::{
     db::{searcher::Fund, token_info::TokenInfoWithAddress},
@@ -16,6 +9,13 @@ use crate::{
     },
     Protocol,
 };
+use alloy_primitives::Address;
+use alloy_primitives::TxHash;
+use clickhouse::Row;
+use itertools::Itertools;
+use serde::{Deserialize, Serialize};
+use serde_with::serde_as;
+use std::{collections::HashMap, hash::Hash, str::FromStr};
 
 #[serde_as]
 #[derive(Debug, Clone, Serialize, Deserialize, Row)]
@@ -65,592 +65,592 @@ pub struct BlockAnalysis {
     pub all_biggest_arb_revenue_amt: Option<f64>,
 
     // atomic
-    pub atomic_bundle_count:                 u64,
-    pub atomic_total_profit:                 f64,
-    pub atomic_total_revenue:                f64,
-    pub atomic_average_profit_margin:        f64,
+    pub atomic_bundle_count: u64,
+    pub atomic_total_profit: f64,
+    pub atomic_total_revenue: f64,
+    pub atomic_average_profit_margin: f64,
     #[serde(with = "option_address")]
-    pub atomic_top_searcher_profit:          Option<Address>,
-    pub atomic_top_searcher_profit_amt:      Option<f64>,
+    pub atomic_top_searcher_profit: Option<Address>,
+    pub atomic_top_searcher_profit_amt: Option<f64>,
     #[serde(with = "option_address")]
-    pub atomic_top_searcher_revenue:         Option<Address>,
-    pub atomic_top_searcher_revenue_amt:     Option<f64>,
+    pub atomic_top_searcher_revenue: Option<Address>,
+    pub atomic_top_searcher_revenue_amt: Option<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "atomic_searcher_eoa_all.profit")]
-    pub atomic_searcher_eoa_all_profit:      Vec<Address>,
+    pub atomic_searcher_eoa_all_profit: Vec<Address>,
     #[serde(rename = "atomic_searcher_eoa_all.profit_amt")]
-    pub atomic_searcher_eoa_all_profit_amt:  Vec<f64>,
+    pub atomic_searcher_eoa_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "atomic_searcher_eoa_all.revenue")]
-    pub atomic_searcher_eoa_all_revenue:     Vec<Address>,
+    pub atomic_searcher_eoa_all_revenue: Vec<Address>,
     #[serde(rename = "atomic_searcher_eoa_all.revenue_amt")]
     pub atomic_searcher_eoa_all_revenue_amt: Vec<f64>,
-    pub atomic_searcher_eoa_count:           u64,
+    pub atomic_searcher_eoa_count: u64,
     #[serde(with = "vec_address")]
     #[serde(rename = "atomic_mev_contract_all.profit")]
-    pub atomic_mev_contract_all_profit:      Vec<Address>,
+    pub atomic_mev_contract_all_profit: Vec<Address>,
     #[serde(rename = "atomic_mev_contract_all.profit_amt")]
-    pub atomic_mev_contract_all_profit_amt:  Vec<f64>,
+    pub atomic_mev_contract_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "atomic_mev_contract_all.revenue")]
-    pub atomic_mev_contract_all_revenue:     Vec<Address>,
+    pub atomic_mev_contract_all_revenue: Vec<Address>,
     #[serde(rename = "atomic_mev_contract_all.revenue_amt")]
     pub atomic_mev_contract_all_revenue_amt: Vec<f64>,
-    pub atomic_mev_contract_count:           u64,
+    pub atomic_mev_contract_count: u64,
     #[serde(with = "option_fund")]
-    pub atomic_top_fund_profit:              Option<Fund>,
-    pub atomic_top_fund_profit_amt:          Option<f64>,
+    pub atomic_top_fund_profit: Option<Fund>,
+    pub atomic_top_fund_profit_amt: Option<f64>,
     #[serde(with = "option_fund")]
-    pub atomic_top_fund_revenue:             Option<Fund>,
-    pub atomic_top_fund_revenue_amt:         Option<f64>,
+    pub atomic_top_fund_revenue: Option<Fund>,
+    pub atomic_top_fund_revenue_amt: Option<f64>,
     #[serde(rename = "atomic_fund_all.profit")]
     #[serde(with = "vec_fund")]
-    pub atomic_fund_all_profit:              Vec<Fund>,
+    pub atomic_fund_all_profit: Vec<Fund>,
     #[serde(rename = "atomic_fund_all.profit_amt")]
-    pub atomic_fund_all_profit_amt:          Vec<f64>,
+    pub atomic_fund_all_profit_amt: Vec<f64>,
     #[serde(rename = "atomic_fund_all.revenue")]
     #[serde(with = "vec_fund")]
-    pub atomic_fund_all_revenue:             Vec<Fund>,
+    pub atomic_fund_all_revenue: Vec<Fund>,
     #[serde(rename = "atomic_fund_all.revenue_amt")]
-    pub atomic_fund_all_revenue_amt:         Vec<f64>,
-    pub atomic_fund_count:                   u64,
+    pub atomic_fund_all_revenue_amt: Vec<f64>,
+    pub atomic_fund_count: u64,
     #[serde(with = "option_address")]
-    pub atomic_most_arbed_pool_profit:       Option<Address>,
-    pub atomic_most_arbed_pool_profit_amt:   Option<f64>,
+    pub atomic_most_arbed_pool_profit: Option<Address>,
+    pub atomic_most_arbed_pool_profit_amt: Option<f64>,
     #[serde(with = "option_address")]
-    pub atomic_most_arbed_pool_revenue:      Option<Address>,
-    pub atomic_most_arbed_pool_revenue_amt:  Option<f64>,
-    pub atomic_most_arbed_pair_profit:       TokenPairDetails,
-    pub atomic_most_arbed_pair_profit_amt:   Option<f64>,
-    pub atomic_most_arbed_pair_revenue:      TokenPairDetails,
-    pub atomic_most_arbed_pair_revenue_amt:  Option<f64>,
+    pub atomic_most_arbed_pool_revenue: Option<Address>,
+    pub atomic_most_arbed_pool_revenue_amt: Option<f64>,
+    pub atomic_most_arbed_pair_profit: TokenPairDetails,
+    pub atomic_most_arbed_pair_profit_amt: Option<f64>,
+    pub atomic_most_arbed_pair_revenue: TokenPairDetails,
+    pub atomic_most_arbed_pair_revenue_amt: Option<f64>,
     #[serde(with = "option_protocol")]
-    pub atomic_most_arbed_dex_profit:        Option<Protocol>,
-    pub atomic_most_arbed_dex_profit_amt:    Option<f64>,
+    pub atomic_most_arbed_dex_profit: Option<Protocol>,
+    pub atomic_most_arbed_dex_profit_amt: Option<f64>,
     #[serde(with = "option_protocol")]
-    pub atomic_most_arbed_dex_revenue:       Option<Protocol>,
-    pub atomic_most_arbed_dex_revenue_amt:   Option<f64>,
+    pub atomic_most_arbed_dex_revenue: Option<Protocol>,
+    pub atomic_most_arbed_dex_revenue_amt: Option<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "atomic_arbed_pool_all.profit")]
-    pub atomic_arbed_pool_all_profit:        Vec<Address>,
+    pub atomic_arbed_pool_all_profit: Vec<Address>,
     #[serde(rename = "atomic_arbed_pool_all.profit_amt")]
-    pub atomic_arbed_pool_all_profit_amt:    Vec<f64>,
+    pub atomic_arbed_pool_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "atomic_arbed_pool_all.revenue")]
-    pub atomic_arbed_pool_all_revenue:       Vec<Address>,
+    pub atomic_arbed_pool_all_revenue: Vec<Address>,
     #[serde(rename = "atomic_arbed_pool_all.revenue_amt")]
-    pub atomic_arbed_pool_all_revenue_amt:   Vec<f64>,
+    pub atomic_arbed_pool_all_revenue_amt: Vec<f64>,
     #[serde(rename = "atomic_arbed_pair_all.profit")]
-    pub atomic_arbed_pair_all_profit:        Vec<TokenPairDetails>,
+    pub atomic_arbed_pair_all_profit: Vec<TokenPairDetails>,
     #[serde(rename = "atomic_arbed_pair_all.profit_amt")]
-    pub atomic_arbed_pair_all_profit_amt:    Vec<f64>,
+    pub atomic_arbed_pair_all_profit_amt: Vec<f64>,
     #[serde(rename = "atomic_arbed_pair_all.revenue")]
-    pub atomic_arbed_pair_all_revenue:       Vec<TokenPairDetails>,
+    pub atomic_arbed_pair_all_revenue: Vec<TokenPairDetails>,
     #[serde(rename = "atomic_arbed_pair_all.revenue_amt")]
-    pub atomic_arbed_pair_all_revenue_amt:   Vec<f64>,
+    pub atomic_arbed_pair_all_revenue_amt: Vec<f64>,
     #[serde(rename = "atomic_arbed_dex_all.profit")]
     #[serde(with = "vec_protocol")]
-    pub atomic_arbed_dex_all_profit:         Vec<Protocol>,
+    pub atomic_arbed_dex_all_profit: Vec<Protocol>,
     #[serde(rename = "atomic_arbed_dex_all.profit_amt")]
-    pub atomic_arbed_dex_all_profit_amt:     Vec<f64>,
+    pub atomic_arbed_dex_all_profit_amt: Vec<f64>,
     #[serde(rename = "atomic_arbed_dex_all.revenue")]
     #[serde(with = "vec_protocol")]
-    pub atomic_arbed_dex_all_revenue:        Vec<Protocol>,
+    pub atomic_arbed_dex_all_revenue: Vec<Protocol>,
     #[serde(rename = "atomic_arbed_dex_all.revenue_amt")]
-    pub atomic_arbed_dex_all_revenue_amt:    Vec<f64>,
+    pub atomic_arbed_dex_all_revenue_amt: Vec<f64>,
     #[serde(with = "option_txhash")]
-    pub atomic_biggest_arb_profit:           Option<TxHash>,
-    pub atomic_biggest_arb_profit_amt:       Option<f64>,
+    pub atomic_biggest_arb_profit: Option<TxHash>,
+    pub atomic_biggest_arb_profit_amt: Option<f64>,
     #[serde(with = "option_txhash")]
-    pub atomic_biggest_arb_revenue:          Option<TxHash>,
-    pub atomic_biggest_arb_revenue_amt:      Option<f64>,
+    pub atomic_biggest_arb_revenue: Option<TxHash>,
+    pub atomic_biggest_arb_revenue_amt: Option<f64>,
 
     // sandwich
-    pub sandwich_bundle_count:                 u64,
-    pub sandwich_total_profit:                 f64,
-    pub sandwich_total_revenue:                f64,
-    pub sandwich_average_profit_margin:        f64,
+    pub sandwich_bundle_count: u64,
+    pub sandwich_total_profit: f64,
+    pub sandwich_total_revenue: f64,
+    pub sandwich_average_profit_margin: f64,
     #[serde(with = "option_address")]
-    pub sandwich_top_searcher_profit:          Option<Address>,
-    pub sandwich_top_searcher_profit_amt:      Option<f64>,
+    pub sandwich_top_searcher_profit: Option<Address>,
+    pub sandwich_top_searcher_profit_amt: Option<f64>,
     #[serde(with = "option_address")]
-    pub sandwich_top_searcher_revenue:         Option<Address>,
-    pub sandwich_top_searcher_revenue_amt:     Option<f64>,
+    pub sandwich_top_searcher_revenue: Option<Address>,
+    pub sandwich_top_searcher_revenue_amt: Option<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "sandwich_searcher_eoa_all.profit")]
-    pub sandwich_searcher_eoa_all_profit:      Vec<Address>,
+    pub sandwich_searcher_eoa_all_profit: Vec<Address>,
     #[serde(rename = "sandwich_searcher_eoa_all.profit_amt")]
-    pub sandwich_searcher_eoa_all_profit_amt:  Vec<f64>,
+    pub sandwich_searcher_eoa_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "sandwich_searcher_eoa_all.revenue")]
-    pub sandwich_searcher_eoa_all_revenue:     Vec<Address>,
+    pub sandwich_searcher_eoa_all_revenue: Vec<Address>,
     #[serde(rename = "sandwich_searcher_eoa_all.revenue_amt")]
     pub sandwich_searcher_eoa_all_revenue_amt: Vec<f64>,
-    pub sandwich_searcher_eoa_count:           u64,
+    pub sandwich_searcher_eoa_count: u64,
     #[serde(with = "vec_address")]
     #[serde(rename = "sandwich_mev_contract_all.profit")]
-    pub sandwich_mev_contract_all_profit:      Vec<Address>,
+    pub sandwich_mev_contract_all_profit: Vec<Address>,
     #[serde(rename = "sandwich_mev_contract_all.profit_amt")]
-    pub sandwich_mev_contract_all_profit_amt:  Vec<f64>,
+    pub sandwich_mev_contract_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "sandwich_mev_contract_all.revenue")]
-    pub sandwich_mev_contract_all_revenue:     Vec<Address>,
+    pub sandwich_mev_contract_all_revenue: Vec<Address>,
     #[serde(rename = "sandwich_mev_contract_all.revenue_amt")]
     pub sandwich_mev_contract_all_revenue_amt: Vec<f64>,
-    pub sandwich_mev_contract_count:           u64,
+    pub sandwich_mev_contract_count: u64,
     #[serde(with = "option_fund")]
-    pub sandwich_top_fund_profit:              Option<Fund>,
-    pub sandwich_top_fund_profit_amt:          Option<f64>,
+    pub sandwich_top_fund_profit: Option<Fund>,
+    pub sandwich_top_fund_profit_amt: Option<f64>,
     #[serde(with = "option_fund")]
-    pub sandwich_top_fund_revenue:             Option<Fund>,
-    pub sandwich_top_fund_revenue_amt:         Option<f64>,
+    pub sandwich_top_fund_revenue: Option<Fund>,
+    pub sandwich_top_fund_revenue_amt: Option<f64>,
     #[serde(rename = "sandwich_fund_all.profit")]
     #[serde(with = "vec_fund")]
-    pub sandwich_fund_all_profit:              Vec<Fund>,
+    pub sandwich_fund_all_profit: Vec<Fund>,
     #[serde(rename = "sandwich_fund_all.profit_amt")]
-    pub sandwich_fund_all_profit_amt:          Vec<f64>,
+    pub sandwich_fund_all_profit_amt: Vec<f64>,
     #[serde(rename = "sandwich_fund_all.revenue")]
     #[serde(with = "vec_fund")]
-    pub sandwich_fund_all_revenue:             Vec<Fund>,
+    pub sandwich_fund_all_revenue: Vec<Fund>,
     #[serde(rename = "sandwich_fund_all.revenue_amt")]
-    pub sandwich_fund_all_revenue_amt:         Vec<f64>,
-    pub sandwich_fund_count:                   u64,
+    pub sandwich_fund_all_revenue_amt: Vec<f64>,
+    pub sandwich_fund_count: u64,
     #[serde(with = "option_address")]
-    pub sandwich_most_arbed_pool_profit:       Option<Address>,
-    pub sandwich_most_arbed_pool_profit_amt:   Option<f64>,
+    pub sandwich_most_arbed_pool_profit: Option<Address>,
+    pub sandwich_most_arbed_pool_profit_amt: Option<f64>,
     #[serde(with = "option_address")]
-    pub sandwich_most_arbed_pool_revenue:      Option<Address>,
-    pub sandwich_most_arbed_pool_revenue_amt:  Option<f64>,
-    pub sandwich_most_arbed_pair_profit:       TokenPairDetails,
-    pub sandwich_most_arbed_pair_profit_amt:   Option<f64>,
-    pub sandwich_most_arbed_pair_revenue:      TokenPairDetails,
-    pub sandwich_most_arbed_pair_revenue_amt:  Option<f64>,
+    pub sandwich_most_arbed_pool_revenue: Option<Address>,
+    pub sandwich_most_arbed_pool_revenue_amt: Option<f64>,
+    pub sandwich_most_arbed_pair_profit: TokenPairDetails,
+    pub sandwich_most_arbed_pair_profit_amt: Option<f64>,
+    pub sandwich_most_arbed_pair_revenue: TokenPairDetails,
+    pub sandwich_most_arbed_pair_revenue_amt: Option<f64>,
     #[serde(with = "option_protocol")]
-    pub sandwich_most_arbed_dex_profit:        Option<Protocol>,
-    pub sandwich_most_arbed_dex_profit_amt:    Option<f64>,
+    pub sandwich_most_arbed_dex_profit: Option<Protocol>,
+    pub sandwich_most_arbed_dex_profit_amt: Option<f64>,
     #[serde(with = "option_protocol")]
-    pub sandwich_most_arbed_dex_revenue:       Option<Protocol>,
-    pub sandwich_most_arbed_dex_revenue_amt:   Option<f64>,
+    pub sandwich_most_arbed_dex_revenue: Option<Protocol>,
+    pub sandwich_most_arbed_dex_revenue_amt: Option<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "sandwich_arbed_pool_all.profit")]
-    pub sandwich_arbed_pool_all_profit:        Vec<Address>,
+    pub sandwich_arbed_pool_all_profit: Vec<Address>,
     #[serde(rename = "sandwich_arbed_pool_all.profit_amt")]
-    pub sandwich_arbed_pool_all_profit_amt:    Vec<f64>,
+    pub sandwich_arbed_pool_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "sandwich_arbed_pool_all.revenue")]
-    pub sandwich_arbed_pool_all_revenue:       Vec<Address>,
+    pub sandwich_arbed_pool_all_revenue: Vec<Address>,
     #[serde(rename = "sandwich_arbed_pool_all.revenue_amt")]
-    pub sandwich_arbed_pool_all_revenue_amt:   Vec<f64>,
+    pub sandwich_arbed_pool_all_revenue_amt: Vec<f64>,
     #[serde(rename = "sandwich_arbed_pair_all.profit")]
-    pub sandwich_arbed_pair_all_profit:        Vec<TokenPairDetails>,
+    pub sandwich_arbed_pair_all_profit: Vec<TokenPairDetails>,
     #[serde(rename = "sandwich_arbed_pair_all.profit_amt")]
-    pub sandwich_arbed_pair_all_profit_amt:    Vec<f64>,
+    pub sandwich_arbed_pair_all_profit_amt: Vec<f64>,
     #[serde(rename = "sandwich_arbed_pair_all.revenue")]
-    pub sandwich_arbed_pair_all_revenue:       Vec<TokenPairDetails>,
+    pub sandwich_arbed_pair_all_revenue: Vec<TokenPairDetails>,
     #[serde(rename = "sandwich_arbed_pair_all.revenue_amt")]
-    pub sandwich_arbed_pair_all_revenue_amt:   Vec<f64>,
+    pub sandwich_arbed_pair_all_revenue_amt: Vec<f64>,
     #[serde(rename = "sandwich_arbed_dex_all.profit")]
     #[serde(with = "vec_protocol")]
-    pub sandwich_arbed_dex_all_profit:         Vec<Protocol>,
+    pub sandwich_arbed_dex_all_profit: Vec<Protocol>,
     #[serde(rename = "sandwich_arbed_dex_all.profit_amt")]
-    pub sandwich_arbed_dex_all_profit_amt:     Vec<f64>,
+    pub sandwich_arbed_dex_all_profit_amt: Vec<f64>,
     #[serde(rename = "sandwich_arbed_dex_all.revenue")]
     #[serde(with = "vec_protocol")]
-    pub sandwich_arbed_dex_all_revenue:        Vec<Protocol>,
+    pub sandwich_arbed_dex_all_revenue: Vec<Protocol>,
     #[serde(rename = "sandwich_arbed_dex_all.revenue_amt")]
-    pub sandwich_arbed_dex_all_revenue_amt:    Vec<f64>,
+    pub sandwich_arbed_dex_all_revenue_amt: Vec<f64>,
     #[serde(with = "option_txhash")]
-    pub sandwich_biggest_arb_profit:           Option<TxHash>,
-    pub sandwich_biggest_arb_profit_amt:       Option<f64>,
+    pub sandwich_biggest_arb_profit: Option<TxHash>,
+    pub sandwich_biggest_arb_profit_amt: Option<f64>,
     #[serde(with = "option_txhash")]
-    pub sandwich_biggest_arb_revenue:          Option<TxHash>,
-    pub sandwich_biggest_arb_revenue_amt:      Option<f64>,
+    pub sandwich_biggest_arb_revenue: Option<TxHash>,
+    pub sandwich_biggest_arb_revenue_amt: Option<f64>,
 
     // jit
-    pub jit_bundle_count:                 u64,
-    pub jit_total_profit:                 f64,
-    pub jit_total_revenue:                f64,
-    pub jit_average_profit_margin:        f64,
+    pub jit_bundle_count: u64,
+    pub jit_total_profit: f64,
+    pub jit_total_revenue: f64,
+    pub jit_average_profit_margin: f64,
     #[serde(with = "option_address")]
-    pub jit_top_searcher_profit:          Option<Address>,
-    pub jit_top_searcher_profit_amt:      Option<f64>,
+    pub jit_top_searcher_profit: Option<Address>,
+    pub jit_top_searcher_profit_amt: Option<f64>,
     #[serde(with = "option_address")]
-    pub jit_top_searcher_revenue:         Option<Address>,
-    pub jit_top_searcher_revenue_amt:     Option<f64>,
+    pub jit_top_searcher_revenue: Option<Address>,
+    pub jit_top_searcher_revenue_amt: Option<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "jit_searcher_eoa_all.profit")]
-    pub jit_searcher_eoa_all_profit:      Vec<Address>,
+    pub jit_searcher_eoa_all_profit: Vec<Address>,
     #[serde(rename = "jit_searcher_eoa_all.profit_amt")]
-    pub jit_searcher_eoa_all_profit_amt:  Vec<f64>,
+    pub jit_searcher_eoa_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "jit_searcher_eoa_all.revenue")]
-    pub jit_searcher_eoa_all_revenue:     Vec<Address>,
+    pub jit_searcher_eoa_all_revenue: Vec<Address>,
     #[serde(rename = "jit_searcher_eoa_all.revenue_amt")]
     pub jit_searcher_eoa_all_revenue_amt: Vec<f64>,
-    pub jit_searcher_eoa_count:           u64,
+    pub jit_searcher_eoa_count: u64,
     #[serde(with = "vec_address")]
     #[serde(rename = "jit_mev_contract_all.profit")]
-    pub jit_mev_contract_all_profit:      Vec<Address>,
+    pub jit_mev_contract_all_profit: Vec<Address>,
     #[serde(rename = "jit_mev_contract_all.profit_amt")]
-    pub jit_mev_contract_all_profit_amt:  Vec<f64>,
+    pub jit_mev_contract_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "jit_mev_contract_all.revenue")]
-    pub jit_mev_contract_all_revenue:     Vec<Address>,
+    pub jit_mev_contract_all_revenue: Vec<Address>,
     #[serde(rename = "jit_mev_contract_all.revenue_amt")]
     pub jit_mev_contract_all_revenue_amt: Vec<f64>,
-    pub jit_mev_contract_count:           u64,
+    pub jit_mev_contract_count: u64,
     #[serde(with = "option_fund")]
-    pub jit_top_fund_profit:              Option<Fund>,
-    pub jit_top_fund_profit_amt:          Option<f64>,
+    pub jit_top_fund_profit: Option<Fund>,
+    pub jit_top_fund_profit_amt: Option<f64>,
     #[serde(with = "option_fund")]
-    pub jit_top_fund_revenue:             Option<Fund>,
-    pub jit_top_fund_revenue_amt:         Option<f64>,
+    pub jit_top_fund_revenue: Option<Fund>,
+    pub jit_top_fund_revenue_amt: Option<f64>,
     #[serde(rename = "jit_fund_all.profit")]
     #[serde(with = "vec_fund")]
-    pub jit_fund_all_profit:              Vec<Fund>,
+    pub jit_fund_all_profit: Vec<Fund>,
     #[serde(rename = "jit_fund_all.profit_amt")]
-    pub jit_fund_all_profit_amt:          Vec<f64>,
+    pub jit_fund_all_profit_amt: Vec<f64>,
     #[serde(rename = "jit_fund_all.revenue")]
     #[serde(with = "vec_fund")]
-    pub jit_fund_all_revenue:             Vec<Fund>,
+    pub jit_fund_all_revenue: Vec<Fund>,
     #[serde(rename = "jit_fund_all.revenue_amt")]
-    pub jit_fund_all_revenue_amt:         Vec<f64>,
-    pub jit_fund_count:                   u64,
+    pub jit_fund_all_revenue_amt: Vec<f64>,
+    pub jit_fund_count: u64,
     #[serde(with = "option_address")]
-    pub jit_most_arbed_pool_profit:       Option<Address>,
-    pub jit_most_arbed_pool_profit_amt:   Option<f64>,
+    pub jit_most_arbed_pool_profit: Option<Address>,
+    pub jit_most_arbed_pool_profit_amt: Option<f64>,
     #[serde(with = "option_address")]
-    pub jit_most_arbed_pool_revenue:      Option<Address>,
-    pub jit_most_arbed_pool_revenue_amt:  Option<f64>,
-    pub jit_most_arbed_pair_profit:       TokenPairDetails,
-    pub jit_most_arbed_pair_profit_amt:   Option<f64>,
-    pub jit_most_arbed_pair_revenue:      TokenPairDetails,
-    pub jit_most_arbed_pair_revenue_amt:  Option<f64>,
+    pub jit_most_arbed_pool_revenue: Option<Address>,
+    pub jit_most_arbed_pool_revenue_amt: Option<f64>,
+    pub jit_most_arbed_pair_profit: TokenPairDetails,
+    pub jit_most_arbed_pair_profit_amt: Option<f64>,
+    pub jit_most_arbed_pair_revenue: TokenPairDetails,
+    pub jit_most_arbed_pair_revenue_amt: Option<f64>,
     #[serde(with = "option_protocol")]
-    pub jit_most_arbed_dex_profit:        Option<Protocol>,
-    pub jit_most_arbed_dex_profit_amt:    Option<f64>,
+    pub jit_most_arbed_dex_profit: Option<Protocol>,
+    pub jit_most_arbed_dex_profit_amt: Option<f64>,
     #[serde(with = "option_protocol")]
-    pub jit_most_arbed_dex_revenue:       Option<Protocol>,
-    pub jit_most_arbed_dex_revenue_amt:   Option<f64>,
+    pub jit_most_arbed_dex_revenue: Option<Protocol>,
+    pub jit_most_arbed_dex_revenue_amt: Option<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "jit_arbed_pool_all.profit")]
-    pub jit_arbed_pool_all_profit:        Vec<Address>,
+    pub jit_arbed_pool_all_profit: Vec<Address>,
     #[serde(rename = "jit_arbed_pool_all.profit_amt")]
-    pub jit_arbed_pool_all_profit_amt:    Vec<f64>,
+    pub jit_arbed_pool_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "jit_arbed_pool_all.revenue")]
-    pub jit_arbed_pool_all_revenue:       Vec<Address>,
+    pub jit_arbed_pool_all_revenue: Vec<Address>,
     #[serde(rename = "jit_arbed_pool_all.revenue_amt")]
-    pub jit_arbed_pool_all_revenue_amt:   Vec<f64>,
+    pub jit_arbed_pool_all_revenue_amt: Vec<f64>,
     #[serde(rename = "jit_arbed_pair_all.profit")]
-    pub jit_arbed_pair_all_profit:        Vec<TokenPairDetails>,
+    pub jit_arbed_pair_all_profit: Vec<TokenPairDetails>,
     #[serde(rename = "jit_arbed_pair_all.profit_amt")]
-    pub jit_arbed_pair_all_profit_amt:    Vec<f64>,
+    pub jit_arbed_pair_all_profit_amt: Vec<f64>,
     #[serde(rename = "jit_arbed_pair_all.revenue")]
-    pub jit_arbed_pair_all_revenue:       Vec<TokenPairDetails>,
+    pub jit_arbed_pair_all_revenue: Vec<TokenPairDetails>,
     #[serde(rename = "jit_arbed_pair_all.revenue_amt")]
-    pub jit_arbed_pair_all_revenue_amt:   Vec<f64>,
+    pub jit_arbed_pair_all_revenue_amt: Vec<f64>,
     #[serde(rename = "jit_arbed_dex_all.profit")]
     #[serde(with = "vec_protocol")]
-    pub jit_arbed_dex_all_profit:         Vec<Protocol>,
+    pub jit_arbed_dex_all_profit: Vec<Protocol>,
     #[serde(rename = "jit_arbed_dex_all.profit_amt")]
-    pub jit_arbed_dex_all_profit_amt:     Vec<f64>,
+    pub jit_arbed_dex_all_profit_amt: Vec<f64>,
     #[serde(rename = "jit_arbed_dex_all.revenue")]
     #[serde(with = "vec_protocol")]
-    pub jit_arbed_dex_all_revenue:        Vec<Protocol>,
+    pub jit_arbed_dex_all_revenue: Vec<Protocol>,
     #[serde(rename = "jit_arbed_dex_all.revenue_amt")]
-    pub jit_arbed_dex_all_revenue_amt:    Vec<f64>,
+    pub jit_arbed_dex_all_revenue_amt: Vec<f64>,
     #[serde(with = "option_txhash")]
-    pub jit_biggest_arb_profit:           Option<TxHash>,
-    pub jit_biggest_arb_profit_amt:       Option<f64>,
+    pub jit_biggest_arb_profit: Option<TxHash>,
+    pub jit_biggest_arb_profit_amt: Option<f64>,
     #[serde(with = "option_txhash")]
-    pub jit_biggest_arb_revenue:          Option<TxHash>,
-    pub jit_biggest_arb_revenue_amt:      Option<f64>,
+    pub jit_biggest_arb_revenue: Option<TxHash>,
+    pub jit_biggest_arb_revenue_amt: Option<f64>,
 
     // jit-sandwich
-    pub jit_sandwich_bundle_count:                 u64,
-    pub jit_sandwich_total_profit:                 f64,
-    pub jit_sandwich_total_revenue:                f64,
-    pub jit_sandwich_average_profit_margin:        f64,
+    pub jit_sandwich_bundle_count: u64,
+    pub jit_sandwich_total_profit: f64,
+    pub jit_sandwich_total_revenue: f64,
+    pub jit_sandwich_average_profit_margin: f64,
     #[serde(with = "option_address")]
-    pub jit_sandwich_top_searcher_profit:          Option<Address>,
-    pub jit_sandwich_top_searcher_profit_amt:      Option<f64>,
+    pub jit_sandwich_top_searcher_profit: Option<Address>,
+    pub jit_sandwich_top_searcher_profit_amt: Option<f64>,
     #[serde(with = "option_address")]
-    pub jit_sandwich_top_searcher_revenue:         Option<Address>,
-    pub jit_sandwich_top_searcher_revenue_amt:     Option<f64>,
+    pub jit_sandwich_top_searcher_revenue: Option<Address>,
+    pub jit_sandwich_top_searcher_revenue_amt: Option<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "jit_sandwich_searcher_eoa_all.profit")]
-    pub jit_sandwich_searcher_eoa_all_profit:      Vec<Address>,
+    pub jit_sandwich_searcher_eoa_all_profit: Vec<Address>,
     #[serde(rename = "jit_sandwich_searcher_eoa_all.profit_amt")]
-    pub jit_sandwich_searcher_eoa_all_profit_amt:  Vec<f64>,
+    pub jit_sandwich_searcher_eoa_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "jit_sandwich_searcher_eoa_all.revenue")]
-    pub jit_sandwich_searcher_eoa_all_revenue:     Vec<Address>,
+    pub jit_sandwich_searcher_eoa_all_revenue: Vec<Address>,
     #[serde(rename = "jit_sandwich_searcher_eoa_all.revenue_amt")]
     pub jit_sandwich_searcher_eoa_all_revenue_amt: Vec<f64>,
-    pub jit_sandwich_searcher_eoa_count:           u64,
+    pub jit_sandwich_searcher_eoa_count: u64,
     #[serde(with = "vec_address")]
     #[serde(rename = "jit_sandwich_mev_contract_all.profit")]
-    pub jit_sandwich_mev_contract_all_profit:      Vec<Address>,
+    pub jit_sandwich_mev_contract_all_profit: Vec<Address>,
     #[serde(rename = "jit_sandwich_mev_contract_all.profit_amt")]
-    pub jit_sandwich_mev_contract_all_profit_amt:  Vec<f64>,
+    pub jit_sandwich_mev_contract_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "jit_sandwich_mev_contract_all.revenue")]
-    pub jit_sandwich_mev_contract_all_revenue:     Vec<Address>,
+    pub jit_sandwich_mev_contract_all_revenue: Vec<Address>,
     #[serde(rename = "jit_sandwich_mev_contract_all.revenue_amt")]
     pub jit_sandwich_mev_contract_all_revenue_amt: Vec<f64>,
-    pub jit_sandwich_mev_contract_count:           u64,
+    pub jit_sandwich_mev_contract_count: u64,
     #[serde(with = "option_fund")]
-    pub jit_sandwich_top_fund_profit:              Option<Fund>,
-    pub jit_sandwich_top_fund_profit_amt:          Option<f64>,
+    pub jit_sandwich_top_fund_profit: Option<Fund>,
+    pub jit_sandwich_top_fund_profit_amt: Option<f64>,
     #[serde(with = "option_fund")]
-    pub jit_sandwich_top_fund_revenue:             Option<Fund>,
-    pub jit_sandwich_top_fund_revenue_amt:         Option<f64>,
+    pub jit_sandwich_top_fund_revenue: Option<Fund>,
+    pub jit_sandwich_top_fund_revenue_amt: Option<f64>,
     #[serde(rename = "jit_sandwich_fund_all.profit")]
     #[serde(with = "vec_fund")]
-    pub jit_sandwich_fund_all_profit:              Vec<Fund>,
+    pub jit_sandwich_fund_all_profit: Vec<Fund>,
     #[serde(rename = "jit_sandwich_fund_all.profit_amt")]
-    pub jit_sandwich_fund_all_profit_amt:          Vec<f64>,
+    pub jit_sandwich_fund_all_profit_amt: Vec<f64>,
     #[serde(rename = "jit_sandwich_fund_all.revenue")]
     #[serde(with = "vec_fund")]
-    pub jit_sandwich_fund_all_revenue:             Vec<Fund>,
+    pub jit_sandwich_fund_all_revenue: Vec<Fund>,
     #[serde(rename = "jit_sandwich_fund_all.revenue_amt")]
-    pub jit_sandwich_fund_all_revenue_amt:         Vec<f64>,
-    pub jit_sandwich_fund_count:                   u64,
+    pub jit_sandwich_fund_all_revenue_amt: Vec<f64>,
+    pub jit_sandwich_fund_count: u64,
     #[serde(with = "option_address")]
-    pub jit_sandwich_most_arbed_pool_profit:       Option<Address>,
-    pub jit_sandwich_most_arbed_pool_profit_amt:   Option<f64>,
+    pub jit_sandwich_most_arbed_pool_profit: Option<Address>,
+    pub jit_sandwich_most_arbed_pool_profit_amt: Option<f64>,
     #[serde(with = "option_address")]
-    pub jit_sandwich_most_arbed_pool_revenue:      Option<Address>,
-    pub jit_sandwich_most_arbed_pool_revenue_amt:  Option<f64>,
-    pub jit_sandwich_most_arbed_pair_profit:       TokenPairDetails,
-    pub jit_sandwich_most_arbed_pair_profit_amt:   Option<f64>,
-    pub jit_sandwich_most_arbed_pair_revenue:      TokenPairDetails,
-    pub jit_sandwich_most_arbed_pair_revenue_amt:  Option<f64>,
+    pub jit_sandwich_most_arbed_pool_revenue: Option<Address>,
+    pub jit_sandwich_most_arbed_pool_revenue_amt: Option<f64>,
+    pub jit_sandwich_most_arbed_pair_profit: TokenPairDetails,
+    pub jit_sandwich_most_arbed_pair_profit_amt: Option<f64>,
+    pub jit_sandwich_most_arbed_pair_revenue: TokenPairDetails,
+    pub jit_sandwich_most_arbed_pair_revenue_amt: Option<f64>,
     #[serde(with = "option_protocol")]
-    pub jit_sandwich_most_arbed_dex_profit:        Option<Protocol>,
-    pub jit_sandwich_most_arbed_dex_profit_amt:    Option<f64>,
+    pub jit_sandwich_most_arbed_dex_profit: Option<Protocol>,
+    pub jit_sandwich_most_arbed_dex_profit_amt: Option<f64>,
     #[serde(with = "option_protocol")]
-    pub jit_sandwich_most_arbed_dex_revenue:       Option<Protocol>,
-    pub jit_sandwich_most_arbed_dex_revenue_amt:   Option<f64>,
+    pub jit_sandwich_most_arbed_dex_revenue: Option<Protocol>,
+    pub jit_sandwich_most_arbed_dex_revenue_amt: Option<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "jit_sandwich_arbed_pool_all.profit")]
-    pub jit_sandwich_arbed_pool_all_profit:        Vec<Address>,
+    pub jit_sandwich_arbed_pool_all_profit: Vec<Address>,
     #[serde(rename = "jit_sandwich_arbed_pool_all.profit_amt")]
-    pub jit_sandwich_arbed_pool_all_profit_amt:    Vec<f64>,
+    pub jit_sandwich_arbed_pool_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "jit_sandwich_arbed_pool_all.revenue")]
-    pub jit_sandwich_arbed_pool_all_revenue:       Vec<Address>,
+    pub jit_sandwich_arbed_pool_all_revenue: Vec<Address>,
     #[serde(rename = "jit_sandwich_arbed_pool_all.revenue_amt")]
-    pub jit_sandwich_arbed_pool_all_revenue_amt:   Vec<f64>,
+    pub jit_sandwich_arbed_pool_all_revenue_amt: Vec<f64>,
     #[serde(rename = "jit_sandwich_arbed_pair_all.profit")]
-    pub jit_sandwich_arbed_pair_all_profit:        Vec<TokenPairDetails>,
+    pub jit_sandwich_arbed_pair_all_profit: Vec<TokenPairDetails>,
     #[serde(rename = "jit_sandwich_arbed_pair_all.profit_amt")]
-    pub jit_sandwich_arbed_pair_all_profit_amt:    Vec<f64>,
+    pub jit_sandwich_arbed_pair_all_profit_amt: Vec<f64>,
     #[serde(rename = "jit_sandwich_arbed_pair_all.revenue")]
-    pub jit_sandwich_arbed_pair_all_revenue:       Vec<TokenPairDetails>,
+    pub jit_sandwich_arbed_pair_all_revenue: Vec<TokenPairDetails>,
     #[serde(rename = "jit_sandwich_arbed_pair_all.revenue_amt")]
-    pub jit_sandwich_arbed_pair_all_revenue_amt:   Vec<f64>,
+    pub jit_sandwich_arbed_pair_all_revenue_amt: Vec<f64>,
     #[serde(rename = "jit_sandwich_arbed_dex_all.profit")]
     #[serde(with = "vec_protocol")]
-    pub jit_sandwich_arbed_dex_all_profit:         Vec<Protocol>,
+    pub jit_sandwich_arbed_dex_all_profit: Vec<Protocol>,
     #[serde(rename = "jit_sandwich_arbed_dex_all.profit_amt")]
-    pub jit_sandwich_arbed_dex_all_profit_amt:     Vec<f64>,
+    pub jit_sandwich_arbed_dex_all_profit_amt: Vec<f64>,
     #[serde(rename = "jit_sandwich_arbed_dex_all.revenue")]
     #[serde(with = "vec_protocol")]
-    pub jit_sandwich_arbed_dex_all_revenue:        Vec<Protocol>,
+    pub jit_sandwich_arbed_dex_all_revenue: Vec<Protocol>,
     #[serde(rename = "jit_sandwich_arbed_dex_all.revenue_amt")]
-    pub jit_sandwich_arbed_dex_all_revenue_amt:    Vec<f64>,
+    pub jit_sandwich_arbed_dex_all_revenue_amt: Vec<f64>,
     #[serde(with = "option_txhash")]
-    pub jit_sandwich_biggest_arb_profit:           Option<TxHash>,
-    pub jit_sandwich_biggest_arb_profit_amt:       Option<f64>,
+    pub jit_sandwich_biggest_arb_profit: Option<TxHash>,
+    pub jit_sandwich_biggest_arb_profit_amt: Option<f64>,
     #[serde(with = "option_txhash")]
-    pub jit_sandwich_biggest_arb_revenue:          Option<TxHash>,
-    pub jit_sandwich_biggest_arb_revenue_amt:      Option<f64>,
+    pub jit_sandwich_biggest_arb_revenue: Option<TxHash>,
+    pub jit_sandwich_biggest_arb_revenue_amt: Option<f64>,
 
     // cex dex
-    pub cex_dex_bundle_count:                 u64,
-    pub cex_dex_total_profit:                 f64,
-    pub cex_dex_total_revenue:                f64,
-    pub cex_dex_average_profit_margin:        f64,
+    pub cex_dex_bundle_count: u64,
+    pub cex_dex_total_profit: f64,
+    pub cex_dex_total_revenue: f64,
+    pub cex_dex_average_profit_margin: f64,
     #[serde(with = "option_address")]
-    pub cex_dex_top_searcher_profit:          Option<Address>,
-    pub cex_dex_top_searcher_profit_amt:      Option<f64>,
+    pub cex_dex_top_searcher_profit: Option<Address>,
+    pub cex_dex_top_searcher_profit_amt: Option<f64>,
     #[serde(with = "option_address")]
-    pub cex_dex_top_searcher_revenue:         Option<Address>,
-    pub cex_dex_top_searcher_revenue_amt:     Option<f64>,
+    pub cex_dex_top_searcher_revenue: Option<Address>,
+    pub cex_dex_top_searcher_revenue_amt: Option<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "cex_dex_searcher_eoa_all.profit")]
-    pub cex_dex_searcher_eoa_all_profit:      Vec<Address>,
+    pub cex_dex_searcher_eoa_all_profit: Vec<Address>,
     #[serde(rename = "cex_dex_searcher_eoa_all.profit_amt")]
-    pub cex_dex_searcher_eoa_all_profit_amt:  Vec<f64>,
+    pub cex_dex_searcher_eoa_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "cex_dex_searcher_eoa_all.revenue")]
-    pub cex_dex_searcher_eoa_all_revenue:     Vec<Address>,
+    pub cex_dex_searcher_eoa_all_revenue: Vec<Address>,
     #[serde(rename = "cex_dex_searcher_eoa_all.revenue_amt")]
     pub cex_dex_searcher_eoa_all_revenue_amt: Vec<f64>,
-    pub cex_dex_searcher_eoa_count:           u64,
+    pub cex_dex_searcher_eoa_count: u64,
     #[serde(with = "vec_address")]
     #[serde(rename = "cex_dex_mev_contract_all.profit")]
-    pub cex_dex_mev_contract_all_profit:      Vec<Address>,
+    pub cex_dex_mev_contract_all_profit: Vec<Address>,
     #[serde(rename = "cex_dex_mev_contract_all.profit_amt")]
-    pub cex_dex_mev_contract_all_profit_amt:  Vec<f64>,
+    pub cex_dex_mev_contract_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "cex_dex_mev_contract_all.revenue")]
-    pub cex_dex_mev_contract_all_revenue:     Vec<Address>,
+    pub cex_dex_mev_contract_all_revenue: Vec<Address>,
     #[serde(rename = "cex_dex_mev_contract_all.revenue_amt")]
     pub cex_dex_mev_contract_all_revenue_amt: Vec<f64>,
-    pub cex_dex_mev_contract_count:           u64,
+    pub cex_dex_mev_contract_count: u64,
     #[serde(with = "option_fund")]
-    pub cex_dex_top_fund_profit:              Option<Fund>,
-    pub cex_dex_top_fund_profit_amt:          Option<f64>,
+    pub cex_dex_top_fund_profit: Option<Fund>,
+    pub cex_dex_top_fund_profit_amt: Option<f64>,
     #[serde(with = "option_fund")]
-    pub cex_dex_top_fund_revenue:             Option<Fund>,
-    pub cex_dex_top_fund_revenue_amt:         Option<f64>,
+    pub cex_dex_top_fund_revenue: Option<Fund>,
+    pub cex_dex_top_fund_revenue_amt: Option<f64>,
     #[serde(rename = "cex_dex_fund_all.profit")]
     #[serde(with = "vec_fund")]
-    pub cex_dex_fund_all_profit:              Vec<Fund>,
+    pub cex_dex_fund_all_profit: Vec<Fund>,
     #[serde(rename = "cex_dex_fund_all.profit_amt")]
-    pub cex_dex_fund_all_profit_amt:          Vec<f64>,
+    pub cex_dex_fund_all_profit_amt: Vec<f64>,
     #[serde(rename = "cex_dex_fund_all.revenue")]
     #[serde(with = "vec_fund")]
-    pub cex_dex_fund_all_revenue:             Vec<Fund>,
+    pub cex_dex_fund_all_revenue: Vec<Fund>,
     #[serde(rename = "cex_dex_fund_all.revenue_amt")]
-    pub cex_dex_fund_all_revenue_amt:         Vec<f64>,
-    pub cex_dex_fund_count:                   u64,
+    pub cex_dex_fund_all_revenue_amt: Vec<f64>,
+    pub cex_dex_fund_count: u64,
     #[serde(with = "option_address")]
-    pub cex_dex_most_arbed_pool_profit:       Option<Address>,
-    pub cex_dex_most_arbed_pool_profit_amt:   Option<f64>,
+    pub cex_dex_most_arbed_pool_profit: Option<Address>,
+    pub cex_dex_most_arbed_pool_profit_amt: Option<f64>,
     #[serde(with = "option_address")]
-    pub cex_dex_most_arbed_pool_revenue:      Option<Address>,
-    pub cex_dex_most_arbed_pool_revenue_amt:  Option<f64>,
-    pub cex_dex_most_arbed_pair_profit:       TokenPairDetails,
-    pub cex_dex_most_arbed_pair_profit_amt:   Option<f64>,
-    pub cex_dex_most_arbed_pair_revenue:      TokenPairDetails,
-    pub cex_dex_most_arbed_pair_revenue_amt:  Option<f64>,
+    pub cex_dex_most_arbed_pool_revenue: Option<Address>,
+    pub cex_dex_most_arbed_pool_revenue_amt: Option<f64>,
+    pub cex_dex_most_arbed_pair_profit: TokenPairDetails,
+    pub cex_dex_most_arbed_pair_profit_amt: Option<f64>,
+    pub cex_dex_most_arbed_pair_revenue: TokenPairDetails,
+    pub cex_dex_most_arbed_pair_revenue_amt: Option<f64>,
     #[serde(with = "option_protocol")]
-    pub cex_dex_most_arbed_dex_profit:        Option<Protocol>,
-    pub cex_dex_most_arbed_dex_profit_amt:    Option<f64>,
+    pub cex_dex_most_arbed_dex_profit: Option<Protocol>,
+    pub cex_dex_most_arbed_dex_profit_amt: Option<f64>,
     #[serde(with = "option_protocol")]
-    pub cex_dex_most_arbed_dex_revenue:       Option<Protocol>,
-    pub cex_dex_most_arbed_dex_revenue_amt:   Option<f64>,
+    pub cex_dex_most_arbed_dex_revenue: Option<Protocol>,
+    pub cex_dex_most_arbed_dex_revenue_amt: Option<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "cex_dex_arbed_pool_all.profit")]
-    pub cex_dex_arbed_pool_all_profit:        Vec<Address>,
+    pub cex_dex_arbed_pool_all_profit: Vec<Address>,
     #[serde(rename = "cex_dex_arbed_pool_all.profit_amt")]
-    pub cex_dex_arbed_pool_all_profit_amt:    Vec<f64>,
+    pub cex_dex_arbed_pool_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "cex_dex_arbed_pool_all.revenue")]
-    pub cex_dex_arbed_pool_all_revenue:       Vec<Address>,
+    pub cex_dex_arbed_pool_all_revenue: Vec<Address>,
     #[serde(rename = "cex_dex_arbed_pool_all.revenue_amt")]
-    pub cex_dex_arbed_pool_all_revenue_amt:   Vec<f64>,
+    pub cex_dex_arbed_pool_all_revenue_amt: Vec<f64>,
     #[serde(rename = "cex_dex_arbed_pair_all.profit")]
-    pub cex_dex_arbed_pair_all_profit:        Vec<TokenPairDetails>,
+    pub cex_dex_arbed_pair_all_profit: Vec<TokenPairDetails>,
     #[serde(rename = "cex_dex_arbed_pair_all.profit_amt")]
-    pub cex_dex_arbed_pair_all_profit_amt:    Vec<f64>,
+    pub cex_dex_arbed_pair_all_profit_amt: Vec<f64>,
     #[serde(rename = "cex_dex_arbed_pair_all.revenue")]
-    pub cex_dex_arbed_pair_all_revenue:       Vec<TokenPairDetails>,
+    pub cex_dex_arbed_pair_all_revenue: Vec<TokenPairDetails>,
     #[serde(rename = "cex_dex_arbed_pair_all.revenue_amt")]
-    pub cex_dex_arbed_pair_all_revenue_amt:   Vec<f64>,
+    pub cex_dex_arbed_pair_all_revenue_amt: Vec<f64>,
     #[serde(rename = "cex_dex_arbed_dex_all.profit")]
     #[serde(with = "vec_protocol")]
-    pub cex_dex_arbed_dex_all_profit:         Vec<Protocol>,
+    pub cex_dex_arbed_dex_all_profit: Vec<Protocol>,
     #[serde(rename = "cex_dex_arbed_dex_all.profit_amt")]
-    pub cex_dex_arbed_dex_all_profit_amt:     Vec<f64>,
+    pub cex_dex_arbed_dex_all_profit_amt: Vec<f64>,
     #[serde(rename = "cex_dex_arbed_dex_all.revenue")]
     #[serde(with = "vec_protocol")]
-    pub cex_dex_arbed_dex_all_revenue:        Vec<Protocol>,
+    pub cex_dex_arbed_dex_all_revenue: Vec<Protocol>,
     #[serde(rename = "cex_dex_arbed_dex_all.revenue_amt")]
-    pub cex_dex_arbed_dex_all_revenue_amt:    Vec<f64>,
+    pub cex_dex_arbed_dex_all_revenue_amt: Vec<f64>,
     #[serde(with = "option_txhash")]
-    pub cex_dex_biggest_arb_profit:           Option<TxHash>,
-    pub cex_dex_biggest_arb_profit_amt:       Option<f64>,
+    pub cex_dex_biggest_arb_profit: Option<TxHash>,
+    pub cex_dex_biggest_arb_profit_amt: Option<f64>,
     #[serde(with = "option_txhash")]
-    pub cex_dex_biggest_arb_revenue:          Option<TxHash>,
-    pub cex_dex_biggest_arb_revenue_amt:      Option<f64>,
+    pub cex_dex_biggest_arb_revenue: Option<TxHash>,
+    pub cex_dex_biggest_arb_revenue_amt: Option<f64>,
 
     // liquidation
-    pub liquidation_bundle_count:                 u64,
-    pub liquidation_total_profit:                 f64,
-    pub liquidation_total_revenue:                f64,
-    pub liquidation_average_profit_margin:        f64,
+    pub liquidation_bundle_count: u64,
+    pub liquidation_total_profit: f64,
+    pub liquidation_total_revenue: f64,
+    pub liquidation_average_profit_margin: f64,
     #[serde(with = "option_address")]
-    pub liquidation_top_searcher_profit:          Option<Address>,
-    pub liquidation_top_searcher_profit_amt:      Option<f64>,
+    pub liquidation_top_searcher_profit: Option<Address>,
+    pub liquidation_top_searcher_profit_amt: Option<f64>,
     #[serde(with = "option_address")]
-    pub liquidation_top_searcher_revenue:         Option<Address>,
-    pub liquidation_top_searcher_revenue_amt:     Option<f64>,
+    pub liquidation_top_searcher_revenue: Option<Address>,
+    pub liquidation_top_searcher_revenue_amt: Option<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "liquidation_searcher_eoa_all.profit")]
-    pub liquidation_searcher_eoa_all_profit:      Vec<Address>,
+    pub liquidation_searcher_eoa_all_profit: Vec<Address>,
     #[serde(rename = "liquidation_searcher_eoa_all.profit_amt")]
-    pub liquidation_searcher_eoa_all_profit_amt:  Vec<f64>,
+    pub liquidation_searcher_eoa_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "liquidation_searcher_eoa_all.revenue")]
-    pub liquidation_searcher_eoa_all_revenue:     Vec<Address>,
+    pub liquidation_searcher_eoa_all_revenue: Vec<Address>,
     #[serde(rename = "liquidation_searcher_eoa_all.revenue_amt")]
     pub liquidation_searcher_eoa_all_revenue_amt: Vec<f64>,
-    pub liquidation_searcher_eoa_count:           u64,
+    pub liquidation_searcher_eoa_count: u64,
     #[serde(with = "vec_address")]
     #[serde(rename = "liquidation_mev_contract_all.profit")]
-    pub liquidation_mev_contract_all_profit:      Vec<Address>,
+    pub liquidation_mev_contract_all_profit: Vec<Address>,
     #[serde(rename = "liquidation_mev_contract_all.profit_amt")]
-    pub liquidation_mev_contract_all_profit_amt:  Vec<f64>,
+    pub liquidation_mev_contract_all_profit_amt: Vec<f64>,
     #[serde(with = "vec_address")]
     #[serde(rename = "liquidation_mev_contract_all.revenue")]
-    pub liquidation_mev_contract_all_revenue:     Vec<Address>,
+    pub liquidation_mev_contract_all_revenue: Vec<Address>,
     #[serde(rename = "liquidation_mev_contract_all.revenue_amt")]
     pub liquidation_mev_contract_all_revenue_amt: Vec<f64>,
-    pub liquidation_mev_contract_count:           u64,
+    pub liquidation_mev_contract_count: u64,
     #[serde(with = "option_fund")]
-    pub liquidation_top_fund_profit:              Option<Fund>,
-    pub liquidation_top_fund_profit_amt:          Option<f64>,
+    pub liquidation_top_fund_profit: Option<Fund>,
+    pub liquidation_top_fund_profit_amt: Option<f64>,
     #[serde(with = "option_fund")]
-    pub liquidation_top_fund_revenue:             Option<Fund>,
-    pub liquidation_top_fund_revenue_amt:         Option<f64>,
+    pub liquidation_top_fund_revenue: Option<Fund>,
+    pub liquidation_top_fund_revenue_amt: Option<f64>,
     #[serde(rename = "liquidation_fund_all.profit")]
     #[serde(with = "vec_fund")]
-    pub liquidation_fund_all_profit:              Vec<Fund>,
+    pub liquidation_fund_all_profit: Vec<Fund>,
     #[serde(rename = "liquidation_fund_all.profit_amt")]
-    pub liquidation_fund_all_profit_amt:          Vec<f64>,
+    pub liquidation_fund_all_profit_amt: Vec<f64>,
     #[serde(rename = "liquidation_fund_all.revenue")]
     #[serde(with = "vec_fund")]
-    pub liquidation_fund_all_revenue:             Vec<Fund>,
+    pub liquidation_fund_all_revenue: Vec<Fund>,
     #[serde(rename = "liquidation_fund_all.revenue_amt")]
-    pub liquidation_fund_all_revenue_amt:         Vec<f64>,
-    pub liquidation_fund_count:                   u64,
-    pub most_liquidated_token_revenue:            SingleTokenDetails,
-    pub most_liquidated_token_revenue_amt:        Option<f64>,
-    pub most_liquidated_token_profit:             SingleTokenDetails,
-    pub most_liquidated_token_profit_amt:         Option<f64>,
+    pub liquidation_fund_all_revenue_amt: Vec<f64>,
+    pub liquidation_fund_count: u64,
+    pub most_liquidated_token_revenue: SingleTokenDetails,
+    pub most_liquidated_token_revenue_amt: Option<f64>,
+    pub most_liquidated_token_profit: SingleTokenDetails,
+    pub most_liquidated_token_profit_amt: Option<f64>,
     #[serde(rename = "liquidated_tokens.revenue")]
-    pub liquidated_tokens_revenue:                Vec<SingleTokenDetails>,
+    pub liquidated_tokens_revenue: Vec<SingleTokenDetails>,
     #[serde(rename = "liquidated_tokens.revenue_amt")]
-    pub liquidated_tokens_revenue_amt:            Vec<f64>,
+    pub liquidated_tokens_revenue_amt: Vec<f64>,
     #[serde(rename = "liquidated_tokens.profit")]
-    pub liquidated_tokens_profit:                 Vec<SingleTokenDetails>,
+    pub liquidated_tokens_profit: Vec<SingleTokenDetails>,
     #[serde(rename = "liquidated_tokens.profit_amt")]
-    pub liquidated_tokens_profit_amt:             Vec<f64>,
+    pub liquidated_tokens_profit_amt: Vec<f64>,
     #[serde(with = "option_txhash")]
-    pub liquidated_biggest_arb_profit:            Option<TxHash>,
-    pub liquidated_biggest_arb_profit_amt:        Option<f64>,
+    pub liquidated_biggest_arb_profit: Option<TxHash>,
+    pub liquidated_biggest_arb_profit_amt: Option<f64>,
     #[serde(with = "option_txhash")]
-    pub liquidated_biggest_arb_revenue:           Option<TxHash>,
-    pub liquidated_biggest_arb_revenue_amt:       Option<f64>,
-    pub total_usd_liquidated:                     f64,
+    pub liquidated_biggest_arb_revenue: Option<TxHash>,
+    pub liquidated_biggest_arb_revenue_amt: Option<f64>,
+    pub total_usd_liquidated: f64,
 
     // builder
-    pub builder_profit_usd:     f64,
-    pub builder_profit_eth:     f64,
-    pub builder_revenue_usd:    f64,
-    pub builder_revenue_eth:    f64,
+    pub builder_profit_usd: f64,
+    pub builder_profit_eth: f64,
+    pub builder_revenue_usd: f64,
+    pub builder_revenue_eth: f64,
     pub builder_mev_profit_usd: f64,
     pub builder_mev_profit_eth: f64,
-    pub builder_name:           Option<String>,
+    pub builder_name: Option<String>,
     #[serde(with = "address")]
-    pub builder_address:        Address,
-    pub proposer_profit_usd:    Option<f64>,
-    pub proposer_profit_eth:    Option<f64>,
+    pub builder_address: Address,
+    pub proposer_profit_usd: Option<f64>,
+    pub proposer_profit_eth: Option<f64>,
 }
 
 impl BlockAnalysis {
@@ -1923,12 +1923,10 @@ impl BlockAnalysis {
             .for_each(|r| {
                 if mev_contract {
                     if let Some(contract) = r.header.mev_contract {
-                        *map.entry(contract).or_insert(0.0) +=
-                            r.header.profit_usd;
+                        *map.entry(contract).or_insert(0.0) += r.header.profit_usd;
                     }
                 } else {
-                    *map.entry(r.header.eoa).or_insert(0.0) +=
-                        r.header.profit_usd;
+                    *map.entry(r.header.eoa).or_insert(0.0) += r.header.profit_usd;
                 }
             });
 
@@ -2186,9 +2184,9 @@ impl<A, B, C, D> TupleTwoVecUnzip<A, B, C, D> for (Vec<(A, B)>, Vec<(C, D)>) {
 #[derive(Default, Debug, Clone, Hash, PartialEq, Eq)]
 pub struct TokenPairDetails {
     pub address0: Address,
-    pub symbol0:  String,
+    pub symbol0: String,
     pub address1: Address,
-    pub symbol1:  String,
+    pub symbol1: String,
 }
 
 impl Serialize for TokenPairDetails {
@@ -2216,9 +2214,9 @@ impl<'de> Deserialize<'de> for TokenPairDetails {
 
         Ok(Self {
             address0: Address::from_str(&token0_address).unwrap_or_default(),
-            symbol0:  token0_symbol,
+            symbol0: token0_symbol,
             address1: Address::from_str(&token1_address).unwrap_or_default(),
-            symbol1:  token1_symbol,
+            symbol1: token1_symbol,
         })
     }
 }
@@ -2233,9 +2231,9 @@ impl From<(TokenInfoWithAddress, TokenInfoWithAddress)> for TokenPairDetails {
 
         Self {
             address0: token0.address,
-            symbol0:  token0.symbol.clone(),
+            symbol0: token0.symbol.clone(),
             address1: token1.address,
-            symbol1:  token1.symbol.clone(),
+            symbol1: token1.symbol.clone(),
         }
     }
 }
@@ -2243,7 +2241,7 @@ impl From<(TokenInfoWithAddress, TokenInfoWithAddress)> for TokenPairDetails {
 #[derive(Default, Debug, Clone, Hash, PartialEq, Eq)]
 pub struct SingleTokenDetails {
     pub address: Address,
-    pub symbol:  String,
+    pub symbol: String,
 }
 
 impl Serialize for SingleTokenDetails {
@@ -2275,217 +2273,217 @@ impl From<TokenInfoWithAddress> for SingleTokenDetails {
 impl Default for BlockAnalysis {
     fn default() -> Self {
         BlockAnalysis {
-            atomic_mev_contract_all_profit:      vec![Default::default()],
-            atomic_mev_contract_all_profit_amt:  vec![Default::default()],
-            atomic_mev_contract_all_revenue:     vec![Default::default()],
+            atomic_mev_contract_all_profit: vec![Default::default()],
+            atomic_mev_contract_all_profit_amt: vec![Default::default()],
+            atomic_mev_contract_all_revenue: vec![Default::default()],
             atomic_mev_contract_all_revenue_amt: vec![Default::default()],
-            atomic_mev_contract_count:           Default::default(),
-            atomic_searcher_eoa_all_profit:      vec![Default::default()],
-            atomic_searcher_eoa_all_profit_amt:  vec![Default::default()],
-            atomic_searcher_eoa_all_revenue:     vec![Default::default()],
+            atomic_mev_contract_count: Default::default(),
+            atomic_searcher_eoa_all_profit: vec![Default::default()],
+            atomic_searcher_eoa_all_profit_amt: vec![Default::default()],
+            atomic_searcher_eoa_all_revenue: vec![Default::default()],
             atomic_searcher_eoa_all_revenue_amt: vec![Default::default()],
-            atomic_searcher_eoa_count:           Default::default(),
+            atomic_searcher_eoa_count: Default::default(),
 
-            atomic_fund_all_profit:      vec![Fund::JaneStreet],
-            atomic_fund_all_profit_amt:  vec![0.0],
-            atomic_fund_all_revenue:     vec![Fund::JaneStreet],
+            atomic_fund_all_profit: vec![Fund::JaneStreet],
+            atomic_fund_all_profit_amt: vec![0.0],
+            atomic_fund_all_revenue: vec![Fund::JaneStreet],
             atomic_fund_all_revenue_amt: vec![0.0],
 
-            atomic_arbed_pool_all_profit:      vec![Default::default()],
-            atomic_arbed_pool_all_profit_amt:  vec![0.0],
-            atomic_arbed_pool_all_revenue:     vec![Default::default()],
+            atomic_arbed_pool_all_profit: vec![Default::default()],
+            atomic_arbed_pool_all_profit_amt: vec![0.0],
+            atomic_arbed_pool_all_revenue: vec![Default::default()],
             atomic_arbed_pool_all_revenue_amt: vec![0.0],
 
-            atomic_arbed_pair_all_profit:      vec![Default::default()],
-            atomic_arbed_pair_all_profit_amt:  vec![0.0],
-            atomic_arbed_pair_all_revenue:     vec![Default::default()],
+            atomic_arbed_pair_all_profit: vec![Default::default()],
+            atomic_arbed_pair_all_profit_amt: vec![0.0],
+            atomic_arbed_pair_all_revenue: vec![Default::default()],
             atomic_arbed_pair_all_revenue_amt: vec![0.0],
 
-            atomic_arbed_dex_all_profit:      vec![Protocol::UniswapV2],
-            atomic_arbed_dex_all_profit_amt:  vec![0.0],
-            atomic_arbed_dex_all_revenue:     vec![Protocol::UniswapV2],
+            atomic_arbed_dex_all_profit: vec![Protocol::UniswapV2],
+            atomic_arbed_dex_all_profit_amt: vec![0.0],
+            atomic_arbed_dex_all_revenue: vec![Protocol::UniswapV2],
             atomic_arbed_dex_all_revenue_amt: vec![0.0],
 
-            sandwich_mev_contract_all_profit:      vec![Default::default()],
-            sandwich_mev_contract_all_profit_amt:  vec![Default::default()],
-            sandwich_mev_contract_all_revenue:     vec![Default::default()],
+            sandwich_mev_contract_all_profit: vec![Default::default()],
+            sandwich_mev_contract_all_profit_amt: vec![Default::default()],
+            sandwich_mev_contract_all_revenue: vec![Default::default()],
             sandwich_mev_contract_all_revenue_amt: vec![Default::default()],
-            sandwich_mev_contract_count:           Default::default(),
-            sandwich_searcher_eoa_all_profit:      vec![Default::default()],
-            sandwich_searcher_eoa_all_profit_amt:  vec![Default::default()],
-            sandwich_searcher_eoa_all_revenue:     vec![Default::default()],
+            sandwich_mev_contract_count: Default::default(),
+            sandwich_searcher_eoa_all_profit: vec![Default::default()],
+            sandwich_searcher_eoa_all_profit_amt: vec![Default::default()],
+            sandwich_searcher_eoa_all_revenue: vec![Default::default()],
             sandwich_searcher_eoa_all_revenue_amt: vec![Default::default()],
-            sandwich_searcher_eoa_count:           Default::default(),
+            sandwich_searcher_eoa_count: Default::default(),
 
-            sandwich_fund_all_profit:      vec![Fund::JaneStreet],
-            sandwich_fund_all_profit_amt:  vec![0.0],
-            sandwich_fund_all_revenue:     vec![Fund::JaneStreet],
+            sandwich_fund_all_profit: vec![Fund::JaneStreet],
+            sandwich_fund_all_profit_amt: vec![0.0],
+            sandwich_fund_all_revenue: vec![Fund::JaneStreet],
             sandwich_fund_all_revenue_amt: vec![0.0],
 
-            sandwich_arbed_pool_all_profit:      vec![Default::default()],
-            sandwich_arbed_pool_all_profit_amt:  vec![0.0],
-            sandwich_arbed_pool_all_revenue:     vec![Default::default()],
+            sandwich_arbed_pool_all_profit: vec![Default::default()],
+            sandwich_arbed_pool_all_profit_amt: vec![0.0],
+            sandwich_arbed_pool_all_revenue: vec![Default::default()],
             sandwich_arbed_pool_all_revenue_amt: vec![0.0],
 
-            sandwich_arbed_pair_all_profit:      vec![Default::default()],
-            sandwich_arbed_pair_all_profit_amt:  vec![0.0],
-            sandwich_arbed_pair_all_revenue:     vec![Default::default()],
+            sandwich_arbed_pair_all_profit: vec![Default::default()],
+            sandwich_arbed_pair_all_profit_amt: vec![0.0],
+            sandwich_arbed_pair_all_revenue: vec![Default::default()],
             sandwich_arbed_pair_all_revenue_amt: vec![0.0],
 
-            sandwich_arbed_dex_all_profit:      vec![Protocol::UniswapV2],
-            sandwich_arbed_dex_all_profit_amt:  vec![0.0],
-            sandwich_arbed_dex_all_revenue:     vec![Protocol::UniswapV2],
+            sandwich_arbed_dex_all_profit: vec![Protocol::UniswapV2],
+            sandwich_arbed_dex_all_profit_amt: vec![0.0],
+            sandwich_arbed_dex_all_revenue: vec![Protocol::UniswapV2],
             sandwich_arbed_dex_all_revenue_amt: vec![0.0],
 
-            jit_mev_contract_all_profit:      vec![Default::default()],
-            jit_mev_contract_all_profit_amt:  vec![Default::default()],
-            jit_mev_contract_all_revenue:     vec![Default::default()],
+            jit_mev_contract_all_profit: vec![Default::default()],
+            jit_mev_contract_all_profit_amt: vec![Default::default()],
+            jit_mev_contract_all_revenue: vec![Default::default()],
             jit_mev_contract_all_revenue_amt: vec![Default::default()],
-            jit_mev_contract_count:           Default::default(),
-            jit_searcher_eoa_all_profit:      vec![Default::default()],
-            jit_searcher_eoa_all_profit_amt:  vec![Default::default()],
-            jit_searcher_eoa_all_revenue:     vec![Default::default()],
+            jit_mev_contract_count: Default::default(),
+            jit_searcher_eoa_all_profit: vec![Default::default()],
+            jit_searcher_eoa_all_profit_amt: vec![Default::default()],
+            jit_searcher_eoa_all_revenue: vec![Default::default()],
             jit_searcher_eoa_all_revenue_amt: vec![Default::default()],
-            jit_searcher_eoa_count:           Default::default(),
+            jit_searcher_eoa_count: Default::default(),
 
-            jit_fund_all_profit:      vec![Fund::JaneStreet],
-            jit_fund_all_profit_amt:  vec![0.0],
-            jit_fund_all_revenue:     vec![Fund::JaneStreet],
+            jit_fund_all_profit: vec![Fund::JaneStreet],
+            jit_fund_all_profit_amt: vec![0.0],
+            jit_fund_all_revenue: vec![Fund::JaneStreet],
             jit_fund_all_revenue_amt: vec![0.0],
 
-            jit_arbed_pool_all_profit:      vec![Default::default()],
-            jit_arbed_pool_all_profit_amt:  vec![0.0],
-            jit_arbed_pool_all_revenue:     vec![Default::default()],
+            jit_arbed_pool_all_profit: vec![Default::default()],
+            jit_arbed_pool_all_profit_amt: vec![0.0],
+            jit_arbed_pool_all_revenue: vec![Default::default()],
             jit_arbed_pool_all_revenue_amt: vec![0.0],
 
-            jit_arbed_pair_all_profit:      vec![Default::default()],
-            jit_arbed_pair_all_profit_amt:  vec![0.0],
-            jit_arbed_pair_all_revenue:     vec![Default::default()],
+            jit_arbed_pair_all_profit: vec![Default::default()],
+            jit_arbed_pair_all_profit_amt: vec![0.0],
+            jit_arbed_pair_all_revenue: vec![Default::default()],
             jit_arbed_pair_all_revenue_amt: vec![0.0],
 
-            jit_arbed_dex_all_profit:      vec![Protocol::UniswapV2],
-            jit_arbed_dex_all_profit_amt:  vec![0.0],
-            jit_arbed_dex_all_revenue:     vec![Protocol::UniswapV2],
+            jit_arbed_dex_all_profit: vec![Protocol::UniswapV2],
+            jit_arbed_dex_all_profit_amt: vec![0.0],
+            jit_arbed_dex_all_revenue: vec![Protocol::UniswapV2],
             jit_arbed_dex_all_revenue_amt: vec![0.0],
 
-            jit_sandwich_mev_contract_all_profit:      vec![Default::default()],
-            jit_sandwich_mev_contract_all_profit_amt:  vec![Default::default()],
-            jit_sandwich_mev_contract_all_revenue:     vec![Default::default()],
+            jit_sandwich_mev_contract_all_profit: vec![Default::default()],
+            jit_sandwich_mev_contract_all_profit_amt: vec![Default::default()],
+            jit_sandwich_mev_contract_all_revenue: vec![Default::default()],
             jit_sandwich_mev_contract_all_revenue_amt: vec![Default::default()],
-            jit_sandwich_mev_contract_count:           Default::default(),
-            jit_sandwich_searcher_eoa_all_profit:      vec![Default::default()],
-            jit_sandwich_searcher_eoa_all_profit_amt:  vec![Default::default()],
-            jit_sandwich_searcher_eoa_all_revenue:     vec![Default::default()],
+            jit_sandwich_mev_contract_count: Default::default(),
+            jit_sandwich_searcher_eoa_all_profit: vec![Default::default()],
+            jit_sandwich_searcher_eoa_all_profit_amt: vec![Default::default()],
+            jit_sandwich_searcher_eoa_all_revenue: vec![Default::default()],
             jit_sandwich_searcher_eoa_all_revenue_amt: vec![Default::default()],
-            jit_sandwich_searcher_eoa_count:           Default::default(),
+            jit_sandwich_searcher_eoa_count: Default::default(),
 
-            jit_sandwich_fund_all_profit:      vec![Fund::JaneStreet],
-            jit_sandwich_fund_all_profit_amt:  vec![0.0],
-            jit_sandwich_fund_all_revenue:     vec![Fund::JaneStreet],
+            jit_sandwich_fund_all_profit: vec![Fund::JaneStreet],
+            jit_sandwich_fund_all_profit_amt: vec![0.0],
+            jit_sandwich_fund_all_revenue: vec![Fund::JaneStreet],
             jit_sandwich_fund_all_revenue_amt: vec![0.0],
 
-            jit_sandwich_arbed_pool_all_profit:      vec![Default::default()],
-            jit_sandwich_arbed_pool_all_profit_amt:  vec![0.0],
-            jit_sandwich_arbed_pool_all_revenue:     vec![Default::default()],
+            jit_sandwich_arbed_pool_all_profit: vec![Default::default()],
+            jit_sandwich_arbed_pool_all_profit_amt: vec![0.0],
+            jit_sandwich_arbed_pool_all_revenue: vec![Default::default()],
             jit_sandwich_arbed_pool_all_revenue_amt: vec![0.0],
 
-            jit_sandwich_arbed_pair_all_profit:      vec![Default::default()],
-            jit_sandwich_arbed_pair_all_profit_amt:  vec![0.0],
-            jit_sandwich_arbed_pair_all_revenue:     vec![Default::default()],
+            jit_sandwich_arbed_pair_all_profit: vec![Default::default()],
+            jit_sandwich_arbed_pair_all_profit_amt: vec![0.0],
+            jit_sandwich_arbed_pair_all_revenue: vec![Default::default()],
             jit_sandwich_arbed_pair_all_revenue_amt: vec![0.0],
 
-            jit_sandwich_arbed_dex_all_profit:      vec![Protocol::UniswapV2],
-            jit_sandwich_arbed_dex_all_profit_amt:  vec![0.0],
-            jit_sandwich_arbed_dex_all_revenue:     vec![Protocol::UniswapV2],
+            jit_sandwich_arbed_dex_all_profit: vec![Protocol::UniswapV2],
+            jit_sandwich_arbed_dex_all_profit_amt: vec![0.0],
+            jit_sandwich_arbed_dex_all_revenue: vec![Protocol::UniswapV2],
             jit_sandwich_arbed_dex_all_revenue_amt: vec![0.0],
 
-            cex_dex_mev_contract_all_profit:      vec![Default::default()],
-            cex_dex_mev_contract_all_profit_amt:  vec![Default::default()],
-            cex_dex_mev_contract_all_revenue:     vec![Default::default()],
+            cex_dex_mev_contract_all_profit: vec![Default::default()],
+            cex_dex_mev_contract_all_profit_amt: vec![Default::default()],
+            cex_dex_mev_contract_all_revenue: vec![Default::default()],
             cex_dex_mev_contract_all_revenue_amt: vec![Default::default()],
-            cex_dex_mev_contract_count:           Default::default(),
-            cex_dex_searcher_eoa_all_profit:      vec![Default::default()],
-            cex_dex_searcher_eoa_all_profit_amt:  vec![Default::default()],
-            cex_dex_searcher_eoa_all_revenue:     vec![Default::default()],
+            cex_dex_mev_contract_count: Default::default(),
+            cex_dex_searcher_eoa_all_profit: vec![Default::default()],
+            cex_dex_searcher_eoa_all_profit_amt: vec![Default::default()],
+            cex_dex_searcher_eoa_all_revenue: vec![Default::default()],
             cex_dex_searcher_eoa_all_revenue_amt: vec![Default::default()],
-            cex_dex_searcher_eoa_count:           Default::default(),
+            cex_dex_searcher_eoa_count: Default::default(),
 
-            cex_dex_arbed_dex_all_profit:      vec![Protocol::UniswapV2],
-            cex_dex_arbed_dex_all_profit_amt:  vec![Default::default()],
-            cex_dex_arbed_dex_all_revenue:     vec![Protocol::UniswapV2],
+            cex_dex_arbed_dex_all_profit: vec![Protocol::UniswapV2],
+            cex_dex_arbed_dex_all_profit_amt: vec![Default::default()],
+            cex_dex_arbed_dex_all_revenue: vec![Protocol::UniswapV2],
             cex_dex_arbed_dex_all_revenue_amt: vec![Default::default()],
 
-            cex_dex_fund_all_profit:      vec![Fund::JaneStreet],
-            cex_dex_fund_all_profit_amt:  vec![0.0],
-            cex_dex_fund_all_revenue:     vec![Fund::JaneStreet],
+            cex_dex_fund_all_profit: vec![Fund::JaneStreet],
+            cex_dex_fund_all_profit_amt: vec![0.0],
+            cex_dex_fund_all_revenue: vec![Fund::JaneStreet],
             cex_dex_fund_all_revenue_amt: vec![0.0],
 
-            cex_dex_arbed_pool_all_profit:      vec![Default::default()],
-            cex_dex_arbed_pool_all_profit_amt:  vec![0.0],
-            cex_dex_arbed_pool_all_revenue:     vec![Default::default()],
+            cex_dex_arbed_pool_all_profit: vec![Default::default()],
+            cex_dex_arbed_pool_all_profit_amt: vec![0.0],
+            cex_dex_arbed_pool_all_revenue: vec![Default::default()],
             cex_dex_arbed_pool_all_revenue_amt: vec![0.0],
 
-            cex_dex_arbed_pair_all_profit:      vec![Default::default()],
-            cex_dex_arbed_pair_all_profit_amt:  vec![0.0],
-            cex_dex_arbed_pair_all_revenue:     vec![Default::default()],
+            cex_dex_arbed_pair_all_profit: vec![Default::default()],
+            cex_dex_arbed_pair_all_profit_amt: vec![0.0],
+            cex_dex_arbed_pair_all_revenue: vec![Default::default()],
             cex_dex_arbed_pair_all_revenue_amt: vec![0.0],
 
-            liquidation_mev_contract_all_profit:      vec![Default::default()],
-            liquidation_mev_contract_all_profit_amt:  vec![Default::default()],
-            liquidation_mev_contract_all_revenue:     vec![Default::default()],
+            liquidation_mev_contract_all_profit: vec![Default::default()],
+            liquidation_mev_contract_all_profit_amt: vec![Default::default()],
+            liquidation_mev_contract_all_revenue: vec![Default::default()],
             liquidation_mev_contract_all_revenue_amt: vec![Default::default()],
-            liquidation_mev_contract_count:           Default::default(),
-            liquidation_searcher_eoa_all_profit:      vec![Default::default()],
-            liquidation_searcher_eoa_all_profit_amt:  vec![Default::default()],
-            liquidation_searcher_eoa_all_revenue:     vec![Default::default()],
+            liquidation_mev_contract_count: Default::default(),
+            liquidation_searcher_eoa_all_profit: vec![Default::default()],
+            liquidation_searcher_eoa_all_profit_amt: vec![Default::default()],
+            liquidation_searcher_eoa_all_revenue: vec![Default::default()],
             liquidation_searcher_eoa_all_revenue_amt: vec![Default::default()],
-            liquidation_searcher_eoa_count:           Default::default(),
+            liquidation_searcher_eoa_count: Default::default(),
 
-            liquidation_fund_all_profit:      vec![Fund::JaneStreet],
-            liquidation_fund_all_profit_amt:  vec![0.0],
-            liquidation_fund_all_revenue:     vec![Fund::JaneStreet],
+            liquidation_fund_all_profit: vec![Fund::JaneStreet],
+            liquidation_fund_all_profit_amt: vec![0.0],
+            liquidation_fund_all_revenue: vec![Fund::JaneStreet],
             liquidation_fund_all_revenue_amt: vec![0.0],
 
-            liquidated_tokens_profit:        vec![Default::default()],
-            liquidated_tokens_profit_amt:    vec![0.0],
-            liquidated_tokens_revenue:       vec![Default::default()],
-            liquidated_tokens_revenue_amt:   vec![0.0],
-            block_number:                    Default::default(),
-            all_total_profit:                Default::default(),
-            all_total_revenue:               Default::default(),
-            all_average_profit_margin:       Default::default(),
-            all_top_searcher_profit:         Default::default(),
-            all_top_searcher_profit_amt:     Default::default(),
-            all_top_searcher_revenue:        Default::default(),
-            all_top_searcher_revenue_amt:    Default::default(),
-            all_searcher_count:              Default::default(),
-            all_top_fund_profit:             Default::default(),
-            all_top_fund_profit_amt:         Default::default(),
-            all_top_fund_revenue:            Default::default(),
-            all_top_fund_revenue_amt:        Default::default(),
-            all_fund_count:                  Default::default(),
-            all_most_arbed_pool_profit:      Default::default(),
-            all_most_arbed_pool_profit_amt:  Default::default(),
-            all_most_arbed_pool_revenue:     Default::default(),
+            liquidated_tokens_profit: vec![Default::default()],
+            liquidated_tokens_profit_amt: vec![0.0],
+            liquidated_tokens_revenue: vec![Default::default()],
+            liquidated_tokens_revenue_amt: vec![0.0],
+            block_number: Default::default(),
+            all_total_profit: Default::default(),
+            all_total_revenue: Default::default(),
+            all_average_profit_margin: Default::default(),
+            all_top_searcher_profit: Default::default(),
+            all_top_searcher_profit_amt: Default::default(),
+            all_top_searcher_revenue: Default::default(),
+            all_top_searcher_revenue_amt: Default::default(),
+            all_searcher_count: Default::default(),
+            all_top_fund_profit: Default::default(),
+            all_top_fund_profit_amt: Default::default(),
+            all_top_fund_revenue: Default::default(),
+            all_top_fund_revenue_amt: Default::default(),
+            all_fund_count: Default::default(),
+            all_most_arbed_pool_profit: Default::default(),
+            all_most_arbed_pool_profit_amt: Default::default(),
+            all_most_arbed_pool_revenue: Default::default(),
             all_most_arbed_pool_revenue_amt: Default::default(),
-            all_most_arbed_pair_profit:      Default::default(),
-            all_most_arbed_pair_profit_amt:  Default::default(),
-            all_most_arbed_pair_revenue:     Default::default(),
+            all_most_arbed_pair_profit: Default::default(),
+            all_most_arbed_pair_profit_amt: Default::default(),
+            all_most_arbed_pair_revenue: Default::default(),
             all_most_arbed_pair_revenue_amt: Default::default(),
-            all_most_arbed_dex_profit:       Default::default(),
-            all_most_arbed_dex_profit_amt:   Default::default(),
-            all_most_arbed_dex_revenue:      Default::default(),
-            all_most_arbed_dex_revenue_amt:  Default::default(),
-            all_biggest_arb_profit:          Default::default(),
-            all_biggest_arb_profit_amt:      Default::default(),
-            all_biggest_arb_revenue:         Default::default(),
-            all_biggest_arb_revenue_amt:     Default::default(),
-            atomic_total_profit:             Default::default(),
-            atomic_total_revenue:            Default::default(),
-            atomic_average_profit_margin:    Default::default(),
-            atomic_top_searcher_profit:      Default::default(),
-            atomic_top_searcher_profit_amt:  Default::default(),
-            atomic_top_searcher_revenue:     Default::default(),
+            all_most_arbed_dex_profit: Default::default(),
+            all_most_arbed_dex_profit_amt: Default::default(),
+            all_most_arbed_dex_revenue: Default::default(),
+            all_most_arbed_dex_revenue_amt: Default::default(),
+            all_biggest_arb_profit: Default::default(),
+            all_biggest_arb_profit_amt: Default::default(),
+            all_biggest_arb_revenue: Default::default(),
+            all_biggest_arb_revenue_amt: Default::default(),
+            atomic_total_profit: Default::default(),
+            atomic_total_revenue: Default::default(),
+            atomic_average_profit_margin: Default::default(),
+            atomic_top_searcher_profit: Default::default(),
+            atomic_top_searcher_profit_amt: Default::default(),
+            atomic_top_searcher_revenue: Default::default(),
             atomic_top_searcher_revenue_amt: Default::default(),
 
             atomic_top_fund_profit: Default::default(),
@@ -2650,16 +2648,16 @@ impl Default for BlockAnalysis {
             liquidated_biggest_arb_revenue_amt: Default::default(),
             total_usd_liquidated: Default::default(),
 
-            builder_address:        Default::default(),
+            builder_address: Default::default(),
             builder_mev_profit_eth: Default::default(),
             builder_mev_profit_usd: Default::default(),
-            builder_name:           Default::default(),
-            builder_profit_eth:     Default::default(),
-            builder_profit_usd:     Default::default(),
-            builder_revenue_eth:    Default::default(),
-            builder_revenue_usd:    Default::default(),
-            proposer_profit_eth:    Default::default(),
-            proposer_profit_usd:    Default::default(),
+            builder_name: Default::default(),
+            builder_profit_eth: Default::default(),
+            builder_profit_usd: Default::default(),
+            builder_revenue_eth: Default::default(),
+            builder_revenue_usd: Default::default(),
+            proposer_profit_eth: Default::default(),
+            proposer_profit_usd: Default::default(),
 
             eth_price: Default::default(),
         }
diff --git a/crates/brontes-types/src/db/cex/quotes/cex_quotes.rs b/crates/brontes-types/src/db/cex/quotes/cex_quotes.rs
index fcdc2ae7d..fa32ff6ae 100644
--- a/crates/brontes-types/src/db/cex/quotes/cex_quotes.rs
+++ b/crates/brontes-types/src/db/cex/quotes/cex_quotes.rs
@@ -35,7 +35,7 @@ use tracing::warn;
 use super::types::CexQuote;
 use crate::{
     db::{
-        cex::{quotes::CexQuoteRedefined, trades::Direction, CexExchange},
+        cex::{exchanges, quotes::CexQuoteRedefined, trades::Direction, CexExchange},
         redefined_types::malachite::RationalRedefined,
     },
     implement_table_value_codecs_with_zc,
@@ -119,6 +119,34 @@ impl CexPriceMap {
                 }
                 None
             })
+            .or_else(|| {
+                tracing::debug!(
+                    ?pair,
+                    "no most liquid exchange found for pair, trying binance via intermediary"
+                );
+                let exchanges = vec![CexExchange::Binance, CexExchange::Coinbase];
+
+                for exchange in exchanges {
+                    if let Some(quote) = self.get_exchange_quote_at_via_intermediary(
+                        pair,
+                        &exchange,
+                        timestamp,
+                        max_time_diff,
+                    ) {
+                        return Some(quote);
+                    }
+
+                    if let Some(quote) = self.get_exchange_quote_at_via_intermediary(
+                        &pair.flip(),
+                        &exchange,
+                        timestamp,
+                        max_time_diff,
+                    ) {
+                        return Some(quote);
+                    }
+                }
+                None
+            })
     }
 
     pub fn get_quote_at(
diff --git a/crates/brontes-types/src/db/cex/trades/utils.rs b/crates/brontes-types/src/db/cex/trades/utils.rs
index fff3c620b..5b7c5b0b2 100644
--- a/crates/brontes-types/src/db/cex/trades/utils.rs
+++ b/crates/brontes-types/src/db/cex/trades/utils.rs
@@ -32,7 +32,6 @@ use crate::{
 ///   (i.e., the earliest trade just after the block time).
 /// - `trades`: Vector of tuples associating each exchange with a reference to
 ///   its trade data.
-
 pub struct PairTradeWalker<'a> {
     pub min_timestamp: u64,
     pub max_timestamp: u64,
@@ -72,7 +71,6 @@ impl<'a> PairTradeWalker<'a> {
     /// # Returns
     /// A vector of `CexTradePtr` pointing to the trades that meet the time
     /// window criteria.
-
     pub(crate) fn get_trades_for_window(&mut self) -> Vec<CexTradePtr<'a>> {
         let mut trade_res: Vec<CexTradePtr<'a>> = Vec::with_capacity(1000);
 
@@ -262,7 +260,7 @@ pub struct TimeBasketQueue<'a> {
     trades:            Vec<CexTrades>,
 }
 
-impl<'a> TimeBasketQueue<'a> {
+impl TimeBasketQueue<'_> {
     pub(crate) fn new(
         trade_data: OptimisticTradeData,
         block_timestamp: u64,
@@ -394,8 +392,8 @@ impl<'a> TimeBasketQueue<'a> {
     }
 }
 
-unsafe impl<'a> Send for CexTradePtr<'a> {}
-unsafe impl<'a> Sync for CexTradePtr<'a> {}
+unsafe impl Send for CexTradePtr<'_> {}
+unsafe impl Sync for CexTradePtr<'_> {}
 
 impl<'ptr> CexTradePtr<'ptr> {
     pub(crate) fn new(raw: &CexTrades) -> Self {
@@ -481,7 +479,6 @@ pub fn log_insufficient_trade_volume(
 ///   time.
 /// - `exp(-POST_DECAY * (trade_time - block_time))` for trades after the block
 ///   time.
-
 pub fn calculate_weight(
     block_time: u64,
     trade_time: u64,
diff --git a/crates/brontes-types/src/db/codecs.rs b/crates/brontes-types/src/db/codecs.rs
index f3003f77d..a47fed4bb 100644
--- a/crates/brontes-types/src/db/codecs.rs
+++ b/crates/brontes-types/src/db/codecs.rs
@@ -24,7 +24,8 @@ macro_rules! implement_table_value_codecs_with_zc {
         impl reth_db::table::Compress for $table_value {
             type Compressed = Vec<u8>;
 
-            fn compress_to_buf<B: reth_primitives::bytes::BufMut + AsMut<[u8]>>(self, buf: &mut B) {
+            fn compress_to_buf<B: alloy_primitives::bytes::BufMut + AsMut<[u8]>>(self, buf: &mut B)
+            {
                 let mut encoded = Vec::new();
                 alloy_rlp::Encodable::encode(&self, &mut encoded);
                 let encoded_compressed = zstd::encode_all(&*encoded, 0).unwrap();
diff --git a/crates/brontes-types/src/db/metadata.rs b/crates/brontes-types/src/db/metadata.rs
index 301fbb474..8fa9c39a7 100644
--- a/crates/brontes-types/src/db/metadata.rs
+++ b/crates/brontes-types/src/db/metadata.rs
@@ -1,8 +1,7 @@
-use alloy_primitives::{Address, TxHash, U256};
+use alloy_primitives::{Address, BlockHash, TxHash, U256};
 use clickhouse::Row;
 use malachite::{num::basic::traits::Zero, Rational};
 use redefined::Redefined;
-use reth_primitives::BlockHash;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::Serialize;
 use serde_with::serde_as;
@@ -20,6 +19,7 @@ use crate::{
     implement_table_value_codecs_with_zc,
     pair::Pair,
     serde_utils::{option_addresss, u256, vec_txhash},
+    utils::ToFloatNearest,
     FastHashSet,
 };
 #[allow(unused_imports)]
@@ -92,10 +92,10 @@ impl Metadata {
         self.cex_quotes.quotes.iter().for_each(|(exchange, pairs)| {
             pairs.keys().for_each(|key| {
                 let Ok(token0) = db.try_fetch_token_info(key.0).map(|s| s.symbol.clone()) else {
-                    return
+                    return;
                 };
                 let Ok(token1) = db.try_fetch_token_info(key.1).map(|s| s.symbol.clone()) else {
-                    return
+                    return;
                 };
                 if &token0 == "WETH" && &token1 == "USDT" {
                     tracing::info!(?exchange, "{}-{} in quotes", token0, token1);
@@ -108,6 +108,9 @@ impl Metadata {
         let gas_used_rational = Rational::from_unsigneds(gas_used, 10u128.pow(18));
         let eth_price = self.get_eth_price(quote_token);
 
+        println!("gas used: {}", gas_used);
+        println!("eth price: {}", eth_price.clone().to_float());
+
         gas_used_rational * eth_price
     }
 
@@ -117,7 +120,7 @@ impl Metadata {
     /// falls back to DEX quotes using the average block price.
     pub fn get_eth_price(&self, quote_token: Address) -> Rational {
         if self.block_metadata.eth_prices != Rational::ZERO {
-            return self.block_metadata.eth_prices.clone()
+            return self.block_metadata.eth_prices.clone();
         }
 
         self.dex_quotes
diff --git a/crates/brontes-types/src/db/normalized_actions.rs b/crates/brontes-types/src/db/normalized_actions.rs
index 08e2a3f71..740ffae60 100644
--- a/crates/brontes-types/src/db/normalized_actions.rs
+++ b/crates/brontes-types/src/db/normalized_actions.rs
@@ -1,7 +1,6 @@
-use alloy_primitives::Address;
+use alloy_primitives::{Address, B256};
 use clickhouse::DbRow;
 use itertools::MultiUnzip;
-use reth_primitives::B256;
 use serde::{ser::SerializeStruct, Deserialize, Serialize};
 
 use crate::{normalized_actions::Action, GasDetails, Node, Root};
@@ -214,7 +213,8 @@ pub mod test {
     async fn test_into_tx_root() {
         let tree = load_tree().await;
         let root = &tree.clone().tx_roots[0];
-        let tx_root = TransactionRoot::from((root, tree.header.number));
+        let tx_root =
+            TransactionRoot::from((root, tree.header.number.expect("Block number is not set")));
 
         let burns = tx_root
             .trace_nodes
diff --git a/crates/brontes-types/src/db/redefined_types/malachite.rs b/crates/brontes-types/src/db/redefined_types/malachite.rs
index b38a8ceee..70fca3d62 100644
--- a/crates/brontes-types/src/db/redefined_types/malachite.rs
+++ b/crates/brontes-types/src/db/redefined_types/malachite.rs
@@ -1,3 +1,5 @@
+#![allow(unexpected_cfgs)]
+
 use malachite::{Natural, Rational};
 use redefined::{redefined_remote, Redefined};
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
diff --git a/crates/brontes-types/src/db/searcher.rs b/crates/brontes-types/src/db/searcher.rs
index 9f4154ec6..63a912f9b 100644
--- a/crates/brontes-types/src/db/searcher.rs
+++ b/crates/brontes-types/src/db/searcher.rs
@@ -315,6 +315,7 @@ pub enum Fund {
     TokkaLabs,
     EthBuilder,
     ICANHAZBLOCK,
+    Wincent,
 }
 
 impl fmt::Display for Fund {
@@ -333,6 +334,7 @@ impl fmt::Display for Fund {
                 Fund::TokkaLabs => "Tokka Labs",
                 Fund::EthBuilder => "Eth Builder",
                 Fund::ICANHAZBLOCK => "I CAN HAZ BLOCK",
+                Fund::Wincent => "Wincent",
             }
         )
     }
@@ -357,6 +359,7 @@ impl From<String> for Fund {
             "Kronos Research" => Self::Kronos,
             "EthBuilder" => Self::EthBuilder,
             "ICANHAZBLOCK" => Self::ICANHAZBLOCK,
+            "Wincent" => Self::Wincent,
             _ => Self::None,
         }
     }
diff --git a/crates/brontes-types/src/db/traces.rs b/crates/brontes-types/src/db/traces.rs
index dd6d44178..6c4f77b8d 100644
--- a/crates/brontes-types/src/db/traces.rs
+++ b/crates/brontes-types/src/db/traces.rs
@@ -79,7 +79,7 @@ pub struct LogRedefined {
 #[redefined_attr(to_source = "LogData::new_unchecked(self.topics.iter().copied().map(Into::into).\
                               collect(), self.data.into())")]
 pub struct LogDataRedefined {
-    #[redefined(func = "src.topics().iter().copied().map(Into::into).collect()")]
+    #[redefined(func = "src.topics().to_vec()")]
     pub topics: Vec<FixedBytesRedefined<32>>,
     pub data:   BytesRedefined,
 }
@@ -234,6 +234,7 @@ pub enum CallTypeRedefined {
     CallCode,
     DelegateCall,
     StaticCall,
+    AuthCall,
 }
 
 #[derive(
diff --git a/crates/brontes-types/src/db_write_trigger.rs b/crates/brontes-types/src/db_write_trigger.rs
index 1da809362..b6eeedbac 100644
--- a/crates/brontes-types/src/db_write_trigger.rs
+++ b/crates/brontes-types/src/db_write_trigger.rs
@@ -1,22 +1,20 @@
 use std::{
-    convert::Infallible,
+    // convert::Infallible,
     net::{IpAddr, Ipv4Addr, SocketAddr},
     task::Poll,
     time::Duration,
 };
 
-use eyre::WrapErr;
+// use eyre::WrapErr;
 use futures::Stream;
-use hyper::{
-    service::{make_service_fn, service_fn},
-    Body, Request, Response, Server,
-};
+// use hyper::{body, service::service_fn, Request, Response};
 use tokio::{
     sync::mpsc::{Receiver, Sender},
     time::{interval, Interval},
 };
 
-const TRIGGER_ADDRESS: SocketAddr = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)), 54321);
+// const TRIGGER_ADDRESS: SocketAddr =
+// SocketAddr::new(IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)), 54321);
 
 #[allow(unreachable_code)]
 pub async fn backup_server_heartbeat(url: String, ping_rate: Duration) {
@@ -39,22 +37,22 @@ pub async fn backup_server_heartbeat(url: String, ping_rate: Duration) {
 }
 
 pub async fn start_hr_monitor(tx: Sender<()>) -> eyre::Result<()> {
-    let make_svc = make_service_fn(move |_| {
-        let s = tx.clone();
-        async move {
-            let s = s.clone();
-            Ok::<_, Infallible>(service_fn(move |_: Request<Body>| {
-                s.try_send(()).unwrap();
-                async move { Ok::<_, Infallible>(Response::new(Body::from(""))) }
-            }))
-        }
-    });
+    // let make_svc = service_fn(move |_| {
+    //     let s = tx.clone();
+    //     async move {
+    //         let s = s.clone();
+    //         Ok::<_, Infallible>(service_fn(move |_: Request<body::Incoming>| {
+    //             s.try_send(()).unwrap();
+    //             async move { Ok::<_, Infallible>(Response::default()) }
+    //         }))
+    //     }
+    // });
 
-    let server = Server::try_bind(&TRIGGER_ADDRESS)
-        .wrap_err("Could not bind to address")?
-        .serve(make_svc);
+    // let server = Server::try_bind(&TRIGGER_ADDRESS)
+    //     .wrap_err("Could not bind to address")?
+    //     .serve(make_svc);
 
-    tokio::spawn(async move { server.await.expect("Metrics endpoint crashed") });
+    // tokio::spawn(async move { server.await.expect("Metrics endpoint crashed") });
 
     Ok(())
 }
@@ -84,7 +82,7 @@ impl Stream for HeartRateMonitor {
                 self.timeout.reset();
                 cx.waker().wake_by_ref();
                 tracing::debug!("got heartbeat");
-                return Poll::Ready(Some(true))
+                return Poll::Ready(Some(true));
             }
             Poll::Ready(None) => return Poll::Ready(None),
             Poll::Pending => {}
@@ -92,7 +90,7 @@ impl Stream for HeartRateMonitor {
 
         if self.timeout.poll_tick(cx).is_ready() {
             tracing::debug!("disconnect detected, starting backup");
-            return Poll::Ready(Some(false))
+            return Poll::Ready(Some(false));
         }
 
         Poll::Pending
diff --git a/crates/brontes-types/src/display/utils.rs b/crates/brontes-types/src/display/utils.rs
index 1e3bb94a8..f5d2ffc28 100644
--- a/crates/brontes-types/src/display/utils.rs
+++ b/crates/brontes-types/src/display/utils.rs
@@ -1,11 +1,10 @@
 use std::fmt;
 
-use alloy_primitives::{Address, FixedBytes};
+use alloy_primitives::{Address, FixedBytes, B256};
 use colored::{ColoredString, Colorize};
 use indoc::indoc;
 use itertools::Itertools;
 use prettytable::{Cell, Row, Table};
-use reth_primitives::B256;
 
 use crate::{
     mev::{ArbDetails, AtomicArbType, Bundle, BundleData, CexDex, OptimisticTrade},
diff --git a/crates/brontes-types/src/lib.rs b/crates/brontes-types/src/lib.rs
index a58607e0b..4e1ba6509 100644
--- a/crates/brontes-types/src/lib.rs
+++ b/crates/brontes-types/src/lib.rs
@@ -1,9 +1,4 @@
-#![feature(trait_alias)]
-#![feature(trivial_bounds)]
-#![feature(const_type_id)]
-#![feature(core_intrinsics)]
-#![feature(const_for)]
-#![feature(const_mut_refs)]
+#![allow(unused)]
 #![allow(internal_features)]
 #![allow(clippy::type_complexity)]
 
diff --git a/crates/brontes-types/src/mev/backrun.rs b/crates/brontes-types/src/mev/backrun.rs
index 6cfb48439..547c4de7f 100644
--- a/crates/brontes-types/src/mev/backrun.rs
+++ b/crates/brontes-types/src/mev/backrun.rs
@@ -6,10 +6,10 @@ use std::{
 use ::clickhouse::DbRow;
 use ::serde::ser::{SerializeStruct, Serializer};
 use ahash::HashSet;
+use alloy_primitives::B256;
 #[allow(unused)]
 use clickhouse::fixed_string::FixedString;
 use redefined::{self_convert_redefined, Redefined};
-use reth_primitives::B256;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{Deserialize, Serialize};
 use serde_with::serde_as;
diff --git a/crates/brontes-types/src/mev/block.rs b/crates/brontes-types/src/mev/block.rs
index f3d096c1d..66c17bbbd 100644
--- a/crates/brontes-types/src/mev/block.rs
+++ b/crates/brontes-types/src/mev/block.rs
@@ -3,13 +3,12 @@ use std::{
     ops::Add,
 };
 
-use alloy_primitives::Address;
+use alloy_primitives::{Address, B256};
 #[allow(unused)]
 use clickhouse::{fixed_string::FixedString, row::*, Row};
 use colored::Colorize;
 use indoc::indoc;
 use redefined::{self_convert_redefined, Redefined};
-use reth_primitives::B256;
 use rkyv::{Archive, Deserialize as rDeser, Serialize as rSer};
 use serde::{ser::SerializeStruct, Deserialize, Serialize};
 use serde_with::serde_as;
diff --git a/crates/brontes-types/src/mev/bundle/data.rs b/crates/brontes-types/src/mev/bundle/data.rs
index bb19bd42b..fe58bf6f9 100644
--- a/crates/brontes-types/src/mev/bundle/data.rs
+++ b/crates/brontes-types/src/mev/bundle/data.rs
@@ -1,9 +1,9 @@
 use std::fmt::Debug;
 
 use ahash::HashSet;
+use alloy_primitives::B256;
 use clickhouse::InsertRow;
 use redefined::Redefined;
-use reth_primitives::B256;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{Deserialize, Serialize, Serializer};
 use strum::{Display, EnumIter};
diff --git a/crates/brontes-types/src/mev/bundle/header.rs b/crates/brontes-types/src/mev/bundle/header.rs
index 3e6f37312..fc7ded72e 100644
--- a/crates/brontes-types/src/mev/bundle/header.rs
+++ b/crates/brontes-types/src/mev/bundle/header.rs
@@ -1,11 +1,10 @@
 use std::fmt::{self, Debug, Display};
 
-use alloy_primitives::Address;
+use alloy_primitives::{Address, B256};
 use clickhouse::{DbRow, Row};
 use colored::Colorize;
 use itertools::Itertools;
 use redefined::Redefined;
-use reth_primitives::B256;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{ser::SerializeStruct, Deserialize, Serialize};
 use serde_with::serde_as;
diff --git a/crates/brontes-types/src/mev/bundle/mod.rs b/crates/brontes-types/src/mev/bundle/mod.rs
index bd9a207a3..823ea31cd 100644
--- a/crates/brontes-types/src/mev/bundle/mod.rs
+++ b/crates/brontes-types/src/mev/bundle/mod.rs
@@ -3,14 +3,13 @@ pub mod header;
 use std::fmt::{self, Debug};
 
 use ahash::HashSet;
-use alloy_primitives::Address;
+use alloy_primitives::{Address, B256};
 use clap::ValueEnum;
 use clickhouse::Row;
 pub use data::*;
 use dyn_clone::DynClone;
 pub use header::*;
 use redefined::{self_convert_redefined, Redefined};
-use reth_primitives::B256;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{Deserialize, Serialize};
 use serde_with::serde_as;
diff --git a/crates/brontes-types/src/mev/cex_dex.rs b/crates/brontes-types/src/mev/cex_dex.rs
index 933a38e8e..6b5763ba9 100644
--- a/crates/brontes-types/src/mev/cex_dex.rs
+++ b/crates/brontes-types/src/mev/cex_dex.rs
@@ -6,10 +6,10 @@ use ::serde::{
     Deserialize, Serialize,
 };
 use ahash::HashSet;
+use alloy_primitives::B256;
 use colored::Colorize;
 use malachite::Rational;
 use redefined::{self_convert_redefined, Redefined};
-use reth_primitives::B256;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde_with::serde_as;
 use strum::Display;
diff --git a/crates/brontes-types/src/mev/cex_dex_quotes.rs b/crates/brontes-types/src/mev/cex_dex_quotes.rs
index f957934cd..b937674d5 100644
--- a/crates/brontes-types/src/mev/cex_dex_quotes.rs
+++ b/crates/brontes-types/src/mev/cex_dex_quotes.rs
@@ -6,8 +6,8 @@ use ::serde::{
     Deserialize, Serialize,
 };
 use ahash::HashSet;
+use alloy_primitives::B256;
 use redefined::Redefined;
-use reth_primitives::B256;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde_with::serde_as;
 
diff --git a/crates/brontes-types/src/mev/classified_mev.rs b/crates/brontes-types/src/mev/classified_mev.rs
index 5a94c3702..0bd206006 100644
--- a/crates/brontes-types/src/mev/classified_mev.rs
+++ b/crates/brontes-types/src/mev/classified_mev.rs
@@ -5,7 +5,7 @@ use colored::Colorize;
 use dyn_clone::DynClone;
 use indoc::indoc;
 use redefined::{self_convert_redefined, RedefinedConvert};
-use reth_primitives::B256;
+use alloy_primitives::B256;
 use serde::{Deserialize, Serialize};
 use serde_repr::{Deserialize_repr, Serialize_repr};
 use serde_with::serde_as;
diff --git a/crates/brontes-types/src/mev/jit.rs b/crates/brontes-types/src/mev/jit.rs
index 5f16321f8..b44dd7d81 100644
--- a/crates/brontes-types/src/mev/jit.rs
+++ b/crates/brontes-types/src/mev/jit.rs
@@ -1,9 +1,9 @@
 use std::fmt::Debug;
 
 use ahash::HashSet;
+use alloy_primitives::B256;
 use clickhouse::DbRow;
 use redefined::Redefined;
-use reth_primitives::B256;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{
     ser::{SerializeStruct, Serializer},
diff --git a/crates/brontes-types/src/mev/jit_sandwich.rs b/crates/brontes-types/src/mev/jit_sandwich.rs
index 3ee16ea53..d34df880d 100644
--- a/crates/brontes-types/src/mev/jit_sandwich.rs
+++ b/crates/brontes-types/src/mev/jit_sandwich.rs
@@ -2,10 +2,10 @@ use std::fmt::Debug;
 
 use ::serde::ser::{SerializeStruct, Serializer};
 use ahash::HashSet;
+use alloy_primitives::B256;
 #[allow(unused)]
 use clickhouse::row::*;
 use redefined::Redefined;
-use reth_primitives::B256;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{Deserialize, Serialize};
 use serde_with::serde_as;
diff --git a/crates/brontes-types/src/mev/liquidation.rs b/crates/brontes-types/src/mev/liquidation.rs
index 33e2a3545..86f40a707 100644
--- a/crates/brontes-types/src/mev/liquidation.rs
+++ b/crates/brontes-types/src/mev/liquidation.rs
@@ -3,10 +3,10 @@ use std::fmt::Debug;
 use ::clickhouse::DbRow;
 use ::serde::ser::{SerializeStruct, Serializer};
 use ahash::HashSet;
+use alloy_primitives::B256;
 #[allow(unused)]
 use clickhouse::fixed_string::FixedString;
 use redefined::Redefined;
-use reth_primitives::B256;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{Deserialize, Serialize};
 use serde_with::serde_as;
diff --git a/crates/brontes-types/src/mev/sandwich.rs b/crates/brontes-types/src/mev/sandwich.rs
index 73ad80692..e1c2b22a3 100644
--- a/crates/brontes-types/src/mev/sandwich.rs
+++ b/crates/brontes-types/src/mev/sandwich.rs
@@ -47,7 +47,6 @@ use crate::{
 /// Sequence:
 /// Represents various MEV sandwich attack strategies, including standard
 /// sandwiches and more complex variations like the "Big Mac Sandwich."
-
 ///
 /// Example of a Complex Sandwich Attack ("Big Mac Sandwich") Transaction
 /// Sequence:
diff --git a/crates/brontes-types/src/mev/searcher_tx.rs b/crates/brontes-types/src/mev/searcher_tx.rs
index 31c70043f..b2ca9a2af 100644
--- a/crates/brontes-types/src/mev/searcher_tx.rs
+++ b/crates/brontes-types/src/mev/searcher_tx.rs
@@ -2,9 +2,9 @@ use std::fmt::Debug;
 
 use ::serde::ser::Serializer;
 use ahash::{HashSet, HashSetExt};
+use alloy_primitives::B256;
 use clickhouse::DbRow;
 use redefined::Redefined;
-use reth_primitives::B256;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{ser::SerializeStruct, Deserialize, Serialize};
 use serde_with::serde_as;
diff --git a/crates/brontes-types/src/normalized_actions/aggregator.rs b/crates/brontes-types/src/normalized_actions/aggregator.rs
index a8a4a1d88..6e0c719b0 100644
--- a/crates/brontes-types/src/normalized_actions/aggregator.rs
+++ b/crates/brontes-types/src/normalized_actions/aggregator.rs
@@ -1,5 +1,5 @@
+use alloy_primitives::{Address, U256};
 use clickhouse::Row;
-use reth_primitives::{Address, U256};
 use serde::{Deserialize, Serialize};
 
 use super::accounting::{AddressDeltas, TokenAccounting};
diff --git a/crates/brontes-types/src/normalized_actions/flashloan.rs b/crates/brontes-types/src/normalized_actions/flashloan.rs
index 0a36fb9c8..b27543f25 100644
--- a/crates/brontes-types/src/normalized_actions/flashloan.rs
+++ b/crates/brontes-types/src/normalized_actions/flashloan.rs
@@ -1,8 +1,8 @@
 use std::fmt::Debug;
 
+use alloy_primitives::{Address, U256};
 use clickhouse::Row;
 use malachite::Rational;
-use reth_primitives::{Address, U256};
 use serde::{Deserialize, Serialize};
 
 use super::accounting::{AddressDeltas, TokenAccounting};
diff --git a/crates/brontes-types/src/normalized_actions/lending.rs b/crates/brontes-types/src/normalized_actions/lending.rs
index f32da49a4..28826f5dc 100644
--- a/crates/brontes-types/src/normalized_actions/lending.rs
+++ b/crates/brontes-types/src/normalized_actions/lending.rs
@@ -1,9 +1,8 @@
 use std::fmt::Debug;
 
-use alloy_primitives::U256;
+use alloy_primitives::{Address, U256};
 use clickhouse::Row;
 use malachite::Rational;
-use reth_primitives::Address;
 use serde::{Deserialize, Serialize};
 
 use crate::{db::token_info::TokenInfoWithAddress, FastHashMap, Protocol};
diff --git a/crates/brontes-types/src/normalized_actions/liquidation.rs b/crates/brontes-types/src/normalized_actions/liquidation.rs
index 237bd7b2d..910e38b2f 100644
--- a/crates/brontes-types/src/normalized_actions/liquidation.rs
+++ b/crates/brontes-types/src/normalized_actions/liquidation.rs
@@ -1,11 +1,10 @@
 use std::fmt::{self, Debug};
 
-use alloy_primitives::U256;
+use alloy_primitives::{Address, U256};
 use clickhouse::Row;
 use colored::Colorize;
 use malachite::Rational;
 use redefined::Redefined;
-use reth_primitives::Address;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{Deserialize, Serialize};
 
diff --git a/crates/brontes-types/src/normalized_actions/liquidity.rs b/crates/brontes-types/src/normalized_actions/liquidity.rs
index 3ce24777d..b8094a5fb 100644
--- a/crates/brontes-types/src/normalized_actions/liquidity.rs
+++ b/crates/brontes-types/src/normalized_actions/liquidity.rs
@@ -1,12 +1,11 @@
 use std::fmt::{self, Debug};
 
-use alloy_primitives::TxHash;
+use alloy_primitives::{Address, TxHash};
 use clickhouse::Row;
 use colored::Colorize;
 use itertools::Itertools;
 use malachite::Rational;
 use redefined::Redefined;
-use reth_primitives::Address;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{Deserialize, Serialize};
 
diff --git a/crates/brontes-types/src/normalized_actions/self_destruct.rs b/crates/brontes-types/src/normalized_actions/self_destruct.rs
index 068f6227d..9c016b556 100644
--- a/crates/brontes-types/src/normalized_actions/self_destruct.rs
+++ b/crates/brontes-types/src/normalized_actions/self_destruct.rs
@@ -1,7 +1,7 @@
 use std::fmt::Debug;
 
+use alloy_primitives::{Address, U256};
 use clickhouse::Row;
-use reth_primitives::{Address, U256};
 use reth_rpc_types::trace::parity::SelfdestructAction;
 use serde::{Deserialize, Serialize};
 
diff --git a/crates/brontes-types/src/normalized_actions/swaps.rs b/crates/brontes-types/src/normalized_actions/swaps.rs
index a0f4ce3e6..0bc183669 100644
--- a/crates/brontes-types/src/normalized_actions/swaps.rs
+++ b/crates/brontes-types/src/normalized_actions/swaps.rs
@@ -4,13 +4,12 @@ use std::{
     ops::{Deref, DerefMut},
 };
 
-use alloy_primitives::{TxHash, U256};
+use alloy_primitives::{Address, TxHash, U256};
 use clickhouse::Row;
 use colored::Colorize;
 use itertools::Itertools;
 use malachite::{num::basic::traits::Zero, Rational};
 use redefined::Redefined;
-use reth_primitives::Address;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{Deserialize, Serialize};
 
diff --git a/crates/brontes-types/src/normalized_actions/transfer.rs b/crates/brontes-types/src/normalized_actions/transfer.rs
index 1a1243f0d..b246a9ddd 100644
--- a/crates/brontes-types/src/normalized_actions/transfer.rs
+++ b/crates/brontes-types/src/normalized_actions/transfer.rs
@@ -1,9 +1,9 @@
 use std::fmt::Debug;
 
+use alloy_primitives::{Address, U256};
 use clickhouse::Row;
 use malachite::Rational;
 use redefined::Redefined;
-use reth_primitives::{Address, U256};
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{Deserialize, Serialize};
 
diff --git a/crates/brontes-types/src/queries.rs b/crates/brontes-types/src/queries.rs
index 9d3281dad..9e5b55b89 100644
--- a/crates/brontes-types/src/queries.rs
+++ b/crates/brontes-types/src/queries.rs
@@ -14,7 +14,7 @@ pub async fn make_call_request<C: SolCall, T: TracingProvider>(
 ) -> eyre::Result<C::Return> {
     let encoded = call.abi_encode();
     let req = TransactionRequest {
-        to: Some(to),
+        to: Some(alloy_primitives::TxKind::Call(to)),
         input: TransactionInput::new(encoded.into()),
         ..Default::default()
     };
diff --git a/crates/brontes-types/src/structured_trace.rs b/crates/brontes-types/src/structured_trace.rs
index 5ccc6ea11..9227e8fec 100644
--- a/crates/brontes-types/src/structured_trace.rs
+++ b/crates/brontes-types/src/structured_trace.rs
@@ -1,10 +1,9 @@
 use std::str::FromStr;
 
-use alloy_primitives::{Address, Log, U256};
+use alloy_primitives::{Address, Bytes, Log, B256, U256};
 use clickhouse::DbRow;
 use itertools::Itertools;
 use redefined::self_convert_redefined;
-use reth_primitives::{Bytes, B256};
 use reth_rpc_types::trace::parity::*;
 use rkyv::{Archive, Deserialize as rDeserialize, Serialize as rSerialize};
 use serde::{ser::SerializeStruct, Deserialize, Serialize};
diff --git a/crates/brontes-types/src/traits.rs b/crates/brontes-types/src/traits.rs
index 40f34415c..cad4fa0d4 100644
--- a/crates/brontes-types/src/traits.rs
+++ b/crates/brontes-types/src/traits.rs
@@ -1,10 +1,9 @@
-use alloy_primitives::TxHash;
+use alloy_primitives::{Address, BlockNumber, Bytes, StorageValue, TxHash, B256};
 use alloy_rpc_types::AnyReceiptEnvelope;
-use reth_primitives::{
-    Address, BlockId, BlockNumber, BlockNumberOrTag, Bytecode, Bytes, Header, StorageValue, B256,
-};
+use reth_primitives::Bytecode;
 use reth_rpc_types::{
-    state::StateOverride, BlockOverrides, Log, TransactionReceipt, TransactionRequest,
+    state::StateOverride, BlockId, BlockNumberOrTag, BlockOverrides, Header, Log,
+    TransactionReceipt, TransactionRequest,
 };
 
 use crate::structured_trace::TxTrace;
diff --git a/crates/brontes-types/src/tree/mod.rs b/crates/brontes-types/src/tree/mod.rs
index 5e2250ca2..c532f3c6a 100644
--- a/crates/brontes-types/src/tree/mod.rs
+++ b/crates/brontes-types/src/tree/mod.rs
@@ -1,7 +1,8 @@
 use std::{panic::AssertUnwindSafe, sync::Arc};
 
+use alloy_rpc_types::Header;
 use itertools::Itertools;
-use reth_primitives::{Header, B256};
+use reth_primitives::B256;
 use statrs::statistics::Statistics;
 use tracing::{error, info, span, Level};
 
@@ -75,19 +76,21 @@ impl<V: NormalizedAction> BlockTree<V> {
 
         let Ok(contract) = database.try_fetch_searcher_contract_infos(contract_info_addr.clone())
         else {
-            return vec![]
+            return vec![];
         };
 
         let Ok(address_meta) = database.try_fetch_address_metadatas(contract_info_addr) else {
-            return vec![]
+            return vec![];
         };
 
         let Ok(eoa) = database.try_fetch_searcher_eoa_infos(eoa_info_addr) else { return vec![] };
 
+        let Some(block_number) = self.header.number else { return vec![] };
+
         roots
             .into_iter()
             .map(|root| {
-                root.get_tx_info_batch(self.header.number, &eoa, &contract, &address_meta)
+                root.get_tx_info_batch(block_number, &eoa, &contract, &address_meta)
                     .ok()
             })
             .collect()
@@ -98,8 +101,10 @@ impl<V: NormalizedAction> BlockTree<V> {
             .iter()
             .find(|r| r.tx_hash == tx_hash)
             .and_then(|root| {
-                root.get_tx_info(self.header.number, database)
-                    .map_err(|e| error!(block=%self.header.number,"Database Error: {}", e ))
+                root.get_tx_info(self.header.number.expect("No block number"), database)
+                    .map_err(
+                        |e| error!(block=%self.header.number.unwrap(),"Database Error: {}", e ),
+                    )
                     .ok()
             })
     }
@@ -139,7 +144,7 @@ impl<V: NormalizedAction> BlockTree<V> {
             if this.tx_roots.is_empty() {
                 info!(block = this.header.number, "The block tree is empty");
                 this.tx_roots.iter_mut().for_each(|root| root.finalize());
-                return
+                return;
             }
 
             // Initialize accumulator for total priority fee and vector of priority fees
@@ -148,7 +153,7 @@ impl<V: NormalizedAction> BlockTree<V> {
 
             for tx in &mut this.tx_roots {
                 let priority_fee = (tx.gas_details.effective_gas_price
-                    - this.header.base_fee_per_gas.unwrap_or_default() as u128)
+                    - this.header.base_fee_per_gas.unwrap_or_default())
                     as f64;
                 priority_fees.push(priority_fee);
                 total_priority_fee += priority_fee;
@@ -433,10 +438,7 @@ pub mod test {
         };
 
         assert!(
-            b.user_swaps
-                .iter()
-                .map(|swap| swap.trace_index != 0)
-                .all(|t| t),
+            b.user_swaps.iter().all(|swap| swap.trace_index != 0),
             "batch user swaps wasn't set"
         );
     }
diff --git a/crates/brontes-types/src/tree/node.rs b/crates/brontes-types/src/tree/node.rs
index 485a8b1c3..b62aa3b6f 100644
--- a/crates/brontes-types/src/tree/node.rs
+++ b/crates/brontes-types/src/tree/node.rs
@@ -1,5 +1,5 @@
+use alloy_primitives::Address;
 use itertools::Itertools;
-use reth_primitives::Address;
 use tracing::{error, warn};
 
 use super::{types::NodeWithDataRef, NodeData};
diff --git a/crates/brontes-types/src/tree/root.rs b/crates/brontes-types/src/tree/root.rs
index 0da53bfe2..17f0fcb2e 100644
--- a/crates/brontes-types/src/tree/root.rs
+++ b/crates/brontes-types/src/tree/root.rs
@@ -167,7 +167,7 @@ impl<V: NormalizedAction> Root<V> {
             || emits_logs && searcher_contract_info.is_none()
             || contract_type
                 .as_ref()
-                .map_or(false, |ct| !ct.could_be_mev_contract())
+                .is_some_and(|ct| !ct.could_be_mev_contract())
         {
             return Ok(TxInfo::new(
                 block_number,
diff --git a/crates/brontes-types/src/tree/tx_info.rs b/crates/brontes-types/src/tree/tx_info.rs
index bbb628ceb..e1943d852 100644
--- a/crates/brontes-types/src/tree/tx_info.rs
+++ b/crates/brontes-types/src/tree/tx_info.rs
@@ -107,11 +107,11 @@ impl TxInfo {
     pub fn is_searcher_of_type(&self, mev_type: MevType) -> bool {
         self.searcher_eoa_info
             .as_ref()
-            .map_or(false, |info| info.is_searcher_of_type(mev_type))
+            .is_some_and(|info| info.is_searcher_of_type(mev_type))
             || self
                 .searcher_contract_info
                 .as_ref()
-                .map_or(false, |info| info.is_searcher_of_type(mev_type))
+                .is_some_and(|info| info.is_searcher_of_type(mev_type))
     }
 
     pub fn is_searcher_of_type_with_count_threshold(
@@ -121,21 +121,21 @@ impl TxInfo {
     ) -> bool {
         self.searcher_eoa_info
             .as_ref()
-            .map_or(false, |info| info.is_searcher_of_type_with_threshold(mev_type, threshold))
+            .is_some_and(|info| info.is_searcher_of_type_with_threshold(mev_type, threshold))
             || self
                 .searcher_contract_info
                 .as_ref()
-                .map_or(false, |info| info.is_searcher_of_type_with_threshold(mev_type, threshold))
+                .is_some_and(|info| info.is_searcher_of_type_with_threshold(mev_type, threshold))
     }
 
     pub fn is_labelled_searcher_of_type(&self, mev_type: MevType) -> bool {
         self.searcher_eoa_info
             .as_ref()
-            .map_or(false, |info| info.is_labelled_searcher_of_type(mev_type))
+            .is_some_and(|info| info.is_labelled_searcher_of_type(mev_type))
             || self
                 .searcher_contract_info
                 .as_ref()
-                .map_or(false, |info| info.is_labelled_searcher_of_type(mev_type))
+                .is_some_and(|info| info.is_labelled_searcher_of_type(mev_type))
     }
 
     pub fn is_private(&self) -> bool {
diff --git a/crates/reth-tracing-ext/Cargo.toml b/crates/reth-tracing-ext/Cargo.toml
index 3ec947735..95c3eb32c 100644
--- a/crates/reth-tracing-ext/Cargo.toml
+++ b/crates/reth-tracing-ext/Cargo.toml
@@ -8,6 +8,7 @@ edition = "2021"
 [dependencies]
 # Reth
 reth-node-ethereum.workspace = true
+reth-primitives.workspace = true
 async-trait.workspace = true
 reth-tasks.workspace = true
 reth-rpc.workspace = true
@@ -16,16 +17,16 @@ reth-rpc-api.workspace = true
 reth-provider.workspace = true
 reth-transaction-pool.workspace = true
 reth-network-api.workspace = true
-reth-primitives.workspace = true
+reth-primitives-traits.workspace = true
 reth-db.workspace = true
 reth-blockchain-tree.workspace = true
 reth-beacon-consensus.workspace = true
 reth-revm.workspace = true
-reth-interfaces.workspace = true
+# reth-beacon-consensus.workspace = true
 alloy-primitives.workspace = true
 alloy-sol-types.workspace = true
-alloy-rpc-types-trace= { git = "https://github.com/alloy-rs/alloy", rev = "39b8695" }
-alloy-rpc-types = { workspace = true, features = ["jsonrpsee-types"] }
+alloy-rpc-types-trace.workspace = true
+alloy-rpc-types.workspace = true
 futures.workspace = true
 brontes-types.workspace = true
 tracing.workspace = true
@@ -58,5 +59,3 @@ local-clickhouse = [
   "brontes-core/local-clickhouse",
   "brontes-types/local-clickhouse",
 ]
-
-
diff --git a/crates/reth-tracing-ext/src/lib.rs b/crates/reth-tracing-ext/src/lib.rs
index 753739808..2a6da3ca6 100644
--- a/crates/reth-tracing-ext/src/lib.rs
+++ b/crates/reth-tracing-ext/src/lib.rs
@@ -5,16 +5,20 @@ use std::{
 };
 
 use brontes_types::{structured_trace::TxTrace, BrontesTaskExecutor};
-use reth_beacon_consensus::BeaconConsensus;
+use reth_beacon_consensus::EthBeaconConsensus;
+// use reth_beacon_consensus::BeaconConsensus;
 use reth_blockchain_tree::{
     externals::TreeExternals, BlockchainTree, BlockchainTreeConfig, ShareableBlockchainTree,
 };
 use reth_db::{mdbx::DatabaseArguments, DatabaseEnv};
 use reth_network_api::noop::NoopNetwork;
-use reth_node_ethereum::EthEvmConfig;
-use reth_primitives::{BlockId, PruneModes, MAINNET};
-use reth_provider::{providers::BlockchainProvider, ProviderFactory};
-use reth_revm::{inspectors::GasInspector, EvmProcessorFactory};
+use reth_node_ethereum::{EthEvmConfig, EthExecutorProvider};
+use reth_primitives::{BlockId, MAINNET};
+use reth_provider::{
+    providers::{BlockchainProvider, StaticFileProvider},
+    ProviderFactory,
+};
+use reth_revm::inspectors::GasInspector;
 use reth_rpc::{
     eth::{
         cache::{EthStateCache, EthStateCacheConfig},
@@ -37,10 +41,7 @@ use reth_transaction_pool::{
 mod provider;
 pub mod reth_tracer;
 
-pub type Provider = BlockchainProvider<
-    Arc<DatabaseEnv>,
-    ShareableBlockchainTree<Arc<DatabaseEnv>, EvmProcessorFactory<EthEvmConfig>>,
->;
+pub type Provider = BlockchainProvider<Arc<DatabaseEnv>>;
 
 pub type RethApi = EthApi<Provider, RethTxPool, NoopNetwork, EthEvmConfig>;
 
@@ -64,23 +65,26 @@ impl TracingClient {
         static_files_path: PathBuf,
     ) -> Self {
         let chain = MAINNET.clone();
-        let provider_factory =
-            ProviderFactory::new(Arc::clone(&db), Arc::clone(&chain), static_files_path)
-                .expect("failed to start provider factory");
+        let provider_factory = ProviderFactory::new(
+            Arc::clone(&db),
+            Arc::clone(&chain),
+            StaticFileProvider::read_only(static_files_path).unwrap(),
+        );
 
         let tree_externals = TreeExternals::new(
             provider_factory.clone(),
-            Arc::new(BeaconConsensus::new(Arc::clone(&chain))),
-            EvmProcessorFactory::new(chain.clone(), EthEvmConfig::default()),
+            Arc::new(EthBeaconConsensus::new(Arc::clone(&chain))),
+            EthExecutorProvider::new(chain.clone(), EthEvmConfig::default()),
         );
 
         let tree_config = BlockchainTreeConfig::default();
 
         let blockchain_tree = ShareableBlockchainTree::new(
-            BlockchainTree::new(tree_externals, tree_config, Some(PruneModes::none())).unwrap(),
+            BlockchainTree::new(tree_externals, tree_config, Some(Default::default())).unwrap(),
         );
 
-        let provider = BlockchainProvider::new(provider_factory.clone(), blockchain_tree).unwrap();
+        let provider =
+            BlockchainProvider::new(provider_factory.clone(), Arc::new(blockchain_tree)).unwrap();
 
         let state_cache = EthStateCache::spawn_with(
             provider.clone(),
diff --git a/crates/reth-tracing-ext/src/provider.rs b/crates/reth-tracing-ext/src/provider.rs
index 43c67cc63..62f8f897d 100644
--- a/crates/reth-tracing-ext/src/provider.rs
+++ b/crates/reth-tracing-ext/src/provider.rs
@@ -1,11 +1,12 @@
 use std::cmp::min;
 
+use alloy_primitives::FixedBytes;
 use alloy_rpc_types::AnyReceiptEnvelope;
 use brontes_types::{structured_trace::TxTrace, traits::TracingProvider};
 use eyre::eyre;
 use reth_primitives::{
-    Address, BlockId, BlockNumber, BlockNumberOrTag, Bytecode, Bytes, Header, StorageValue, TxHash,
-    B256, U256,
+    Address, BlockId, BlockNumber, BlockNumberOrTag, Bytecode, Bytes, StorageValue, TxHash, B256,
+    U256,
 };
 use reth_provider::{BlockIdReader, BlockNumReader, HeaderProvider};
 use reth_revm::{database::StateProviderDatabase, db::CacheDB};
@@ -15,7 +16,7 @@ use reth_rpc::eth::{
 };
 use reth_rpc_api::EthApiServer;
 use reth_rpc_types::{
-    state::StateOverride, BlockOverrides, Log, TransactionReceipt, TransactionRequest,
+    state::StateOverride, BlockOverrides, Header, Log, TransactionReceipt, TransactionRequest,
 };
 use revm::{
     primitives::{
@@ -112,6 +113,35 @@ impl TracingProvider for TracingClient {
             .provider()
             .header_by_number(number)
             .map_err(Into::into)
+            .map(|h| {
+                h.map(|inner| Header {
+                    hash:                     Some(inner.hash_slow()),
+                    parent_hash:              inner.parent_hash,
+                    uncles_hash:              inner.parent_hash,
+                    miner:                    inner.beneficiary,
+                    state_root:               inner.state_root,
+                    transactions_root:        inner.transactions_root,
+                    receipts_root:            inner.receipts_root,
+                    logs_bloom:               inner.logs_bloom,
+                    difficulty:               inner.difficulty,
+                    number:                   Some(inner.number),
+                    gas_limit:                inner.gas_limit as u128,
+                    gas_used:                 inner.gas_used as u128,
+                    timestamp:                inner.timestamp,
+                    total_difficulty:         Some(inner.difficulty),
+                    extra_data:               inner.extra_data,
+                    mix_hash:                 Some(inner.mix_hash),
+                    nonce:                    Some(FixedBytes::from_slice(
+                        &inner.nonce.to_be_bytes(),
+                    )),
+                    base_fee_per_gas:         inner.base_fee_per_gas.map(|v| v as u128),
+                    withdrawals_root:         inner.withdrawals_root,
+                    blob_gas_used:            inner.blob_gas_used.map(|v| v as u128),
+                    excess_blob_gas:          inner.excess_blob_gas.map(|v| v as u128),
+                    parent_beacon_block_root: inner.parent_beacon_block_root,
+                    requests_root:            inner.requests_root,
+                })
+            })
     }
 
     // DB Access Methods
@@ -212,9 +242,9 @@ pub(crate) fn create_txn_env(
     if request
         .blob_versioned_hashes
         .as_ref()
-        .map_or(false, |hashes| hashes.is_empty())
+        .is_some_and(|hashes| hashes.is_empty())
     {
-        return Err(RpcInvalidTransactionError::BlobTransactionMissingBlobHashes.into())
+        return Err(RpcInvalidTransactionError::BlobTransactionMissingBlobHashes.into());
     }
 
     let TransactionRequest {
@@ -254,7 +284,12 @@ pub(crate) fn create_txn_env(
         caller: from.unwrap_or_default(),
         gas_price,
         gas_priority_fee: max_priority_fee_per_gas,
-        transact_to: to.map(TransactTo::Call).unwrap_or_else(TransactTo::create),
+        transact_to: to
+            .map(|v| match v {
+                reth_primitives::TxKind::Create => TransactTo::Create,
+                reth_primitives::TxKind::Call(address) => TransactTo::Call(address),
+            })
+            .unwrap_or_else(TransactTo::create),
         value: value.unwrap_or_default(),
         data: input.try_into_unique_input()?.unwrap_or_default(),
         chain_id,
@@ -351,13 +386,13 @@ impl CallFees {
                 Some(max_fee) => {
                     if max_fee < block_base_fee {
                         // `base_fee_per_gas` is greater than the `max_fee_per_gas`
-                        return Err(RpcInvalidTransactionError::FeeCapTooLow.into())
+                        return Err(RpcInvalidTransactionError::FeeCapTooLow.into());
                     }
                     if max_fee < max_priority_fee_per_gas.unwrap_or(U256::ZERO) {
                         return Err(
                             // `max_priority_fee_per_gas` is greater than the `max_fee_per_gas`
                             RpcInvalidTransactionError::TipAboveFeeCap.into(),
-                        )
+                        );
                     }
                     Ok(min(
                         max_fee,
@@ -415,7 +450,7 @@ impl CallFees {
                 // Ensure blob_hashes are present
                 if !has_blob_hashes {
                     // Blob transaction but no blob hashes
-                    return Err(RpcInvalidTransactionError::BlobTransactionMissingBlobHashes.into())
+                    return Err(RpcInvalidTransactionError::BlobTransactionMissingBlobHashes.into());
                 }
 
                 Ok(CallFees {
diff --git a/crates/reth-tracing-ext/src/reth_tracer/inspector.rs b/crates/reth-tracing-ext/src/reth_tracer/inspector.rs
index f037ad785..50d3ee3a3 100644
--- a/crates/reth-tracing-ext/src/reth_tracer/inspector.rs
+++ b/crates/reth-tracing-ext/src/reth_tracer/inspector.rs
@@ -1,10 +1,9 @@
 use std::fmt::Debug;
 
-use alloy_primitives::{Address, Log, B256, U256};
+use alloy_primitives::{Address, Bytes, Log, B256, U256, U64};
 use arena::{CallTraceArena, PushTraceKind};
 use brontes_types::structured_trace::{TransactionTraceWithLogs, TxTrace};
 use config::TracingInspectorConfig;
-use reth_primitives::{Bytes, U64};
 use reth_rpc_types::{trace::parity::*, TransactionInfo};
 use revm::{
     inspectors::GasInspector,
@@ -121,7 +120,7 @@ impl BrontesTracingInspector {
     ) -> bool {
         if context.precompiles.contains_key(to) {
             // only if this is _not_ the root call
-            return self.is_deep() && value.is_zero()
+            return self.is_deep() && value.is_zero();
         }
         false
     }
@@ -291,7 +290,7 @@ impl BrontesTracingInspector {
             depth: context.journaled_state.depth(),
             pc: interp.program_counter(),
             op,
-            contract: interp.contract.address,
+            contract: interp.contract.target_address,
             stack,
             push_stack: None,
             memory_size: memory.len(),
@@ -408,7 +407,7 @@ impl BrontesTracingInspector {
         block_number: u64,
     ) -> Option<Vec<TransactionTraceWithLogs>> {
         if self.traces.nodes().is_empty() {
-            return None
+            return None;
         }
 
         let mut traces: Vec<TransactionTraceWithLogs> =
@@ -498,12 +497,12 @@ impl BrontesTracingInspector {
     fn trace_address(&self, nodes: &[CallTraceNode], idx: usize) -> Vec<usize> {
         if idx == 0 {
             // root call has empty traceAddress
-            return vec![]
+            return vec![];
         }
         let mut graph = vec![];
         let mut node = &nodes[idx];
         if node.trace.maybe_precompile.unwrap_or(false) {
-            return graph
+            return graph;
         }
         while let Some(parent) = node.parent {
             // the index of the child call in the arena
@@ -660,22 +659,22 @@ where
         self.gas_inspector.call(context, inputs);
 
         // determine correct `from` and `to` based on the call scheme
-        let (from, to) = match inputs.context.scheme {
+        let (from, to) = match inputs.scheme {
             CallScheme::DelegateCall | CallScheme::CallCode => {
-                (inputs.context.address, inputs.context.code_address)
+                (inputs.target_address, inputs.bytecode_address)
             }
-            _ => (inputs.context.caller, inputs.context.address),
+            _ => (inputs.caller, inputs.target_address),
         };
 
-        let value = if matches!(inputs.context.scheme, CallScheme::DelegateCall) {
+        let value = if matches!(inputs.scheme, CallScheme::DelegateCall) {
             // for delegate calls we need to use the value of the top trace
             if let Some(parent) = self.active_trace() {
                 parent.trace.value
             } else {
-                inputs.transfer.value
+                inputs.value.get()
             }
         } else {
-            inputs.transfer.value
+            inputs.value.get()
         };
 
         // if calls to precompiles should be excluded, check whether this is a call to a
@@ -690,7 +689,7 @@ where
             to,
             inputs.input.clone(),
             value,
-            inputs.context.scheme.into(),
+            inputs.scheme.into(),
             from,
             inputs.gas_limit,
             maybe_precompile,
diff --git a/crates/reth-tracing-ext/src/reth_tracer/types.rs b/crates/reth-tracing-ext/src/reth_tracer/types.rs
index b35083592..a015e81d1 100644
--- a/crates/reth-tracing-ext/src/reth_tracer/types.rs
+++ b/crates/reth-tracing-ext/src/reth_tracer/types.rs
@@ -9,7 +9,7 @@ use alloy_rpc_types_trace::{
         TraceOutput, TransactionTrace,
     },
 };
-use revm::interpreter::{opcode, CallContext, CallScheme, CreateScheme, InstructionResult, OpCode};
+use revm::interpreter::{opcode, CallScheme, CreateScheme, InstructionResult, OpCode};
 use serde::{Deserialize, Serialize};
 use utils::{convert_memory, TraceStyle};
 
@@ -56,8 +56,8 @@ pub struct CallTrace {
     pub gas_limit: u64,
     /// The status of the trace's call
     pub status: InstructionResult,
-    /// call context of the runtime
-    pub call_context: Option<Box<CallContext>>,
+    // /// call context of the runtime
+    // pub call_context: Option<Box<CallContext>>,
     /// Opcode-level execution steps
     pub steps: Vec<CallTraceStep>,
 }
@@ -121,7 +121,6 @@ pub struct CallTraceNode {
 
 impl CallTraceNode {
     /// Returns the call context's execution address
-
     pub const fn execution_address(&self) -> Address {
         if self.trace.kind.is_delegate() {
             self.trace.caller
diff --git a/crates/reth-tracing-ext/src/reth_tracer/utils.rs b/crates/reth-tracing-ext/src/reth_tracer/utils.rs
index d07110b09..c11c71f9a 100644
--- a/crates/reth-tracing-ext/src/reth_tracer/utils.rs
+++ b/crates/reth-tracing-ext/src/reth_tracer/utils.rs
@@ -11,7 +11,7 @@ use revm::{
 /// see <https://github.com/ethereum/go-ethereum/blob/366d2169fbc0e0f803b68c042b77b6b480836dbc/eth/tracers/logger/logger.go#L450-L452>
 #[inline]
 pub(crate) fn convert_memory(data: &[u8]) -> Vec<String> {
-    let mut memory = Vec::with_capacity((data.len() + 31) / 32);
+    let mut memory = Vec::with_capacity(data.len().div_ceil(32));
     for idx in (0..data.len()).step_by(32) {
         let len = std::cmp::min(idx + 32, data.len());
         memory.push(hex::encode(&data[idx..len]));
diff --git a/rust-toolchain.toml b/rust-toolchain.toml
index 3656b7a34..d6e88e4a0 100644
--- a/rust-toolchain.toml
+++ b/rust-toolchain.toml
@@ -1,4 +1,4 @@
 [toolchain]
-channel = "nightly-2024-08-10"
+channel = "1.85.0"
 components = ["rustfmt"]
 targets = ["aarch64-apple-darwin", "x86_64-unknown-linux-gnu"]
