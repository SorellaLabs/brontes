{"expiry":1699581855,"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/interfaces/IMessengerWrapper.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12 <=0.8.9;\npragma experimental ABIEncoderV2;\n\ninterface IMessengerWrapper {\n    function sendCrossDomainMessage(bytes memory _calldata) external;\n    function verifySender(address l1BridgeCaller, bytes memory _data) external;\n    function confirmRoots(\n        bytes32[] calldata rootHashes,\n        uint256[] calldata destinationChainIds,\n        uint256[] calldata totalAmounts,\n        uint256[] calldata rootCommittedAts\n    ) external;\n}\n"},"contracts/interfaces/linea/messengers/IBridge.sol":{"content":"// SPDX-License-Identifier: OWNED BY ConsenSys Software Inc.\npragma solidity ^0.6.12;\n\n/// @title The bridge interface implemented on both chains\ninterface IBridge {\n  event MessageDispatched(\n    address _from,\n    address _to,\n    uint256 _fee,\n    uint256 _value,\n    uint256 _deadline,\n    bytes _calldata\n  );\n\n  event MessageDelivered(\n    address _from,\n    address _to,\n    uint256 _fee,\n    uint256 _value,\n    uint256 _deadline,\n    bytes _calldata\n  );\n\n  function dispatchMessage(\n    address _to,\n    uint256 _fee,\n    uint256 _deadline,\n    bytes calldata _calldata\n  ) external payable;\n\n  function deliverMessage(\n    address _from,\n    address _to,\n    uint256 _fee,\n    uint256 _value,\n    uint256 _deadline,\n    bytes calldata _calldata\n  ) external payable;\n\n  function sender() external view returns (address);\n\n  // New implementation\n  function sendMessage(\n    address _to,\n    uint256 _fee,\n    bytes calldata _calldata\n  ) external payable;\n  function minimumFeeInWei() external view returns (uint256);\n}"},"contracts/wrappers/MessengerWrapper.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12 <=0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IMessengerWrapper.sol\";\n\ncontract IL1Bridge {\n    struct TransferBond {\n        address bonder;\n        uint256 createdAt;\n        uint256 totalAmount;\n        uint256 challengeStartTime;\n        address challenger;\n        bool challengeResolved;\n    }\n    uint256 public challengePeriod;\n    mapping(bytes32 => TransferBond) public transferBonds;\n    function getIsBonder(address maybeBonder) public view returns (bool) {}\n    function getTransferRootId(bytes32 rootHash, uint256 totalAmount) public pure returns (bytes32) {}\n    function confirmTransferRoot(\n        uint256 originChainId,\n        bytes32 rootHash,\n        uint256 destinationChainId,\n        uint256 totalAmount,\n        uint256 rootCommittedAt\n    )\n        external\n    {}\n}\n\nabstract contract MessengerWrapper is IMessengerWrapper {\n    address public immutable l1BridgeAddress;\n    uint256 public immutable l2ChainId;\n    bool public isRootConfirmation = false;\n\n    constructor(address _l1BridgeAddress, uint256 _l2ChainId) internal {\n        l1BridgeAddress = _l1BridgeAddress;\n        l2ChainId = _l2ChainId;\n    }\n\n    modifier onlyL1Bridge {\n        require(msg.sender == l1BridgeAddress, \"MW: Sender must be the L1 Bridge\");\n        _;\n    }\n\n    modifier rootConfirmation {\n        isRootConfirmation = true;\n        _;\n        isRootConfirmation = false;\n    }\n\n    /**\n     * @dev Confirm roots that have bonded on L1 and passed the challenge period with no challenge\n     * @param rootHashes The root hashes to confirm\n     * @param destinationChainIds The destinationChainId of the roots to confirm\n     * @param totalAmounts The totalAmount of the roots to confirm\n     * @param rootCommittedAts The rootCommittedAt of the roots to confirm\n     */\n    function confirmRoots (\n        bytes32[] calldata rootHashes,\n        uint256[] calldata destinationChainIds,\n        uint256[] calldata totalAmounts,\n        uint256[] calldata rootCommittedAts\n    ) external override rootConfirmation {\n        IL1Bridge l1Bridge = IL1Bridge(l1BridgeAddress);\n        require(l1Bridge.getIsBonder(msg.sender), \"MW: Sender must be a bonder\");\n        require(rootHashes.length == totalAmounts.length, \"MW: rootHashes and totalAmounts must be the same length\");\n\n        uint256 challengePeriod = l1Bridge.challengePeriod();\n        for (uint256 i = 0; i < rootHashes.length; i++) {\n            bool canConfirm = canConfirmRoot(l1Bridge, rootHashes[i], totalAmounts[i], challengePeriod);\n            require(canConfirm, \"MW: Root cannot be confirmed\");\n            l1Bridge.confirmTransferRoot(\n                l2ChainId,\n                rootHashes[i],\n                destinationChainIds[i],\n                totalAmounts[i],\n                rootCommittedAts[i]\n            );\n        }\n    }\n    \n    function canConfirmRoot (IL1Bridge l1Bridge, bytes32 rootHash, uint256 totalAmount, uint256 challengePeriod) public view returns (bool) {\n        bytes32 transferRootId = l1Bridge.getTransferRootId(rootHash, totalAmount);\n        (,uint256 createdAt,,uint256 challengeStartTime,,) = l1Bridge.transferBonds(transferRootId);\n\n        uint256 timeSinceBondCreation = block.timestamp - createdAt;\n        if (\n            createdAt != 0 &&\n            challengeStartTime == 0 &&\n            timeSinceBondCreation > challengePeriod\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n}\n"},"contracts/wrappers/LineaMessengerWrapper.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/linea/messengers/IBridge.sol\";\nimport \"./MessengerWrapper.sol\";\n\n/**\n * @dev A MessengerWrapper for Linea - https://docs.linea.build/\n * @notice Deployed on layer-1\n */\n\ncontract LineaMessengerWrapper is MessengerWrapper {\n\n    IBridge public lineaL1Bridge;\n    address public l2BridgeAddress;\n\n    constructor(\n        address _l1BridgeAddress,\n        address _l2BridgeAddress,\n        IBridge _lineaL1Bridge,\n        uint256 _l2ChainId\n    )\n        public\n        MessengerWrapper(_l1BridgeAddress, _l2ChainId)\n    {\n        l2BridgeAddress = _l2BridgeAddress;\n        lineaL1Bridge = _lineaL1Bridge;\n    }\n\n    /**\n     * @dev Sends a message to the l2BridgeAddress from layer-1\n     * @param _calldata The data that l2BridgeAddress will be called with\n     */\n    function sendCrossDomainMessage(bytes memory _calldata) public override onlyL1Bridge {\n        lineaL1Bridge.sendMessage(\n            l2BridgeAddress,\n            0,\n            _calldata\n        );\n    }\n\n    function verifySender(address l1BridgeCaller, bytes memory) public override {\n        if (isRootConfirmation) return;\n\n        require(lineaL1Bridge.sender() == l2BridgeAddress, \"LINEA_MSG_WRP: Invalid cross-domain sender\");\n        require(l1BridgeCaller == address(lineaL1Bridge), \"LINEA_MSG_WRP: Caller is not the expected sender\");\n    }\n}\n"}},"settings":{"libraries":{},"optimizer":{"enabled":true,"runs":50000},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"contract IBridge\",\"name\":\"_lineaL1Bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2ChainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IL1Bridge\",\"name\":\"l1Bridge\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengePeriod\",\"type\":\"uint256\"}],\"name\":\"canConfirmRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"destinationChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rootCommittedAts\",\"type\":\"uint256[]\"}],\"name\":\"confirmRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRootConfirmation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lineaL1Bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"sendCrossDomainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1BridgeCaller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LineaMessengerWrapper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":1,"Runs":50000,"ConstructorArguments":"0x000000000000000000000000b8901acb165ed027e32754e0ffe830802919727f000000000000000000000000cbb852a6274e03fa00fb4895de0463f66df27a11000000000000000000000000d19d4b5d358258f05d7b411e21a1460d11b0876f000000000000000000000000000000000000000000000000000000000000e708","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}