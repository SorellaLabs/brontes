{"expiry":1699512626,"data":[{"SourceCode":{"language":"Solidity","sources":{"cache/solpp-generated-contracts/zksync/libraries/PriorityQueue.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\n/// @notice The structure that contains meta information of the L2 transaction that was requested from L1\n/// @dev The weird size of fields was selected specifically to minimize the structure storage size\n/// @param canonicalTxHash Hashed L2 transaction data that is needed to process it\n/// @param expirationTimestamp Expiration timestamp for this request (must be satisfied before)\n/// @param layer2Tip Additional payment to the validator as an incentive to perform the operation\nstruct PriorityOperation {\n    bytes32 canonicalTxHash;\n    uint64 expirationTimestamp;\n    uint192 layer2Tip;\n}\n\n/// @author Matter Labs\n/// @dev The library provides the API to interact with the priority queue container\n/// @dev Order of processing operations from queue - FIFO (Fist in - first out)\nlibrary PriorityQueue {\n    using PriorityQueue for Queue;\n\n    /// @notice Container that stores priority operations\n    /// @param data The inner mapping that saves priority operation by its index\n    /// @param head The pointer to the first unprocessed priority operation, equal to the tail if the queue is empty\n    /// @param tail The pointer to the free slot\n    struct Queue {\n        mapping(uint256 => PriorityOperation) data;\n        uint256 tail;\n        uint256 head;\n    }\n\n    /// @notice Returns zero if and only if no operations were processed from the queue\n    /// @return Index of the oldest priority operation that wasn't processed yet\n    function getFirstUnprocessedPriorityTx(Queue storage _queue) internal view returns (uint256) {\n        return _queue.head;\n    }\n\n    /// @return The total number of priority operations that were added to the priority queue, including all processed ones\n    function getTotalPriorityTxs(Queue storage _queue) internal view returns (uint256) {\n        return _queue.tail;\n    }\n\n    /// @return The total number of unprocessed priority operations in a priority queue\n    function getSize(Queue storage _queue) internal view returns (uint256) {\n        return uint256(_queue.tail - _queue.head);\n    }\n\n    /// @return Whether the priority queue contains no operations\n    function isEmpty(Queue storage _queue) internal view returns (bool) {\n        return _queue.tail == _queue.head;\n    }\n\n    /// @notice Add the priority operation to the end of the priority queue\n    function pushBack(Queue storage _queue, PriorityOperation memory _operation) internal {\n        // Save value into the stack to avoid double reading from the storage\n        uint256 tail = _queue.tail;\n\n        _queue.data[tail] = _operation;\n        _queue.tail = tail + 1;\n    }\n\n    /// @return The first unprocessed priority operation from the queue\n    function front(Queue storage _queue) internal view returns (PriorityOperation memory) {\n        require(!_queue.isEmpty(), \"D\"); // priority queue is empty\n\n        return _queue.data[_queue.head];\n    }\n\n    /// @notice Remove the first unprocessed priority operation from the queue\n    /// @return priorityOperation that was popped from the priority queue\n    function popFront(Queue storage _queue) internal returns (PriorityOperation memory priorityOperation) {\n        require(!_queue.isEmpty(), \"s\"); // priority queue is empty\n\n        // Save value into the stack to avoid double reading from the storage\n        uint256 head = _queue.head;\n\n        priorityOperation = _queue.data[head];\n        delete _queue.data[head];\n        _queue.head = head + 1;\n    }\n}\n"},"cache/solpp-generated-contracts/zksync/libraries/Merkle.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"../../common/libraries/UncheckedMath.sol\";\n\n/// @author Matter Labs\nlibrary Merkle {\n    using UncheckedMath for uint256;\n\n    /// @dev Calculate Merkle root by the provided Merkle proof.\n    /// NOTE: When using this function, check that the _path length is equal to the tree height to prevent shorter/longer paths attack\n    /// @param _path Merkle path from the leaf to the root\n    /// @param _index Leaf index in the tree\n    /// @param _itemHash Hash of leaf content\n    /// @return The Merkle root\n    function calculateRoot(\n        bytes32[] calldata _path,\n        uint256 _index,\n        bytes32 _itemHash\n    ) internal pure returns (bytes32) {\n        uint256 pathLength = _path.length;\n        require(pathLength > 0, \"xc\");\n        require(pathLength < 256, \"bt\");\n        require(_index < (1 << pathLength), \"pz\");\n\n        bytes32 currentHash = _itemHash;\n        for (uint256 i; i < pathLength; i = i.uncheckedInc()) {\n            currentHash = (_index % 2 == 0)\n                ? _efficientHash(currentHash, _path[i])\n                : _efficientHash(_path[i], currentHash);\n            _index /= 2;\n        }\n\n        return currentHash;\n    }\n\n    /// @dev Keccak hash of the concatenation of two 32-byte words\n    function _efficientHash(bytes32 _lhs, bytes32 _rhs) private pure returns (bytes32 result) {\n        assembly {\n            mstore(0x00, _lhs)\n            mstore(0x20, _rhs)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"cache/solpp-generated-contracts/vendor/AddressAliasHelper.sol":{"content":"pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2019-2021, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nlibrary AddressAliasHelper {\n    uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);\n\n    /// @notice Utility function converts the address that submitted a tx\n    /// to the inbox on L1 to the msg.sender viewed on L2\n    /// @param l1Address the address in the L1 that triggered the tx to L2\n    /// @return l2Address L2 address as viewed in msg.sender\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\n        unchecked {\n            l2Address = address(uint160(l1Address) + offset);\n        }\n    }\n\n    /// @notice Utility function that converts the msg.sender viewed on L2 to the\n    /// address that submitted a tx to the inbox on L1\n    /// @param l2Address L2 address as viewed in msg.sender\n    /// @return l1Address the address in the L1 that triggered the tx to L2\n    function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\n        unchecked {\n            l1Address = address(uint160(l2Address) - offset);\n        }\n    }\n}\n"},"cache/solpp-generated-contracts/zksync/Config.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\n/// @dev `keccak256(\"\")`\nbytes32 constant EMPTY_STRING_KECCAK = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n/// @dev Bytes in raw L2 log\n/// @dev Equal to the bytes size of the tuple - (uint8 ShardId, bool isService, uint16 txNumberInBlock, address sender, bytes32 key, bytes32 value)\nuint256 constant L2_TO_L1_LOG_SERIALIZE_SIZE = 88;\n\n/// @dev The maximum length of the bytes array with L2 -> L1 logs\nuint256 constant MAX_L2_TO_L1_LOGS_COMMITMENT_BYTES = 4 + L2_TO_L1_LOG_SERIALIZE_SIZE * 512;\n\n/// @dev L2 -> L1 logs Merkle tree height\nuint256 constant L2_TO_L1_LOG_MERKLE_TREE_HEIGHT = 9;\n\n/// @dev The value of default leaf hash for L2 -> L1 logs Merkle tree\n/// @dev An incomplete fixed-size tree is filled with this value to be a full binary tree\n/// @dev Actually equal to the `keccak256(new bytes(L2_TO_L1_LOG_SERIALIZE_SIZE))`\nbytes32 constant L2_L1_LOGS_TREE_DEFAULT_LEAF_HASH = 0x72abee45b59e344af8a6e520241c4744aff26ed411f4c4b00f8af09adada43ba;\n\n/// @dev Number of bytes in a one initial storage change\n/// @dev Equal to the bytes size of the tuple - (bytes32 key, bytes32 value)\nuint256 constant INITIAL_STORAGE_CHANGE_SERIALIZE_SIZE = 64;\n\n/// @dev The maximum length of the bytes array with initial storage changes\nuint256 constant MAX_INITIAL_STORAGE_CHANGES_COMMITMENT_BYTES = 4 + INITIAL_STORAGE_CHANGE_SERIALIZE_SIZE * 4765;\n\n/// @dev Number of bytes in a one repeated storage change\n/// @dev Equal to the bytes size of the tuple - (bytes8 key, bytes32 value)\nuint256 constant REPEATED_STORAGE_CHANGE_SERIALIZE_SIZE = 40;\n\n/// @dev The maximum length of the bytes array with repeated storage changes\nuint256 constant MAX_REPEATED_STORAGE_CHANGES_COMMITMENT_BYTES = 4 + REPEATED_STORAGE_CHANGE_SERIALIZE_SIZE * 7564;\n\n// TODO: change constant to the real root hash of empty Merkle tree (SMA-184)\nbytes32 constant DEFAULT_L2_LOGS_TREE_ROOT_HASH = bytes32(0);\n\n/// @dev Denotes the type of the zkSync transaction that came from L1.\nuint256 constant PRIORITY_OPERATION_L2_TX_TYPE = 255;\n\n/// @dev Denotes the type of the zkSync transaction that is used for system upgrades.\nuint256 constant SYSTEM_UPGRADE_L2_TX_TYPE = 254;\n\n/// @dev The amount of time in seconds the validator has to process the priority transaction\n/// NOTE: The constant is set to zero for the Alpha release period\nuint256 constant PRIORITY_EXPIRATION = 0 days;\n\n/// @dev Notice period before activation preparation status of upgrade mode (in seconds)\n/// @dev NOTE: we must reserve for users enough time to send full exit operation, wait maximum time for processing this operation and withdraw funds from it.\nuint256 constant UPGRADE_NOTICE_PERIOD = 0;\n\n/// @dev Timestamp - seconds since unix epoch\nuint256 constant COMMIT_TIMESTAMP_NOT_OLDER = 365 days;\n\n/// @dev Maximum available error between real commit block timestamp and analog used in the verifier (in seconds)\n/// @dev Must be used cause miner's `block.timestamp` value can differ on some small value (as we know - 15 seconds)\nuint256 constant COMMIT_TIMESTAMP_APPROXIMATION_DELTA = 365 days;\n\n/// @dev Bit mask to apply for verifier public input before verifying.\nuint256 constant INPUT_MASK = 452312848583266388373324160190187140051835877600158453279131187530910662655;\n\n/// @dev The maximum number of L2 gas that a user can request for an L2 transaction\nuint256 constant L2_TX_MAX_GAS_LIMIT = 80000000;\n\n/// @dev The maximum number of the pubdata an L2 operation should be allowed to use.\nuint256 constant MAX_PUBDATA_PER_BLOCK = 110000;\n\n/// @dev The maximum number of the pubdata an priority operation should be allowed to use.\n/// For now, it is somewhat lower than the maximum number of pubdata allowed for an L2 transaction,\n/// to ensure that the transaction is definitely processable on L2 despite any potential overhead.\nuint256 constant PRIORITY_TX_MAX_PUBDATA = 99000;\n\n/// @dev The default price per L2 gas to be used for L1->L2 transactions\nuint256 constant FAIR_L2_GAS_PRICE = 500000000;\n\n/// @dev Even though the price for 1 byte of pubdata is 16 L1 gas, we have a slightly increased\n/// value.\nuint256 constant L1_GAS_PER_PUBDATA_BYTE = 17;\n\n/// @dev The computational overhead of processing an L2 block.\nuint256 constant BLOCK_OVERHEAD_L2_GAS = 1200000;\n\n/// @dev The overhead in L1 gas of interacting with the L1\nuint256 constant BLOCK_OVERHEAD_L1_GAS = 1000000;\n\n/// @dev The equivalent in L1 pubdata of L1 gas used for working with L1\nuint256 constant BLOCK_OVERHEAD_PUBDATA = BLOCK_OVERHEAD_L1_GAS / L1_GAS_PER_PUBDATA_BYTE;\n\n/// @dev The maximum number of transactions in L2 block:\nuint256 constant MAX_TRANSACTIONS_IN_BLOCK = 1024;\n\n/// @dev The size of the bootloader memory dedicated to the encodings of transactions\nuint256 constant BOOTLOADER_TX_ENCODING_SPACE = 485225;\n\n/// @dev The intrinsic cost of the L1->l2 transaction in computational L2 gas\nuint256 constant L1_TX_INTRINSIC_L2_GAS = 167157;\n\n/// @dev The intrinsic cost of the L1->l2 transaction in pubdata\nuint256 constant L1_TX_INTRINSIC_PUBDATA = 88;\n\n/// @dev The minimal base price for L1 transaction\nuint256 constant L1_TX_MIN_L2_GAS_BASE = 173484;\n\n/// @dev The number of L2 gas the transaction starts costing more with each 544 bytes of encoding\nuint256 constant L1_TX_DELTA_544_ENCODING_BYTES = 1656;\n\n/// @dev The number of L2 gas an L1->L2 transaction gains with each new factory dependency\nuint256 constant L1_TX_DELTA_FACTORY_DEPS_L2_GAS = 2473;\n\n/// @dev The number of L2 gas an L1->L2 transaction gains with each new factory dependency\nuint256 constant L1_TX_DELTA_FACTORY_DEPS_PUBDATA = 64;\n\n/// @dev The number of pubdata an L1->L2 transaction requires with each new factory dependency\nuint256 constant MAX_NEW_FACTORY_DEPS = 32;\n\n/// @dev The L2 gasPricePerPubdata required to be used in bridges.\nuint256 constant REQUIRED_L2_GAS_PRICE_PER_PUBDATA = 800;\n\n/// @dev The mask which should be applied to the packed batch and L2 block timestamp in order\n/// to obtain the L2 block timestamp. Applying this mask is equivalent to calculating modulo 2**128\nuint256 constant PACKED_L2_BLOCK_TIMESTAMP_MASK = 0xffffffffffffffffffffffffffffffff;\n"},"cache/solpp-generated-contracts/common/interfaces/IAllowList.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\ninterface IAllowList {\n    /*//////////////////////////////////////////////////////////////\n                            EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Access mode of target contract is changed\n    event UpdateAccessMode(address indexed target, AccessMode previousMode, AccessMode newMode);\n\n    /// @notice Permission to call is changed\n    event UpdateCallPermission(address indexed caller, address indexed target, bytes4 indexed functionSig, bool status);\n\n    /// @notice Type of access to a specific contract includes three different modes\n    /// @param Closed No one has access to the contract\n    /// @param SpecialAccessOnly Any address with granted special access can interact with a contract (see `hasSpecialAccessToCall`)\n    /// @param Public Everyone can interact with a contract\n    enum AccessMode {\n        Closed,\n        SpecialAccessOnly,\n        Public\n    }\n\n    /// @dev A struct that contains deposit limit data of a token\n    /// @param depositLimitation Whether any deposit limitation is placed or not\n    /// @param depositCap The maximum amount that can be deposited.\n    struct Deposit {\n        bool depositLimitation;\n        uint256 depositCap;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            GETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    function getAccessMode(address _target) external view returns (AccessMode);\n\n    function hasSpecialAccessToCall(\n        address _caller,\n        address _target,\n        bytes4 _functionSig\n    ) external view returns (bool);\n\n    function canCall(\n        address _caller,\n        address _target,\n        bytes4 _functionSig\n    ) external view returns (bool);\n\n    function getTokenDepositLimitData(address _l1Token) external view returns (Deposit memory);\n\n    /*//////////////////////////////////////////////////////////////\n                           ALLOW LIST LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setBatchAccessMode(address[] calldata _targets, AccessMode[] calldata _accessMode) external;\n\n    function setAccessMode(address _target, AccessMode _accessMode) external;\n\n    function setBatchPermissionToCall(\n        address[] calldata _callers,\n        address[] calldata _targets,\n        bytes4[] calldata _functionSigs,\n        bool[] calldata _enables\n    ) external;\n\n    function setPermissionToCall(\n        address _caller,\n        address _target,\n        bytes4 _functionSig,\n        bool _enable\n    ) external;\n\n    /*//////////////////////////////////////////////////////////////\n                           DEPOSIT LIMIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setDepositLimit(\n        address _l1Token,\n        bool _depositLimitation,\n        uint256 _depositCap\n    ) external;\n}\n"},"cache/solpp-generated-contracts/zksync/facets/Mailbox.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../interfaces/IMailbox.sol\";\nimport \"../libraries/Merkle.sol\";\nimport \"../libraries/PriorityQueue.sol\";\nimport \"../libraries/TransactionValidator.sol\";\nimport \"../Storage.sol\";\nimport \"../Config.sol\";\nimport \"../../common/libraries/UncheckedMath.sol\";\nimport \"../../common/libraries/UnsafeBytes.sol\";\nimport \"../../common/libraries/L2ContractHelper.sol\";\nimport {L2_BOOTLOADER_ADDRESS, L2_TO_L1_MESSENGER_SYSTEM_CONTRACT_ADDR, L2_ETH_TOKEN_SYSTEM_CONTRACT_ADDR} from \"../../common/L2ContractAddresses.sol\";\nimport \"../../vendor/AddressAliasHelper.sol\";\nimport \"./Base.sol\";\n\n/// @title zkSync Mailbox contract providing interfaces for L1 <-> L2 interaction.\n/// @author Matter Labs\ncontract MailboxFacet is Base, IMailbox {\n    using UncheckedMath for uint256;\n    using PriorityQueue for PriorityQueue.Queue;\n\n    string public constant override getName = \"MailboxFacet\";\n\n    /// @notice Prove that a specific arbitrary-length message was sent in a specific L2 block number\n    /// @param _blockNumber The executed L2 block number in which the message appeared\n    /// @param _index The position in the L2 logs Merkle tree of the l2Log that was sent with the message\n    /// @param _message Information about the sent message: sender address, the message itself, tx index in the L2 block where the message was sent\n    /// @param _proof Merkle proof for inclusion of L2 log that was sent with the message\n    /// @return Whether the proof is valid\n    function proveL2MessageInclusion(\n        uint256 _blockNumber,\n        uint256 _index,\n        L2Message memory _message,\n        bytes32[] calldata _proof\n    ) public view returns (bool) {\n        return _proveL2LogInclusion(_blockNumber, _index, _L2MessageToLog(_message), _proof);\n    }\n\n    /// @notice Prove that a specific L2 log was sent in a specific L2 block\n    /// @param _blockNumber The executed L2 block number in which the log appeared\n    /// @param _index The position of the l2log in the L2 logs Merkle tree\n    /// @param _log Information about the sent log\n    /// @param _proof Merkle proof for inclusion of the L2 log\n    /// @return Whether the proof is correct and L2 log is included in block\n    function proveL2LogInclusion(\n        uint256 _blockNumber,\n        uint256 _index,\n        L2Log memory _log,\n        bytes32[] calldata _proof\n    ) external view returns (bool) {\n        return _proveL2LogInclusion(_blockNumber, _index, _log, _proof);\n    }\n\n    /// @notice Prove that the L1 -> L2 transaction was processed with the specified status.\n    /// @param _l2TxHash The L2 canonical transaction hash\n    /// @param _l2BlockNumber The L2 block number where the transaction was processed\n    /// @param _l2MessageIndex The position in the L2 logs Merkle tree of the l2Log that was sent with the message\n    /// @param _l2TxNumberInBlock The L2 transaction number in a block, in which the log was sent\n    /// @param _merkleProof The Merkle proof of the processing L1 -> L2 transaction\n    /// @param _status The execution status of the L1 -> L2 transaction (true - success & 0 - fail)\n    /// @return Whether the proof is correct and the transaction was actually executed with provided status\n    /// NOTE: It may return `false` for incorrect proof, but it doesn't mean that the L1 -> L2 transaction has an opposite status!\n    function proveL1ToL2TransactionStatus(\n        bytes32 _l2TxHash,\n        uint256 _l2BlockNumber,\n        uint256 _l2MessageIndex,\n        uint16 _l2TxNumberInBlock,\n        bytes32[] calldata _merkleProof,\n        TxStatus _status\n    ) public view override returns (bool) {\n        // Bootloader sends an L2 -> L1 log only after processing the L1 -> L2 transaction.\n        // Thus, we can verify that the L1 -> L2 transaction was included in the L2 block with specified status.\n        //\n        // The semantics of such L2 -> L1 log is always:\n        // - sender = L2_BOOTLOADER_ADDRESS\n        // - key = hash(L1ToL2Transaction)\n        // - value = status of the processing transaction (1 - success & 0 - fail)\n        // - isService = true (just a conventional value)\n        // - l2ShardId = 0 (means that L1 -> L2 transaction was processed in a rollup shard, other shards are not available yet anyway)\n        // - txNumberInBlock = number of transaction in the block\n        L2Log memory l2Log = L2Log({\n            l2ShardId: 0,\n            isService: true,\n            txNumberInBlock: _l2TxNumberInBlock,\n            sender: L2_BOOTLOADER_ADDRESS,\n            key: _l2TxHash,\n            value: bytes32(uint256(_status))\n        });\n        return _proveL2LogInclusion(_l2BlockNumber, _l2MessageIndex, l2Log, _merkleProof);\n    }\n\n    /// @notice Transfer ether from the contract to the receiver\n    /// @dev Reverts only if the transfer call failed\n    function _withdrawFunds(address _to, uint256 _amount) internal {\n        bool callSuccess;\n        // Low-level assembly call, to avoid any memory copying (save gas)\n        assembly {\n            callSuccess := call(gas(), _to, _amount, 0, 0, 0, 0)\n        }\n        require(callSuccess, \"pz\");\n    }\n\n    /// @dev Prove that a specific L2 log was sent in a specific L2 block number\n    function _proveL2LogInclusion(\n        uint256 _blockNumber,\n        uint256 _index,\n        L2Log memory _log,\n        bytes32[] calldata _proof\n    ) internal view returns (bool) {\n        require(_blockNumber <= s.totalBlocksExecuted, \"xx\");\n\n        bytes32 hashedLog = keccak256(\n            abi.encodePacked(_log.l2ShardId, _log.isService, _log.txNumberInBlock, _log.sender, _log.key, _log.value)\n        );\n        // Check that hashed log is not the default one,\n        // otherwise it means that the value is out of range of sent L2 -> L1 logs\n        require(hashedLog != L2_L1_LOGS_TREE_DEFAULT_LEAF_HASH, \"tw\");\n        // Check that the proof length is exactly the same as tree height, to prevent\n        // any shorter/longer paths attack on the Merkle path validation\n        require(_proof.length == L2_TO_L1_LOG_MERKLE_TREE_HEIGHT, \"rz\");\n\n        bytes32 calculatedRootHash = Merkle.calculateRoot(_proof, _index, hashedLog);\n        bytes32 actualRootHash = s.l2LogsRootHashes[_blockNumber];\n\n        return actualRootHash == calculatedRootHash;\n    }\n\n    /// @dev Convert arbitrary-length message to the raw l2 log\n    function _L2MessageToLog(L2Message memory _message) internal pure returns (L2Log memory) {\n        return\n            L2Log({\n                l2ShardId: 0,\n                isService: true,\n                txNumberInBlock: _message.txNumberInBlock,\n                sender: L2_TO_L1_MESSENGER_SYSTEM_CONTRACT_ADDR,\n                key: bytes32(uint256(uint160(_message.sender))),\n                value: keccak256(_message.data)\n            });\n    }\n\n    /// @notice Estimates the cost in Ether of requesting execution of an L2 transaction from L1\n    /// @param _gasPrice expected L1 gas price at which the user requests the transaction execution\n    /// @param _l2GasLimit Maximum amount of L2 gas that transaction can consume during execution on L2\n    /// @param _l2GasPerPubdataByteLimit The maximum amount of L2 gas that the operator may charge the user for a single byte of pubdata.\n    /// @return The estimated ETH spent on L2 gas for the transaction\n    function l2TransactionBaseCost(\n        uint256 _gasPrice,\n        uint256 _l2GasLimit,\n        uint256 _l2GasPerPubdataByteLimit\n    ) public pure returns (uint256) {\n        uint256 l2GasPrice = _deriveL2GasPrice(_gasPrice, _l2GasPerPubdataByteLimit);\n        return l2GasPrice * _l2GasLimit;\n    }\n\n    /// @notice Derives the price for L2 gas in ETH to be paid.\n    /// @param _l1GasPrice The gas price on L1.\n    /// @param _gasPricePerPubdata The price for each pubdata byte in L2 gas\n    /// @return The price of L2 gas in ETH\n    function _deriveL2GasPrice(uint256 _l1GasPrice, uint256 _gasPricePerPubdata) internal pure returns (uint256) {\n        uint256 pubdataPriceETH = L1_GAS_PER_PUBDATA_BYTE * _l1GasPrice;\n        uint256 minL2GasPriceETH = (pubdataPriceETH + _gasPricePerPubdata - 1) / _gasPricePerPubdata;\n\n        return Math.max(FAIR_L2_GAS_PRICE, minL2GasPriceETH);\n    }\n\n    /// @notice Finalize the withdrawal and release funds\n    /// @param _l2BlockNumber The L2 block number where the withdrawal was processed\n    /// @param _l2MessageIndex The position in the L2 logs Merkle tree of the l2Log that was sent with the message\n    /// @param _l2TxNumberInBlock The L2 transaction number in a block, in which the log was sent\n    /// @param _message The L2 withdraw data, stored in an L2 -> L1 message\n    /// @param _merkleProof The Merkle proof of the inclusion L2 -> L1 message about withdrawal initialization\n    function finalizeEthWithdrawal(\n        uint256 _l2BlockNumber,\n        uint256 _l2MessageIndex,\n        uint16 _l2TxNumberInBlock,\n        bytes calldata _message,\n        bytes32[] calldata _merkleProof\n    ) external override nonReentrant senderCanCallFunction(s.allowList) {\n        require(!s.isEthWithdrawalFinalized[_l2BlockNumber][_l2MessageIndex], \"jj\");\n\n        L2Message memory l2ToL1Message = L2Message({\n            txNumberInBlock: _l2TxNumberInBlock,\n            sender: L2_ETH_TOKEN_SYSTEM_CONTRACT_ADDR,\n            data: _message\n        });\n\n        (address _l1WithdrawReceiver, uint256 _amount) = _parseL2WithdrawalMessage(_message);\n\n        bool proofValid = proveL2MessageInclusion(_l2BlockNumber, _l2MessageIndex, l2ToL1Message, _merkleProof);\n        require(proofValid, \"pi\"); // Failed to verify that withdrawal was actually initialized on L2\n\n        s.isEthWithdrawalFinalized[_l2BlockNumber][_l2MessageIndex] = true;\n        _withdrawFunds(_l1WithdrawReceiver, _amount);\n\n        emit EthWithdrawalFinalized(_l1WithdrawReceiver, _amount);\n    }\n\n    /// @notice Request execution of L2 transaction from L1.\n    /// @param _contractL2 The L2 receiver address\n    /// @param _l2Value `msg.value` of L2 transaction\n    /// @param _calldata The input of the L2 transaction\n    /// @param _l2GasLimit Maximum amount of L2 gas that transaction can consume during execution on L2\n    /// @param _l2GasPerPubdataByteLimit The maximum amount L2 gas that the operator may charge the user for single byte of pubdata.\n    /// @param _factoryDeps An array of L2 bytecodes that will be marked as known on L2\n    /// @param _refundRecipient The address on L2 that will receive the refund for the transaction.\n    /// @dev If the L2 deposit finalization transaction fails, the `_refundRecipient` will receive the `_l2Value`.\n    /// Please note, the contract may change the refund recipient's address to eliminate sending funds to addresses out of control.\n    /// - If `_refundRecipient` is a contract on L1, the refund will be sent to the aliased `_refundRecipient`.\n    /// - If `_refundRecipient` is set to `address(0)` and the sender has NO deployed bytecode on L1, the refund will be sent to the `msg.sender` address.\n    /// - If `_refundRecipient` is set to `address(0)` and the sender has deployed bytecode on L1, the refund will be sent to the aliased `msg.sender` address.\n    /// @dev The address aliasing of L1 contracts as refund recipient on L2 is necessary to guarantee that the funds are controllable,\n    /// since address aliasing to the from address for the L2 tx will be applied if the L1 `msg.sender` is a contract.\n    /// Without address aliasing for L1 contracts as refund recipients they would not be able to make proper L2 tx requests\n    /// through the Mailbox to use or withdraw the funds from L2, and the funds would be lost.\n    /// @return canonicalTxHash The hash of the requested L2 transaction. This hash can be used to follow the transaction status\n    function requestL2Transaction(\n        address _contractL2,\n        uint256 _l2Value,\n        bytes calldata _calldata,\n        uint256 _l2GasLimit,\n        uint256 _l2GasPerPubdataByteLimit,\n        bytes[] calldata _factoryDeps,\n        address _refundRecipient\n    ) external payable nonReentrant senderCanCallFunction(s.allowList) returns (bytes32 canonicalTxHash) {\n        // Change the sender address if it is a smart contract to prevent address collision between L1 and L2.\n        // Please note, currently zkSync address derivation is different from Ethereum one, but it may be changed in the future.\n        address sender = msg.sender;\n        if (sender != tx.origin) {\n            sender = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\n        }\n\n        // Enforcing that `_l2GasPerPubdataByteLimit` equals to a certain constant number. This is needed\n        // to ensure that users do not get used to using \"exotic\" numbers for _l2GasPerPubdataByteLimit, e.g. 1-2, etc.\n        // VERY IMPORTANT: nobody should rely on this constant to be fixed and every contract should give their users the ability to provide the\n        // ability to provide `_l2GasPerPubdataByteLimit` for each independent transaction.\n        // CHANGING THIS CONSTANT SHOULD BE A CLIENT-SIDE CHANGE.\n        require(_l2GasPerPubdataByteLimit == REQUIRED_L2_GAS_PRICE_PER_PUBDATA, \"qp\");\n\n        // The L1 -> L2 transaction may be failed and funds will be sent to the `_refundRecipient`,\n        // so we use `msg.value` instead of `_l2Value` as the bridged amount.\n        _verifyDepositLimit(msg.sender, msg.value);\n        canonicalTxHash = _requestL2Transaction(\n            sender,\n            _contractL2,\n            _l2Value,\n            _calldata,\n            _l2GasLimit,\n            _l2GasPerPubdataByteLimit,\n            _factoryDeps,\n            false,\n            _refundRecipient\n        );\n    }\n\n    function _verifyDepositLimit(address _depositor, uint256 _amount) internal {\n        IAllowList.Deposit memory limitData = IAllowList(s.allowList).getTokenDepositLimitData(address(0)); // address(0) denotes the ETH\n        if (!limitData.depositLimitation) return; // no deposit limitation is placed for ETH\n\n        require(s.totalDepositedAmountPerUser[_depositor] + _amount <= limitData.depositCap, \"d2\");\n        s.totalDepositedAmountPerUser[_depositor] += _amount;\n    }\n\n    function _requestL2Transaction(\n        address _sender,\n        address _contractAddressL2,\n        uint256 _l2Value,\n        bytes calldata _calldata,\n        uint256 _l2GasLimit,\n        uint256 _l2GasPerPubdataByteLimit,\n        bytes[] calldata _factoryDeps,\n        bool _isFree,\n        address _refundRecipient\n    ) internal returns (bytes32 canonicalTxHash) {\n        require(_factoryDeps.length <= MAX_NEW_FACTORY_DEPS, \"uj\");\n        uint64 expirationTimestamp = uint64(block.timestamp + PRIORITY_EXPIRATION); // Safe to cast\n        uint256 txId = s.priorityQueue.getTotalPriorityTxs();\n\n        // Here we manually assign fields for the struct to prevent \"stack too deep\" error\n        WritePriorityOpParams memory params;\n\n        // Checking that the user provided enough ether to pay for the transaction.\n        // Using a new scope to prevent \"stack too deep\" error\n        {\n            params.l2GasPrice = _isFree ? 0 : _deriveL2GasPrice(tx.gasprice, _l2GasPerPubdataByteLimit);\n            uint256 baseCost = params.l2GasPrice * _l2GasLimit;\n            require(msg.value >= baseCost + _l2Value, \"mv\"); // The `msg.value` doesn't cover the transaction cost\n        }\n\n        // If the `_refundRecipient` is not provided, we use the `_sender` as the recipient.\n        address refundRecipient = _refundRecipient == address(0) ? _sender : _refundRecipient;\n        // If the `_refundRecipient` is a smart contract, we apply the L1 to L2 alias to prevent foot guns.\n        if (refundRecipient.code.length > 0) {\n            refundRecipient = AddressAliasHelper.applyL1ToL2Alias(refundRecipient);\n        }\n\n        params.sender = _sender;\n        params.txId = txId;\n        params.l2Value = _l2Value;\n        params.contractAddressL2 = _contractAddressL2;\n        params.expirationTimestamp = expirationTimestamp;\n        params.l2GasLimit = _l2GasLimit;\n        params.l2GasPricePerPubdata = _l2GasPerPubdataByteLimit;\n        params.valueToMint = msg.value;\n        params.refundRecipient = refundRecipient;\n\n        canonicalTxHash = _writePriorityOp(params, _calldata, _factoryDeps);\n    }\n\n    function _serializeL2Transaction(\n        WritePriorityOpParams memory _priorityOpParams,\n        bytes calldata _calldata,\n        bytes[] calldata _factoryDeps\n    ) internal pure returns (L2CanonicalTransaction memory transaction) {\n        transaction = L2CanonicalTransaction({\n            txType: PRIORITY_OPERATION_L2_TX_TYPE,\n            from: uint256(uint160(_priorityOpParams.sender)),\n            to: uint256(uint160(_priorityOpParams.contractAddressL2)),\n            gasLimit: _priorityOpParams.l2GasLimit,\n            gasPerPubdataByteLimit: _priorityOpParams.l2GasPricePerPubdata,\n            maxFeePerGas: uint256(_priorityOpParams.l2GasPrice),\n            maxPriorityFeePerGas: uint256(0),\n            paymaster: uint256(0),\n            // Note, that the priority operation id is used as \"nonce\" for L1->L2 transactions\n            nonce: uint256(_priorityOpParams.txId),\n            value: _priorityOpParams.l2Value,\n            reserved: [_priorityOpParams.valueToMint, uint256(uint160(_priorityOpParams.refundRecipient)), 0, 0],\n            data: _calldata,\n            signature: new bytes(0),\n            factoryDeps: _hashFactoryDeps(_factoryDeps),\n            paymasterInput: new bytes(0),\n            reservedDynamic: new bytes(0)\n        });\n    }\n\n    /// @notice Stores a transaction record in storage & send event about that\n    function _writePriorityOp(\n        WritePriorityOpParams memory _priorityOpParams,\n        bytes calldata _calldata,\n        bytes[] calldata _factoryDeps\n    ) internal returns (bytes32 canonicalTxHash) {\n        L2CanonicalTransaction memory transaction = _serializeL2Transaction(_priorityOpParams, _calldata, _factoryDeps);\n\n        bytes memory transactionEncoding = abi.encode(transaction);\n\n        TransactionValidator.validateL1ToL2Transaction(transaction, transactionEncoding, s.priorityTxMaxGasLimit);\n\n        canonicalTxHash = keccak256(transactionEncoding);\n\n        s.priorityQueue.pushBack(\n            PriorityOperation({\n                canonicalTxHash: canonicalTxHash,\n                expirationTimestamp: _priorityOpParams.expirationTimestamp,\n                layer2Tip: uint192(0) // TODO: Restore after fee modeling will be stable. (SMA-1230)\n            })\n        );\n\n        // Data that is needed for the operator to simulate priority queue offchain\n        emit NewPriorityRequest(\n            _priorityOpParams.txId,\n            canonicalTxHash,\n            _priorityOpParams.expirationTimestamp,\n            transaction,\n            _factoryDeps\n        );\n    }\n\n    /// @notice Hashes the L2 bytecodes and returns them in the format in which they are processed by the bootloader\n    function _hashFactoryDeps(bytes[] calldata _factoryDeps)\n        internal\n        pure\n        returns (uint256[] memory hashedFactoryDeps)\n    {\n        uint256 factoryDepsLen = _factoryDeps.length;\n        hashedFactoryDeps = new uint256[](factoryDepsLen);\n        for (uint256 i = 0; i < factoryDepsLen; i = i.uncheckedInc()) {\n            bytes32 hashedBytecode = L2ContractHelper.hashL2Bytecode(_factoryDeps[i]);\n\n            // Store the resulting hash sequentially in bytes.\n            assembly {\n                mstore(add(hashedFactoryDeps, mul(add(i, 1), 32)), hashedBytecode)\n            }\n        }\n    }\n\n    /// @dev Decode the withdraw message that came from L2\n    function _parseL2WithdrawalMessage(bytes memory _message)\n        internal\n        pure\n        returns (address l1Receiver, uint256 amount)\n    {\n        // We check that the message is long enough to read the data.\n        // Please note that there are two versions of the message:\n        // 1. The message that is sent by `withdraw(address _l1Receiver)`\n        // It should be equal to the length of the bytes4 function signature + address l1Receiver + uint256 amount = 4 + 20 + 32 = 56 (bytes).\n        // 2. The message that is sent by `withdrawWithMessage(address _l1Receiver, bytes calldata _additionalData)`\n        // It should be equal to the length of the following:\n        // bytes4 function signature + address l1Receiver + uint256 amount + address l2Sender + bytes _additionalData =\n        // = 4 + 20 + 32 + 32 + _additionalData.length >= 68 (bytes).\n\n        // So the data is expected to be at least 56 bytes long.\n        require(_message.length >= 56, \"pm\");\n\n        (uint32 functionSignature, uint256 offset) = UnsafeBytes.readUint32(_message, 0);\n        require(bytes4(functionSignature) == this.finalizeEthWithdrawal.selector, \"is\");\n\n        (l1Receiver, offset) = UnsafeBytes.readAddress(_message, offset);\n        (amount, offset) = UnsafeBytes.readUint256(_message, offset);\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"cache/solpp-generated-contracts/zksync/interfaces/IBase.sol":{"content":"pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: UNLICENSED\n\n\ninterface IBase {\n    function getName() external view returns (string memory);\n}\n"},"cache/solpp-generated-contracts/common/AllowListed.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"./interfaces/IAllowList.sol\";\n\n/// @author Matter Labs\nabstract contract AllowListed {\n    modifier senderCanCallFunction(IAllowList _allowList) {\n        // Preventing the stack too deep error\n        {\n            require(_allowList.canCall(msg.sender, address(this), msg.sig), \"nr\");\n        }\n        _;\n    }\n}\n"},"cache/solpp-generated-contracts/common/libraries/UnsafeBytes.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\n/**\n * @author Matter Labs\n * @dev The library provides a set of functions that help read data from an \"abi.encodePacked\" byte array.\n * @dev Each of the functions accepts the `bytes memory` and the offset where data should be read and returns a value of a certain type.\n *\n * @dev WARNING!\n * 1) Functions don't check the length of the bytes array, so it can go out of bounds.\n * The user of the library must check for bytes length before using any functions from the library!\n *\n * 2) Read variables are not cleaned up - https://docs.soliditylang.org/en/v0.8.16/internals/variable_cleanup.html.\n * Using data in inline assembly can lead to unexpected behavior!\n */\nlibrary UnsafeBytes {\n    function readUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32 result, uint256 offset) {\n        assembly {\n            offset := add(_start, 4)\n            result := mload(add(_bytes, offset))\n        }\n    }\n\n    function readAddress(bytes memory _bytes, uint256 _start) internal pure returns (address result, uint256 offset) {\n        assembly {\n            offset := add(_start, 20)\n            result := mload(add(_bytes, offset))\n        }\n    }\n\n    function readUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256 result, uint256 offset) {\n        assembly {\n            offset := add(_start, 32)\n            result := mload(add(_bytes, offset))\n        }\n    }\n\n    function readBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32 result, uint256 offset) {\n        assembly {\n            offset := add(_start, 32)\n            result := mload(add(_bytes, offset))\n        }\n    }\n}\n"},"cache/solpp-generated-contracts/common/L2ContractAddresses.sol":{"content":"pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT\n\n\n\n/// @dev The address of the L2 deployer system contract.\naddress constant L2_DEPLOYER_SYSTEM_CONTRACT_ADDR = address(0x8006);\n\n/// @dev The special reserved L2 address. It is located in the system contracts space but doesn't have deployed bytecode.\n/// @dev The L2 deployer system contract allows changing bytecodes on any address if the `msg.sender` is this address.\n/// @dev So, whenever the governor wants to redeploy system contracts, it just initiates the L1 upgrade call deployer system contract\n/// via the L1 -> L2 transaction with `sender == L2_FORCE_DEPLOYER_ADDR`. For more details see the `diamond-initializers` contracts.\naddress constant L2_FORCE_DEPLOYER_ADDR = address(0x8007);\n\n/// @dev The address of the special smart contract that can send arbitrary length message as an L2 log\naddress constant L2_TO_L1_MESSENGER_SYSTEM_CONTRACT_ADDR = address(0x8008);\n\n/// @dev The formal address of the initial program of the system: the bootloader\naddress constant L2_BOOTLOADER_ADDRESS = address(0x8001);\n\n/// @dev The address of the eth token system contract\naddress constant L2_ETH_TOKEN_SYSTEM_CONTRACT_ADDR = address(0x800a);\n\n/// @dev The address of the known code storage system contract\naddress constant L2_KNOWN_CODE_STORAGE_SYSTEM_CONTRACT_ADDR = address(0x8004);\n\n/// @dev The address of the context system contract\naddress constant L2_SYSTEM_CONTEXT_SYSTEM_CONTRACT_ADDR = address(0x800b);\n"},"cache/solpp-generated-contracts/zksync/libraries/PairingsBn254.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\nlibrary PairingsBn254 {\n    uint256 constant q_mod = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n    uint256 constant r_mod = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant bn254_b_coeff = 3;\n\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n\n    struct Fr {\n        uint256 value;\n    }\n\n    function new_fr(uint256 fr) internal pure returns (Fr memory) {\n        require(fr < r_mod);\n        return Fr({value: fr});\n    }\n\n    function copy(Fr memory self) internal pure returns (Fr memory n) {\n        n.value = self.value;\n    }\n\n    function assign(Fr memory self, Fr memory other) internal pure {\n        self.value = other.value;\n    }\n\n    function inverse(Fr memory fr) internal view returns (Fr memory) {\n        require(fr.value != 0);\n        return pow(fr, r_mod - 2);\n    }\n\n    function add_assign(Fr memory self, Fr memory other) internal pure {\n        self.value = addmod(self.value, other.value, r_mod);\n    }\n\n    function sub_assign(Fr memory self, Fr memory other) internal pure {\n        self.value = addmod(self.value, r_mod - other.value, r_mod);\n    }\n\n    function mul_assign(Fr memory self, Fr memory other) internal pure {\n        self.value = mulmod(self.value, other.value, r_mod);\n    }\n\n    function pow(Fr memory self, uint256 power) internal view returns (Fr memory) {\n        uint256[6] memory input = [32, 32, 32, self.value, power, r_mod];\n        uint256[1] memory result;\n        bool success;\n        assembly {\n            success := staticcall(gas(), 0x05, input, 0xc0, result, 0x20)\n        }\n        require(success);\n        return Fr({value: result[0]});\n    }\n\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n\n    function P1() internal pure returns (G1Point memory) {\n        return G1Point(1, 2);\n    }\n\n    function new_g1(uint256 x, uint256 y) internal pure returns (G1Point memory) {\n        return G1Point(x, y);\n    }\n\n    // function new_g1_checked(uint256 x, uint256 y) internal pure returns (G1Point memory) {\n    function new_g1_checked(uint256 x, uint256 y) internal pure returns (G1Point memory) {\n        if (x == 0 && y == 0) {\n            // point of infinity is (0,0)\n            return G1Point(x, y);\n        }\n\n        // check encoding\n        require(x < q_mod, \"x axis isn't valid\");\n        require(y < q_mod, \"y axis isn't valid\");\n        // check on curve\n        uint256 lhs = mulmod(y, y, q_mod); // y^2\n\n        uint256 rhs = mulmod(x, x, q_mod); // x^2\n        rhs = mulmod(rhs, x, q_mod); // x^3\n        rhs = addmod(rhs, bn254_b_coeff, q_mod); // x^3 + b\n        require(lhs == rhs, \"is not on curve\");\n\n        return G1Point(x, y);\n    }\n\n    function new_g2(uint256[2] memory x, uint256[2] memory y) internal pure returns (G2Point memory) {\n        return G2Point(x, y);\n    }\n\n    function copy_g1(G1Point memory self) internal pure returns (G1Point memory result) {\n        result.X = self.X;\n        result.Y = self.Y;\n    }\n\n    function P2() internal pure returns (G2Point memory) {\n        // for some reason ethereum expects to have c1*v + c0 form\n\n        return\n            G2Point(\n                [\n                    0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2,\n                    0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed\n                ],\n                [\n                    0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b,\n                    0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa\n                ]\n            );\n    }\n\n    function negate(G1Point memory self) internal pure {\n        // The prime q in the base field F_q for G1\n        if (self.Y == 0) {\n            require(self.X == 0);\n            return;\n        }\n\n        self.Y = q_mod - self.Y;\n    }\n\n    function point_add(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\n        point_add_into_dest(p1, p2, r);\n        return r;\n    }\n\n    function point_add_assign(G1Point memory p1, G1Point memory p2) internal view {\n        point_add_into_dest(p1, p2, p1);\n    }\n\n    function point_add_into_dest(\n        G1Point memory p1,\n        G1Point memory p2,\n        G1Point memory dest\n    ) internal view {\n        if (p2.X == 0 && p2.Y == 0) {\n            // we add zero, nothing happens\n            dest.X = p1.X;\n            dest.Y = p1.Y;\n            return;\n        } else if (p1.X == 0 && p1.Y == 0) {\n            // we add into zero, and we add non-zero point\n            dest.X = p2.X;\n            dest.Y = p2.Y;\n            return;\n        } else {\n            uint256[4] memory input;\n\n            input[0] = p1.X;\n            input[1] = p1.Y;\n            input[2] = p2.X;\n            input[3] = p2.Y;\n\n            bool success;\n            assembly {\n                success := staticcall(gas(), 6, input, 0x80, dest, 0x40)\n            }\n            require(success);\n        }\n    }\n\n    function point_sub_assign(G1Point memory p1, G1Point memory p2) internal view {\n        point_sub_into_dest(p1, p2, p1);\n    }\n\n    function point_sub_into_dest(\n        G1Point memory p1,\n        G1Point memory p2,\n        G1Point memory dest\n    ) internal view {\n        if (p2.X == 0 && p2.Y == 0) {\n            // we subtracted zero, nothing happens\n            dest.X = p1.X;\n            dest.Y = p1.Y;\n            return;\n        } else if (p1.X == 0 && p1.Y == 0) {\n            // we subtract from zero, and we subtract non-zero point\n            dest.X = p2.X;\n            dest.Y = q_mod - p2.Y;\n            return;\n        } else {\n            uint256[4] memory input;\n\n            input[0] = p1.X;\n            input[1] = p1.Y;\n            input[2] = p2.X;\n            input[3] = q_mod - p2.Y;\n\n            bool success = false;\n            assembly {\n                success := staticcall(gas(), 6, input, 0x80, dest, 0x40)\n            }\n            require(success);\n        }\n    }\n\n    function point_mul(G1Point memory p, Fr memory s) internal view returns (G1Point memory r) {\n        // https://eips.ethereum.org/EIPS/eip-197\n        // Elliptic curve points are encoded as a Jacobian pair (X, Y) where the point at infinity is encoded as (0, 0)\n        if (p.X == 0 && p.Y == 1) {\n            p.Y = 0;\n        }\n        point_mul_into_dest(p, s, r);\n        return r;\n    }\n\n    function point_mul_assign(G1Point memory p, Fr memory s) internal view {\n        point_mul_into_dest(p, s, p);\n    }\n\n    function point_mul_into_dest(\n        G1Point memory p,\n        Fr memory s,\n        G1Point memory dest\n    ) internal view {\n        uint256[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s.value;\n        bool success;\n        assembly {\n            success := staticcall(gas(), 7, input, 0x60, dest, 0x40)\n        }\n        require(success);\n    }\n\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\n        require(p1.length == p2.length);\n        uint256 elements = p1.length;\n        uint256 inputSize = elements * 6;\n        uint256[] memory input = new uint256[](inputSize);\n        for (uint256 i = 0; i < elements; ) {\n            input[i * 6 + 0] = p1[i].X;\n            input[i * 6 + 1] = p1[i].Y;\n            input[i * 6 + 2] = p2[i].X[0];\n            input[i * 6 + 3] = p2[i].X[1];\n            input[i * 6 + 4] = p2[i].Y[0];\n            input[i * 6 + 5] = p2[i].Y[1];\n            unchecked {\n                ++i;\n            }\n        }\n        uint256[1] memory out;\n        bool success;\n        assembly {\n            success := staticcall(gas(), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\n        }\n        require(success);\n        return out[0] != 0;\n    }\n\n    /// Convenience method for a pairing check for two pairs.\n    function pairingProd2(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](2);\n        G2Point[] memory p2 = new G2Point[](2);\n        p1[0] = a1;\n        p1[1] = b1;\n        p2[0] = a2;\n        p2[1] = b2;\n        return pairing(p1, p2);\n    }\n}\n"},"cache/solpp-generated-contracts/common/libraries/L2ContractHelper.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\n/**\n * @author Matter Labs\n * @notice Helper library for working with L2 contracts on L1.\n */\nlibrary L2ContractHelper {\n    /// @dev The prefix used to create CREATE2 addresses.\n    bytes32 constant CREATE2_PREFIX = keccak256(\"zksyncCreate2\");\n\n    /// @notice Validate the bytecode format and calculate its hash.\n    /// @param _bytecode The bytecode to hash.\n    /// @return hashedBytecode The 32-byte hash of the bytecode.\n    /// Note: The function reverts the execution if the bytecode has non expected format:\n    /// - Bytecode bytes length is not a multiple of 32\n    /// - Bytecode bytes length is not less than 2^21 bytes (2^16 words)\n    /// - Bytecode words length is not odd\n    function hashL2Bytecode(bytes memory _bytecode) internal pure returns (bytes32 hashedBytecode) {\n        // Note that the length of the bytecode must be provided in 32-byte words.\n        require(_bytecode.length % 32 == 0, \"bl\");\n\n        uint256 bytecodeLenInWords = _bytecode.length / 32;\n        require(bytecodeLenInWords < 2**16, \"pp\"); // bytecode length must be less than 2^16 words\n        require(bytecodeLenInWords % 2 == 1, \"pr\"); // bytecode length in words must be odd\n        hashedBytecode = sha256(_bytecode) & 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n        // Setting the version of the hash\n        hashedBytecode = (hashedBytecode | bytes32(uint256(1 << 248)));\n        // Setting the length\n        hashedBytecode = hashedBytecode | bytes32(bytecodeLenInWords << 224);\n    }\n\n    /// @notice Validates the format of the given bytecode hash.\n    /// @dev Due to the specification of the L2 bytecode hash, not every 32 bytes could be a legit bytecode hash.\n    /// @dev The function reverts on invalid bytecode hash formam.\n    /// @param _bytecodeHash The hash of the bytecode to validate.\n    function validateBytecodeHash(bytes32 _bytecodeHash) internal pure {\n        uint8 version = uint8(_bytecodeHash[0]);\n        require(version == 1 && _bytecodeHash[1] == bytes1(0), \"zf\"); // Incorrectly formatted bytecodeHash\n\n        require(_bytecodeLen(_bytecodeHash) % 2 == 1, \"uy\"); // Code length in words must be odd\n    }\n\n    /// @notice Returns the length of the bytecode associated with the given hash.\n    /// @param _bytecodeHash The hash of the bytecode.\n    /// @return codeLengthInWords The length of the bytecode in words.\n    function _bytecodeLen(bytes32 _bytecodeHash) private pure returns (uint256 codeLengthInWords) {\n        codeLengthInWords = uint256(uint8(_bytecodeHash[2])) * 256 + uint256(uint8(_bytecodeHash[3]));\n    }\n\n    /// @notice Computes the create2 address for a Layer 2 contract.\n    /// @param _sender The address of the sender.\n    /// @param _salt The salt value to use in the create2 address computation.\n    /// @param _bytecodeHash The contract bytecode hash.\n    /// @param _constructorInputHash The hash of the constructor input data.\n    /// @return The create2 address of the contract.\n    /// NOTE: L2 create2 derivation is different from L1 derivation!\n    function computeCreate2Address(\n        address _sender,\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        bytes32 _constructorInputHash\n    ) internal pure returns (address) {\n        bytes32 senderBytes = bytes32(uint256(uint160(_sender)));\n        bytes32 data = keccak256(\n            bytes.concat(CREATE2_PREFIX, senderBytes, _salt, _bytecodeHash, _constructorInputHash)\n        );\n\n        return address(uint160(uint256(data)));\n    }\n}\n"},"cache/solpp-generated-contracts/zksync/libraries/TransactionValidator.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../interfaces/IMailbox.sol\";\nimport \"../Config.sol\";\n\n/// @title zkSync Library for validating L1 -> L2 transactions\n/// @author Matter Labs\nlibrary TransactionValidator {\n    /// @dev Used to validate key properties of an L1->L2 transaction\n    /// @param _transaction The transaction to validate\n    /// @param _encoded The abi encoded bytes of the transaction\n    /// @param _priorityTxMaxGasLimit The max gas limit, generally provided from Storage.sol\n    function validateL1ToL2Transaction(\n        IMailbox.L2CanonicalTransaction memory _transaction,\n        bytes memory _encoded,\n        uint256 _priorityTxMaxGasLimit\n    ) internal pure {\n        uint256 l2GasForTxBody = getTransactionBodyGasLimit(\n            _transaction.gasLimit,\n            _transaction.gasPerPubdataByteLimit,\n            _encoded.length\n        );\n\n        // Ensuring that the transaction is provable\n        require(l2GasForTxBody <= _priorityTxMaxGasLimit, \"ui\");\n        // Ensuring that the transaction cannot output more pubdata than is processable\n        require(l2GasForTxBody / _transaction.gasPerPubdataByteLimit <= PRIORITY_TX_MAX_PUBDATA, \"uk\");\n\n        // Ensuring that the transaction covers the minimal costs for its processing:\n        // hashing its content, publishing the factory dependencies, etc.\n        require(\n            getMinimalPriorityTransactionGasLimit(\n                _encoded.length,\n                _transaction.factoryDeps.length,\n                _transaction.gasPerPubdataByteLimit\n            ) <= _transaction.gasLimit,\n            \"up\"\n        );\n    }\n\n    /// @dev Used to validate upgrade transactions\n    /// @param _transaction The transaction to validate\n    function validateUpgradeTransaction(IMailbox.L2CanonicalTransaction memory _transaction) internal pure {\n        // Restrict from to be within system contract range (0...2^16 - 1)\n        require(_transaction.from <= type(uint16).max, \"ua\");\n        require(_transaction.to <= type(uint160).max, \"ub\");\n        require(_transaction.paymaster == 0, \"uc\");\n        require(_transaction.value == 0, \"ud\");\n        require(_transaction.reserved[0] == 0, \"ue\");\n        require(_transaction.reserved[1] <= type(uint160).max, \"uf\");\n        require(_transaction.reserved[2] == 0, \"ug\");\n        require(_transaction.reserved[3] == 0, \"uo\");\n        require(_transaction.signature.length == 0, \"uh\");\n        require(_transaction.paymasterInput.length == 0, \"ul\");\n        require(_transaction.reservedDynamic.length == 0, \"um\");\n    }\n\n    /// @dev Calculates the approximate minimum gas limit required for executing a priority transaction.\n    /// @param _encodingLength The length of the priority transaction encoding in bytes.\n    /// @param _numberOfFactoryDependencies The number of new factory dependencies that will be added.\n    /// @param _l2GasPricePerPubdata The L2 gas price for publishing the priority transaction on L2.\n    /// @return The minimum gas limit required to execute the priority transaction.\n    /// Note: The calculation includes the main cost of the priority transaction, however, in reality, the operator can spend a little more gas on overheads.\n    function getMinimalPriorityTransactionGasLimit(\n        uint256 _encodingLength,\n        uint256 _numberOfFactoryDependencies,\n        uint256 _l2GasPricePerPubdata\n    ) internal pure returns (uint256) {\n        uint256 costForComputation;\n        {\n            // Adding the intrinsic cost for the transaction, i.e. auxiliary prices which cannot be easily accounted for\n            costForComputation = L1_TX_INTRINSIC_L2_GAS;\n\n            // Taking into account the hashing costs that depend on the length of the transaction\n            // Note that L1_TX_DELTA_544_ENCODING_BYTES is the delta in the price for every 544 bytes of\n            // the transaction's encoding. It is taken as LCM between 136 and 32 (the length for each keccak256 round\n            // and the size of each new encoding word).\n            costForComputation += Math.ceilDiv(_encodingLength * L1_TX_DELTA_544_ENCODING_BYTES, 544);\n\n            // Taking into the account the additional costs of providing new factory dependenies\n            costForComputation += _numberOfFactoryDependencies * L1_TX_DELTA_FACTORY_DEPS_L2_GAS;\n\n            // There is a minimal amount of computational L2 gas that the transaction should cover\n            costForComputation = Math.max(costForComputation, L1_TX_MIN_L2_GAS_BASE);\n        }\n\n        uint256 costForPubdata = 0;\n        {\n            // Adding the intrinsic cost for the transaction, i.e. auxilary prices which cannot be easily accounted for\n            costForPubdata = L1_TX_INTRINSIC_PUBDATA * _l2GasPricePerPubdata;\n\n            // Taking into the account the additional costs of providing new factory dependenies\n            costForPubdata += _numberOfFactoryDependencies * L1_TX_DELTA_FACTORY_DEPS_PUBDATA * _l2GasPricePerPubdata;\n        }\n\n        return costForComputation + costForPubdata;\n    }\n\n    /// @notice Based on the full L2 gas limit (that includes the block overhead) and other\n    /// properties of the transaction, returns the l2GasLimit for the body of the transaction (the actual execution).\n    /// @param _totalGasLimit The L2 gas limit that includes both the overhead for processing the block\n    /// and the L2 gas needed to process the transaction itself (i.e. the actual l2GasLimit that will be used for the transaction).\n    /// @param _gasPricePerPubdata The L2 gas price for each byte of pubdata.\n    /// @param _encodingLength The length of the ABI-encoding of the transaction.\n    function getTransactionBodyGasLimit(\n        uint256 _totalGasLimit,\n        uint256 _gasPricePerPubdata,\n        uint256 _encodingLength\n    ) internal pure returns (uint256 txBodyGasLimit) {\n        uint256 overhead = getOverheadForTransaction(_totalGasLimit, _gasPricePerPubdata, _encodingLength);\n\n        require(_totalGasLimit >= overhead, \"my\"); // provided gas limit doesn't cover transaction overhead\n        unchecked {\n            // We enforce the fact that `_totalGasLimit >= overhead` explicitly above.\n            txBodyGasLimit = _totalGasLimit - overhead;\n        }\n    }\n\n    /// @notice Based on the total L2 gas limit and several other parameters of the transaction\n    /// returns the part of the L2 gas that will be spent on the block's overhead.\n    /// @dev The details of how this function works can be checked in the documentation\n    /// of the fee model of zkSync. The appropriate comments are also present\n    /// in the Rust implementation description of function `get_maximal_allowed_overhead`.\n    /// @param _totalGasLimit The L2 gas limit that includes both the overhead for processing the block\n    /// and the L2 gas needed to process the transaction itself (i.e. the actual gasLimit that will be used for the transaction).\n    /// @param _gasPricePerPubdata The maximum amount of L2 gas that the operator may charge the user for a single byte of pubdata.\n    /// @param _encodingLength The length of the binary encoding of the transaction in bytes\n    function getOverheadForTransaction(\n        uint256 _totalGasLimit,\n        uint256 _gasPricePerPubdata,\n        uint256 _encodingLength\n    ) internal pure returns (uint256 blockOverheadForTransaction) {\n        uint256 blockOverheadGas = BLOCK_OVERHEAD_L2_GAS + BLOCK_OVERHEAD_PUBDATA * _gasPricePerPubdata;\n\n        // The overhead from taking up the transaction's slot\n        uint256 txSlotOverhead = Math.ceilDiv(blockOverheadGas, MAX_TRANSACTIONS_IN_BLOCK);\n        blockOverheadForTransaction = Math.max(blockOverheadForTransaction, txSlotOverhead);\n\n        // The overhead for occupying the bootloader memory can be derived from encoded_len\n        uint256 overheadForLength = Math.ceilDiv(_encodingLength * blockOverheadGas, BOOTLOADER_TX_ENCODING_SPACE);\n        blockOverheadForTransaction = Math.max(blockOverheadForTransaction, overheadForLength);\n\n        // The overhead for possible published public data\n        // TODO: possibly charge a separate fee for possible pubdata spending\n        // uint256 overheadForPublicData;\n        // {\n        //     uint256 numerator = (blockOverheadGas * _totalGasLimit + _gasPricePerPubdata * MAX_PUBDATA_PER_BLOCK);\n        //     uint256 denominator = (_gasPricePerPubdata * MAX_PUBDATA_PER_BLOCK + blockOverheadGas);\n\n        //     overheadForPublicData = (numerator - 1) / denominator;\n        // }\n        // blockOverheadForTransaction = Math.max(blockOverheadForTransaction, overheadForPublicData);\n\n        // The overhead for ergs that could be used to use single-instance circuits\n        uint256 overheadForGas;\n        {\n            uint256 numerator = blockOverheadGas * _totalGasLimit + L2_TX_MAX_GAS_LIMIT;\n            uint256 denominator = L2_TX_MAX_GAS_LIMIT + blockOverheadGas;\n\n            overheadForGas = (numerator - 1) / denominator;\n        }\n        blockOverheadForTransaction = Math.max(blockOverheadForTransaction, overheadForGas);\n    }\n}\n"},"cache/solpp-generated-contracts/common/ReentrancyGuard.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n *\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n * metering changes introduced in the Istanbul hardfork.\n */\nabstract contract ReentrancyGuard {\n    /// @dev Address of lock flag variable.\n    /// @dev Flag is placed at random memory location to not interfere with Storage contract.\n    uint256 private constant LOCK_FLAG_ADDRESS = 0x8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4; // keccak256(\"ReentrancyGuard\") - 1;\n\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/566a774222707e424896c0c390a84dc3c13bdcb2/contracts/security/ReentrancyGuard.sol\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    modifier reentrancyGuardInitializer() {\n        _initializeReentrancyGuard();\n        _;\n    }\n\n    function _initializeReentrancyGuard() private {\n        uint256 lockSlotOldValue;\n\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive but in exchange every call to nonReentrant\n        // will be cheaper.\n        assembly {\n            lockSlotOldValue := sload(LOCK_FLAG_ADDRESS)\n            sstore(LOCK_FLAG_ADDRESS, _NOT_ENTERED)\n        }\n\n        // Check that storage slot for reentrancy guard is empty to rule out possibility of slot conflict\n        require(lockSlotOldValue == 0, \"1B\");\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        uint256 _status;\n        assembly {\n            _status := sload(LOCK_FLAG_ADDRESS)\n        }\n\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status == _NOT_ENTERED, \"r1\");\n\n        // Any calls to nonReentrant after this point will fail\n        assembly {\n            sstore(LOCK_FLAG_ADDRESS, _ENTERED)\n        }\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        assembly {\n            sstore(LOCK_FLAG_ADDRESS, _NOT_ENTERED)\n        }\n    }\n}\n"},"cache/solpp-generated-contracts/zksync/facets/Base.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"../Storage.sol\";\nimport \"../../common/ReentrancyGuard.sol\";\nimport \"../../common/AllowListed.sol\";\n\n/// @title Base contract containing functions accessible to the other facets.\n/// @author Matter Labs\ncontract Base is ReentrancyGuard, AllowListed {\n    AppStorage internal s;\n\n    /// @notice Checks that the message sender is an active governor\n    modifier onlyGovernor() {\n        require(msg.sender == s.governor, \"1g\"); // only by governor\n        _;\n    }\n\n    /// @notice Checks if validator is active\n    modifier onlyValidator() {\n        require(s.validators[msg.sender], \"1h\"); // validator is not active\n        _;\n    }\n\n    /// @notice Checks if `msg.sender` is the security council\n    modifier onlySecurityCouncil() {\n        require(msg.sender == s.upgrades.securityCouncil, \"a9\"); // not a security council\n        _;\n    }\n}\n"},"cache/solpp-generated-contracts/zksync/interfaces/IMailbox.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport {L2Log, L2Message} from \"../Storage.sol\";\nimport \"./IBase.sol\";\n\n/// @dev The enum that represents the transaction execution status\n/// @param Failure The transaction execution failed\n/// @param Success The transaction execution succeeded\nenum TxStatus {\n    Failure,\n    Success\n}\n\ninterface IMailbox is IBase {\n    /// @dev Structure that includes all fields of the L2 transaction\n    /// @dev The hash of this structure is the \"canonical L2 transaction hash\" and can be used as a unique identifier of a tx\n    /// @param txType The tx type number, depending on which the L2 transaction can be interpreted differently\n    /// @param from The sender's address. `uint256` type for possible address format changes and maintaining backward compatibility\n    /// @param to The recipient's address. `uint256` type for possible address format changes and maintaining backward compatibility\n    /// @param gasLimit The L2 gas limit for L2 transaction. Analog to the `gasLimit` on an L1 transactions\n    /// @param gasPerPubdataByteLimit Maximum number of L2 gas that will cost one byte of pubdata (every piece of data that will be stored on L1 as calldata)\n    /// @param maxFeePerGas The absolute maximum sender willing to pay per unit of L2 gas to get the transaction included in a block. Analog to the EIP-1559 `maxFeePerGas` on an L1 transactions\n    /// @param maxPriorityFeePerGas The additional fee that is paid directly to the validator to incentivize them to include the transaction in a block. Analog to the EIP-1559 `maxPriorityFeePerGas` on an L1 transactions\n    /// @param paymaster The address of the EIP-4337 paymaster, that will pay fees for the transaction. `uint256` type for possible address format changes and maintaining backward compatibility\n    /// @param nonce The nonce of the transaction. For L1->L2 transactions it is the priority operation Id.\n    /// @param value The value to pass with the transaction\n    /// @param reserved The fixed-length fields for usage in a future extension of transaction formats\n    /// @param data The calldata that is transmitted for the transaction call\n    /// @param signature An abstract set of bytes that are used for transaction authorization\n    /// @param factoryDeps The set of L2 bytecode hashes whose preimages were shown on L1\n    /// @param paymasterInput The arbitrary-length data that is used as a calldata to the paymaster pre-call\n    /// @param reservedDynamic The arbitrary-length field for usage in a future extension of transaction formats\n    struct L2CanonicalTransaction {\n        uint256 txType;\n        uint256 from;\n        uint256 to;\n        uint256 gasLimit;\n        uint256 gasPerPubdataByteLimit;\n        uint256 maxFeePerGas;\n        uint256 maxPriorityFeePerGas;\n        uint256 paymaster;\n        uint256 nonce;\n        uint256 value;\n        // In the future, we might want to add some\n        // new fields to the struct. The `txData` struct\n        // is to be passed to account and any changes to its structure\n        // would mean a breaking change to these accounts. To prevent this,\n        // we should keep some fields as \"reserved\".\n        // It is also recommended that their length is fixed, since\n        // it would allow easier proof integration (in case we will need\n        // some special circuit for preprocessing transactions).\n        uint256[4] reserved;\n        bytes data;\n        bytes signature;\n        uint256[] factoryDeps;\n        bytes paymasterInput;\n        // Reserved dynamic type for the future use-case. Using it should be avoided,\n        // But it is still here, just in case we want to enable some additional functionality.\n        bytes reservedDynamic;\n    }\n\n    /// @dev Internal structure that contains the parameters for the writePriorityOp\n    /// internal function.\n    /// @param sender The sender's address.\n    /// @param txId The id of the priority transaction.\n    /// @param l2Value The msg.value of the L2 transaction.\n    /// @param contractAddressL2 The address of the contract on L2 to call.\n    /// @param expirationTimestamp The timestamp by which the priority operation must be processed by the operator.\n    /// @param l2GasLimit The limit of the L2 gas for the L2 transaction\n    /// @param l2GasPricePerPubdata The price for a single pubdata byte in L2 gas.\n    /// @param valueToMint The amount of ether that should be minted on L2 as the result of this transaction.\n    /// @param refundRecipient The recipient of the refund for the transaction on L2. If the transaction fails, then\n    /// this address will receive the `l2Value`.\n    struct WritePriorityOpParams {\n        address sender;\n        uint256 txId;\n        uint256 l2Value;\n        address contractAddressL2;\n        uint64 expirationTimestamp;\n        uint256 l2GasLimit;\n        uint256 l2GasPrice;\n        uint256 l2GasPricePerPubdata;\n        uint256 valueToMint;\n        address refundRecipient;\n    }\n\n    function proveL2MessageInclusion(\n        uint256 _blockNumber,\n        uint256 _index,\n        L2Message calldata _message,\n        bytes32[] calldata _proof\n    ) external view returns (bool);\n\n    function proveL2LogInclusion(\n        uint256 _blockNumber,\n        uint256 _index,\n        L2Log memory _log,\n        bytes32[] calldata _proof\n    ) external view returns (bool);\n\n    function proveL1ToL2TransactionStatus(\n        bytes32 _l2TxHash,\n        uint256 _l2BlockNumber,\n        uint256 _l2MessageIndex,\n        uint16 _l2TxNumberInBlock,\n        bytes32[] calldata _merkleProof,\n        TxStatus _status\n    ) external view returns (bool);\n\n    function finalizeEthWithdrawal(\n        uint256 _l2BlockNumber,\n        uint256 _l2MessageIndex,\n        uint16 _l2TxNumberInBlock,\n        bytes calldata _message,\n        bytes32[] calldata _merkleProof\n    ) external;\n\n    function requestL2Transaction(\n        address _contractL2,\n        uint256 _l2Value,\n        bytes calldata _calldata,\n        uint256 _l2GasLimit,\n        uint256 _l2GasPerPubdataByteLimit,\n        bytes[] calldata _factoryDeps,\n        address _refundRecipient\n    ) external payable returns (bytes32 canonicalTxHash);\n\n    function l2TransactionBaseCost(\n        uint256 _gasPrice,\n        uint256 _l2GasLimit,\n        uint256 _l2GasPerPubdataByteLimit\n    ) external view returns (uint256);\n\n    /// @notice New priority request event. Emitted when a request is placed into the priority queue\n    /// @param txId Serial number of the priority operation\n    /// @param txHash keccak256 hash of encoded transaction representation\n    /// @param expirationTimestamp Timestamp up to which priority request should be processed\n    /// @param transaction The whole transaction structure that is requested to be executed on L2\n    /// @param factoryDeps An array of bytecodes that were shown in the L1 public data. Will be marked as known bytecodes in L2\n    event NewPriorityRequest(\n        uint256 txId,\n        bytes32 txHash,\n        uint64 expirationTimestamp,\n        L2CanonicalTransaction transaction,\n        bytes[] factoryDeps\n    );\n\n    /// @notice Emitted when the withdrawal is finalized on L1 and funds are released.\n    /// @param to The address to which the funds were sent\n    /// @param amount The amount of funds that were sent\n    event EthWithdrawalFinalized(address indexed to, uint256 amount);\n}\n"},"cache/solpp-generated-contracts/zksync/libraries/TranscriptLib.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"./PairingsBn254.sol\";\n\nlibrary TranscriptLib {\n    // flip                    0xe000000000000000000000000000000000000000000000000000000000000000;\n    uint256 constant FR_MASK = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    uint32 constant DST_0 = 0;\n    uint32 constant DST_1 = 1;\n    uint32 constant DST_CHALLENGE = 2;\n\n    struct Transcript {\n        bytes32 state_0;\n        bytes32 state_1;\n        uint32 challenge_counter;\n    }\n\n    function new_transcript() internal pure returns (Transcript memory t) {\n        t.state_0 = bytes32(0);\n        t.state_1 = bytes32(0);\n        t.challenge_counter = 0;\n    }\n\n    function update_with_u256(Transcript memory self, uint256 value) internal pure {\n        bytes32 old_state_0 = self.state_0;\n        self.state_0 = keccak256(abi.encodePacked(DST_0, old_state_0, self.state_1, value));\n        self.state_1 = keccak256(abi.encodePacked(DST_1, old_state_0, self.state_1, value));\n    }\n\n    function update_with_fr(Transcript memory self, PairingsBn254.Fr memory value) internal pure {\n        update_with_u256(self, value.value);\n    }\n\n    function update_with_g1(Transcript memory self, PairingsBn254.G1Point memory p) internal pure {\n        update_with_u256(self, p.X);\n        update_with_u256(self, p.Y);\n    }\n\n    function get_challenge(Transcript memory self) internal pure returns (PairingsBn254.Fr memory challenge) {\n        bytes32 query = keccak256(abi.encodePacked(DST_CHALLENGE, self.state_0, self.state_1, self.challenge_counter));\n        self.challenge_counter += 1;\n        challenge = PairingsBn254.Fr({value: uint256(query) & FR_MASK});\n    }\n}\n"},"cache/solpp-generated-contracts/zksync/Plonk4VerifierWithAccessToDNext.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"./libraries/PairingsBn254.sol\";\nimport \"./libraries/TranscriptLib.sol\";\nimport \"../common/libraries/UncheckedMath.sol\";\n\nuint256 constant STATE_WIDTH = 4;\nuint256 constant NUM_G2_ELS = 2;\n\nstruct VerificationKey {\n    uint256 domain_size;\n    uint256 num_inputs;\n    PairingsBn254.Fr omega;\n    PairingsBn254.G1Point[2] gate_selectors_commitments;\n    PairingsBn254.G1Point[8] gate_setup_commitments;\n    PairingsBn254.G1Point[STATE_WIDTH] permutation_commitments;\n    PairingsBn254.G1Point lookup_selector_commitment;\n    PairingsBn254.G1Point[4] lookup_tables_commitments;\n    PairingsBn254.G1Point lookup_table_type_commitment;\n    PairingsBn254.Fr[STATE_WIDTH - 1] non_residues;\n    PairingsBn254.G2Point[NUM_G2_ELS] g2_elements;\n}\n\ncontract Plonk4VerifierWithAccessToDNext {\n    using PairingsBn254 for PairingsBn254.G1Point;\n    using PairingsBn254 for PairingsBn254.G2Point;\n    using PairingsBn254 for PairingsBn254.Fr;\n\n    using TranscriptLib for TranscriptLib.Transcript;\n\n    using UncheckedMath for uint256;\n\n    struct Proof {\n        uint256[] input_values;\n        // commitments\n        PairingsBn254.G1Point[STATE_WIDTH] state_polys_commitments;\n        PairingsBn254.G1Point copy_permutation_grand_product_commitment;\n        PairingsBn254.G1Point[STATE_WIDTH] quotient_poly_parts_commitments;\n        // openings\n        PairingsBn254.Fr[STATE_WIDTH] state_polys_openings_at_z;\n        PairingsBn254.Fr[1] state_polys_openings_at_z_omega;\n        PairingsBn254.Fr[1] gate_selectors_openings_at_z;\n        PairingsBn254.Fr[STATE_WIDTH - 1] copy_permutation_polys_openings_at_z;\n        PairingsBn254.Fr copy_permutation_grand_product_opening_at_z_omega;\n        PairingsBn254.Fr quotient_poly_opening_at_z;\n        PairingsBn254.Fr linearization_poly_opening_at_z;\n        // lookup commitments\n        PairingsBn254.G1Point lookup_s_poly_commitment;\n        PairingsBn254.G1Point lookup_grand_product_commitment;\n        // lookup openings\n        PairingsBn254.Fr lookup_s_poly_opening_at_z_omega;\n        PairingsBn254.Fr lookup_grand_product_opening_at_z_omega;\n        PairingsBn254.Fr lookup_t_poly_opening_at_z;\n        PairingsBn254.Fr lookup_t_poly_opening_at_z_omega;\n        PairingsBn254.Fr lookup_selector_poly_opening_at_z;\n        PairingsBn254.Fr lookup_table_type_poly_opening_at_z;\n        PairingsBn254.G1Point opening_proof_at_z;\n        PairingsBn254.G1Point opening_proof_at_z_omega;\n    }\n\n    struct PartialVerifierState {\n        PairingsBn254.Fr zero;\n        PairingsBn254.Fr alpha;\n        PairingsBn254.Fr beta;\n        PairingsBn254.Fr gamma;\n        PairingsBn254.Fr[9] alpha_values;\n        PairingsBn254.Fr eta;\n        PairingsBn254.Fr beta_lookup;\n        PairingsBn254.Fr gamma_lookup;\n        PairingsBn254.Fr beta_plus_one;\n        PairingsBn254.Fr beta_gamma;\n        PairingsBn254.Fr v;\n        PairingsBn254.Fr u;\n        PairingsBn254.Fr z;\n        PairingsBn254.Fr z_omega;\n        PairingsBn254.Fr z_minus_last_omega;\n        PairingsBn254.Fr l_0_at_z;\n        PairingsBn254.Fr l_n_minus_one_at_z;\n        PairingsBn254.Fr t;\n        PairingsBn254.G1Point tp;\n    }\n\n    function evaluate_l0_at_point(uint256 domain_size, PairingsBn254.Fr memory at)\n        internal\n        view\n        returns (PairingsBn254.Fr memory num)\n    {\n        PairingsBn254.Fr memory one = PairingsBn254.new_fr(1);\n\n        PairingsBn254.Fr memory size_fe = PairingsBn254.new_fr(domain_size);\n        PairingsBn254.Fr memory den = at.copy();\n        den.sub_assign(one);\n        den.mul_assign(size_fe);\n\n        den = den.inverse();\n\n        num = at.pow(domain_size);\n        num.sub_assign(one);\n        num.mul_assign(den);\n    }\n\n    function evaluate_lagrange_poly_out_of_domain(\n        uint256 poly_num,\n        uint256 domain_size,\n        PairingsBn254.Fr memory omega,\n        PairingsBn254.Fr memory at\n    ) internal view returns (PairingsBn254.Fr memory res) {\n        // (omega^i / N) / (X - omega^i) * (X^N - 1)\n        require(poly_num < domain_size);\n        PairingsBn254.Fr memory one = PairingsBn254.new_fr(1);\n        PairingsBn254.Fr memory omega_power = omega.pow(poly_num);\n        res = at.pow(domain_size);\n        res.sub_assign(one);\n        require(res.value != 0); // Vanishing polynomial cannot be zero at point `at`\n        res.mul_assign(omega_power);\n\n        PairingsBn254.Fr memory den = PairingsBn254.copy(at);\n        den.sub_assign(omega_power);\n        den.mul_assign(PairingsBn254.new_fr(domain_size));\n\n        den = den.inverse();\n\n        res.mul_assign(den);\n    }\n\n    function evaluate_vanishing(uint256 domain_size, PairingsBn254.Fr memory at)\n        internal\n        view\n        returns (PairingsBn254.Fr memory res)\n    {\n        res = at.pow(domain_size);\n        res.sub_assign(PairingsBn254.new_fr(1));\n    }\n\n    function initialize_transcript(Proof memory proof, VerificationKey memory vk)\n        internal\n        pure\n        returns (PartialVerifierState memory state)\n    {\n        TranscriptLib.Transcript memory transcript = TranscriptLib.new_transcript();\n\n        for (uint256 i = 0; i < vk.num_inputs; i = i.uncheckedInc()) {\n            transcript.update_with_u256(proof.input_values[i]);\n        }\n\n        for (uint256 i = 0; i < STATE_WIDTH; i = i.uncheckedInc()) {\n            transcript.update_with_g1(proof.state_polys_commitments[i]);\n        }\n\n        state.eta = transcript.get_challenge();\n        transcript.update_with_g1(proof.lookup_s_poly_commitment);\n\n        state.beta = transcript.get_challenge();\n        state.gamma = transcript.get_challenge();\n\n        transcript.update_with_g1(proof.copy_permutation_grand_product_commitment);\n        state.beta_lookup = transcript.get_challenge();\n        state.gamma_lookup = transcript.get_challenge();\n        transcript.update_with_g1(proof.lookup_grand_product_commitment);\n        state.alpha = transcript.get_challenge();\n\n        for (uint256 i = 0; i < proof.quotient_poly_parts_commitments.length; i = i.uncheckedInc()) {\n            transcript.update_with_g1(proof.quotient_poly_parts_commitments[i]);\n        }\n        state.z = transcript.get_challenge();\n\n        transcript.update_with_fr(proof.quotient_poly_opening_at_z);\n\n        for (uint256 i = 0; i < proof.state_polys_openings_at_z.length; i = i.uncheckedInc()) {\n            transcript.update_with_fr(proof.state_polys_openings_at_z[i]);\n        }\n\n        for (uint256 i = 0; i < proof.state_polys_openings_at_z_omega.length; i = i.uncheckedInc()) {\n            transcript.update_with_fr(proof.state_polys_openings_at_z_omega[i]);\n        }\n        for (uint256 i = 0; i < proof.gate_selectors_openings_at_z.length; i = i.uncheckedInc()) {\n            transcript.update_with_fr(proof.gate_selectors_openings_at_z[i]);\n        }\n        for (uint256 i = 0; i < proof.copy_permutation_polys_openings_at_z.length; i = i.uncheckedInc()) {\n            transcript.update_with_fr(proof.copy_permutation_polys_openings_at_z[i]);\n        }\n\n        state.z_omega = state.z.copy();\n        state.z_omega.mul_assign(vk.omega);\n\n        transcript.update_with_fr(proof.copy_permutation_grand_product_opening_at_z_omega);\n\n        transcript.update_with_fr(proof.lookup_t_poly_opening_at_z);\n        transcript.update_with_fr(proof.lookup_selector_poly_opening_at_z);\n        transcript.update_with_fr(proof.lookup_table_type_poly_opening_at_z);\n        transcript.update_with_fr(proof.lookup_s_poly_opening_at_z_omega);\n        transcript.update_with_fr(proof.lookup_grand_product_opening_at_z_omega);\n        transcript.update_with_fr(proof.lookup_t_poly_opening_at_z_omega);\n        transcript.update_with_fr(proof.linearization_poly_opening_at_z);\n\n        state.v = transcript.get_challenge();\n\n        transcript.update_with_g1(proof.opening_proof_at_z);\n        transcript.update_with_g1(proof.opening_proof_at_z_omega);\n\n        state.u = transcript.get_challenge();\n    }\n\n    // compute some powers of challenge alpha([alpha^1, .. alpha^8])\n    function compute_powers_of_alpha(PartialVerifierState memory state) public pure {\n        require(state.alpha.value != 0);\n        state.alpha_values[0] = PairingsBn254.new_fr(1);\n        state.alpha_values[1] = state.alpha.copy();\n        PairingsBn254.Fr memory current_alpha = state.alpha.copy();\n        for (uint256 i = 2; i < state.alpha_values.length; i = i.uncheckedInc()) {\n            current_alpha.mul_assign(state.alpha);\n            state.alpha_values[i] = current_alpha.copy();\n        }\n    }\n\n    function verify(Proof memory proof, VerificationKey memory vk) internal view returns (bool) {\n        // we initialize all challenges beforehand, we can draw each challenge in its own place\n        PartialVerifierState memory state = initialize_transcript(proof, vk);\n        if (verify_quotient_evaluation(vk, proof, state) == false) {\n            return false;\n        }\n        require(proof.state_polys_openings_at_z_omega.length == 1);\n\n        PairingsBn254.G1Point memory quotient_result = proof.quotient_poly_parts_commitments[0].copy_g1();\n        {\n            // block scope\n            PairingsBn254.Fr memory z_in_domain_size = state.z.pow(vk.domain_size);\n            PairingsBn254.Fr memory current_z = z_in_domain_size.copy();\n            PairingsBn254.G1Point memory tp;\n            // start from i =1\n            for (uint256 i = 1; i < proof.quotient_poly_parts_commitments.length; i = i.uncheckedInc()) {\n                tp = proof.quotient_poly_parts_commitments[i].copy_g1();\n                tp.point_mul_assign(current_z);\n                quotient_result.point_add_assign(tp);\n\n                current_z.mul_assign(z_in_domain_size);\n            }\n        }\n\n        Queries memory queries = prepare_queries(vk, proof, state);\n        queries.commitments_at_z[0] = quotient_result;\n        queries.values_at_z[0] = proof.quotient_poly_opening_at_z;\n        queries.commitments_at_z[1] = aggregated_linearization_commitment(vk, proof, state);\n        queries.values_at_z[1] = proof.linearization_poly_opening_at_z;\n\n        require(queries.commitments_at_z.length == queries.values_at_z.length);\n\n        PairingsBn254.G1Point memory aggregated_commitment_at_z = queries.commitments_at_z[0];\n\n        PairingsBn254.Fr memory aggregated_opening_at_z = queries.values_at_z[0];\n        PairingsBn254.Fr memory aggregation_challenge = PairingsBn254.new_fr(1);\n        PairingsBn254.G1Point memory scaled;\n        for (uint256 i = 1; i < queries.commitments_at_z.length; i = i.uncheckedInc()) {\n            aggregation_challenge.mul_assign(state.v);\n            scaled = queries.commitments_at_z[i].point_mul(aggregation_challenge);\n            aggregated_commitment_at_z.point_add_assign(scaled);\n\n            state.t = queries.values_at_z[i];\n            state.t.mul_assign(aggregation_challenge);\n            aggregated_opening_at_z.add_assign(state.t);\n        }\n\n        aggregation_challenge.mul_assign(state.v);\n\n        PairingsBn254.G1Point memory aggregated_commitment_at_z_omega = queries.commitments_at_z_omega[0].point_mul(\n            aggregation_challenge\n        );\n        PairingsBn254.Fr memory aggregated_opening_at_z_omega = queries.values_at_z_omega[0];\n        aggregated_opening_at_z_omega.mul_assign(aggregation_challenge);\n        for (uint256 i = 1; i < queries.commitments_at_z_omega.length; i = i.uncheckedInc()) {\n            aggregation_challenge.mul_assign(state.v);\n\n            scaled = queries.commitments_at_z_omega[i].point_mul(aggregation_challenge);\n            aggregated_commitment_at_z_omega.point_add_assign(scaled);\n\n            state.t = queries.values_at_z_omega[i];\n            state.t.mul_assign(aggregation_challenge);\n            aggregated_opening_at_z_omega.add_assign(state.t);\n        }\n\n        return\n            final_pairing(\n                vk.g2_elements,\n                proof,\n                state,\n                aggregated_commitment_at_z,\n                aggregated_commitment_at_z_omega,\n                aggregated_opening_at_z,\n                aggregated_opening_at_z_omega\n            );\n    }\n\n    function verify_quotient_evaluation(\n        VerificationKey memory vk,\n        Proof memory proof,\n        PartialVerifierState memory state\n    ) internal view returns (bool) {\n        uint256[] memory lagrange_poly_numbers = new uint256[](vk.num_inputs);\n        for (uint256 i = 0; i < lagrange_poly_numbers.length; i = i.uncheckedInc()) {\n            lagrange_poly_numbers[i] = i;\n        }\n        require(vk.num_inputs > 0);\n\n        PairingsBn254.Fr memory inputs_term = PairingsBn254.new_fr(0);\n        for (uint256 i = 0; i < vk.num_inputs; i = i.uncheckedInc()) {\n            state.t = evaluate_lagrange_poly_out_of_domain(i, vk.domain_size, vk.omega, state.z);\n            state.t.mul_assign(PairingsBn254.new_fr(proof.input_values[i]));\n            inputs_term.add_assign(state.t);\n        }\n        inputs_term.mul_assign(proof.gate_selectors_openings_at_z[0]);\n        PairingsBn254.Fr memory result = proof.linearization_poly_opening_at_z.copy();\n        result.add_assign(inputs_term);\n\n        // compute powers of alpha\n        compute_powers_of_alpha(state);\n        PairingsBn254.Fr memory factor = state.alpha_values[4].copy();\n        factor.mul_assign(proof.copy_permutation_grand_product_opening_at_z_omega);\n\n        // - alpha_0 * (a + perm(z) * beta + gamma)*()*(d + gamma) * z(z*omega)\n        require(proof.copy_permutation_polys_openings_at_z.length == STATE_WIDTH - 1);\n        PairingsBn254.Fr memory t; // TMP;\n        for (uint256 i = 0; i < proof.copy_permutation_polys_openings_at_z.length; i = i.uncheckedInc()) {\n            t = proof.copy_permutation_polys_openings_at_z[i].copy();\n            t.mul_assign(state.beta);\n            t.add_assign(proof.state_polys_openings_at_z[i]);\n            t.add_assign(state.gamma);\n\n            factor.mul_assign(t);\n        }\n\n        t = proof.state_polys_openings_at_z[3].copy();\n        t.add_assign(state.gamma);\n        factor.mul_assign(t);\n        result.sub_assign(factor);\n\n        // - L_0(z) * alpha_1\n        PairingsBn254.Fr memory l_0_at_z = evaluate_l0_at_point(vk.domain_size, state.z);\n        l_0_at_z.mul_assign(state.alpha_values[4 + 1]);\n        result.sub_assign(l_0_at_z);\n\n        PairingsBn254.Fr memory lookup_quotient_contrib = lookup_quotient_contribution(vk, proof, state);\n        result.add_assign(lookup_quotient_contrib);\n\n        PairingsBn254.Fr memory lhs = proof.quotient_poly_opening_at_z.copy();\n        lhs.mul_assign(evaluate_vanishing(vk.domain_size, state.z));\n        return lhs.value == result.value;\n    }\n\n    function lookup_quotient_contribution(\n        VerificationKey memory vk,\n        Proof memory proof,\n        PartialVerifierState memory state\n    ) internal view returns (PairingsBn254.Fr memory result) {\n        PairingsBn254.Fr memory t;\n\n        PairingsBn254.Fr memory one = PairingsBn254.new_fr(1);\n        state.beta_plus_one = state.beta_lookup.copy();\n        state.beta_plus_one.add_assign(one);\n        state.beta_gamma = state.beta_plus_one.copy();\n        state.beta_gamma.mul_assign(state.gamma_lookup);\n\n        // (s'*beta + gamma)*(zw')*alpha\n        t = proof.lookup_s_poly_opening_at_z_omega.copy();\n        t.mul_assign(state.beta_lookup);\n        t.add_assign(state.beta_gamma);\n        t.mul_assign(proof.lookup_grand_product_opening_at_z_omega);\n        t.mul_assign(state.alpha_values[6]);\n\n        // (z - omega^{n-1}) for this part\n        PairingsBn254.Fr memory last_omega = vk.omega.pow(vk.domain_size - 1);\n        state.z_minus_last_omega = state.z.copy();\n        state.z_minus_last_omega.sub_assign(last_omega);\n        t.mul_assign(state.z_minus_last_omega);\n        result.add_assign(t);\n\n        // - alpha_1 * L_{0}(z)\n        state.l_0_at_z = evaluate_lagrange_poly_out_of_domain(0, vk.domain_size, vk.omega, state.z);\n        t = state.l_0_at_z.copy();\n        t.mul_assign(state.alpha_values[6 + 1]);\n        result.sub_assign(t);\n\n        // - alpha_2 * beta_gamma_powered L_{n-1}(z)\n        PairingsBn254.Fr memory beta_gamma_powered = state.beta_gamma.pow(vk.domain_size - 1);\n        state.l_n_minus_one_at_z = evaluate_lagrange_poly_out_of_domain(\n            vk.domain_size - 1,\n            vk.domain_size,\n            vk.omega,\n            state.z\n        );\n        t = state.l_n_minus_one_at_z.copy();\n        t.mul_assign(beta_gamma_powered);\n        t.mul_assign(state.alpha_values[6 + 2]);\n\n        result.sub_assign(t);\n    }\n\n    function aggregated_linearization_commitment(\n        VerificationKey memory vk,\n        Proof memory proof,\n        PartialVerifierState memory state\n    ) internal view returns (PairingsBn254.G1Point memory result) {\n        // qMain*(Q_a * A + Q_b * B + Q_c * C + Q_d * D + Q_m * A*B + Q_const + Q_dNext * D_next)\n        result = PairingsBn254.new_g1(0, 0);\n        // Q_a * A\n        PairingsBn254.G1Point memory scaled = vk.gate_setup_commitments[0].point_mul(\n            proof.state_polys_openings_at_z[0]\n        );\n        result.point_add_assign(scaled);\n        // Q_b * B\n        scaled = vk.gate_setup_commitments[1].point_mul(proof.state_polys_openings_at_z[1]);\n        result.point_add_assign(scaled);\n        // Q_c * C\n        scaled = vk.gate_setup_commitments[2].point_mul(proof.state_polys_openings_at_z[2]);\n        result.point_add_assign(scaled);\n        // Q_d * D\n        scaled = vk.gate_setup_commitments[3].point_mul(proof.state_polys_openings_at_z[3]);\n        result.point_add_assign(scaled);\n        // Q_m* A*B or Q_ab*A*B\n        PairingsBn254.Fr memory t = proof.state_polys_openings_at_z[0].copy();\n        t.mul_assign(proof.state_polys_openings_at_z[1]);\n        scaled = vk.gate_setup_commitments[4].point_mul(t);\n        result.point_add_assign(scaled);\n        // Q_AC* A*C\n        t = proof.state_polys_openings_at_z[0].copy();\n        t.mul_assign(proof.state_polys_openings_at_z[2]);\n        scaled = vk.gate_setup_commitments[5].point_mul(t);\n        result.point_add_assign(scaled);\n        // Q_const\n        result.point_add_assign(vk.gate_setup_commitments[6]);\n        // Q_dNext * D_next\n        scaled = vk.gate_setup_commitments[7].point_mul(proof.state_polys_openings_at_z_omega[0]);\n        result.point_add_assign(scaled);\n        result.point_mul_assign(proof.gate_selectors_openings_at_z[0]);\n\n        PairingsBn254.G1Point\n            memory rescue_custom_gate_linearization_contrib = rescue_custom_gate_linearization_contribution(\n                vk,\n                proof,\n                state\n            );\n        result.point_add_assign(rescue_custom_gate_linearization_contrib);\n        require(vk.non_residues.length == STATE_WIDTH - 1);\n\n        PairingsBn254.Fr memory one = PairingsBn254.new_fr(1);\n        PairingsBn254.Fr memory factor = state.alpha_values[4].copy();\n        for (uint256 i = 0; i < proof.state_polys_openings_at_z.length; ) {\n            t = state.z.copy();\n            if (i == 0) {\n                t.mul_assign(one);\n            } else {\n                t.mul_assign(vk.non_residues[i - 1]);\n            }\n            t.mul_assign(state.beta);\n            t.add_assign(state.gamma);\n            t.add_assign(proof.state_polys_openings_at_z[i]);\n\n            factor.mul_assign(t);\n            unchecked {\n                ++i;\n            }\n        }\n\n        scaled = proof.copy_permutation_grand_product_commitment.point_mul(factor);\n        result.point_add_assign(scaled);\n\n        // - (a(z) + beta*perm_a + gamma)*()*()*z(z*omega) * beta * perm_d(X)\n        factor = state.alpha_values[4].copy();\n        factor.mul_assign(state.beta);\n        factor.mul_assign(proof.copy_permutation_grand_product_opening_at_z_omega);\n        for (uint256 i = 0; i < STATE_WIDTH - 1; i = i.uncheckedInc()) {\n            t = proof.copy_permutation_polys_openings_at_z[i].copy();\n            t.mul_assign(state.beta);\n            t.add_assign(state.gamma);\n            t.add_assign(proof.state_polys_openings_at_z[i]);\n\n            factor.mul_assign(t);\n        }\n        scaled = vk.permutation_commitments[3].point_mul(factor);\n        result.point_sub_assign(scaled);\n\n        // + L_0(z) * Z(x)\n        state.l_0_at_z = evaluate_lagrange_poly_out_of_domain(0, vk.domain_size, vk.omega, state.z);\n        require(state.l_0_at_z.value != 0);\n        factor = state.l_0_at_z.copy();\n        factor.mul_assign(state.alpha_values[4 + 1]);\n        scaled = proof.copy_permutation_grand_product_commitment.point_mul(factor);\n        result.point_add_assign(scaled);\n\n        PairingsBn254.G1Point memory lookup_linearization_contrib = lookup_linearization_contribution(proof, state);\n        result.point_add_assign(lookup_linearization_contrib);\n    }\n\n    function rescue_custom_gate_linearization_contribution(\n        VerificationKey memory vk,\n        Proof memory proof,\n        PartialVerifierState memory state\n    ) public view returns (PairingsBn254.G1Point memory result) {\n        PairingsBn254.Fr memory t;\n        PairingsBn254.Fr memory intermediate_result;\n\n        // a^2 - b = 0\n        t = proof.state_polys_openings_at_z[0].copy();\n        t.mul_assign(t);\n        t.sub_assign(proof.state_polys_openings_at_z[1]);\n        // t.mul_assign(challenge1);\n        t.mul_assign(state.alpha_values[1]);\n        intermediate_result.add_assign(t);\n\n        // b^2 - c = 0\n        t = proof.state_polys_openings_at_z[1].copy();\n        t.mul_assign(t);\n        t.sub_assign(proof.state_polys_openings_at_z[2]);\n        t.mul_assign(state.alpha_values[1 + 1]);\n        intermediate_result.add_assign(t);\n\n        // c*a - d = 0;\n        t = proof.state_polys_openings_at_z[2].copy();\n        t.mul_assign(proof.state_polys_openings_at_z[0]);\n        t.sub_assign(proof.state_polys_openings_at_z[3]);\n        t.mul_assign(state.alpha_values[1 + 2]);\n        intermediate_result.add_assign(t);\n\n        result = vk.gate_selectors_commitments[1].point_mul(intermediate_result);\n    }\n\n    function lookup_linearization_contribution(Proof memory proof, PartialVerifierState memory state)\n        internal\n        view\n        returns (PairingsBn254.G1Point memory result)\n    {\n        PairingsBn254.Fr memory zero = PairingsBn254.new_fr(0);\n\n        PairingsBn254.Fr memory t;\n        PairingsBn254.Fr memory factor;\n        // s(x) from the Z(x*omega)*(\\gamma*(1 + \\beta) + s(x) + \\beta * s(x*omega)))\n        factor = proof.lookup_grand_product_opening_at_z_omega.copy();\n        factor.mul_assign(state.alpha_values[6]);\n        factor.mul_assign(state.z_minus_last_omega);\n\n        PairingsBn254.G1Point memory scaled = proof.lookup_s_poly_commitment.point_mul(factor);\n        result.point_add_assign(scaled);\n\n        // Z(x) from - alpha_0 * Z(x) * (\\beta + 1) * (\\gamma + f(x)) * (\\gamma(1 + \\beta) + t(x) + \\beta * t(x*omega))\n        // + alpha_1 * Z(x) * L_{0}(z) + alpha_2 * Z(x) * L_{n-1}(z)\n\n        // accumulate coefficient\n        factor = proof.lookup_t_poly_opening_at_z_omega.copy();\n        factor.mul_assign(state.beta_lookup);\n        factor.add_assign(proof.lookup_t_poly_opening_at_z);\n        factor.add_assign(state.beta_gamma);\n\n        // (\\gamma + f(x))\n        PairingsBn254.Fr memory f_reconstructed;\n        PairingsBn254.Fr memory current = PairingsBn254.new_fr(1);\n        PairingsBn254.Fr memory tmp0;\n        for (uint256 i = 0; i < STATE_WIDTH - 1; i = i.uncheckedInc()) {\n            tmp0 = proof.state_polys_openings_at_z[i].copy();\n            tmp0.mul_assign(current);\n            f_reconstructed.add_assign(tmp0);\n\n            current.mul_assign(state.eta);\n        }\n\n        // add type of table\n        t = proof.lookup_table_type_poly_opening_at_z.copy();\n        t.mul_assign(current);\n        f_reconstructed.add_assign(t);\n\n        f_reconstructed.mul_assign(proof.lookup_selector_poly_opening_at_z);\n        f_reconstructed.add_assign(state.gamma_lookup);\n\n        // end of (\\gamma + f(x)) part\n        factor.mul_assign(f_reconstructed);\n        factor.mul_assign(state.beta_plus_one);\n        t = zero.copy();\n        t.sub_assign(factor);\n        factor = t;\n        factor.mul_assign(state.alpha_values[6]);\n\n        // Multiply by (z - omega^{n-1})\n        factor.mul_assign(state.z_minus_last_omega);\n\n        // L_{0}(z) in front of Z(x)\n        t = state.l_0_at_z.copy();\n        t.mul_assign(state.alpha_values[6 + 1]);\n        factor.add_assign(t);\n\n        // L_{n-1}(z) in front of Z(x)\n        t = state.l_n_minus_one_at_z.copy();\n        t.mul_assign(state.alpha_values[6 + 2]);\n        factor.add_assign(t);\n\n        scaled = proof.lookup_grand_product_commitment.point_mul(factor);\n        result.point_add_assign(scaled);\n    }\n\n    struct Queries {\n        PairingsBn254.G1Point[13] commitments_at_z;\n        PairingsBn254.Fr[13] values_at_z;\n        PairingsBn254.G1Point[6] commitments_at_z_omega;\n        PairingsBn254.Fr[6] values_at_z_omega;\n    }\n\n    function prepare_queries(\n        VerificationKey memory vk,\n        Proof memory proof,\n        PartialVerifierState memory state\n    ) public view returns (Queries memory queries) {\n        // we set first two items in calee side so start idx from 2\n        uint256 idx = 2;\n        for (uint256 i = 0; i < STATE_WIDTH; i = i.uncheckedInc()) {\n            queries.commitments_at_z[idx] = proof.state_polys_commitments[i];\n            queries.values_at_z[idx] = proof.state_polys_openings_at_z[i];\n            idx = idx.uncheckedInc();\n        }\n        require(proof.gate_selectors_openings_at_z.length == 1);\n        queries.commitments_at_z[idx] = vk.gate_selectors_commitments[0];\n        queries.values_at_z[idx] = proof.gate_selectors_openings_at_z[0];\n        idx = idx.uncheckedInc();\n        for (uint256 i = 0; i < STATE_WIDTH - 1; i = i.uncheckedInc()) {\n            queries.commitments_at_z[idx] = vk.permutation_commitments[i];\n            queries.values_at_z[idx] = proof.copy_permutation_polys_openings_at_z[i];\n            idx = idx.uncheckedInc();\n        }\n\n        queries.commitments_at_z_omega[0] = proof.copy_permutation_grand_product_commitment;\n        queries.commitments_at_z_omega[1] = proof.state_polys_commitments[STATE_WIDTH - 1];\n\n        queries.values_at_z_omega[0] = proof.copy_permutation_grand_product_opening_at_z_omega;\n        queries.values_at_z_omega[1] = proof.state_polys_openings_at_z_omega[0];\n\n        PairingsBn254.G1Point memory lookup_t_poly_commitment_aggregated = vk.lookup_tables_commitments[0];\n        PairingsBn254.Fr memory current_eta = state.eta.copy();\n        for (uint256 i = 1; i < vk.lookup_tables_commitments.length; i = i.uncheckedInc()) {\n            state.tp = vk.lookup_tables_commitments[i].point_mul(current_eta);\n            lookup_t_poly_commitment_aggregated.point_add_assign(state.tp);\n\n            current_eta.mul_assign(state.eta);\n        }\n        queries.commitments_at_z[idx] = lookup_t_poly_commitment_aggregated;\n        queries.values_at_z[idx] = proof.lookup_t_poly_opening_at_z;\n        idx = idx.uncheckedInc();\n        queries.commitments_at_z[idx] = vk.lookup_selector_commitment;\n        queries.values_at_z[idx] = proof.lookup_selector_poly_opening_at_z;\n        idx = idx.uncheckedInc();\n        queries.commitments_at_z[idx] = vk.lookup_table_type_commitment;\n        queries.values_at_z[idx] = proof.lookup_table_type_poly_opening_at_z;\n        queries.commitments_at_z_omega[2] = proof.lookup_s_poly_commitment;\n        queries.values_at_z_omega[2] = proof.lookup_s_poly_opening_at_z_omega;\n        queries.commitments_at_z_omega[3] = proof.lookup_grand_product_commitment;\n        queries.values_at_z_omega[3] = proof.lookup_grand_product_opening_at_z_omega;\n        queries.commitments_at_z_omega[4] = lookup_t_poly_commitment_aggregated;\n        queries.values_at_z_omega[4] = proof.lookup_t_poly_opening_at_z_omega;\n    }\n\n    function final_pairing(\n        // VerificationKey memory vk,\n        PairingsBn254.G2Point[NUM_G2_ELS] memory g2_elements,\n        Proof memory proof,\n        PartialVerifierState memory state,\n        PairingsBn254.G1Point memory aggregated_commitment_at_z,\n        PairingsBn254.G1Point memory aggregated_commitment_at_z_omega,\n        PairingsBn254.Fr memory aggregated_opening_at_z,\n        PairingsBn254.Fr memory aggregated_opening_at_z_omega\n    ) internal view returns (bool) {\n        // q(x) = f(x) - f(z) / (x - z)\n        // q(x) * (x-z)  = f(x) - f(z)\n\n        // f(x)\n        PairingsBn254.G1Point memory pair_with_generator = aggregated_commitment_at_z.copy_g1();\n        aggregated_commitment_at_z_omega.point_mul_assign(state.u);\n        pair_with_generator.point_add_assign(aggregated_commitment_at_z_omega);\n\n        // - f(z)*g\n        PairingsBn254.Fr memory aggregated_value = aggregated_opening_at_z_omega.copy();\n        aggregated_value.mul_assign(state.u);\n        aggregated_value.add_assign(aggregated_opening_at_z);\n        PairingsBn254.G1Point memory tp = PairingsBn254.P1().point_mul(aggregated_value);\n        pair_with_generator.point_sub_assign(tp);\n\n        // +z * q(x)\n        tp = proof.opening_proof_at_z.point_mul(state.z);\n        PairingsBn254.Fr memory t = state.z_omega.copy();\n        t.mul_assign(state.u);\n        PairingsBn254.G1Point memory t1 = proof.opening_proof_at_z_omega.point_mul(t);\n        tp.point_add_assign(t1);\n        pair_with_generator.point_add_assign(tp);\n\n        // rhs\n        PairingsBn254.G1Point memory pair_with_x = proof.opening_proof_at_z_omega.point_mul(state.u);\n        pair_with_x.point_add_assign(proof.opening_proof_at_z);\n        pair_with_x.negate();\n        // Pairing precompile expects points to be in a `i*x[1] + x[0]` form instead of `x[0] + i*x[1]`\n        // so we handle it in code generation step\n        PairingsBn254.G2Point memory first_g2 = g2_elements[0];\n        PairingsBn254.G2Point memory second_g2 = g2_elements[1];\n\n        return PairingsBn254.pairingProd2(pair_with_generator, first_g2, pair_with_x, second_g2);\n    }\n}\n"},"cache/solpp-generated-contracts/zksync/Storage.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"./Verifier.sol\";\nimport \"../common/interfaces/IAllowList.sol\";\nimport \"./libraries/PriorityQueue.sol\";\n\n/// @notice Indicates whether an upgrade is initiated and if yes what type\n/// @param None Upgrade is NOT initiated\n/// @param Transparent Fully transparent upgrade is initiated, upgrade data is publicly known\n/// @param Shadow Shadow upgrade is initiated, upgrade data is hidden\nenum UpgradeState {\n    None,\n    Transparent,\n    Shadow\n}\n\n/// @dev Logically separated part of the storage structure, which is responsible for everything related to proxy upgrades and diamond cuts\n/// @param proposedUpgradeHash The hash of the current upgrade proposal, zero if there is no active proposal\n/// @param state Indicates whether an upgrade is initiated and if yes what type\n/// @param securityCouncil Address which has the permission to approve instant upgrades (expected to be a Gnosis multisig)\n/// @param approvedBySecurityCouncil Indicates whether the security council has approved the upgrade\n/// @param proposedUpgradeTimestamp The timestamp when the upgrade was proposed, zero if there are no active proposals\n/// @param currentProposalId The serial number of proposed upgrades, increments when proposing a new one\nstruct UpgradeStorage {\n    bytes32 proposedUpgradeHash;\n    UpgradeState state;\n    address securityCouncil;\n    bool approvedBySecurityCouncil;\n    uint40 proposedUpgradeTimestamp;\n    uint40 currentProposalId;\n}\n\n/// @dev The log passed from L2\n/// @param l2ShardId The shard identifier, 0 - rollup, 1 - porter. All other values are not used but are reserved for the future\n/// @param isService A boolean flag that is part of the log along with `key`, `value`, and `sender` address.\n/// This field is required formally but does not have any special meaning.\n/// @param txNumberInBlock The L2 transaction number in a block, in which the log was sent\n/// @param sender The L2 address which sent the log\n/// @param key The 32 bytes of information that was sent in the log\n/// @param value The 32 bytes of information that was sent in the log\n// Both `key` and `value` are arbitrary 32-bytes selected by the log sender\nstruct L2Log {\n    uint8 l2ShardId;\n    bool isService;\n    uint16 txNumberInBlock;\n    address sender;\n    bytes32 key;\n    bytes32 value;\n}\n\n/// @dev An arbitrary length message passed from L2\n/// @notice Under the hood it is `L2Log` sent from the special system L2 contract\n/// @param txNumberInBlock The L2 transaction number in a block, in which the message was sent\n/// @param sender The address of the L2 account from which the message was passed\n/// @param data An arbitrary length message\nstruct L2Message {\n    uint16 txNumberInBlock;\n    address sender;\n    bytes data;\n}\n\n/// @notice Part of the configuration parameters of ZKP circuits\nstruct VerifierParams {\n    bytes32 recursionNodeLevelVkHash;\n    bytes32 recursionLeafLevelVkHash;\n    bytes32 recursionCircuitsSetVksHash;\n}\n\n/// @dev storing all storage variables for zkSync facets\n/// NOTE: It is used in a proxy, so it is possible to add new variables to the end\n/// but NOT to modify already existing variables or change their order.\n/// NOTE: variables prefixed with '__DEPRECATED_' are deprecated and shouldn't be used.\n/// Their presence is maintained for compatibility and to prevent storage collision.\nstruct AppStorage {\n    /// @dev Storage of variables needed for deprecated diamond cut facet\n    uint256[7] __DEPRECATED_diamondCutStorage;\n    /// @notice Address which will exercise governance over the network i.e. change validator set, conduct upgrades\n    address governor;\n    /// @notice Address that the governor proposed as one that will replace it\n    address pendingGovernor;\n    /// @notice List of permitted validators\n    mapping(address => bool) validators;\n    /// @dev Verifier contract. Used to verify aggregated proof for blocks\n    Verifier verifier;\n    /// @notice Total number of executed blocks i.e. blocks[totalBlocksExecuted] points at the latest executed block (block 0 is genesis)\n    uint256 totalBlocksExecuted;\n    /// @notice Total number of proved blocks i.e. blocks[totalBlocksProved] points at the latest proved block\n    uint256 totalBlocksVerified;\n    /// @notice Total number of committed blocks i.e. blocks[totalBlocksCommitted] points at the latest committed block\n    uint256 totalBlocksCommitted;\n    /// @dev Stored hashed StoredBlock for block number\n    mapping(uint256 => bytes32) storedBlockHashes;\n    /// @dev Stored root hashes of L2 -> L1 logs\n    mapping(uint256 => bytes32) l2LogsRootHashes;\n    /// @dev Container that stores transactions requested from L1\n    PriorityQueue.Queue priorityQueue;\n    /// @dev The smart contract that manages the list with permission to call contract functions\n    IAllowList allowList;\n    /// @notice Part of the configuration parameters of ZKP circuits. Used as an input for the verifier smart contract\n    VerifierParams verifierParams;\n    /// @notice Bytecode hash of bootloader program.\n    /// @dev Used as an input to zkp-circuit.\n    bytes32 l2BootloaderBytecodeHash;\n    /// @notice Bytecode hash of default account (bytecode for EOA).\n    /// @dev Used as an input to zkp-circuit.\n    bytes32 l2DefaultAccountBytecodeHash;\n    /// @dev Indicates that the porter may be touched on L2 transactions.\n    /// @dev Used as an input to zkp-circuit.\n    bool zkPorterIsAvailable;\n    /// @dev The maximum number of the L2 gas that a user can request for L1 -> L2 transactions\n    /// @dev This is the maximum number of L2 gas that is available for the \"body\" of the transaction, i.e.\n    /// without overhead for proving the block.\n    uint256 priorityTxMaxGasLimit;\n    /// @dev Storage of variables needed for upgrade facet\n    UpgradeStorage upgrades;\n    /// @dev A mapping L2 block number => message number => flag.\n    /// @dev The L2 -> L1 log is sent for every withdrawal, so this mapping is serving as\n    /// a flag to indicate that the message was already processed.\n    /// @dev Used to indicate that eth withdrawal was already processed\n    mapping(uint256 => mapping(uint256 => bool)) isEthWithdrawalFinalized;\n    /// @dev The most recent withdrawal time and amount reset\n    uint256 __DEPRECATED_lastWithdrawalLimitReset;\n    /// @dev The accumulated withdrawn amount during the withdrawal limit window\n    uint256 __DEPRECATED_withdrawnAmountInWindow;\n    /// @dev A mapping user address => the total deposited amount by the user\n    mapping(address => uint256) totalDepositedAmountPerUser;\n    /// @dev Stores the protocol version. Note, that the protocol version may not only encompass changes to the\n    /// smart contracts, but also to the node behavior.\n    uint256 protocolVersion;\n    /// @dev Hash of the system contract upgrade transaction. If 0, then no upgrade transaction needs to be done.\n    bytes32 l2SystemContractsUpgradeTxHash;\n    /// @dev Block number where the upgrade transaction has happened. If 0, then no upgrade transaction has happened yet.\n    uint256 l2SystemContractsUpgradeBlockNumber;\n}\n"},"cache/solpp-generated-contracts/common/libraries/UncheckedMath.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\nlibrary UncheckedMath {\n    function uncheckedInc(uint256 _number) internal pure returns (uint256) {\n        unchecked {\n            return _number + 1;\n        }\n    }\n\n    function uncheckedAdd(uint256 _lhs, uint256 _rhs) internal pure returns (uint256) {\n        unchecked {\n            return _lhs + _rhs;\n        }\n    }\n}\n"},"cache/solpp-generated-contracts/zksync/Verifier.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"./Plonk4VerifierWithAccessToDNext.sol\";\nimport \"../common/libraries/UncheckedMath.sol\";\n\ncontract Verifier is Plonk4VerifierWithAccessToDNext {\n    using UncheckedMath for uint256;\n\n    function get_verification_key() public pure returns (VerificationKey memory vk) {\n        vk.num_inputs = 1;\n        vk.domain_size = 67108864;\n        vk.omega = PairingsBn254.new_fr(0x1dba8b5bdd64ef6ce29a9039aca3c0e524395c43b9227b96c75090cc6cc7ec97);\n        // coefficients\n        vk.gate_setup_commitments[0] = PairingsBn254.new_g1(\n            0x14c289d746e37aa82ec428491881c4732766492a8bc2e8e3cca2000a40c0ea27,\n            0x2f617a7eb9808ad9843d1e080b7cfbf99d61bb1b02076c905f31adb12731bc41\n        );\n        vk.gate_setup_commitments[1] = PairingsBn254.new_g1(\n            0x210b5cc8e6a85d63b65b701b8fb5ad24ff9c41f923432de17fe4ebae04526a8c,\n            0x05c10ab17ea731b2b87fb890fa5b10bd3d6832917a616b807a9b640888ebc731\n        );\n        vk.gate_setup_commitments[2] = PairingsBn254.new_g1(\n            0x29d4d14adcfe67a2ac690d6369db6b75e82d8ab3124bc4fa1dd145f41ca6949c,\n            0x004f6cd229373f1c1f735ccf49aef6a5c32025bc36c3328596dd0db7d87bef67\n        );\n        vk.gate_setup_commitments[3] = PairingsBn254.new_g1(\n            0x06d15382e8cabae9f98374a9fbdadd424f48e24da7e4c65bf710fd7d7d59a05a,\n            0x22e438ad5c51673879ce17073a3d2d29327a97dc3ce61c4f88540e00087695f6\n        );\n        vk.gate_setup_commitments[4] = PairingsBn254.new_g1(\n            0x274a668dfc485cf192d0086f214146d9e02b3040a5a586df344c53c16a87882b,\n            0x15f5bb7ad01f162b70fc77c8ea456d67d15a6ce98acbbfd521222810f8ec0a66\n        );\n        vk.gate_setup_commitments[5] = PairingsBn254.new_g1(\n            0x0ba53bf4fb0446927857e33978d02abf45948fc68f4091394ae0827a22cf1e47,\n            0x0720d818751ce5b3f11c716e925f60df4679ea90bed516499bdec066f5ff108f\n        );\n        vk.gate_setup_commitments[6] = PairingsBn254.new_g1(\n            0x2e986ba2ea495e5ec6af532980b1dc567f1430bfa82f8de07c12fc097c0e0483,\n            0x1555d189f6164e82d78de1b8313c2e923e616b3c8ed0e350c3b61c94516d0b58\n        );\n        vk.gate_setup_commitments[7] = PairingsBn254.new_g1(\n            0x0925959592604ca73c917f9b2e029aa2563c318ddcc5ca29c11badb7b880127b,\n            0x2b4a430fcb2fa7d6d67d6c358e01cf0524c7df7e1e56442f65b39bc1a1052367\n        );\n        // gate selectors\n        vk.gate_selectors_commitments[0] = PairingsBn254.new_g1(\n            0x28f2a0a95af79ba67e9dd1986bd3190199f661b710a693fc82fb395c126edcbd,\n            0x0db75db5de5192d1ba1c24710fc00da16fa8029ac7fe82d855674dcd6d090e05\n        );\n        vk.gate_selectors_commitments[1] = PairingsBn254.new_g1(\n            0x143471a174dfcb2d9cb5ae621e519387bcc93c9dcfc011160b2f5c5f88e32cbe,\n            0x2a0194c0224c3d964223a96c4c99e015719bc879125aa0df3f0715d154e71a31\n        );\n        // permutation\n        vk.permutation_commitments[0] = PairingsBn254.new_g1(\n            0x1423fa82e00ba22c280181afb12c56eea541933eeb5ec39119b0365b6beab4b9,\n            0x0efdcd3423a38f5e2ecf8c7e4fd46f13189f8fed392ad9d8d393e8ba568b06e4\n        );\n        vk.permutation_commitments[1] = PairingsBn254.new_g1(\n            0x0e9b5b12c1090d62224e64aa1696c009aa59a9c3eec458e781fae773e1f4eca5,\n            0x1fe3df508c7e9750eb37d9cae5e7437ad11a21fa36530ff821b407b165a79a55\n        );\n        vk.permutation_commitments[2] = PairingsBn254.new_g1(\n            0x25d1a714bd1e258f196e38d6b2826153382c2d04b870d0b7ec250296005129ae,\n            0x0883a121b41ca7beaa9de97ecf4417e62aa2eeb9434f24ddacbfed57cbf016a8\n        );\n        vk.permutation_commitments[3] = PairingsBn254.new_g1(\n            0x2f3ede68e854a6b3b14589851cf077a606e2aeb3205c43cc579b7abae39d8f58,\n            0x178ccd4b1f78fd79ee248e376b6fc8297d5450900d1e15e8c03e3ed2c171ac8c\n        );\n        // lookup table commitments\n        vk.lookup_selector_commitment = PairingsBn254.new_g1(\n            0x1f814e2d87c332e964eeef94ec695eef9d2caaac58b682a43da5107693b06f30,\n            0x196d56fb01907e66af9303886fd95328d398e5b2b72906882a9d12c1718e2ee2\n        );\n        vk.lookup_tables_commitments[0] = PairingsBn254.new_g1(\n            0x0ebe0de4a2f39df3b903da484c1641ffdffb77ff87ce4f9508c548659eb22d3c,\n            0x12a3209440242d5662729558f1017ed9dcc08fe49a99554dd45f5f15da5e4e0b\n        );\n        vk.lookup_tables_commitments[1] = PairingsBn254.new_g1(\n            0x1b7d54f8065ca63bed0bfbb9280a1011b886d07e0c0a26a66ecc96af68c53bf9,\n            0x2c51121fff5b8f58c302f03c74e0cb176ae5a1d1730dec4696eb9cce3fe284ca\n        );\n        vk.lookup_tables_commitments[2] = PairingsBn254.new_g1(\n            0x0138733c5faa9db6d4b8df9748081e38405999e511fb22d40f77cf3aef293c44,\n            0x269bee1c1ac28053238f7fe789f1ea2e481742d6d16ae78ed81e87c254af0765\n        );\n        vk.lookup_tables_commitments[3] = PairingsBn254.new_g1(\n            0x1b1be7279d59445065a95f01f16686adfa798ec4f1e6845ffcec9b837e88372e,\n            0x057c90cb96d8259238ed86b05f629efd55f472a721efeeb56926e979433e6c0e\n        );\n        vk.lookup_table_type_commitment = PairingsBn254.new_g1(\n            0x2f85df2d6249ccbcc11b91727333cc800459de6ee274f29c657c8d56f6f01563,\n            0x088e1df178c47116a69c3c8f6d0c5feb530e2a72493694a623b1cceb7d44a76c\n        );\n        // non residues\n        vk.non_residues[0] = PairingsBn254.new_fr(0x0000000000000000000000000000000000000000000000000000000000000005);\n        vk.non_residues[1] = PairingsBn254.new_fr(0x0000000000000000000000000000000000000000000000000000000000000007);\n        vk.non_residues[2] = PairingsBn254.new_fr(0x000000000000000000000000000000000000000000000000000000000000000a);\n\n        // g2 elements\n        vk.g2_elements[0] = PairingsBn254.new_g2(\n            [\n                0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2,\n                0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed\n            ],\n            [\n                0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b,\n                0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa\n            ]\n        );\n        vk.g2_elements[1] = PairingsBn254.new_g2(\n            [\n                0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1,\n                0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0\n            ],\n            [\n                0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4,\n                0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55\n            ]\n        );\n    }\n\n    function deserialize_proof(uint256[] calldata public_inputs, uint256[] calldata serialized_proof)\n        internal\n        pure\n        returns (Proof memory proof)\n    {\n        require(serialized_proof.length == 44);\n        proof.input_values = new uint256[](public_inputs.length);\n        for (uint256 i = 0; i < public_inputs.length; i = i.uncheckedInc()) {\n            proof.input_values[i] = public_inputs[i];\n        }\n\n        uint256 j;\n        for (uint256 i = 0; i < STATE_WIDTH; i = i.uncheckedInc()) {\n            proof.state_polys_commitments[i] = PairingsBn254.new_g1_checked(\n                serialized_proof[j],\n                serialized_proof[j.uncheckedInc()]\n            );\n\n            j = j.uncheckedAdd(2);\n        }\n        proof.copy_permutation_grand_product_commitment = PairingsBn254.new_g1_checked(\n            serialized_proof[j],\n            serialized_proof[j.uncheckedInc()]\n        );\n        j = j.uncheckedAdd(2);\n\n        proof.lookup_s_poly_commitment = PairingsBn254.new_g1_checked(\n            serialized_proof[j],\n            serialized_proof[j.uncheckedInc()]\n        );\n        j = j.uncheckedAdd(2);\n\n        proof.lookup_grand_product_commitment = PairingsBn254.new_g1_checked(\n            serialized_proof[j],\n            serialized_proof[j.uncheckedInc()]\n        );\n        j = j.uncheckedAdd(2);\n        for (uint256 i = 0; i < proof.quotient_poly_parts_commitments.length; i = i.uncheckedInc()) {\n            proof.quotient_poly_parts_commitments[i] = PairingsBn254.new_g1_checked(\n                serialized_proof[j],\n                serialized_proof[j.uncheckedInc()]\n            );\n            j = j.uncheckedAdd(2);\n        }\n\n        for (uint256 i = 0; i < proof.state_polys_openings_at_z.length; i = i.uncheckedInc()) {\n            proof.state_polys_openings_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);\n\n            j = j.uncheckedInc();\n        }\n\n        for (uint256 i = 0; i < proof.state_polys_openings_at_z_omega.length; i = i.uncheckedInc()) {\n            proof.state_polys_openings_at_z_omega[i] = PairingsBn254.new_fr(serialized_proof[j]);\n\n            j = j.uncheckedInc();\n        }\n        for (uint256 i = 0; i < proof.gate_selectors_openings_at_z.length; i = i.uncheckedInc()) {\n            proof.gate_selectors_openings_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);\n\n            j = j.uncheckedInc();\n        }\n        for (uint256 i = 0; i < proof.copy_permutation_polys_openings_at_z.length; i = i.uncheckedInc()) {\n            proof.copy_permutation_polys_openings_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);\n\n            j = j.uncheckedInc();\n        }\n        proof.copy_permutation_grand_product_opening_at_z_omega = PairingsBn254.new_fr(serialized_proof[j]);\n\n        j = j.uncheckedInc();\n        proof.lookup_s_poly_opening_at_z_omega = PairingsBn254.new_fr(serialized_proof[j]);\n        j = j.uncheckedInc();\n        proof.lookup_grand_product_opening_at_z_omega = PairingsBn254.new_fr(serialized_proof[j]);\n\n        j = j.uncheckedInc();\n        proof.lookup_t_poly_opening_at_z = PairingsBn254.new_fr(serialized_proof[j]);\n\n        j = j.uncheckedInc();\n        proof.lookup_t_poly_opening_at_z_omega = PairingsBn254.new_fr(serialized_proof[j]);\n        j = j.uncheckedInc();\n        proof.lookup_selector_poly_opening_at_z = PairingsBn254.new_fr(serialized_proof[j]);\n        j = j.uncheckedInc();\n        proof.lookup_table_type_poly_opening_at_z = PairingsBn254.new_fr(serialized_proof[j]);\n        j = j.uncheckedInc();\n        proof.quotient_poly_opening_at_z = PairingsBn254.new_fr(serialized_proof[j]);\n        j = j.uncheckedInc();\n        proof.linearization_poly_opening_at_z = PairingsBn254.new_fr(serialized_proof[j]);\n        j = j.uncheckedInc();\n        proof.opening_proof_at_z = PairingsBn254.new_g1_checked(\n            serialized_proof[j],\n            serialized_proof[j.uncheckedInc()]\n        );\n        j = j.uncheckedAdd(2);\n        proof.opening_proof_at_z_omega = PairingsBn254.new_g1_checked(\n            serialized_proof[j],\n            serialized_proof[j.uncheckedInc()]\n        );\n    }\n\n    function verify_serialized_proof(uint256[] calldata public_inputs, uint256[] calldata serialized_proof)\n        public\n        view\n        returns (bool)\n    {\n        VerificationKey memory vk = get_verification_key();\n        require(vk.num_inputs == public_inputs.length);\n\n        Proof memory proof = deserialize_proof(public_inputs, serialized_proof);\n\n        return verify(proof, vk);\n    }\n}\n"}},"settings":{"libraries":{},"optimizer":{"enabled":true,"runs":9999999},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthWithdrawalFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPerPubdataByteLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymaster\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"reserved\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"factoryDeps\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"paymasterInput\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"reservedDynamic\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IMailbox.L2CanonicalTransaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"factoryDeps\",\"type\":\"bytes[]\"}],\"name\":\"NewPriorityRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2BlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2MessageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_l2TxNumberInBlock\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"finalizeEthWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2GasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2GasPerPubdataByteLimit\",\"type\":\"uint256\"}],\"name\":\"l2TransactionBaseCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_l2TxHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_l2BlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2MessageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_l2TxNumberInBlock\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"enum TxStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"proveL1ToL2TransactionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"l2ShardId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isService\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"txNumberInBlock\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"struct L2Log\",\"name\":\"_log\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"proveL2LogInclusion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"txNumberInBlock\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct L2Message\",\"name\":\"_message\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"proveL2MessageInclusion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractL2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2Value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_l2GasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2GasPerPubdataByteLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_factoryDeps\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_refundRecipient\",\"type\":\"address\"}],\"name\":\"requestL2Transaction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"canonicalTxHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"MailboxFacet","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":1,"Runs":9999999,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}