{"expiry":1699582635,"data":[{"SourceCode":{"language":"Solidity","sources":{"xMPL.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.8.7;\n\n/**\n *  @title  xMPL\n *  @author lucas-manuel, JGCarv, deluca-mike, edag94, vbidin\n *  @notice This contract contains functionality to facilitate on-chain distribution\n *          of protocol revenues denominated in MPL tokens. xMPL inherits the core\n *          functionality from Maple's Revenue Distribution Token, which allows\n *          users to lock assets to earn rewards distributions based on a vesting\n *          schedule, with the added functionality to perform a one time asset\n *          migration of the underlying token.\n *  @dev    This code was deployed at commit 9604d297132503cb05d74f2998c18b07f345ecc0\n *          (https://github.com/maple-labs/xMPL/releases/tag/v1.0.1).\n */\n\n/// @title Interface of the ERC20 standard as defined in the EIP, including EIP-2612 permit functionality.\ninterface IERC20 {\n\n    /**************/\n    /*** Events ***/\n    /**************/\n\n    /**\n     *  @dev   Emitted when one account has set the allowance of another account over their tokens.\n     *  @param owner_   Account that tokens are approved from.\n     *  @param spender_ Account that tokens are approved for.\n     *  @param amount_  Amount of tokens that have been approved.\n     */\n    event Approval(address indexed owner_, address indexed spender_, uint256 amount_);\n\n    /**\n     *  @dev   Emitted when tokens have moved from one account to another.\n     *  @param owner_     Account that tokens have moved from.\n     *  @param recipient_ Account that tokens have moved to.\n     *  @param amount_    Amount of tokens that have been transferred.\n     */\n    event Transfer(address indexed owner_, address indexed recipient_, uint256 amount_);\n\n    /**************************/\n    /*** External Functions ***/\n    /**************************/\n\n    /**\n     *  @dev    Function that allows one account to set the allowance of another account over their tokens.\n     *          Emits an {Approval} event.\n     *  @param  spender_ Account that tokens are approved for.\n     *  @param  amount_  Amount of tokens that have been approved.\n     *  @return success_ Boolean indicating whether the operation succeeded.\n     */\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\n\n    /**\n     *  @dev    Function that allows one account to decrease the allowance of another account over their tokens.\n     *          Emits an {Approval} event.\n     *  @param  spender_          Account that tokens are approved for.\n     *  @param  subtractedAmount_ Amount to decrease approval by.\n     *  @return success_          Boolean indicating whether the operation succeeded.\n     */\n    function decreaseAllowance(address spender_, uint256 subtractedAmount_) external returns (bool success_);\n\n    /**\n     *  @dev    Function that allows one account to increase the allowance of another account over their tokens.\n     *          Emits an {Approval} event.\n     *  @param  spender_     Account that tokens are approved for.\n     *  @param  addedAmount_ Amount to increase approval by.\n     *  @return success_     Boolean indicating whether the operation succeeded.\n     */\n    function increaseAllowance(address spender_, uint256 addedAmount_) external returns (bool success_);\n\n    /**\n     *  @dev   Approve by signature.\n     *  @param owner_    Owner address that signed the permit.\n     *  @param spender_  Spender of the permit.\n     *  @param amount_   Permit approval spend limit.\n     *  @param deadline_ Deadline after which the permit is invalid.\n     *  @param v_        ECDSA signature v component.\n     *  @param r_        ECDSA signature r component.\n     *  @param s_        ECDSA signature s component.\n     */\n    function permit(address owner_, address spender_, uint amount_, uint deadline_, uint8 v_, bytes32 r_, bytes32 s_) external;\n\n    /**\n     *  @dev    Moves an amount of tokens from `msg.sender` to a specified account.\n     *          Emits a {Transfer} event.\n     *  @param  recipient_ Account that receives tokens.\n     *  @param  amount_    Amount of tokens that are transferred.\n     *  @return success_   Boolean indicating whether the operation succeeded.\n     */\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\n\n    /**\n     *  @dev    Moves a pre-approved amount of tokens from a sender to a specified account.\n     *          Emits a {Transfer} event.\n     *          Emits an {Approval} event.\n     *  @param  owner_     Account that tokens are moving from.\n     *  @param  recipient_ Account that receives tokens.\n     *  @param  amount_    Amount of tokens that are transferred.\n     *  @return success_   Boolean indicating whether the operation succeeded.\n     */\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\n\n    /**********************/\n    /*** View Functions ***/\n    /**********************/\n\n    /**\n     *  @dev    Returns the allowance that one account has given another over their tokens.\n     *  @param  owner_     Account that tokens are approved from.\n     *  @param  spender_   Account that tokens are approved for.\n     *  @return allowance_ Allowance that one account has given another over their tokens.\n     */\n    function allowance(address owner_, address spender_) external view returns (uint256 allowance_);\n\n    /**\n     *  @dev    Returns the amount of tokens owned by a given account.\n     *  @param  account_ Account that owns the tokens.\n     *  @return balance_ Amount of tokens owned by a given account.\n     */\n    function balanceOf(address account_) external view returns (uint256 balance_);\n\n    /**\n     *  @dev    Returns the decimal precision used by the token.\n     *  @return decimals_ The decimal precision used by the token.\n     */\n    function decimals() external view returns (uint8 decimals_);\n\n    /**\n     *  @dev    Returns the signature domain separator.\n     *  @return domainSeparator_ The signature domain separator.\n     */\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator_);\n\n    /**\n     *  @dev    Returns the name of the token.\n     *  @return name_ The name of the token.\n     */\n    function name() external view returns (string memory name_);\n\n    /**\n      *  @dev    Returns the nonce for the given owner.\n      *  @param  owner_  The address of the owner account.\n      *  @return nonce_ The nonce for the given owner.\n     */\n    function nonces(address owner_) external view returns (uint256 nonce_);\n\n    /**\n     *  @dev    Returns the permit type hash.\n     *  @return permitTypehash_ The permit type hash.\n     */\n    function PERMIT_TYPEHASH() external view returns (bytes32 permitTypehash_);\n\n    /**\n     *  @dev    Returns the symbol of the token.\n     *  @return symbol_ The symbol of the token.\n     */\n    function symbol() external view returns (string memory symbol_);\n\n    /**\n     *  @dev    Returns the total amount of tokens in existence.\n     *  @return totalSupply_ The total amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256 totalSupply_);\n\n}\n\n/// @title Small Library to standardize ERC20 token interactions.\nlibrary ERC20Helper {\n\n    /**************************/\n    /*** Internal Functions ***/\n    /**************************/\n\n    function transfer(address token_, address to_, uint256 amount_) internal returns (bool success_) {\n        return _call(token_, abi.encodeWithSelector(IERC20.transfer.selector, to_, amount_));\n    }\n\n    function transferFrom(address token_, address from_, address to_, uint256 amount_) internal returns (bool success_) {\n        return _call(token_, abi.encodeWithSelector(IERC20.transferFrom.selector, from_, to_, amount_));\n    }\n\n    function approve(address token_, address spender_, uint256 amount_) internal returns (bool success_) {\n        // If setting approval to zero fails, return false.\n        if (!_call(token_, abi.encodeWithSelector(IERC20.approve.selector, spender_, uint256(0)))) return false;\n\n        // If `amount_` is zero, return true as the previous step already did this.\n        if (amount_ == uint256(0)) return true;\n\n        // Return the result of setting the approval to `amount_`.\n        return _call(token_, abi.encodeWithSelector(IERC20.approve.selector, spender_, amount_));\n    }\n\n    function _call(address token_, bytes memory data_) private returns (bool success_) {\n        if (token_.code.length == uint256(0)) return false;\n\n        bytes memory returnData;\n        ( success_, returnData ) = token_.call(data_);\n\n        return success_ && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\n    }\n\n}\n\n/// @title Token migrator contract to migrate MPL tokens after a timelock.\ncontract Migrator {\n\n    address public immutable newToken;\n    address public immutable oldToken;\n\n    constructor(address oldToken_, address newToken_) {\n        require(IERC20(newToken_).decimals() == IERC20(oldToken_).decimals(), \"M:C:DECIMAL_MISMATCH\");\n\n        oldToken = oldToken_;\n        newToken = newToken_;\n    }\n\n    function migrate(uint256 amount_) external {\n        migrate(msg.sender, amount_);\n    }\n\n    function migrate(address owner_, uint256 amount_) public {\n        require(amount_ != uint256(0),                                              \"M:M:ZERO_AMOUNT\");\n        require(ERC20Helper.transferFrom(oldToken, owner_, address(this), amount_), \"M:M:TRANSFER_FROM_FAILED\");\n        require(ERC20Helper.transfer(newToken, owner_, amount_),                    \"M:M:TRANSFER_FAILED\");\n    }\n\n}\n\n/*\n    ███████╗██████╗  ██████╗    ██████╗  ██████╗\n    ██╔════╝██╔══██╗██╔════╝    ╚════██╗██╔═████╗\n    █████╗  ██████╔╝██║          █████╔╝██║██╔██║\n    ██╔══╝  ██╔══██╗██║         ██╔═══╝ ████╔╝██║\n    ███████╗██║  ██║╚██████╗    ███████╗╚██████╔╝\n    ╚══════╝╚═╝  ╚═╝ ╚═════╝    ╚══════╝ ╚═════╝\n*/\n\n/**\n *  @title Modern ERC-20 implementation.\n *  @dev   Acknowledgements to Solmate, OpenZeppelin, and DSS for inspiring this code.\n */\ncontract ERC20 is IERC20 {\n\n    /**************/\n    /*** ERC-20 ***/\n    /**************/\n\n    string public override name;\n    string public override symbol;\n\n    uint8 public immutable override decimals;\n\n    uint256 public override totalSupply;\n\n    mapping(address => uint256) public override balanceOf;\n\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    /****************/\n    /*** ERC-2612 ***/\n    /****************/\n\n    // PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n\n    mapping(address => uint256) public override nonces;\n\n    /**\n     *  @param name_     The name of the token.\n     *  @param symbol_   The symbol of the token.\n     *  @param decimals_ The decimal precision used by the token.\n     */\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        name     = name_;\n        symbol   = symbol_;\n        decimals = decimals_;\n    }\n\n    /**************************/\n    /*** External Functions ***/\n    /**************************/\n\n    function approve(address spender_, uint256 amount_) external override returns (bool success_) {\n        _approve(msg.sender, spender_, amount_);\n        return true;\n    }\n\n    function decreaseAllowance(address spender_, uint256 subtractedAmount_) external override returns (bool success_) {\n        _decreaseAllowance(msg.sender, spender_, subtractedAmount_);\n        return true;\n    }\n\n    function increaseAllowance(address spender_, uint256 addedAmount_) external override returns (bool success_) {\n        _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedAmount_);\n        return true;\n    }\n\n    function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external override {\n        require(deadline_ >= block.timestamp, \"ERC20:P:EXPIRED\");\n\n        // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}.\n        require(\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&\n            (v_ == 27 || v_ == 28),\n            \"ERC20:P:MALLEABLE\"\n        );\n\n        // Nonce realistically cannot overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v_, r_, s_);\n\n            require(recoveredAddress == owner_ && owner_ != address(0), \"ERC20:P:INVALID_SIGNATURE\");\n        }\n\n        _approve(owner_, spender_, amount_);\n    }\n\n    function transfer(address recipient_, uint256 amount_) external override returns (bool success_) {\n        _transfer(msg.sender, recipient_, amount_);\n        return true;\n    }\n\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {\n        _decreaseAllowance(owner_, msg.sender, amount_);\n        _transfer(owner_, recipient_, amount_);\n        return true;\n    }\n\n    /**********************/\n    /*** View Functions ***/\n    /**********************/\n\n    function DOMAIN_SEPARATOR() public view override returns (bytes32 domainSeparator_) {\n        return keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                block.chainid,\n                address(this)\n            )\n        );\n    }\n\n    /**************************/\n    /*** Internal Functions ***/\n    /**************************/\n\n    function _approve(address owner_, address spender_, uint256 amount_) internal {\n        emit Approval(owner_, spender_, allowance[owner_][spender_] = amount_);\n    }\n\n    function _burn(address owner_, uint256 amount_) internal {\n        balanceOf[owner_] -= amount_;\n\n        // Cannot underflow because a user's balance will never be larger than the total supply.\n        unchecked { totalSupply -= amount_; }\n\n        emit Transfer(owner_, address(0), amount_);\n    }\n\n    function _decreaseAllowance(address owner_, address spender_, uint256 subtractedAmount_) internal {\n        uint256 spenderAllowance = allowance[owner_][spender_];  // Cache to memory.\n\n        if (spenderAllowance != type(uint256).max) {\n            _approve(owner_, spender_, spenderAllowance - subtractedAmount_);\n        }\n    }\n\n    function _mint(address recipient_, uint256 amount_) internal {\n        totalSupply += amount_;\n\n        // Cannot overflow because totalSupply would first overflow in the statement above.\n        unchecked { balanceOf[recipient_] += amount_; }\n\n        emit Transfer(address(0), recipient_, amount_);\n    }\n\n    function _transfer(address owner_, address recipient_, uint256 amount_) internal {\n        balanceOf[owner_] -= amount_;\n\n        // Cannot overflow because minting prevents overflow of totalSupply, and sum of user balances == totalSupply.\n        unchecked { balanceOf[recipient_] += amount_; }\n\n        emit Transfer(owner_, recipient_, amount_);\n    }\n\n}\n\n/// @title A standard for tokenized Vaults with a single underlying ERC-20 token.\ninterface IERC4626 is IERC20 {\n\n    /**************/\n    /*** Events ***/\n    /**************/\n\n    /**\n     *  @dev   `caller_` has exchanged `assets_` for `shares_` and transferred them to `owner_`.\n     *         MUST be emitted when assets are deposited via the `deposit` or `mint` methods.\n     *  @param caller_ The caller of the function that emitted the `Deposit` event.\n     *  @param owner_  The owner of the shares.\n     *  @param assets_ The amount of assets deposited.\n     *  @param shares_ The amount of shares minted.\n     */\n    event Deposit(address indexed caller_, address indexed owner_, uint256 assets_, uint256 shares_);\n\n    /**\n     *  @dev   `caller_` has exchanged `shares_`, owned by `owner_`, for `assets_`, and transferred them to `receiver_`.\n     *         MUST be emitted when assets are withdrawn via the `withdraw` or `redeem` methods.\n     *  @param caller_   The caller of the function that emitted the `Withdraw` event.\n     *  @param receiver_ The receiver of the assets.\n     *  @param owner_    The owner of the shares.\n     *  @param assets_   The amount of assets withdrawn.\n     *  @param shares_   The amount of shares burned.\n     */\n    event Withdraw(address indexed caller_, address indexed receiver_, address indexed owner_, uint256 assets_, uint256 shares_);\n\n    /***********************/\n    /*** State Variables ***/\n    /***********************/\n\n    /**\n     *  @dev    The address of the underlying asset used by the Vault.\n     *          MUST be a contract that implements the ERC-20 standard.\n     *          MUST NOT revert.\n     *  @return asset_ The address of the underlying asset.\n     */\n    function asset() external view returns (address asset_);\n\n    /********************************/\n    /*** State Changing Functions ***/\n    /********************************/\n\n    /**\n     *  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.\n     *          MUST emit the {Deposit} event.\n     *          MUST revert if all of the assets cannot be deposited (due to insufficient approval, deposit limits, slippage, etc).\n     *  @param  assets_   The amount of assets to deposit.\n     *  @param  receiver_ The receiver of the shares.\n     *  @return shares_   The amount of shares minted.\n     */\n    function deposit(uint256 assets_, address receiver_) external returns (uint256 shares_);\n\n    /**\n     *  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.\n     *          MUST emit the {Deposit} event.\n     *          MUST revert if all of shares cannot be minted (due to insufficient approval, deposit limits, slippage, etc).\n     *  @param  shares_   The amount of shares to mint.\n     *  @param  receiver_ The receiver of the shares.\n     *  @return assets_   The amount of assets deposited.\n     */\n    function mint(uint256 shares_, address receiver_) external returns (uint256 assets_);\n\n    /**\n     *  @dev    Burns `shares_` from `owner_` and sends `assets_` to `receiver_`.\n     *          MUST emit the {Withdraw} event.\n     *          MUST revert if all of the shares cannot be redeemed (due to insufficient shares, withdrawal limits, slippage, etc).\n     *  @param  shares_   The amount of shares to redeem.\n     *  @param  receiver_ The receiver of the assets.\n     *  @param  owner_    The owner of the shares.\n     *  @return assets_   The amount of assets sent to the receiver.\n     */\n    function redeem(uint256 shares_, address receiver_, address owner_) external returns (uint256 assets_);\n\n    /**\n     *  @dev    Burns `shares_` from `owner_` and sends `assets_` to `receiver_`.\n     *          MUST emit the {Withdraw} event.\n     *          MUST revert if all of the assets cannot be withdrawn (due to insufficient assets, withdrawal limits, slippage, etc).\n     *  @param  assets_   The amount of assets to withdraw.\n     *  @param  receiver_ The receiver of the assets.\n     *  @param  owner_    The owner of the assets.\n     *  @return shares_   The amount of shares burned from the owner.\n     */\n    function withdraw(uint256 assets_, address receiver_, address owner_) external returns (uint256 shares_);\n\n    /**********************/\n    /*** View Functions ***/\n    /**********************/\n\n    /**\n     *  @dev    The amount of `assets_` the `shares_` are currently equivalent to.\n     *          MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     *          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.\n     *          MUST NOT show any variations depending on the caller.\n     *          MUST NOT revert.\n     *  @param  shares_ The amount of shares to convert.\n     *  @return assets_ The amount of equivalent assets.\n     */\n    function convertToAssets(uint256 shares_) external view returns (uint256 assets_);\n\n    /**\n     *  @dev    The amount of `shares_` the `assets_` are currently equivalent to.\n     *          MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     *          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.\n     *          MUST NOT show any variations depending on the caller.\n     *          MUST NOT revert.\n     *  @param  assets_ The amount of assets to convert.\n     *  @return shares_ The amount of equivalent shares.\n     */\n    function convertToShares(uint256 assets_) external view returns (uint256 shares_);\n\n    /**\n     *  @dev    Maximum amount of `assets_` that can be deposited on behalf of the `receiver_` through a `deposit` call.\n     *          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.\n     *          MUST NOT revert.\n     *  @param  receiver_ The receiver of the assets.\n     *  @return assets_   The maximum amount of assets that can be deposited.\n     */\n    function maxDeposit(address receiver_) external view returns (uint256 assets_);\n\n    /**\n     *  @dev    Maximum amount of `shares_` that can be minted on behalf of the `receiver_` through a `mint` call.\n     *          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.\n     *          MUST NOT revert.\n     *  @param  receiver_ The receiver of the shares.\n     *  @return shares_   The maximum amount of shares that can be minted.\n     */\n    function maxMint(address receiver_) external view returns (uint256 shares_);\n\n    /**\n     *  @dev    Maximum amount of `shares_` that can be redeemed from the `owner_` through a `redeem` call.\n     *          MUST return a limited value if the owner is subject to any limits, or the total amount of owned shares otherwise.\n     *          MUST NOT revert.\n     *  @param  owner_  The owner of the shares.\n     *  @return shares_ The maximum amount of shares that can be redeemed.\n     */\n    function maxRedeem(address owner_) external view returns (uint256 shares_);\n\n    /**\n     *  @dev    Maximum amount of `assets_` that can be withdrawn from the `owner_` through a `withdraw` call.\n     *          MUST return a limited value if the owner is subject to any limits, or the total amount of owned assets otherwise.\n     *          MUST NOT revert.\n     *  @param  owner_  The owner of the assets.\n     *  @return assets_ The maximum amount of assets that can be withdrawn.\n     */\n    function maxWithdraw(address owner_) external view returns (uint256 assets_);\n\n    /**\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.\n     *          MUST return as close to and no more than the exact amount of shares that would be minted in a `deposit` call in the same transaction.\n     *          MUST NOT account for deposit limits like those returned from `maxDeposit` and should always act as though the deposit would be accepted.\n     *          MUST NOT revert.\n     *  @param  assets_ The amount of assets to deposit.\n     *  @return shares_ The amount of shares that would be minted.\n     */\n    function previewDeposit(uint256 assets_) external view returns (uint256 shares_);\n\n    /**\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions.\n     *          MUST return as close to and no fewer than the exact amount of assets that would be deposited in a `mint` call in the same transaction.\n     *          MUST NOT account for mint limits like those returned from `maxMint` and should always act as though the minting would be accepted.\n     *          MUST NOT revert.\n     *  @param  shares_ The amount of shares to mint.\n     *  @return assets_ The amount of assets that would be deposited.\n     */\n    function previewMint(uint256 shares_) external view returns (uint256 assets_);\n\n    /**\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block, given current on-chain conditions.\n     *          MUST return as close to and no more than the exact amount of assets that would be withdrawn in a `redeem` call in the same transaction.\n     *          MUST NOT account for redemption limits like those returned from `maxRedeem` and should always act as though the redemption would be accepted.\n     *          MUST NOT revert.\n     *  @param  shares_ The amount of shares to redeem.\n     *  @return assets_ The amount of assets that would be withdrawn.\n     */\n    function previewRedeem(uint256 shares_) external view returns (uint256 assets_);\n\n    /**\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions.\n     *          MUST return as close to and no fewer than the exact amount of shares that would be burned in a `withdraw` call in the same transaction.\n     *          MUST NOT account for withdrawal limits like those returned from `maxWithdraw` and should always act as though the withdrawal would be accepted.\n     *          MUST NOT revert.\n     *  @param  assets_ The amount of assets to withdraw.\n     *  @return shares_ The amount of shares that would be redeemed.\n     */\n    function previewWithdraw(uint256 assets_) external view returns (uint256 shares_);\n\n    /**\n     *  @dev    Total amount of the underlying asset that is managed by the Vault.\n     *          SHOULD include compounding that occurs from any yields.\n     *          MUST NOT revert.\n     *  @return totalAssets_ The total amount of assets the Vault manages.\n     */\n    function totalAssets() external view returns (uint256 totalAssets_);\n\n}\n\n/// @title A token that represents ownership of future revenues distributed linearly over time.\ninterface IRevenueDistributionToken is IERC20, IERC4626 {\n\n    /**************/\n    /*** Events ***/\n    /**************/\n\n    /**\n     *  @dev   Issuance parameters have been updated after a `_mint` or `_burn`.\n     *  @param freeAssets_   Resulting `freeAssets` (y-intercept) value after accounting update.\n     *  @param issuanceRate_ The new issuance rate of `asset` until `vestingPeriodFinish_`.\n     */\n    event IssuanceParamsUpdated(uint256 freeAssets_, uint256 issuanceRate_);\n\n    /**\n     *  @dev   `newOwner_` has accepted the transferral of RDT ownership from `previousOwner_`.\n     *  @param previousOwner_ The previous RDT owner.\n     *  @param newOwner_      The new RDT owner.\n     */\n    event OwnershipAccepted(address indexed previousOwner_, address indexed newOwner_);\n\n    /**\n     *  @dev   `owner_` has set the new pending owner of RDT to `pendingOwner_`.\n     *  @param owner_        The current RDT owner.\n     *  @param pendingOwner_ The new pending RDT owner.\n     */\n    event PendingOwnerSet(address indexed owner_, address indexed pendingOwner_);\n\n    /**\n     *  @dev   `owner_` has updated the RDT vesting schedule to end at `vestingPeriodFinish_`.\n     *  @param owner_               The current RDT owner.\n     *  @param vestingPeriodFinish_ When the unvested balance will finish vesting.\n     */\n    event VestingScheduleUpdated(address indexed owner_, uint256 vestingPeriodFinish_);\n\n    /***********************/\n    /*** State Variables ***/\n    /***********************/\n\n    /**\n     *  @dev The total amount of the underlying asset that is currently unlocked and is not time-dependent.\n     *       Analogous to the y-intercept in a linear function.\n     */\n    function freeAssets() external view returns (uint256 freeAssets_);\n\n    /**\n     *  @dev The rate of issuance of the vesting schedule that is currently active.\n     *       Denominated as the amount of underlying assets vesting per second.\n     */\n    function issuanceRate() external view returns (uint256 issuanceRate_);\n\n    /**\n     *  @dev The timestamp of when the linear function was last recalculated.\n     *       Analogous to t0 in a linear function.\n     */\n    function lastUpdated() external view returns (uint256 lastUpdated_);\n\n    /**\n     *  @dev The address of the account that is allowed to update the vesting schedule.\n     */\n    function owner() external view returns (address owner_);\n\n    /**\n     *  @dev The next owner, nominated by the current owner.\n     */\n    function pendingOwner() external view returns (address pendingOwner_);\n\n    /**\n     *  @dev The precision at which the issuance rate is measured.\n     */\n    function precision() external view returns (uint256 precision_);\n\n    /**\n     *  @dev The end of the current vesting schedule.\n     */\n    function vestingPeriodFinish() external view returns (uint256 vestingPeriodFinish_);\n\n    /********************************/\n    /*** Administrative Functions ***/\n    /********************************/\n\n    /**\n     *  @dev Sets the pending owner as the new owner.\n     *       Can be called only by the pending owner, and only after their nomination by the current owner.\n     */\n    function acceptOwnership() external;\n\n    /**\n     *  @dev   Sets a new address as the pending owner.\n     *  @param pendingOwner_ The address of the next potential owner.\n     */\n    function setPendingOwner(address pendingOwner_) external;\n\n    /**\n     *  @dev    Updates the current vesting formula based on the amount of total unvested funds in the contract and the new `vestingPeriod_`.\n     *  @param  vestingPeriod_ The amount of time over which all currently unaccounted underlying assets will be vested over.\n     *  @return issuanceRate_  The new issuance rate.\n     *  @return freeAssets_    The new amount of underlying assets that are unlocked.\n     */\n    function updateVestingSchedule(uint256 vestingPeriod_) external returns (uint256 issuanceRate_, uint256 freeAssets_);\n\n    /************************/\n    /*** Staker Functions ***/\n    /************************/\n\n    /**\n     *  @dev    Does a ERC4626 `deposit` with a ERC-2612 `permit`.\n     *  @param  assets_   The amount of `asset` to deposit.\n     *  @param  receiver_ The receiver of the shares.\n     *  @param  deadline_ The timestamp after which the `permit` signature is no longer valid.\n     *  @param  v_        ECDSA signature v component.\n     *  @param  r_        ECDSA signature r component.\n     *  @param  s_        ECDSA signature s component.\n     *  @return shares_   The amount of shares minted.\n     */\n    function depositWithPermit(uint256 assets_, address receiver_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external returns (uint256 shares_);\n\n    /**\n     *  @dev    Does a ERC4626 `mint` with a ERC-2612 `permit`.\n     *  @param  shares_    The amount of `shares` to mint.\n     *  @param  receiver_  The receiver of the shares.\n     *  @param  maxAssets_ The maximum amount of assets that can be taken, as per the permit.\n     *  @param  deadline_  The timestamp after which the `permit` signature is no longer valid.\n     *  @param  v_         ECDSA signature v component.\n     *  @param  r_         ECDSA signature r component.\n     *  @param  s_         ECDSA signature s component.\n     *  @return assets_    The amount of shares deposited.\n     */\n    function mintWithPermit(uint256 shares_, address receiver_, uint256 maxAssets_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external returns (uint256 assets_);\n\n    /**********************/\n    /*** View Functions ***/\n    /**********************/\n\n    /**\n     *  @dev    Returns the amount of underlying assets owned by the specified account.\n     *  @param  account_ Address of the account.\n     *  @return assets_  Amount of assets owned.\n     */\n    function balanceOfAssets(address account_) external view returns (uint256 assets_);\n\n}\n\n/*\n    ██████╗ ██████╗ ████████╗\n    ██╔══██╗██╔══██╗╚══██╔══╝\n    ██████╔╝██║  ██║   ██║\n    ██╔══██╗██║  ██║   ██║\n    ██║  ██║██████╔╝   ██║\n    ╚═╝  ╚═╝╚═════╝    ╚═╝\n*/\n\n/// @title A token that represents ownership of future revenues distributed linearly over time.\ncontract RevenueDistributionToken is IRevenueDistributionToken, ERC20 {\n\n    uint256 public immutable override precision;  // Precision of rates, equals max deposit amounts before rounding errors occur\n\n    address public override asset;  // Underlying ERC-20 asset used by ERC-4626 functionality.\n\n    address public override owner;         // Current owner of the contract, able to update the vesting schedule.\n    address public override pendingOwner;  // Pending owner of the contract, able to accept ownership.\n\n    uint256 public override freeAssets;           // Amount of assets unlocked regardless of time passed.\n    uint256 public override issuanceRate;         // asset/second rate dependent on aggregate vesting schedule.\n    uint256 public override lastUpdated;          // Timestamp of when issuance equation was last updated.\n    uint256 public override vestingPeriodFinish;  // Timestamp when current vesting schedule ends.\n\n    uint256 private locked = 1;  // Used in reentrancy check.\n\n    /*****************/\n    /*** Modifiers ***/\n    /*****************/\n\n    modifier nonReentrant() {\n        require(locked == 1, \"RDT:LOCKED\");\n\n        locked = 2;\n\n        _;\n\n        locked = 1;\n    }\n\n    constructor(string memory name_, string memory symbol_, address owner_, address asset_, uint256 precision_)\n        ERC20(name_, symbol_, ERC20(asset_).decimals())\n    {\n        require((owner = owner_) != address(0), \"RDT:C:OWNER_ZERO_ADDRESS\");\n\n        asset     = asset_;  // Don't need to check zero address as ERC20(asset_).decimals() will fail in ERC20 constructor.\n        precision = precision_;\n    }\n\n    /********************************/\n    /*** Administrative Functions ***/\n    /********************************/\n\n    function acceptOwnership() external virtual override {\n        require(msg.sender == pendingOwner, \"RDT:AO:NOT_PO\");\n\n        emit OwnershipAccepted(owner, msg.sender);\n\n        owner        = msg.sender;\n        pendingOwner = address(0);\n    }\n\n    function setPendingOwner(address pendingOwner_) external virtual override {\n        require(msg.sender == owner, \"RDT:SPO:NOT_OWNER\");\n\n        pendingOwner = pendingOwner_;\n\n        emit PendingOwnerSet(msg.sender, pendingOwner_);\n    }\n\n    function updateVestingSchedule(uint256 vestingPeriod_) external virtual override returns (uint256 issuanceRate_, uint256 freeAssets_) {\n        require(msg.sender == owner, \"RDT:UVS:NOT_OWNER\");\n        require(totalSupply != 0,    \"RDT:UVS:ZERO_SUPPLY\");\n\n        // Update \"y-intercept\" to reflect current available asset.\n        freeAssets_ = freeAssets = totalAssets();\n\n        // Calculate slope.\n        issuanceRate_ = issuanceRate = ((ERC20(asset).balanceOf(address(this)) - freeAssets_) * precision) / vestingPeriod_;\n\n        // Update timestamp and period finish.\n        vestingPeriodFinish = (lastUpdated = block.timestamp) + vestingPeriod_;\n\n        emit IssuanceParamsUpdated(freeAssets_, issuanceRate_);\n        emit VestingScheduleUpdated(msg.sender, vestingPeriodFinish);\n    }\n\n    /************************/\n    /*** Staker Functions ***/\n    /************************/\n\n    function deposit(uint256 assets_, address receiver_) external virtual override nonReentrant returns (uint256 shares_) {\n        _mint(shares_ = previewDeposit(assets_), assets_, receiver_, msg.sender);\n    }\n\n    function depositWithPermit(\n        uint256 assets_,\n        address receiver_,\n        uint256 deadline_,\n        uint8   v_,\n        bytes32 r_,\n        bytes32 s_\n    )\n        external virtual override nonReentrant returns (uint256 shares_)\n    {\n        ERC20(asset).permit(msg.sender, address(this), assets_, deadline_, v_, r_, s_);\n        _mint(shares_ = previewDeposit(assets_), assets_, receiver_, msg.sender);\n    }\n\n    function mint(uint256 shares_, address receiver_) external virtual override nonReentrant returns (uint256 assets_) {\n        _mint(shares_, assets_ = previewMint(shares_), receiver_, msg.sender);\n    }\n\n    function mintWithPermit(\n        uint256 shares_,\n        address receiver_,\n        uint256 maxAssets_,\n        uint256 deadline_,\n        uint8   v_,\n        bytes32 r_,\n        bytes32 s_\n    )\n        external virtual override nonReentrant returns (uint256 assets_)\n    {\n        require((assets_ = previewMint(shares_)) <= maxAssets_, \"RDT:MWP:INSUFFICIENT_PERMIT\");\n\n        ERC20(asset).permit(msg.sender, address(this), maxAssets_, deadline_, v_, r_, s_);\n        _mint(shares_, assets_, receiver_, msg.sender);\n    }\n\n    function redeem(uint256 shares_, address receiver_, address owner_) external virtual override nonReentrant returns (uint256 assets_) {\n        _burn(shares_, assets_ = previewRedeem(shares_), receiver_, owner_, msg.sender);\n    }\n\n    function withdraw(uint256 assets_, address receiver_, address owner_) external virtual override nonReentrant returns (uint256 shares_) {\n        _burn(shares_ = previewWithdraw(assets_), assets_, receiver_, owner_, msg.sender);\n    }\n\n    /**************************/\n    /*** Internal Functions ***/\n    /**************************/\n\n    function _mint(uint256 shares_, uint256 assets_, address receiver_, address caller_) internal {\n        require(receiver_ != address(0), \"RDT:M:ZERO_RECEIVER\");\n        require(shares_   != uint256(0), \"RDT:M:ZERO_SHARES\");\n        require(assets_   != uint256(0), \"RDT:M:ZERO_ASSETS\");\n\n        _mint(receiver_, shares_);\n\n        uint256 freeAssetsCache = freeAssets = totalAssets() + assets_;\n\n        uint256 issuanceRate_ = _updateIssuanceParams();\n\n        emit Deposit(caller_, receiver_, assets_, shares_);\n        emit IssuanceParamsUpdated(freeAssetsCache, issuanceRate_);\n\n        require(ERC20Helper.transferFrom(asset, caller_, address(this), assets_), \"RDT:M:TRANSFER_FROM\");\n    }\n\n    function _burn(uint256 shares_, uint256 assets_, address receiver_, address owner_, address caller_) internal {\n        require(receiver_ != address(0), \"RDT:B:ZERO_RECEIVER\");\n        require(shares_   != uint256(0), \"RDT:B:ZERO_SHARES\");\n        require(assets_   != uint256(0), \"RDT:B:ZERO_ASSETS\");\n\n        if (caller_ != owner_) {\n            _decreaseAllowance(owner_, caller_, shares_);\n        }\n\n        _burn(owner_, shares_);\n\n        uint256 freeAssetsCache = freeAssets = totalAssets() - assets_;\n\n        uint256 issuanceRate_ = _updateIssuanceParams();\n\n        emit Withdraw(caller_, receiver_, owner_, assets_, shares_);\n        emit IssuanceParamsUpdated(freeAssetsCache, issuanceRate_);\n\n        require(ERC20Helper.transfer(asset, receiver_, assets_), \"RDT:B:TRANSFER\");\n    }\n\n    function _updateIssuanceParams() internal returns (uint256 issuanceRate_) {\n        return issuanceRate = (lastUpdated = block.timestamp) > vestingPeriodFinish ? 0 : issuanceRate;\n    }\n\n    /**********************/\n    /*** View Functions ***/\n    /**********************/\n\n    function balanceOfAssets(address account_) public view virtual override returns (uint256 balanceOfAssets_) {\n        return convertToAssets(balanceOf[account_]);\n    }\n\n    function convertToAssets(uint256 shares_) public view virtual override returns (uint256 assets_) {\n        uint256 supply = totalSupply;  // Cache to stack.\n\n        assets_ = supply == 0 ? shares_ : (shares_ * totalAssets()) / supply;\n    }\n\n    function convertToShares(uint256 assets_) public view virtual override returns (uint256 shares_) {\n        uint256 supply = totalSupply;  // Cache to stack.\n\n        shares_ = supply == 0 ? assets_ : (assets_ * supply) / totalAssets();\n    }\n\n    function maxDeposit(address receiver_) external pure virtual override returns (uint256 maxAssets_) {\n        receiver_;  // Silence warning\n        maxAssets_ = type(uint256).max;\n    }\n\n    function maxMint(address receiver_) external pure virtual override returns (uint256 maxShares_) {\n        receiver_;  // Silence warning\n        maxShares_ = type(uint256).max;\n    }\n\n    function maxRedeem(address owner_) external view virtual override returns (uint256 maxShares_) {\n        maxShares_ = balanceOf[owner_];\n    }\n\n    function maxWithdraw(address owner_) external view virtual override returns (uint256 maxAssets_) {\n        maxAssets_ = balanceOfAssets(owner_);\n    }\n\n    function previewDeposit(uint256 assets_) public view virtual override returns (uint256 shares_) {\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\n        // it should round DOWN if it’s calculating the amount of shares to issue to a user, given an amount of assets provided.\n        shares_ = convertToShares(assets_);\n    }\n\n    function previewMint(uint256 shares_) public view virtual override returns (uint256 assets_) {\n        uint256 supply = totalSupply;  // Cache to stack.\n\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\n        // it should round UP if it’s calculating the amount of assets a user must provide, to be issued a given amount of shares.\n        assets_ = supply == 0 ? shares_ : _divRoundUp(shares_ * totalAssets(), supply);\n    }\n\n    function previewRedeem(uint256 shares_) public view virtual override returns (uint256 assets_) {\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\n        // it should round DOWN if it’s calculating the amount of assets to send to a user, given amount of shares returned.\n        assets_ = convertToAssets(shares_);\n    }\n\n    function previewWithdraw(uint256 assets_) public view virtual override returns (uint256 shares_) {\n        uint256 supply = totalSupply;  // Cache to stack.\n\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\n        // it should round UP if it’s calculating the amount of shares a user must return, to be sent a given amount of assets.\n        shares_ = supply == 0 ? assets_ : _divRoundUp(assets_ * supply, totalAssets());\n    }\n\n    function totalAssets() public view virtual override returns (uint256 totalManagedAssets_) {\n        uint256 issuanceRate_ = issuanceRate;\n\n        if (issuanceRate_ == 0) return freeAssets;\n\n        uint256 vestingPeriodFinish_ = vestingPeriodFinish;\n        uint256 lastUpdated_         = lastUpdated;\n\n        uint256 vestingTimePassed =\n            block.timestamp > vestingPeriodFinish_ ?\n                vestingPeriodFinish_ - lastUpdated_ :\n                block.timestamp - lastUpdated_;\n\n        return ((issuanceRate_ * vestingTimePassed) / precision) + freeAssets;\n    }\n\n    /**************************/\n    /*** Internal Functions ***/\n    /**************************/\n\n    function _divRoundUp(uint256 numerator_, uint256 divisor_) internal pure returns (uint256 result_) {\n       return (numerator_ / divisor_) + (numerator_ % divisor_ > 0 ? 1 : 0);\n    }\n\n}\n\n/// @title A token that represents ownership of future MPL-denominated revenues distributed linearly over time.\ninterface IxMPL is IRevenueDistributionToken {\n\n    /**************/\n    /*** Events ***/\n    /**************/\n\n    /**\n    *  @dev Notifies that a scheduled migration was cancelled.\n    */\n    event MigrationCancelled();\n\n    /**\n    *  @dev   Notifies that a scheduled migration was executed.\n    *  @param fromAsset_ The address of the old asset.\n    *  @param toAsset_   The address of new asset migrated to.\n    *  @param amount_    The amount of tokens migrated.\n    */\n    event MigrationPerformed(address indexed fromAsset_, address indexed toAsset_, uint256 amount_);\n\n    /**\n    *  @dev   Notifies that migration was scheduled.\n    *  @param fromAsset_     The current asset address.\n    *  @param toAsset_       The address of the asset to be migrated to.\n    *  @param migrator_      The address of the migrator contract.\n    *  @param migrationTime_ The earliest time the migration is scheduled for.\n    */\n    event MigrationScheduled(address indexed fromAsset_, address indexed toAsset_, address indexed migrator_, uint256 migrationTime_);\n\n    /********************************/\n    /*** Administrative Functions ***/\n    /********************************/\n\n    /**\n    *  @dev Cancel the scheduled migration\n    */\n    function cancelMigration() external;\n\n    /**\n    *  @dev Perform a migration of the asset.\n    */\n    function performMigration() external;\n\n    /**\n    *  @dev   Schedule a migration to be executed after a delay.\n    *  @param migrator_ The address of the migrator contract.\n    *  @param newAsset_ The address of the new asset token.\n    */\n    function scheduleMigration(address migrator_, address newAsset_) external;\n\n    /**********************/\n    /*** View Functions ***/\n    /**********************/\n\n    /**\n    *  @dev    Get the minimum delay that a scheduled transaction needs in order to be executed.\n    *  @return minimumMigrationDelay_ The delay in seconds.\n    */\n    function MINIMUM_MIGRATION_DELAY() external pure returns (uint256 minimumMigrationDelay_);\n\n    /**\n    *  @dev    Get the timestamp that a migration is scheduled for.\n    *  @return scheduledMigrationTimestamp_ The timestamp of the migration.\n    */\n    function scheduledMigrationTimestamp() external view returns (uint256 scheduledMigrationTimestamp_);\n\n    /**\n    *  @dev    The address of the migrator contract to be used during the scheduled migration.\n    *  @return scheduledMigrator_ The address of the migrator.\n    */\n    function scheduledMigrator() external view returns (address scheduledMigrator_);\n\n    /**\n    *  @dev    The address of the new asset token to be migrated to during the scheduled migration.\n    *  @return scheduledNewAsset_ The address of the new asset token.\n    */\n    function scheduledNewAsset() external view returns (address scheduledNewAsset_);\n\n}\n\n/*\n    ██╗  ██╗███╗   ███╗██████╗ ██╗\n    ╚██╗██╔╝████╗ ████║██╔══██╗██║\n     ╚███╔╝ ██╔████╔██║██████╔╝██║\n     ██╔██╗ ██║╚██╔╝██║██╔═══╝ ██║\n    ██╔╝ ██╗██║ ╚═╝ ██║██║     ███████╗\n    ╚═╝  ╚═╝╚═╝     ╚═╝╚═╝     ╚══════╝\n*/\n\n/// @title A token that represents ownership of future MPL-denominated revenues distributed linearly over time.\ncontract xMPL is IxMPL, RevenueDistributionToken {\n\n    uint256 public constant override MINIMUM_MIGRATION_DELAY = 10 days;\n\n    address public override scheduledMigrator;\n    address public override scheduledNewAsset;\n\n    uint256 public override scheduledMigrationTimestamp;\n\n    constructor(string memory name_, string memory symbol_, address owner_, address asset_, uint256 precision_)\n        RevenueDistributionToken(name_, symbol_, owner_, asset_, precision_) { }\n\n    /*****************/\n    /*** Modifiers ***/\n    /*****************/\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"xMPL:NOT_OWNER\");\n        _;\n    }\n\n    /********************************/\n    /*** Administrative Functions ***/\n    /********************************/\n\n    function cancelMigration() external override onlyOwner {\n        require(scheduledMigrationTimestamp != 0, \"xMPL:CM:NOT_SCHEDULED\");\n\n        _cleanupMigration();\n\n        emit MigrationCancelled();\n    }\n\n    function performMigration() external override onlyOwner {\n        uint256 migrationTimestamp = scheduledMigrationTimestamp;\n        address migrator           = scheduledMigrator;\n        address oldAsset           = asset;\n        address newAsset           = scheduledNewAsset;\n\n        require(migrationTimestamp != 0,               \"xMPL:PM:NOT_SCHEDULED\");\n        require(block.timestamp >= migrationTimestamp, \"xMPL:PM:TOO_EARLY\");\n\n        uint256 oldAssetBalanceBeforeMigration = ERC20(oldAsset).balanceOf(address(this));\n        uint256 newAssetBalanceBeforeMigration = ERC20(newAsset).balanceOf(address(this));\n\n        require(ERC20(oldAsset).approve(migrator, oldAssetBalanceBeforeMigration), \"xMPL:PM:APPROVAL_FAILED\");\n\n        Migrator(migrator).migrate(oldAssetBalanceBeforeMigration);\n\n        require(ERC20(newAsset).balanceOf(address(this)) - newAssetBalanceBeforeMigration == oldAssetBalanceBeforeMigration, \"xMPL:PM:WRONG_AMOUNT\");\n\n        emit MigrationPerformed(oldAsset, newAsset, oldAssetBalanceBeforeMigration);\n\n        asset = newAsset;\n\n        _cleanupMigration();\n    }\n\n    function scheduleMigration(address migrator_, address newAsset_) external override onlyOwner {\n        require(migrator_ != address(0), \"xMPL:SM:INVALID_MIGRATOR\");\n        require(newAsset_ != address(0), \"xMPL:SM:INVALID_NEW_ASSET\");\n\n        scheduledMigrationTimestamp = block.timestamp + MINIMUM_MIGRATION_DELAY;\n        scheduledMigrator           = migrator_;\n        scheduledNewAsset           = newAsset_;\n\n        emit MigrationScheduled(asset, newAsset_, migrator_, scheduledMigrationTimestamp);\n    }\n\n    /*************************/\n    /*** Utility Functions ***/\n    /*************************/\n\n    function _cleanupMigration() internal {\n        delete scheduledMigrationTimestamp;\n        delete scheduledMigrator;\n        delete scheduledNewAsset;\n    }\n\n}\n"}},"settings":{"metadata":{"bytecodeHash":"none"},"optimizer":{"enabled":true,"runs":999999},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","abi"]}}}},"ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"precision_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freeAssets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuanceRate_\",\"type\":\"uint256\"}],\"name\":\"IssuanceParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MigrationCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAsset_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAsset_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"MigrationPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAsset_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAsset_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"migrator_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTime_\",\"type\":\"uint256\"}],\"name\":\"MigrationScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"OwnershipAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"PendingOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingPeriodFinish_\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_MIGRATION_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOfAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuanceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"mintWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAsset_\",\"type\":\"address\"}],\"name\":\"scheduleMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduledMigrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduledMigrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduledNewAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingPeriod_\",\"type\":\"uint256\"}],\"name\":\"updateVestingSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issuanceRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"xMPL","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":1,"Runs":999999,"ConstructorArguments":"0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000d6d4bcde6c816f17889f1dd3000af0261b03a19600000000000000000000000033349b282065b0284d756f0577fb39c158f935e6000000000000000000000000000000000000000c9f2c9cd04674edea400000000000000000000000000000000000000000000000000000000000000000000004784d504c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004784d504c00000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU AGPLv3","Proxy":0,"SwarmSource":"none"}]}