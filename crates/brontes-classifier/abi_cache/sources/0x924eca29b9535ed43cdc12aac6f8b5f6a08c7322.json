{"expiry":1699583419,"data":[{"SourceCode":{"language":"Solidity","sources":{"CurveDepositToken.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"IERC20Metadata.sol\";\nimport \"ICurveProxy.sol\";\nimport \"IVault.sol\";\nimport \"ILiquidityGauge.sol\";\nimport \"PrismaOwnable.sol\";\n\n/**\n    @title Prisma Curve Deposit Wrapper\n    @notice Standard ERC20 interface around a deposit of a Curve LP token into it's\n            associated gauge. Tokens are minted by depositing Curve LP tokens, and\n            burned to receive the LP tokens back. Holders may claim PRISMA emissions\n            on top of the earned CRV.\n */\ncontract CurveDepositToken {\n    IERC20 public immutable PRISMA;\n    IERC20 public immutable CRV;\n    ICurveProxy public immutable curveProxy;\n    IPrismaVault public immutable vault;\n\n    ILiquidityGauge public gauge;\n    IERC20 public lpToken;\n\n    uint256 public emissionId;\n\n    string public symbol;\n    string public name;\n    uint256 public constant decimals = 18;\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    // each array relates to [PRISMA, CRV]\n    uint256[2] public rewardIntegral;\n    uint128[2] public rewardRate;\n    uint32 public lastUpdate;\n    uint32 public periodFinish;\n\n    mapping(address => uint256[2]) public rewardIntegralFor;\n    mapping(address => uint128[2]) private storedPendingReward;\n\n    uint256 constant REWARD_DURATION = 1 weeks;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event LPTokenDeposited(address indexed lpToken, address indexed receiver, uint256 amount);\n    event LPTokenWithdrawn(address indexed lpToken, address indexed receiver, uint256 amount);\n    event RewardClaimed(address indexed receiver, uint256 prismaAmount, uint256 crvAmount);\n\n    constructor(IERC20 _prisma, IERC20 _CRV, ICurveProxy _curveProxy, IPrismaVault _vault) {\n        PRISMA = _prisma;\n        CRV = _CRV;\n        curveProxy = _curveProxy;\n        vault = _vault;\n    }\n\n    function initialize(ILiquidityGauge _gauge) external {\n        require(address(gauge) == address(0), \"Already intialized\");\n        gauge = _gauge;\n\n        address _token = _gauge.lp_token();\n        lpToken = IERC20(_token);\n        IERC20(_token).approve(address(gauge), type(uint256).max);\n\n        string memory _symbol = IERC20Metadata(_token).symbol();\n        name = string.concat(\"Prisma \", _symbol, \" Curve Deposit\");\n        symbol = string.concat(\"prisma-\", _symbol);\n\n        periodFinish = uint32(block.timestamp - 1);\n    }\n\n    function notifyRegisteredId(uint256[] memory assignedIds) external returns (bool) {\n        require(msg.sender == address(vault));\n        require(emissionId == 0, \"Already registered\");\n        require(assignedIds.length == 1, \"Incorrect ID count\");\n        emissionId = assignedIds[0];\n\n        return true;\n    }\n\n    function deposit(address receiver, uint256 amount) external returns (bool) {\n        require(amount > 0, \"Cannot deposit zero\");\n        lpToken.transferFrom(msg.sender, address(this), amount);\n        gauge.deposit(amount, address(curveProxy));\n        uint256 balance = balanceOf[receiver];\n        uint256 supply = totalSupply;\n        balanceOf[receiver] = balance + amount;\n        totalSupply = supply + amount;\n\n        _updateIntegrals(receiver, balance, supply);\n        if (block.timestamp / 1 weeks >= periodFinish / 1 weeks) _fetchRewards();\n\n        emit Transfer(address(0), receiver, amount);\n        emit LPTokenDeposited(address(lpToken), receiver, amount);\n\n        return true;\n    }\n\n    function withdraw(address receiver, uint256 amount) external returns (bool) {\n        require(amount > 0, \"Cannot withdraw zero\");\n        uint256 balance = balanceOf[msg.sender];\n        uint256 supply = totalSupply;\n        balanceOf[msg.sender] = balance - amount;\n        totalSupply = supply - amount;\n        curveProxy.withdrawFromGauge(address(gauge), address(lpToken), amount, receiver);\n\n        _updateIntegrals(msg.sender, balance, supply);\n        if (block.timestamp / 1 weeks >= periodFinish / 1 weeks) _fetchRewards();\n\n        emit Transfer(msg.sender, address(0), amount);\n        emit LPTokenWithdrawn(address(lpToken), receiver, amount);\n\n        return true;\n    }\n\n    function _claimReward(address claimant, address receiver) internal returns (uint128[2] memory amounts) {\n        _updateIntegrals(claimant, balanceOf[claimant], totalSupply);\n        amounts = storedPendingReward[claimant];\n        delete storedPendingReward[claimant];\n\n        CRV.transfer(receiver, amounts[1]);\n        return amounts;\n    }\n\n    function claimReward(address receiver) external returns (uint256 prismaAmount, uint256 crvAmount) {\n        uint128[2] memory amounts = _claimReward(msg.sender, receiver);\n        vault.transferAllocatedTokens(msg.sender, receiver, amounts[0]);\n\n        emit RewardClaimed(receiver, amounts[0], amounts[1]);\n        return (amounts[0], amounts[1]);\n    }\n\n    function vaultClaimReward(address claimant, address receiver) external returns (uint256) {\n        require(msg.sender == address(vault));\n        uint128[2] memory amounts = _claimReward(claimant, receiver);\n\n        emit RewardClaimed(receiver, 0, amounts[1]);\n        return amounts[0];\n    }\n\n    function claimableReward(address account) external view returns (uint256 prismaAmount, uint256 crvAmount) {\n        uint256 updated = periodFinish;\n        if (updated > block.timestamp) updated = block.timestamp;\n        uint256 duration = updated - lastUpdate;\n        uint256 balance = balanceOf[account];\n        uint256 supply = totalSupply;\n        uint256[2] memory amounts;\n\n        for (uint256 i = 0; i < 2; i++) {\n            uint256 integral = rewardIntegral[i];\n            if (supply > 0) {\n                integral += (duration * rewardRate[i] * 1e18) / supply;\n            }\n            uint256 integralFor = rewardIntegralFor[account][i];\n            amounts[i] = storedPendingReward[account][i] + ((balance * (integral - integralFor)) / 1e18);\n        }\n        return (amounts[0], amounts[1]);\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        uint256 supply = totalSupply;\n\n        uint256 balance = balanceOf[_from];\n        balanceOf[_from] = balance - _value;\n        _updateIntegrals(_from, balance, supply);\n\n        balance = balanceOf[_to];\n        balanceOf[_to] = balance + _value;\n        _updateIntegrals(_to, balance, supply);\n\n        emit Transfer(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        uint256 allowed = allowance[_from][msg.sender];\n        if (allowed != type(uint256).max) {\n            allowance[_from][msg.sender] = allowed - _value;\n        }\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function _updateIntegrals(address account, uint256 balance, uint256 supply) internal {\n        uint256 updated = periodFinish;\n        if (updated > block.timestamp) updated = block.timestamp;\n        uint256 duration = updated - lastUpdate;\n        if (duration > 0) lastUpdate = uint32(updated);\n\n        for (uint256 i = 0; i < 2; i++) {\n            uint256 integral = rewardIntegral[i];\n            if (duration > 0 && supply > 0) {\n                integral += (duration * rewardRate[i] * 1e18) / supply;\n                rewardIntegral[i] = integral;\n            }\n            uint256 integralFor = rewardIntegralFor[account][i];\n            if (integral > integralFor) {\n                storedPendingReward[account][i] += uint128((balance * (integral - integralFor)) / 1e18);\n                rewardIntegralFor[account][i] = integral;\n            }\n        }\n    }\n\n    function fetchRewards() external {\n        require(block.timestamp / 1 weeks >= periodFinish / 1 weeks, \"Can only fetch once per week\");\n        _fetchRewards();\n    }\n\n    function _fetchRewards() internal {\n        uint256 prismaAmount;\n        uint256 id = emissionId;\n        if (id > 0) prismaAmount = vault.allocateNewEmissions(id);\n\n        // try/catch to allow active receiver before Curve gauge is voted in\n        uint256 crvAmount;\n        try curveProxy.mintCRV(address(gauge), address(this)) returns (uint256 minted) {\n            crvAmount = minted;\n        } catch {}\n\n        uint256 _periodFinish = periodFinish;\n        if (block.timestamp < _periodFinish) {\n            uint256 remaining = _periodFinish - block.timestamp;\n            prismaAmount += remaining * rewardRate[0];\n            crvAmount += remaining * rewardRate[1];\n        }\n        rewardRate[0] = uint128(prismaAmount / REWARD_DURATION);\n        rewardRate[1] = uint128(crvAmount / REWARD_DURATION);\n\n        lastUpdate = uint32(block.timestamp);\n        periodFinish = uint32(block.timestamp + REWARD_DURATION);\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"IVault.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPrismaVault {\n    struct InitialAllowance {\n        address receiver;\n        uint256 amount;\n    }\n\n    event BoostCalculatorSet(address boostCalculator);\n    event BoostDelegationSet(address indexed boostDelegate, bool isEnabled, uint256 feePct, address callback);\n    event EmissionScheduleSet(address emissionScheduler);\n    event IncreasedAllocation(address indexed receiver, uint256 increasedAmount);\n    event NewReceiverRegistered(address receiver, uint256 id);\n    event ReceiverIsActiveStatusModified(uint256 indexed id, bool isActive);\n    event UnallocatedSupplyIncreased(uint256 increasedAmount, uint256 unallocatedTotal);\n    event UnallocatedSupplyReduced(uint256 reducedAmount, uint256 unallocatedTotal);\n\n    function allocateNewEmissions(uint256 id) external returns (uint256);\n\n    function batchClaimRewards(\n        address receiver,\n        address boostDelegate,\n        address[] calldata rewardContracts,\n        uint256 maxFeePct\n    ) external returns (bool);\n\n    function increaseUnallocatedSupply(uint256 amount) external returns (bool);\n\n    function registerReceiver(address receiver, uint256 count) external returns (bool);\n\n    function setBoostCalculator(address _boostCalculator) external returns (bool);\n\n    function setBoostDelegationParams(bool isEnabled, uint256 feePct, address callback) external returns (bool);\n\n    function setEmissionSchedule(address _emissionSchedule) external returns (bool);\n\n    function setInitialParameters(\n        address _emissionSchedule,\n        address _boostCalculator,\n        uint256 totalSupply,\n        uint64 initialLockWeeks,\n        uint128[] calldata _fixedInitialAmounts,\n        InitialAllowance[] calldata initialAllowances\n    ) external;\n\n    function setReceiverIsActive(uint256 id, bool isActive) external returns (bool);\n\n    function transferAllocatedTokens(address claimant, address receiver, uint256 amount) external returns (bool);\n\n    function transferTokens(address token, address receiver, uint256 amount) external returns (bool);\n\n    function PRISMA_CORE() external view returns (address);\n\n    function allocated(address) external view returns (uint256);\n\n    function boostCalculator() external view returns (address);\n\n    function boostDelegation(address) external view returns (bool isEnabled, uint16 feePct, address callback);\n\n    function claimableRewardAfterBoost(\n        address account,\n        address receiver,\n        address boostDelegate,\n        address rewardContract\n    ) external view returns (uint256 adjustedAmount, uint256 feeToDelegate);\n\n    function emissionSchedule() external view returns (address);\n\n    function getClaimableWithBoost(address claimant) external view returns (uint256 maxBoosted, uint256 boosted);\n\n    function getWeek() external view returns (uint256 week);\n\n    function guardian() external view returns (address);\n\n    function idToReceiver(uint256) external view returns (address account, bool isActive);\n\n    function lockWeeks() external view returns (uint64);\n\n    function locker() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function claimableBoostDelegationFees(address claimant) external view returns (uint256 amount);\n\n    function prismaToken() external view returns (address);\n\n    function receiverUpdatedWeek(uint256) external view returns (uint16);\n\n    function totalUpdateWeek() external view returns (uint64);\n\n    function unallocatedTotal() external view returns (uint128);\n\n    function voter() external view returns (address);\n\n    function weeklyEmissions(uint256) external view returns (uint128);\n}\n"},"ICurveProxy.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ICurveProxy {\n    struct GaugeWeightVote {\n        address gauge;\n        uint256 weight;\n    }\n\n    struct TokenBalance {\n        address token;\n        uint256 amount;\n    }\n\n    event CrvFeePctSet(uint256 feePct);\n\n    function approveGaugeDeposit(address gauge, address depositor) external returns (bool);\n\n    function claimFees() external returns (uint256);\n\n    function execute(address target, bytes calldata data) external returns (bytes memory);\n\n    function lockCRV() external returns (bool);\n\n    function mintCRV(address gauge, address receiver) external returns (uint256);\n\n    function setCrvFeePct(uint64 _feePct) external returns (bool);\n\n    function setDepositManager(address _depositManager) external returns (bool);\n\n    function setExecutePermissions(\n        address caller,\n        address target,\n        bytes4[] calldata selectors,\n        bool permitted\n    ) external returns (bool);\n\n    function setGaugeRewardsReceiver(address gauge, address receiver) external returns (bool);\n\n    function setPerGaugeApproval(address caller, address gauge) external returns (bool);\n\n    function setVoteManager(address _voteManager) external returns (bool);\n\n    function transferTokens(address receiver, TokenBalance[] calldata balances) external returns (bool);\n\n    function voteForGaugeWeights(GaugeWeightVote[] calldata votes) external returns (bool);\n\n    function voteInCurveDao(address aragon, uint256 id, bool support) external returns (bool);\n\n    function withdrawFromGauge(\n        address gauge,\n        address lpToken,\n        uint256 amount,\n        address receiver\n    ) external returns (bool);\n\n    function CRV() external view returns (address);\n\n    function PRISMA_CORE() external view returns (address);\n\n    function crvFeePct() external view returns (uint64);\n\n    function depositManager() external view returns (address);\n\n    function feeDistributor() external view returns (address);\n\n    function feeToken() external view returns (address);\n\n    function gaugeController() external view returns (address);\n\n    function guardian() external view returns (address);\n\n    function minter() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function perGaugeApproval(address caller) external view returns (address gauge);\n\n    function unlockTime() external view returns (uint64);\n\n    function voteManager() external view returns (address);\n\n    function votingEscrow() external view returns (address);\n}\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"ILiquidityGauge.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\ninterface ILiquidityGauge {\n    function deposit(uint256 amount, address receiver) external;\n\n    function withdraw(uint value) external;\n\n    function lp_token() external view returns (address);\n\n    function set_approve_deposit(address depositor, bool can_deposit) external;\n\n    function set_rewards_receiver(address receiver) external;\n}\n"},"IPrismaCore.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPrismaCore {\n    event FeeReceiverSet(address feeReceiver);\n    event GuardianSet(address guardian);\n    event NewOwnerAccepted(address oldOwner, address owner);\n    event NewOwnerCommitted(address owner, address pendingOwner, uint256 deadline);\n    event NewOwnerRevoked(address owner, address revokedOwner);\n    event Paused();\n    event PriceFeedSet(address priceFeed);\n    event Unpaused();\n\n    function acceptTransferOwnership() external;\n\n    function commitTransferOwnership(address newOwner) external;\n\n    function revokeTransferOwnership() external;\n\n    function setFeeReceiver(address _feeReceiver) external;\n\n    function setGuardian(address _guardian) external;\n\n    function setPaused(bool _paused) external;\n\n    function setPriceFeed(address _priceFeed) external;\n\n    function OWNERSHIP_TRANSFER_DELAY() external view returns (uint256);\n\n    function feeReceiver() external view returns (address);\n\n    function guardian() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function ownershipTransferDeadline() external view returns (uint256);\n\n    function paused() external view returns (bool);\n\n    function pendingOwner() external view returns (address);\n\n    function priceFeed() external view returns (address);\n\n    function startTime() external view returns (uint256);\n}\n"},"PrismaOwnable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"IPrismaCore.sol\";\n\n/**\n    @title Prisma Ownable\n    @notice Contracts inheriting `PrismaOwnable` have the same owner as `PrismaCore`.\n            The ownership cannot be independently modified or renounced.\n */\ncontract PrismaOwnable {\n    IPrismaCore public immutable PRISMA_CORE;\n\n    constructor(address _prismaCore) {\n        PRISMA_CORE = IPrismaCore(_prismaCore);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == PRISMA_CORE.owner(), \"Only owner\");\n        _;\n    }\n\n    function owner() public view returns (address) {\n        return PRISMA_CORE.owner();\n    }\n\n    function guardian() public view returns (address) {\n        return PRISMA_CORE.guardian();\n    }\n}\n"}},"settings":{"evmVersion":"paris","libraries":{"CurveDepositToken.sol":{}},"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_prisma\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_CRV\",\"type\":\"address\"},{\"internalType\":\"contract ICurveProxy\",\"name\":\"_curveProxy\",\"type\":\"address\"},{\"internalType\":\"contract IPrismaVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LPTokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LPTokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prismaAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crvAmount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISMA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prismaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crvAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prismaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crvAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveProxy\",\"outputs\":[{\"internalType\":\"contract ICurveProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract ILiquidityGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiquidityGauge\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"assignedIds\",\"type\":\"uint256[]\"}],\"name\":\"notifyRegisteredId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardIntegral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardIntegralFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IPrismaVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"vaultClaimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CurveDepositToken","CompilerVersion":"v0.8.19+commit.7dd6d404","OptimizationUsed":1,"Runs":200,"ConstructorArguments":"0x000000000000000000000000da47862a83dac0c112ba89c6abc2159b95afd71c000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000490b8c6007ffa5d3728a49c2ee199e51f05d2f7e00000000000000000000000006bdf212c290473dcacea9793890c5024c7eb02c","EVMVersion":"paris","Library":"","LicenseType":"MIT","Proxy":0,"SwarmSource":""}]}