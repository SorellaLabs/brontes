{"expiry":1699590364,"data":[{"SourceCode":"/*\r\n\r\nWebsite : ItsaBanger.io \r\nTelegram : https://t.me/ItsABanger_Portal\r\n\r\n*/\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20{\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n}\r\n\r\ninterface ILpPair {\r\n    function sync() external;\r\n    function mint(address to) external returns (uint liquidity);\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ncontract Banger is ERC20, Ownable {\r\n\r\n    mapping (address => bool) public exemptFromFees;\r\n    mapping (address => bool) public exemptFromLimits;\r\n\r\n    mapping (address => bool) public isAMMPair;\r\n\r\n    address public marketingAddress;\r\n    address public devAddress;\r\n    address public bangerAddress;\r\n\r\n    Taxes public buyTax;\r\n    Taxes public sellTax;\r\n\r\n    TokensForTax public tokensForTax;\r\n\r\n    bool public limited = true;\r\n\r\n    uint256 public swapTokensAtAmt;\r\n\r\n    address public lpPair;\r\n    IDexRouter internal dexRouter;\r\n    IWETH internal immutable WETH;\r\n\r\n    mapping(address => uint256) private _holderLastTransferBlock; // to hold last Transfers temporarily during launch\r\n    bool public transferDelayEnabled = true;\r\n    mapping(uint256 => mapping(uint256 => uint256)) public gweiMapping;\r\n\r\n    TxLimits public txLimits;\r\n\r\n    uint64 public constant FEE_DIVISOR = 10000;\r\n\r\n    // structs\r\n\r\n    struct TxLimits {\r\n        uint128 transactionLimit;\r\n        uint128 walletLimit;\r\n    }\r\n\r\n    struct Taxes {\r\n        uint48 marketingTax;\r\n        uint48 devTax;\r\n        uint48 bangerTax;\r\n        uint48 totalTax;\r\n    }\r\n\r\n    struct TokensForTax {\r\n        uint64 tokensForMarketing;\r\n        uint64 tokensForDev;\r\n        uint64 tokensForBanger;\r\n        bool gasSaver;\r\n    }\r\n\r\n    uint256 public launchTime;\r\n    bool public dynamicTaxOn;\r\n\r\n    // events\r\n\r\n    event UpdatedTransactionLimit(uint newMax);\r\n    event UpdatedWalletLimit(uint newMax);\r\n    event SetExemptFromFees(address _address, bool _isExempt);\r\n    event SetExemptFromLimits(address _address, bool _isExempt);\r\n    event RemovedLimits();\r\n    event UpdatedBuyTax(uint newAmt);\r\n    event UpdatedSellTax(uint newAmt);\r\n\r\n    // constructor\r\n\r\n    constructor()\r\n        ERC20(\"BANGER\", \"BANGER\")\r\n    {   \r\n        address _v2Router;\r\n\r\n        // @dev assumes WETH pair\r\n        if(block.chainid == 1){\r\n            _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        } else if(block.chainid == 5){\r\n            _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        } else {\r\n            revert(\"Chain not configured\");\r\n        }\r\n\r\n        dynamicTaxOn = true;\r\n\r\n        dexRouter = IDexRouter(_v2Router);\r\n\r\n        marketingAddress = 0xDfA81Dbd6822E3a50147586fFD11870B5d67cB74;\r\n        devAddress = 0xBa7cc9CFAee71eaC953e702cB014fa05B53E428a;\r\n        bangerAddress = 0x9FF044C9A4F9Bc834b9e308c80e22C4c470DE1d4;\r\n\r\n        uint256 _totalSupply = 5 * 1e9 * 1e18;\r\n        _mint(address(this), 4_250_000_000 * 1e18);\r\n        _mint(msg.sender, _totalSupply - balanceOf(address(this)));\r\n\r\n        txLimits.transactionLimit = uint128(totalSupply() * 5 / 1000);\r\n        txLimits.walletLimit = uint128(totalSupply() * 1 / 100);\r\n        swapTokensAtAmt = totalSupply() * 25 / 100000;\r\n\r\n        buyTax.marketingTax = 700;\r\n        buyTax.devTax = 700;\r\n        buyTax.bangerTax = 600;\r\n        buyTax.totalTax = buyTax.marketingTax + buyTax.devTax + buyTax.bangerTax;\r\n\r\n        sellTax.marketingTax = 700;\r\n        sellTax.devTax = 700; \r\n        sellTax.bangerTax = 600;\r\n        sellTax.totalTax = sellTax.marketingTax + sellTax.devTax + sellTax.bangerTax;\r\n\r\n        tokensForTax.gasSaver = true;\r\n\r\n        WETH = IWETH(dexRouter.WETH());\r\n        lpPair = IDexFactory(dexRouter.factory()).createPair(address(this), address(WETH));\r\n\r\n        isAMMPair[lpPair] = true;\r\n\r\n        exemptFromLimits[lpPair] = true;\r\n        exemptFromLimits[msg.sender] = true;\r\n        exemptFromLimits[address(this)] = true;\r\n        exemptFromLimits[marketingAddress] = true;\r\n\r\n        exemptFromFees[msg.sender] = true;\r\n        exemptFromFees[address(this)] = true;\r\n        exemptFromFees[marketingAddress] = true;\r\n \r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n        _approve(address(msg.sender), address(dexRouter), totalSupply());\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        \r\n        if(!exemptFromFees[from] && !exemptFromFees[to]){\r\n            if(limited){\r\n                checkLimits(from, to, amount);\r\n            }\r\n            amount -= handleTax(from, to, amount);\r\n        }\r\n\r\n        super._transfer(from,to,amount);\r\n    }\r\n\r\n    function checkLimits(address from, address to, uint256 amount) internal {\r\n        bool exFromLimitsTo = exemptFromLimits[to];\r\n        uint256 balanceOfTo = balanceOf(to);\r\n        TxLimits memory _txLimits = txLimits;\r\n        // buy\r\n        if (isAMMPair[from] && !exFromLimitsTo) {\r\n            require(amount <= _txLimits.transactionLimit, \"Max Txn\");\r\n            require(amount + balanceOfTo <= _txLimits.walletLimit, \"Max Wallet\");\r\n        } \r\n        // sell\r\n        else if (isAMMPair[to] && !exemptFromLimits[from]) {\r\n            require(amount <= _txLimits.transactionLimit, \"Max Txn\");\r\n        }\r\n        else if(!exFromLimitsTo) {\r\n            require(amount + balanceOfTo <= _txLimits.walletLimit, \"Max Wallet\");\r\n        }\r\n\r\n        if (transferDelayEnabled){\r\n            if (to != address(dexRouter) && to != address(lpPair)){\r\n                require(_holderLastTransferBlock[tx.origin] < block.number, \"Transfer Delay enabled\");\r\n                require(tx.origin == to, \"no buying to external wallets yet\");\r\n                _holderLastTransferBlock[tx.origin] = block.number;\r\n                if(launchTime + 45 >= block.timestamp){\r\n                    require(gweiMapping[tx.gasprice][amount] < block.number, \"Dupe Txn\");\r\n                    gweiMapping[tx.gasprice][amount] = block.number;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleTax(address from, address to, uint256 amount) internal returns (uint256){\r\n\r\n        if(balanceOf(address(this)) >= swapTokensAtAmt && !isAMMPair[from]) {\r\n            convertTaxes();\r\n        }\r\n\r\n        if(dynamicTaxOn){\r\n            setInternalTaxes();\r\n        }\r\n        \r\n        uint128 tax = 0;\r\n\r\n        Taxes memory taxes;\r\n\r\n        if (isAMMPair[to]){\r\n            taxes = sellTax;\r\n        } else if(isAMMPair[from]){\r\n            taxes = buyTax;\r\n        }\r\n\r\n        if(taxes.totalTax > 0){\r\n            TokensForTax memory tokensForTaxUpdate = tokensForTax;\r\n            tax = uint128(amount * taxes.totalTax / FEE_DIVISOR);\r\n            tokensForTaxUpdate.tokensForMarketing += uint64(tax * taxes.marketingTax / taxes.totalTax / 1e9);\r\n            tokensForTaxUpdate.tokensForDev += uint64(tax * taxes.devTax / taxes.totalTax / 1e9);\r\n            tokensForTaxUpdate.tokensForBanger += uint64(tax * taxes.bangerTax / taxes.totalTax / 1e9);\r\n            tokensForTax = tokensForTaxUpdate;\r\n            super._transfer(from, address(this), tax);\r\n        }\r\n        \r\n        return tax;\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmt) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(WETH);\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmt,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function convertTaxes() private {\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        TokensForTax memory tokensForTaxMem = tokensForTax;\r\n        uint256 totalTokensToSwap = tokensForTaxMem.tokensForMarketing + tokensForTaxMem.tokensForDev + tokensForTaxMem.tokensForBanger;\r\n        \r\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n\r\n        if(contractBalance > swapTokensAtAmt * 40){\r\n            contractBalance = swapTokensAtAmt * 40;\r\n        }\r\n        if(contractBalance > 0){\r\n\r\n            swapTokensForETH(contractBalance);\r\n            \r\n            uint256 ethBalance = address(this).balance;\r\n\r\n            bool success;\r\n\r\n            if(tokensForTaxMem.tokensForDev > 0){\r\n                (success,) = devAddress.call{value: ethBalance * tokensForTaxMem.tokensForDev/ totalTokensToSwap}(\"\");  \r\n            }\r\n\r\n            if(tokensForTaxMem.tokensForBanger > 0){\r\n                (success,) = bangerAddress.call{value: ethBalance * tokensForTaxMem.tokensForBanger/ totalTokensToSwap}(\"\");  \r\n            }\r\n\r\n            ethBalance = address(this).balance;\r\n\r\n            if(ethBalance > 0){\r\n                (success,) = marketingAddress.call{value: ethBalance}(\"\");  \r\n            }\r\n        }\r\n\r\n        tokensForTaxMem.tokensForMarketing = 0;\r\n        tokensForTaxMem.tokensForDev = 0;\r\n        tokensForTaxMem.tokensForBanger = 0;\r\n        tokensForTax = tokensForTaxMem;\r\n    }\r\n\r\n    // owner functions\r\n    function setExemptFromFee(address _address, bool _isExempt) external onlyOwner {\r\n        require(_address != address(0), \"Zero Address\");\r\n        require(_address != address(this), \"Cannot unexempt contract\");\r\n        exemptFromFees[_address] = _isExempt;\r\n        emit SetExemptFromFees(_address, _isExempt);\r\n    }\r\n\r\n    function setExemptFromLimit(address _address, bool _isExempt) external onlyOwner {\r\n        require(_address != address(0), \"Zero Address\");\r\n        if(!_isExempt){\r\n            require(_address != lpPair, \"Cannot remove pair\");\r\n        }\r\n        exemptFromLimits[_address] = _isExempt;\r\n        emit SetExemptFromLimits(_address, _isExempt);\r\n    }\r\n\r\n    function updateTransactionLimit(uint128 newNumInTokens) external onlyOwner {\r\n        require(newNumInTokens >= (totalSupply() * 5 / 1000)/(10**decimals()), \"Too low\");\r\n        txLimits.transactionLimit = uint128(newNumInTokens * (10**decimals()));\r\n        emit UpdatedTransactionLimit(txLimits.transactionLimit);\r\n    }\r\n\r\n    function updateWalletLimit(uint128 newNumInTokens) external onlyOwner {\r\n        require(newNumInTokens >= (totalSupply() * 1 / 100)/(10**decimals()), \"Too low\");\r\n        txLimits.walletLimit = uint128(newNumInTokens * (10**decimals()));\r\n        emit UpdatedWalletLimit(txLimits.walletLimit);\r\n    }\r\n\r\n    function updateSwapTokensAmt(uint256 newAmount) external onlyOwner {\r\n        require(newAmount >= (totalSupply() * 1) / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\r\n        require(newAmount <= (totalSupply() * 5) / 1000, \"Swap amount cannot be higher than 0.5% total supply.\");\r\n        swapTokensAtAmt = newAmount;\r\n    }\r\n\r\n    function updateBuyTax(uint48 _marketingTax, uint48 _devTax, uint48 _bangerTax) external onlyOwner {\r\n        Taxes memory taxes;\r\n        taxes.marketingTax = _marketingTax;\r\n        taxes.devTax = _devTax;\r\n        taxes.bangerTax = _bangerTax;\r\n        taxes.totalTax = _marketingTax + _devTax + _bangerTax;\r\n        require(taxes.totalTax  <= 300, \"Keep tax at or below 3%\");\r\n        emit UpdatedBuyTax(taxes.totalTax);\r\n        buyTax = taxes;\r\n    }\r\n\r\n    function updateSellTax(uint48 _marketingTax, uint48 _devTax, uint48 _bangerTax) external onlyOwner {\r\n        Taxes memory taxes;\r\n        taxes.marketingTax = _marketingTax;\r\n        taxes.devTax = _devTax;\r\n        taxes.bangerTax = _bangerTax;\r\n        taxes.totalTax = _marketingTax + _devTax + _bangerTax;\r\n        require(taxes.totalTax  <= 300, \"Keep tax at or below 3%\");\r\n        emit UpdatedSellTax(taxes.totalTax);\r\n        sellTax = taxes;\r\n    }\r\n\r\n    function removeTransferDelay() external onlyOwner {\r\n        require(transferDelayEnabled, \"Already disabled\");\r\n        transferDelayEnabled = false;\r\n    }\r\n\r\n    function removeDynamicTax() external onlyOwner {\r\n        require(dynamicTaxOn, \"Already disabled\");\r\n        dynamicTaxOn = false;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        limited = false;\r\n        transferDelayEnabled = false;\r\n        TxLimits memory _txLimits;\r\n        uint256 supply = totalSupply();\r\n        _txLimits.transactionLimit = uint128(supply);\r\n        _txLimits.walletLimit = uint128(supply);\r\n        txLimits = _txLimits;\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    function airdropToWallets(address[] calldata wallets, uint256[] calldata amountsInWei) external onlyOwner {\r\n        require(wallets.length == amountsInWei.length, \"arrays length mismatch\");\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            super._transfer(msg.sender, wallets[i], amountsInWei[i]);\r\n        }\r\n    }\r\n\r\n    function rescueTokens(address _token, address _to) external onlyOwner {\r\n        require(_token != address(0), \"_token address cannot be 0\");\r\n        require(_token != address(this), \"_token address cannot be native token\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        SafeERC20.safeTransfer(IERC20(_token),_to, _contractBalance);\r\n    }\r\n\r\n    function updateMarketingAddress(address _address) external onlyOwner {\r\n        require(_address != address(0), \"zero address\");\r\n        marketingAddress = _address;\r\n    }\r\n\r\n    function updateDevAddress(address _address) external onlyOwner {\r\n        require(_address != address(0), \"zero address\");\r\n        devAddress = _address;\r\n    }\r\n\r\n    function updateBangerAddress(address _address) external onlyOwner {\r\n        require(_address != address(0), \"zero address\");\r\n        bangerAddress = _address;\r\n    }\r\n\r\n    function setInternalTaxes() internal {\r\n        Taxes memory newBuyTax = buyTax;\r\n        Taxes memory newSellTax = sellTax;\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 timeSinceLaunch = currentTime - launchTime;\r\n        if(timeSinceLaunch >= 30 minutes){\r\n            dynamicTaxOn = false;\r\n\r\n            newBuyTax.marketingTax = 100;\r\n            newBuyTax.devTax = 100;\r\n            newBuyTax.bangerTax = 100;\r\n            newBuyTax.totalTax = 300;\r\n\r\n            newSellTax.marketingTax = 100;\r\n            newSellTax.devTax = 100;\r\n            newSellTax.bangerTax = 100;\r\n            newSellTax.totalTax = 300;\r\n\r\n        } else if (timeSinceLaunch >= 10 minutes){\r\n            newBuyTax.marketingTax = 400;\r\n            newBuyTax.devTax = 300;\r\n            newBuyTax.bangerTax = 300;\r\n            newBuyTax.totalTax = 1000;\r\n\r\n            newSellTax.marketingTax = 400;\r\n            newSellTax.devTax = 300;\r\n            newSellTax.bangerTax = 300;\r\n            newSellTax.totalTax = 1000;\r\n\r\n        }\r\n\r\n        if(buyTax.totalTax != newBuyTax.totalTax){\r\n            buyTax = newBuyTax;\r\n        }\r\n        if(sellTax.totalTax != newSellTax.totalTax){\r\n            sellTax = newSellTax;\r\n        }\r\n    }\r\n\r\n    receive() payable external {}\r\n\r\n    function addLp(address _to) external onlyOwner payable {\r\n        require(address(this).balance > 0 && balanceOf(address(this)) > 0);\r\n\r\n        WETH.deposit{value: address(this).balance}();\r\n\r\n        super._transfer(address(this), address(lpPair), balanceOf(address(this)));\r\n        IERC20(address(WETH)).transfer(address(lpPair), IERC20(address(WETH)).balanceOf(address(this)));\r\n        ILpPair(lpPair).mint(_to);\r\n        launchTime = block.timestamp;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isExempt\",\"type\":\"bool\"}],\"name\":\"SetExemptFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isExempt\",\"type\":\"bool\"}],\"name\":\"SetExemptFromLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"UpdatedBuyTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"UpdatedSellTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"UpdatedTransactionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"UpdatedWalletLimit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DIVISOR\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addLp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInWei\",\"type\":\"uint256[]\"}],\"name\":\"airdropToWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bangerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"marketingTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"devTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"bangerTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"totalTax\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicTaxOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gweiMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAMMPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeDynamicTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"marketingTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"devTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"bangerTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"totalTax\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExempt\",\"type\":\"bool\"}],\"name\":\"setExemptFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExempt\",\"type\":\"bool\"}],\"name\":\"setExemptFromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForTax\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"tokensForMarketing\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tokensForDev\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tokensForBanger\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"gasSaver\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLimits\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"transactionLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"walletLimit\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateBangerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_marketingTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_devTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_bangerTax\",\"type\":\"uint48\"}],\"name\":\"updateBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_marketingTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_devTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_bangerTax\",\"type\":\"uint48\"}],\"name\":\"updateSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newNumInTokens\",\"type\":\"uint128\"}],\"name\":\"updateTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newNumInTokens\",\"type\":\"uint128\"}],\"name\":\"updateWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Banger","CompilerVersion":"v0.8.20+commit.a1b79de6","OptimizationUsed":1,"Runs":200,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":0,"SwarmSource":"ipfs://43d4b547586f4effd20725177e1c8df8ec99a6d6e0678f47d5c8bc8d9595fff4"}]}