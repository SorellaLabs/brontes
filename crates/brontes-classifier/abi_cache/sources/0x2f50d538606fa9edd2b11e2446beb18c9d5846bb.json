{"expiry":1699511920,"data":[{"SourceCode":"# @version 0.2.4\r\n\r\n\"\"\"\r\n@title Gauge Controller\r\n@author Curve Finance\r\n@license MIT\r\n@notice Controls liquidity gauges and the issuance of coins through the gauges\r\n\"\"\"\r\n\r\n# 7 * 86400 seconds - all future times are rounded by week\r\nWEEK: constant(uint256) = 604800\r\n\r\n# Cannot change weight votes more often than once in 10 days\r\nWEIGHT_VOTE_DELAY: constant(uint256) = 10 * 86400\r\n\r\n\r\nstruct Point:\r\n    bias: uint256\r\n    slope: uint256\r\n\r\nstruct VotedSlope:\r\n    slope: uint256\r\n    power: uint256\r\n    end: uint256\r\n\r\n\r\ninterface VotingEscrow:\r\n    def get_last_user_slope(addr: address) -> int128: view\r\n    def locked__end(addr: address) -> uint256: view\r\n\r\n\r\nevent CommitOwnership:\r\n    admin: address\r\n\r\nevent ApplyOwnership:\r\n    admin: address\r\n\r\nevent AddType:\r\n    name: String[64]\r\n    type_id: int128\r\n\r\nevent NewTypeWeight:\r\n    type_id: int128\r\n    time: uint256\r\n    weight: uint256\r\n    total_weight: uint256\r\n\r\nevent NewGaugeWeight:\r\n    gauge_address: address\r\n    time: uint256\r\n    weight: uint256\r\n    total_weight: uint256\r\n\r\nevent VoteForGauge:\r\n    time: uint256\r\n    user: address\r\n    gauge_addr: address\r\n    weight: uint256\r\n\r\nevent NewGauge:\r\n    addr: address\r\n    gauge_type: int128\r\n    weight: uint256\r\n\r\n\r\nMULTIPLIER: constant(uint256) = 10 ** 18\r\n\r\nadmin: public(address)  # Can and will be a smart contract\r\nfuture_admin: public(address)  # Can and will be a smart contract\r\n\r\ntoken: public(address)  # CRV token\r\nvoting_escrow: public(address)  # Voting escrow\r\n\r\n# Gauge parameters\r\n# All numbers are \"fixed point\" on the basis of 1e18\r\nn_gauge_types: public(int128)\r\nn_gauges: public(int128)\r\ngauge_type_names: public(HashMap[int128, String[64]])\r\n\r\n# Needed for enumeration\r\ngauges: public(address[1000000000])\r\n\r\n# we increment values by 1 prior to storing them here so we can rely on a value\r\n# of zero as meaning the gauge has not been set\r\ngauge_types_: HashMap[address, int128]\r\n\r\nvote_user_slopes: public(HashMap[address, HashMap[address, VotedSlope]])  # user -> gauge_addr -> VotedSlope\r\nvote_user_power: public(HashMap[address, uint256])  # Total vote power used by user\r\nlast_user_vote: public(HashMap[address, HashMap[address, uint256]])  # Last user vote's timestamp for each gauge address\r\n\r\n# Past and scheduled points for gauge weight, sum of weights per type, total weight\r\n# Point is for bias+slope\r\n# changes_* are for changes in slope\r\n# time_* are for the last change timestamp\r\n# timestamps are rounded to whole weeks\r\n\r\npoints_weight: public(HashMap[address, HashMap[uint256, Point]])  # gauge_addr -> time -> Point\r\nchanges_weight: HashMap[address, HashMap[uint256, uint256]]  # gauge_addr -> time -> slope\r\ntime_weight: public(HashMap[address, uint256])  # gauge_addr -> last scheduled time (next week)\r\n\r\npoints_sum: public(HashMap[int128, HashMap[uint256, Point]])  # type_id -> time -> Point\r\nchanges_sum: HashMap[int128, HashMap[uint256, uint256]]  # type_id -> time -> slope\r\ntime_sum: public(uint256[1000000000])  # type_id -> last scheduled time (next week)\r\n\r\npoints_total: public(HashMap[uint256, uint256])  # time -> total weight\r\ntime_total: public(uint256)  # last scheduled time\r\n\r\npoints_type_weight: public(HashMap[int128, HashMap[uint256, uint256]])  # type_id -> time -> type weight\r\ntime_type_weight: public(uint256[1000000000])  # type_id -> last scheduled time (next week)\r\n\r\n\r\n@external\r\ndef __init__(_token: address, _voting_escrow: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _token `ERC20CRV` contract address\r\n    @param _voting_escrow `VotingEscrow` contract address\r\n    \"\"\"\r\n    assert _token != ZERO_ADDRESS\r\n    assert _voting_escrow != ZERO_ADDRESS\r\n\r\n    self.admin = msg.sender\r\n    self.token = _token\r\n    self.voting_escrow = _voting_escrow\r\n    self.time_total = block.timestamp / WEEK * WEEK\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(addr: address):\r\n    \"\"\"\r\n    @notice Transfer ownership of GaugeController to `addr`\r\n    @param addr Address to have ownership transferred to\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n    self.future_admin = addr\r\n    log CommitOwnership(addr)\r\n\r\n\r\n@external\r\ndef apply_transfer_ownership():\r\n    \"\"\"\r\n    @notice Apply pending ownership transfer\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n    _admin: address = self.future_admin\r\n    assert _admin != ZERO_ADDRESS  # dev: admin not set\r\n    self.admin = _admin\r\n    log ApplyOwnership(_admin)\r\n\r\n\r\n@external\r\n@view\r\ndef gauge_types(_addr: address) -> int128:\r\n    \"\"\"\r\n    @notice Get gauge type for address\r\n    @param _addr Gauge address\r\n    @return Gauge type id\r\n    \"\"\"\r\n    gauge_type: int128 = self.gauge_types_[_addr]\r\n    assert gauge_type != 0\r\n\r\n    return gauge_type - 1\r\n\r\n\r\n@internal\r\ndef _get_type_weight(gauge_type: int128) -> uint256:\r\n    \"\"\"\r\n    @notice Fill historic type weights week-over-week for missed checkins\r\n            and return the type weight for the future week\r\n    @param gauge_type Gauge type id\r\n    @return Type weight\r\n    \"\"\"\r\n    t: uint256 = self.time_type_weight[gauge_type]\r\n    if t > 0:\r\n        w: uint256 = self.points_type_weight[gauge_type][t]\r\n        for i in range(500):\r\n            if t > block.timestamp:\r\n                break\r\n            t += WEEK\r\n            self.points_type_weight[gauge_type][t] = w\r\n            if t > block.timestamp:\r\n                self.time_type_weight[gauge_type] = t\r\n        return w\r\n    else:\r\n        return 0\r\n\r\n\r\n@internal\r\ndef _get_sum(gauge_type: int128) -> uint256:\r\n    \"\"\"\r\n    @notice Fill sum of gauge weights for the same type week-over-week for\r\n            missed checkins and return the sum for the future week\r\n    @param gauge_type Gauge type id\r\n    @return Sum of weights\r\n    \"\"\"\r\n    t: uint256 = self.time_sum[gauge_type]\r\n    if t > 0:\r\n        pt: Point = self.points_sum[gauge_type][t]\r\n        for i in range(500):\r\n            if t > block.timestamp:\r\n                break\r\n            t += WEEK\r\n            d_bias: uint256 = pt.slope * WEEK\r\n            if pt.bias > d_bias:\r\n                pt.bias -= d_bias\r\n                d_slope: uint256 = self.changes_sum[gauge_type][t]\r\n                pt.slope -= d_slope\r\n            else:\r\n                pt.bias = 0\r\n                pt.slope = 0\r\n            self.points_sum[gauge_type][t] = pt\r\n            if t > block.timestamp:\r\n                self.time_sum[gauge_type] = t\r\n        return pt.bias\r\n    else:\r\n        return 0\r\n\r\n\r\n@internal\r\ndef _get_total() -> uint256:\r\n    \"\"\"\r\n    @notice Fill historic total weights week-over-week for missed checkins\r\n            and return the total for the future week\r\n    @return Total weight\r\n    \"\"\"\r\n    t: uint256 = self.time_total\r\n    _n_gauge_types: int128 = self.n_gauge_types\r\n    if t > block.timestamp:\r\n        # If we have already checkpointed - still need to change the value\r\n        t -= WEEK\r\n    pt: uint256 = self.points_total[t]\r\n\r\n    for gauge_type in range(100):\r\n        if gauge_type == _n_gauge_types:\r\n            break\r\n        self._get_sum(gauge_type)\r\n        self._get_type_weight(gauge_type)\r\n\r\n    for i in range(500):\r\n        if t > block.timestamp:\r\n            break\r\n        t += WEEK\r\n        pt = 0\r\n        # Scales as n_types * n_unchecked_weeks (hopefully 1 at most)\r\n        for gauge_type in range(100):\r\n            if gauge_type == _n_gauge_types:\r\n                break\r\n            type_sum: uint256 = self.points_sum[gauge_type][t].bias\r\n            type_weight: uint256 = self.points_type_weight[gauge_type][t]\r\n            pt += type_sum * type_weight\r\n        self.points_total[t] = pt\r\n\r\n        if t > block.timestamp:\r\n            self.time_total = t\r\n    return pt\r\n\r\n\r\n@internal\r\ndef _get_weight(gauge_addr: address) -> uint256:\r\n    \"\"\"\r\n    @notice Fill historic gauge weights week-over-week for missed checkins\r\n            and return the total for the future week\r\n    @param gauge_addr Address of the gauge\r\n    @return Gauge weight\r\n    \"\"\"\r\n    t: uint256 = self.time_weight[gauge_addr]\r\n    if t > 0:\r\n        pt: Point = self.points_weight[gauge_addr][t]\r\n        for i in range(500):\r\n            if t > block.timestamp:\r\n                break\r\n            t += WEEK\r\n            d_bias: uint256 = pt.slope * WEEK\r\n            if pt.bias > d_bias:\r\n                pt.bias -= d_bias\r\n                d_slope: uint256 = self.changes_weight[gauge_addr][t]\r\n                pt.slope -= d_slope\r\n            else:\r\n                pt.bias = 0\r\n                pt.slope = 0\r\n            self.points_weight[gauge_addr][t] = pt\r\n            if t > block.timestamp:\r\n                self.time_weight[gauge_addr] = t\r\n        return pt.bias\r\n    else:\r\n        return 0\r\n\r\n\r\n@external\r\ndef add_gauge(addr: address, gauge_type: int128, weight: uint256 = 0):\r\n    \"\"\"\r\n    @notice Add gauge `addr` of type `gauge_type` with weight `weight`\r\n    @param addr Gauge address\r\n    @param gauge_type Gauge type\r\n    @param weight Gauge weight\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    assert (gauge_type >= 0) and (gauge_type < self.n_gauge_types)\r\n    assert self.gauge_types_[addr] == 0  # dev: cannot add the same gauge twice\r\n\r\n    n: int128 = self.n_gauges\r\n    self.n_gauges = n + 1\r\n    self.gauges[n] = addr\r\n\r\n    self.gauge_types_[addr] = gauge_type + 1\r\n    next_time: uint256 = (block.timestamp + WEEK) / WEEK * WEEK\r\n\r\n    if weight > 0:\r\n        _type_weight: uint256 = self._get_type_weight(gauge_type)\r\n        _old_sum: uint256 = self._get_sum(gauge_type)\r\n        _old_total: uint256 = self._get_total()\r\n\r\n        self.points_sum[gauge_type][next_time].bias = weight + _old_sum\r\n        self.time_sum[gauge_type] = next_time\r\n        self.points_total[next_time] = _old_total + _type_weight * weight\r\n        self.time_total = next_time\r\n\r\n        self.points_weight[addr][next_time].bias = weight\r\n\r\n    if self.time_sum[gauge_type] == 0:\r\n        self.time_sum[gauge_type] = next_time\r\n    self.time_weight[addr] = next_time\r\n\r\n    log NewGauge(addr, gauge_type, weight)\r\n\r\n\r\n@external\r\ndef checkpoint():\r\n    \"\"\"\r\n    @notice Checkpoint to fill data common for all gauges\r\n    \"\"\"\r\n    self._get_total()\r\n\r\n\r\n@external\r\ndef checkpoint_gauge(addr: address):\r\n    \"\"\"\r\n    @notice Checkpoint to fill data for both a specific gauge and common for all gauges\r\n    @param addr Gauge address\r\n    \"\"\"\r\n    self._get_weight(addr)\r\n    self._get_total()\r\n\r\n\r\n@internal\r\n@view\r\ndef _gauge_relative_weight(addr: address, time: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Get Gauge relative weight (not more than 1.0) normalized to 1e18\r\n            (e.g. 1.0 == 1e18). Inflation which will be received by it is\r\n            inflation_rate * relative_weight / 1e18\r\n    @param addr Gauge address\r\n    @param time Relative weight at the specified timestamp in the past or present\r\n    @return Value of relative weight normalized to 1e18\r\n    \"\"\"\r\n    t: uint256 = time / WEEK * WEEK\r\n    _total_weight: uint256 = self.points_total[t]\r\n\r\n    if _total_weight > 0:\r\n        gauge_type: int128 = self.gauge_types_[addr] - 1\r\n        _type_weight: uint256 = self.points_type_weight[gauge_type][t]\r\n        _gauge_weight: uint256 = self.points_weight[addr][t].bias\r\n        return MULTIPLIER * _type_weight * _gauge_weight / _total_weight\r\n\r\n    else:\r\n        return 0\r\n\r\n\r\n@external\r\n@view\r\ndef gauge_relative_weight(addr: address, time: uint256 = block.timestamp) -> uint256:\r\n    \"\"\"\r\n    @notice Get Gauge relative weight (not more than 1.0) normalized to 1e18\r\n            (e.g. 1.0 == 1e18). Inflation which will be received by it is\r\n            inflation_rate * relative_weight / 1e18\r\n    @param addr Gauge address\r\n    @param time Relative weight at the specified timestamp in the past or present\r\n    @return Value of relative weight normalized to 1e18\r\n    \"\"\"\r\n    return self._gauge_relative_weight(addr, time)\r\n\r\n\r\n@external\r\ndef gauge_relative_weight_write(addr: address, time: uint256 = block.timestamp) -> uint256:\r\n    \"\"\"\r\n    @notice Get gauge weight normalized to 1e18 and also fill all the unfilled\r\n            values for type and gauge records\r\n    @dev Any address can call, however nothing is recorded if the values are filled already\r\n    @param addr Gauge address\r\n    @param time Relative weight at the specified timestamp in the past or present\r\n    @return Value of relative weight normalized to 1e18\r\n    \"\"\"\r\n    self._get_weight(addr)\r\n    self._get_total()  # Also calculates get_sum\r\n    return self._gauge_relative_weight(addr, time)\r\n\r\n\r\n\r\n\r\n@internal\r\ndef _change_type_weight(type_id: int128, weight: uint256):\r\n    \"\"\"\r\n    @notice Change type weight\r\n    @param type_id Type id\r\n    @param weight New type weight\r\n    \"\"\"\r\n    old_weight: uint256 = self._get_type_weight(type_id)\r\n    old_sum: uint256 = self._get_sum(type_id)\r\n    _total_weight: uint256 = self._get_total()\r\n    next_time: uint256 = (block.timestamp + WEEK) / WEEK * WEEK\r\n\r\n    _total_weight = _total_weight + old_sum * weight - old_sum * old_weight\r\n    self.points_total[next_time] = _total_weight\r\n    self.points_type_weight[type_id][next_time] = weight\r\n    self.time_total = next_time\r\n    self.time_type_weight[type_id] = next_time\r\n\r\n    log NewTypeWeight(type_id, next_time, weight, _total_weight)\r\n\r\n\r\n@external\r\ndef add_type(_name: String[64], weight: uint256 = 0):\r\n    \"\"\"\r\n    @notice Add gauge type with name `_name` and weight `weight`\r\n    @param _name Name of gauge type\r\n    @param weight Weight of gauge type\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    type_id: int128 = self.n_gauge_types\r\n    self.gauge_type_names[type_id] = _name\r\n    self.n_gauge_types = type_id + 1\r\n    if weight != 0:\r\n        self._change_type_weight(type_id, weight)\r\n        log AddType(_name, type_id)\r\n\r\n\r\n@external\r\ndef change_type_weight(type_id: int128, weight: uint256):\r\n    \"\"\"\r\n    @notice Change gauge type `type_id` weight to `weight`\r\n    @param type_id Gauge type id\r\n    @param weight New Gauge weight\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    self._change_type_weight(type_id, weight)\r\n\r\n\r\n@internal\r\ndef _change_gauge_weight(addr: address, weight: uint256):\r\n    # Change gauge weight\r\n    # Only needed when testing in reality\r\n    gauge_type: int128 = self.gauge_types_[addr] - 1\r\n    old_gauge_weight: uint256 = self._get_weight(addr)\r\n    type_weight: uint256 = self._get_type_weight(gauge_type)\r\n    old_sum: uint256 = self._get_sum(gauge_type)\r\n    _total_weight: uint256 = self._get_total()\r\n    next_time: uint256 = (block.timestamp + WEEK) / WEEK * WEEK\r\n\r\n    self.points_weight[addr][next_time].bias = weight\r\n    self.time_weight[addr] = next_time\r\n\r\n    new_sum: uint256 = old_sum + weight - old_gauge_weight\r\n    self.points_sum[gauge_type][next_time].bias = new_sum\r\n    self.time_sum[gauge_type] = next_time\r\n\r\n    _total_weight = _total_weight + new_sum * type_weight - old_sum * type_weight\r\n    self.points_total[next_time] = _total_weight\r\n    self.time_total = next_time\r\n\r\n    log NewGaugeWeight(addr, block.timestamp, weight, _total_weight)\r\n\r\n\r\n@external\r\ndef change_gauge_weight(addr: address, weight: uint256):\r\n    \"\"\"\r\n    @notice Change weight of gauge `addr` to `weight`\r\n    @param addr `GaugeController` contract address\r\n    @param weight New Gauge weight\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    self._change_gauge_weight(addr, weight)\r\n\r\n\r\n@external\r\ndef vote_for_gauge_weights(_gauge_addr: address, _user_weight: uint256):\r\n    \"\"\"\r\n    @notice Allocate voting power for changing pool weights\r\n    @param _gauge_addr Gauge which `msg.sender` votes for\r\n    @param _user_weight Weight for a gauge in bps (units of 0.01%). Minimal is 0.01%. Ignored if 0\r\n    \"\"\"\r\n    escrow: address = self.voting_escrow\r\n    slope: uint256 = convert(VotingEscrow(escrow).get_last_user_slope(msg.sender), uint256)\r\n    lock_end: uint256 = VotingEscrow(escrow).locked__end(msg.sender)\r\n    _n_gauges: int128 = self.n_gauges\r\n    next_time: uint256 = (block.timestamp + WEEK) / WEEK * WEEK\r\n    assert lock_end > next_time, \"Your token lock expires too soon\"\r\n    assert (_user_weight >= 0) and (_user_weight <= 10000), \"You used all your voting power\"\r\n    assert block.timestamp >= self.last_user_vote[msg.sender][_gauge_addr] + WEIGHT_VOTE_DELAY, \"Cannot vote so often\"\r\n\r\n    gauge_type: int128 = self.gauge_types_[_gauge_addr] - 1\r\n    assert gauge_type >= 0, \"Gauge not added\"\r\n    # Prepare slopes and biases in memory\r\n    old_slope: VotedSlope = self.vote_user_slopes[msg.sender][_gauge_addr]\r\n    old_dt: uint256 = 0\r\n    if old_slope.end > next_time:\r\n        old_dt = old_slope.end - next_time\r\n    old_bias: uint256 = old_slope.slope * old_dt\r\n    new_slope: VotedSlope = VotedSlope({\r\n        slope: slope * _user_weight / 10000,\r\n        end: lock_end,\r\n        power: _user_weight\r\n    })\r\n    new_dt: uint256 = lock_end - next_time  # dev: raises when expired\r\n    new_bias: uint256 = new_slope.slope * new_dt\r\n\r\n    # Check and update powers (weights) used\r\n    power_used: uint256 = self.vote_user_power[msg.sender]\r\n    power_used = power_used + new_slope.power - old_slope.power\r\n    self.vote_user_power[msg.sender] = power_used\r\n    assert (power_used >= 0) and (power_used <= 10000), 'Used too much power'\r\n\r\n    ## Remove old and schedule new slope changes\r\n    # Remove slope changes for old slopes\r\n    # Schedule recording of initial slope for next_time\r\n    old_weight_bias: uint256 = self._get_weight(_gauge_addr)\r\n    old_weight_slope: uint256 = self.points_weight[_gauge_addr][next_time].slope\r\n    old_sum_bias: uint256 = self._get_sum(gauge_type)\r\n    old_sum_slope: uint256 = self.points_sum[gauge_type][next_time].slope\r\n\r\n    self.points_weight[_gauge_addr][next_time].bias = max(old_weight_bias + new_bias, old_bias) - old_bias\r\n    self.points_sum[gauge_type][next_time].bias = max(old_sum_bias + new_bias, old_bias) - old_bias\r\n    if old_slope.end > next_time:\r\n        self.points_weight[_gauge_addr][next_time].slope = max(old_weight_slope + new_slope.slope, old_slope.slope) - old_slope.slope\r\n        self.points_sum[gauge_type][next_time].slope = max(old_sum_slope + new_slope.slope, old_slope.slope) - old_slope.slope\r\n    else:\r\n        self.points_weight[_gauge_addr][next_time].slope += new_slope.slope\r\n        self.points_sum[gauge_type][next_time].slope += new_slope.slope\r\n    if old_slope.end > block.timestamp:\r\n        # Cancel old slope changes if they still didn't happen\r\n        self.changes_weight[_gauge_addr][old_slope.end] -= old_slope.slope\r\n        self.changes_sum[gauge_type][old_slope.end] -= old_slope.slope\r\n    # Add slope changes for new slopes\r\n    self.changes_weight[_gauge_addr][new_slope.end] += new_slope.slope\r\n    self.changes_sum[gauge_type][new_slope.end] += new_slope.slope\r\n\r\n    self._get_total()\r\n\r\n    self.vote_user_slopes[msg.sender][_gauge_addr] = new_slope\r\n\r\n    # Record last action time\r\n    self.last_user_vote[msg.sender][_gauge_addr] = block.timestamp\r\n\r\n    log VoteForGauge(block.timestamp, msg.sender, _gauge_addr, _user_weight)\r\n\r\n\r\n@external\r\n@view\r\ndef get_gauge_weight(addr: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get current gauge weight\r\n    @param addr Gauge address\r\n    @return Gauge weight\r\n    \"\"\"\r\n    return self.points_weight[addr][self.time_weight[addr]].bias\r\n\r\n\r\n@external\r\n@view\r\ndef get_type_weight(type_id: int128) -> uint256:\r\n    \"\"\"\r\n    @notice Get current type weight\r\n    @param type_id Type id\r\n    @return Type weight\r\n    \"\"\"\r\n    return self.points_type_weight[type_id][self.time_type_weight[type_id]]\r\n\r\n\r\n@external\r\n@view\r\ndef get_total_weight() -> uint256:\r\n    \"\"\"\r\n    @notice Get current total (type-weighted) weight\r\n    @return Total weight\r\n    \"\"\"\r\n    return self.points_total[self.time_total]\r\n\r\n\r\n@external\r\n@view\r\ndef get_weights_sum_per_type(type_id: int128) -> uint256:\r\n    \"\"\"\r\n    @notice Get sum of gauge weights per type\r\n    @param type_id Type id\r\n    @return Sum of gauge weights\r\n    \"\"\"\r\n    return self.points_sum[type_id][self.time_sum[type_id]].bias","ABI":"[{\"name\":\"CommitOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddType\",\"inputs\":[{\"type\":\"string\",\"name\":\"name\",\"indexed\":false},{\"type\":\"int128\",\"name\":\"type_id\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewTypeWeight\",\"inputs\":[{\"type\":\"int128\",\"name\":\"type_id\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"time\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"weight\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"total_weight\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewGaugeWeight\",\"inputs\":[{\"type\":\"address\",\"name\":\"gauge_address\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"time\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"weight\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"total_weight\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"VoteForGauge\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"time\",\"indexed\":false},{\"type\":\"address\",\"name\":\"user\",\"indexed\":false},{\"type\":\"address\",\"name\":\"gauge_addr\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"weight\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewGauge\",\"inputs\":[{\"type\":\"address\",\"name\":\"addr\",\"indexed\":false},{\"type\":\"int128\",\"name\":\"gauge_type\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"weight\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_token\"},{\"type\":\"address\",\"name\":\"_voting_escrow\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"commit_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37597},{\"name\":\"apply_transfer_ownership\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":38497},{\"name\":\"gauge_types\",\"outputs\":[{\"type\":\"int128\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_addr\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1625},{\"name\":\"add_gauge\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"},{\"type\":\"int128\",\"name\":\"gauge_type\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"add_gauge\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"},{\"type\":\"int128\",\"name\":\"gauge_type\"},{\"type\":\"uint256\",\"name\":\"weight\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"checkpoint\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":18033784416},{\"name\":\"checkpoint_gauge\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":18087678795},{\"name\":\"gauge_relative_weight\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"name\":\"gauge_relative_weight\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"},{\"type\":\"uint256\",\"name\":\"time\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"name\":\"gauge_relative_weight_write\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"gauge_relative_weight_write\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"},{\"type\":\"uint256\",\"name\":\"time\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"add_type\",\"outputs\":[],\"inputs\":[{\"type\":\"string\",\"name\":\"_name\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"add_type\",\"outputs\":[],\"inputs\":[{\"type\":\"string\",\"name\":\"_name\"},{\"type\":\"uint256\",\"name\":\"weight\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"change_type_weight\",\"outputs\":[],\"inputs\":[{\"type\":\"int128\",\"name\":\"type_id\"},{\"type\":\"uint256\",\"name\":\"weight\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36246310050},{\"name\":\"change_gauge_weight\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"},{\"type\":\"uint256\",\"name\":\"weight\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36354170809},{\"name\":\"vote_for_gauge_weights\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_gauge_addr\"},{\"type\":\"uint256\",\"name\":\"_user_weight\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":18142052127},{\"name\":\"get_gauge_weight\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2974},{\"name\":\"get_type_weight\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"type_id\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2977},{\"name\":\"get_total_weight\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2693},{\"name\":\"get_weights_sum_per_type\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"type_id\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":3109},{\"name\":\"admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1841},{\"name\":\"future_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1871},{\"name\":\"token\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1901},{\"name\":\"voting_escrow\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1931},{\"name\":\"n_gauge_types\",\"outputs\":[{\"type\":\"int128\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1961},{\"name\":\"n_gauges\",\"outputs\":[{\"type\":\"int128\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1991},{\"name\":\"gauge_type_names\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":8628},{\"name\":\"gauges\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2160},{\"name\":\"vote_user_slopes\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"slope\"},{\"type\":\"uint256\",\"name\":\"power\"},{\"type\":\"uint256\",\"name\":\"end\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":5020},{\"name\":\"vote_user_power\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2265},{\"name\":\"last_user_vote\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2449},{\"name\":\"points_weight\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"bias\"},{\"type\":\"uint256\",\"name\":\"slope\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":3859},{\"name\":\"time_weight\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2355},{\"name\":\"points_sum\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"bias\"},{\"type\":\"uint256\",\"name\":\"slope\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":3970},{\"name\":\"time_sum\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2370},{\"name\":\"points_total\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2406},{\"name\":\"time_total\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2321},{\"name\":\"points_type_weight\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2671},{\"name\":\"time_type_weight\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2490}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.4","OptimizationUsed":0,"Runs":0,"ConstructorArguments":"0x000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd520000000000000000000000005f3b5dfeb7b28cdbd7faba78963ee202a494e2a2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":0,"SwarmSource":""}]}