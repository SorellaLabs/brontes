{"expiry":1699580150,"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/polygon/lib/MerklePatriciaProof.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {RLPReader} from \"./RLPReader.sol\";\n\nlibrary MerklePatriciaProof {\n    /*\n     * @dev Verifies a merkle patricia proof.\n     * @param value The terminating value in the trie.\n     * @param encodedPath The path in the trie leading to value.\n     * @param rlpParentNodes The rlp encoded stack of nodes.\n     * @param root The root hash of the trie.\n     * @return The boolean validity of the proof.\n     */\n    function verify(\n        bytes memory value,\n        bytes memory encodedPath,\n        bytes memory rlpParentNodes,\n        bytes32 root\n    ) internal pure returns (bool) {\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\n\n        bytes memory currentNode;\n        RLPReader.RLPItem[] memory currentNodeList;\n\n        bytes32 nodeKey = root;\n        uint256 pathPtr = 0;\n\n        bytes memory path = _getNibbleArray(encodedPath);\n        if (path.length == 0) {\n            return false;\n        }\n\n        for (uint256 i = 0; i < parentNodes.length; i++) {\n            if (pathPtr > path.length) {\n                return false;\n            }\n\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\n            if (nodeKey != keccak256(currentNode)) {\n                return false;\n            }\n            currentNodeList = RLPReader.toList(parentNodes[i]);\n\n            if (currentNodeList.length == 17) {\n                if (pathPtr == path.length) {\n                    if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n\n                uint8 nextPathNibble = uint8(path[pathPtr]);\n                if (nextPathNibble > 16) {\n                    return false;\n                }\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\n                pathPtr += 1;\n            } else if (currentNodeList.length == 2) {\n                uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\n                if (pathPtr + traversed == path.length) {\n                    //leaf node\n                    if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n\n                //extension node\n                if (traversed == 0) {\n                    return false;\n                }\n\n                pathPtr += traversed;\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\n            } else {\n                return false;\n            }\n        }\n    }\n\n    function _nibblesToTraverse(\n        bytes memory encodedPartialPath,\n        bytes memory path,\n        uint256 pathPtr\n    ) private pure returns (uint256) {\n        uint256 len = 0;\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\n        // and slicedPath have elements that are each one hex character (1 nibble)\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\n        bytes memory slicedPath = new bytes(partialPath.length);\n\n        // pathPtr counts nibbles in path\n        // partialPath.length is a number of nibbles\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\n            bytes1 pathNibble = path[i];\n            slicedPath[i - pathPtr] = pathNibble;\n        }\n\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\n            len = partialPath.length;\n        } else {\n            len = 0;\n        }\n        return len;\n    }\n\n    // bytes b must be hp encoded\n    function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\n        bytes memory nibbles = \"\";\n        if (b.length > 0) {\n            uint8 offset;\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\n            if (hpNibble == 1 || hpNibble == 3) {\n                nibbles = new bytes(b.length * 2 - 1);\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\n                nibbles[0] = oddNibble;\n                offset = 1;\n            } else {\n                nibbles = new bytes(b.length * 2 - 2);\n                offset = 0;\n            }\n\n            for (uint256 i = offset; i < nibbles.length; i++) {\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\n            }\n        }\n        return nibbles;\n    }\n\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\n        return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\n    }\n}"},"contracts/wrappers/MessengerWrapper.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12 <=0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IMessengerWrapper.sol\";\n\ncontract IL1Bridge {\n    struct TransferBond {\n        address bonder;\n        uint256 createdAt;\n        uint256 totalAmount;\n        uint256 challengeStartTime;\n        address challenger;\n        bool challengeResolved;\n    }\n    uint256 public challengePeriod;\n    mapping(bytes32 => TransferBond) public transferBonds;\n    function getIsBonder(address maybeBonder) public view returns (bool) {}\n    function getTransferRootId(bytes32 rootHash, uint256 totalAmount) public pure returns (bytes32) {}\n    function confirmTransferRoot(\n        uint256 originChainId,\n        bytes32 rootHash,\n        uint256 destinationChainId,\n        uint256 totalAmount,\n        uint256 rootCommittedAt\n    )\n        external\n    {}\n}\n\nabstract contract MessengerWrapper is IMessengerWrapper {\n    address public immutable l1BridgeAddress;\n    uint256 public immutable l2ChainId;\n    bool public isRootConfirmation = false;\n\n    constructor(address _l1BridgeAddress, uint256 _l2ChainId) internal {\n        l1BridgeAddress = _l1BridgeAddress;\n        l2ChainId = _l2ChainId;\n    }\n\n    modifier onlyL1Bridge {\n        require(msg.sender == l1BridgeAddress, \"MW: Sender must be the L1 Bridge\");\n        _;\n    }\n\n    modifier rootConfirmation {\n        isRootConfirmation = true;\n        _;\n        isRootConfirmation = false;\n    }\n\n    /**\n     * @dev Confirm roots that have bonded on L1 and passed the challenge period with no challenge\n     * @param rootHashes The root hashes to confirm\n     * @param destinationChainIds The destinationChainId of the roots to confirm\n     * @param totalAmounts The totalAmount of the roots to confirm\n     * @param rootCommittedAts The rootCommittedAt of the roots to confirm\n     */\n    function confirmRoots (\n        bytes32[] calldata rootHashes,\n        uint256[] calldata destinationChainIds,\n        uint256[] calldata totalAmounts,\n        uint256[] calldata rootCommittedAts\n    ) external override rootConfirmation {\n        IL1Bridge l1Bridge = IL1Bridge(l1BridgeAddress);\n        require(l1Bridge.getIsBonder(msg.sender), \"MW: Sender must be a bonder\");\n        require(rootHashes.length == totalAmounts.length, \"MW: rootHashes and totalAmounts must be the same length\");\n\n        uint256 challengePeriod = l1Bridge.challengePeriod();\n        for (uint256 i = 0; i < rootHashes.length; i++) {\n            bool canConfirm = canConfirmRoot(l1Bridge, rootHashes[i], totalAmounts[i], challengePeriod);\n            require(canConfirm, \"MW: Root cannot be confirmed\");\n            l1Bridge.confirmTransferRoot(\n                l2ChainId,\n                rootHashes[i],\n                destinationChainIds[i],\n                totalAmounts[i],\n                rootCommittedAts[i]\n            );\n        }\n    }\n    \n    function canConfirmRoot (IL1Bridge l1Bridge, bytes32 rootHash, uint256 totalAmount, uint256 challengePeriod) public view returns (bool) {\n        bytes32 transferRootId = l1Bridge.getTransferRootId(rootHash, totalAmount);\n        (,uint256 createdAt,,uint256 challengeStartTime,,) = l1Bridge.transferBonds(transferRootId);\n\n        uint256 timeSinceBondCreation = block.timestamp - createdAt;\n        if (\n            createdAt != 0 &&\n            challengeStartTime == 0 &&\n            timeSinceBondCreation > challengePeriod\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n}\n"},"contracts/interfaces/IMessengerWrapper.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12 <=0.8.9;\npragma experimental ABIEncoderV2;\n\ninterface IMessengerWrapper {\n    function sendCrossDomainMessage(bytes memory _calldata) external;\n    function verifySender(address l1BridgeCaller, bytes memory _data) external;\n    function confirmRoots(\n        bytes32[] calldata rootHashes,\n        uint256[] calldata destinationChainIds,\n        uint256[] calldata totalAmounts,\n        uint256[] calldata rootCommittedAts\n    ) external;\n}\n"},"contracts/polygon/lib/ExitPayloadReader.sol":{"content":"pragma solidity ^0.8.0;\n\nimport {RLPReader} from \"./RLPReader.sol\";\n\nlibrary ExitPayloadReader {\n    using RLPReader for bytes;\n    using RLPReader for RLPReader.RLPItem;\n\n    uint8 constant WORD_SIZE = 32;\n\n    struct ExitPayload {\n        RLPReader.RLPItem[] data;\n    }\n\n    struct Receipt {\n        RLPReader.RLPItem[] data;\n        bytes raw;\n        uint256 logIndex;\n    }\n\n    struct Log {\n        RLPReader.RLPItem data;\n        RLPReader.RLPItem[] list;\n    }\n\n    struct LogTopics {\n        RLPReader.RLPItem[] data;\n    }\n\n    // copy paste of private copy() from RLPReader to avoid changing of existing contracts\n    function copy(\n        uint256 src,\n        uint256 dest,\n        uint256 len\n    ) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        // left over bytes. Mask is used to remove unwanted bytes from the word\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask)) // zero out src\n            let destpart := and(mload(dest), mask) // retrieve the bytes\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    function toExitPayload(bytes memory data) internal pure returns (ExitPayload memory) {\n        RLPReader.RLPItem[] memory payloadData = data.toRlpItem().toList();\n\n        return ExitPayload(payloadData);\n    }\n\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns (uint256) {\n        return payload.data[0].toUint();\n    }\n\n    function getBlockProof(ExitPayload memory payload) internal pure returns (bytes memory) {\n        return payload.data[1].toBytes();\n    }\n\n    function getBlockNumber(ExitPayload memory payload) internal pure returns (uint256) {\n        return payload.data[2].toUint();\n    }\n\n    function getBlockTime(ExitPayload memory payload) internal pure returns (uint256) {\n        return payload.data[3].toUint();\n    }\n\n    function getTxRoot(ExitPayload memory payload) internal pure returns (bytes32) {\n        return bytes32(payload.data[4].toUint());\n    }\n\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns (bytes32) {\n        return bytes32(payload.data[5].toUint());\n    }\n\n    function getReceipt(ExitPayload memory payload) internal pure returns (Receipt memory receipt) {\n        receipt.raw = payload.data[6].toBytes();\n        RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\n\n        if (receiptItem.isList()) {\n            // legacy tx\n            receipt.data = receiptItem.toList();\n        } else {\n            // pop first byte before parsting receipt\n            bytes memory typedBytes = receipt.raw;\n            bytes memory result = new bytes(typedBytes.length - 1);\n            uint256 srcPtr;\n            uint256 destPtr;\n            assembly {\n                srcPtr := add(33, typedBytes)\n                destPtr := add(0x20, result)\n            }\n\n            copy(srcPtr, destPtr, result.length);\n            receipt.data = result.toRlpItem().toList();\n        }\n\n        receipt.logIndex = getReceiptLogIndex(payload);\n        return receipt;\n    }\n\n    function getReceiptProof(ExitPayload memory payload) internal pure returns (bytes memory) {\n        return payload.data[7].toBytes();\n    }\n\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns (bytes memory) {\n        return payload.data[8].toBytes();\n    }\n\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns (uint256) {\n        return payload.data[8].toUint();\n    }\n\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns (uint256) {\n        return payload.data[9].toUint();\n    }\n\n    // Receipt methods\n    function toBytes(Receipt memory receipt) internal pure returns (bytes memory) {\n        return receipt.raw;\n    }\n\n    function getLog(Receipt memory receipt) internal pure returns (Log memory) {\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\n        return Log(logData, logData.toList());\n    }\n\n    // Log methods\n    function getEmitter(Log memory log) internal pure returns (address) {\n        return RLPReader.toAddress(log.list[0]);\n    }\n\n    function getTopics(Log memory log) internal pure returns (LogTopics memory) {\n        return LogTopics(log.list[1].toList());\n    }\n\n    function getData(Log memory log) internal pure returns (bytes memory) {\n        return log.list[2].toBytes();\n    }\n\n    function toRlpBytes(Log memory log) internal pure returns (bytes memory) {\n        return log.data.toRlpBytes();\n    }\n\n    // LogTopics methods\n    function getField(LogTopics memory topics, uint256 index) internal pure returns (RLPReader.RLPItem memory) {\n        return topics.data[index];\n    }\n}\n"},"contracts/wrappers/PolygonMessengerWrapper.sol":{"content":"// SPDX-License-Identifier: MIT\n// @unsupported: ovm\n\npragma solidity 0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"../polygon/tunnel/FxBaseRootTunnel.sol\";\nimport \"./MessengerWrapper.sol\";\n\n/**\n * @dev A MessengerWrapper for Polygon - https://docs.matic.network/docs\n * @notice Deployed on layer-1\n */\n\ncontract PolygonMessengerWrapper is FxBaseRootTunnel, MessengerWrapper {\n\n    constructor(\n        address _l1BridgeAddress,\n        address _checkpointManager,\n        address _fxRoot,\n        address _fxChildTunnel,\n        uint256 _l2ChainId\n    )\n        public\n        MessengerWrapper(_l1BridgeAddress, _l2ChainId)\n        FxBaseRootTunnel(_checkpointManager, _fxRoot)\n    {\n        setFxChildTunnel(_fxChildTunnel);\n    }\n\n    /** \n     * @dev Sends a message to the l2MessengerProxy from layer-1\n     * @param _calldata The data that l2MessengerProxy will be called with\n     * @notice The msg.sender is sent to the L2_PolygonMessengerProxy and checked there.\n     */\n    function sendCrossDomainMessage(bytes memory _calldata) public override {\n        _sendMessageToChild(\n            abi.encode(msg.sender, _calldata)\n        );\n    }\n\n    function verifySender(address l1BridgeCaller, bytes memory /*_data*/) public view override {\n        if (isRootConfirmation) return;\n\n        require(l1BridgeCaller == address(this), \"L1_PLGN_WPR: Caller must be this contract\");\n    }\n\n    function _processMessageFromChild(bytes memory message) internal override {\n        (bool success,) = l1BridgeAddress.call(message);\n        require(success, \"L1_PLGN_WPR: Call to L1 Bridge failed\");\n    }\n}\n"},"contracts/polygon/tunnel/FxBaseRootTunnel.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {RLPReader} from \"../lib/RLPReader.sol\";\nimport {MerklePatriciaProof} from \"../lib/MerklePatriciaProof.sol\";\nimport {Merkle} from \"../lib/Merkle.sol\";\nimport \"../lib/ExitPayloadReader.sol\";\n\ninterface IFxStateSender {\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\n}\n\ncontract ICheckpointManager {\n    struct HeaderBlock {\n        bytes32 root;\n        uint256 start;\n        uint256 end;\n        uint256 createdAt;\n        address proposer;\n    }\n\n    /**\n     * @notice mapping of checkpoint header numbers to block details\n     * @dev These checkpoints are submited by plasma contracts\n     */\n    mapping(uint256 => HeaderBlock) public headerBlocks;\n}\n\nabstract contract FxBaseRootTunnel {\n    using RLPReader for RLPReader.RLPItem;\n    using Merkle for bytes32;\n    using ExitPayloadReader for bytes;\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\n    using ExitPayloadReader for ExitPayloadReader.Log;\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\n\n    // keccak256(MessageSent(bytes))\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\n\n    // state sender contract\n    IFxStateSender public fxRoot;\n    // root chain manager\n    ICheckpointManager public checkpointManager;\n    // child tunnel contract which receives and sends messages\n    address public fxChildTunnel;\n\n    // storage to avoid duplicate exits\n    mapping(bytes32 => bool) public processedExits;\n\n    constructor(address _checkpointManager, address _fxRoot) {\n        checkpointManager = ICheckpointManager(_checkpointManager);\n        fxRoot = IFxStateSender(_fxRoot);\n    }\n\n    // set fxChildTunnel if not set already\n    function setFxChildTunnel(address _fxChildTunnel) public {\n        require(fxChildTunnel == address(0x0), \"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\");\n        fxChildTunnel = _fxChildTunnel;\n    }\n\n    /**\n     * @notice Send bytes message to Child Tunnel\n     * @param message bytes message that will be sent to Child Tunnel\n     * some message examples -\n     *   abi.encode(tokenId);\n     *   abi.encode(tokenId, tokenMetadata);\n     *   abi.encode(messageType, messageData);\n     */\n    function _sendMessageToChild(bytes memory message) internal {\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\n    }\n\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\n\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\n        uint256 blockNumber = payload.getBlockNumber();\n        // checking if exit has already been processed\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\n        bytes32 exitHash = keccak256(\n            abi.encodePacked(\n                blockNumber,\n                // first 2 nibbles are dropped while generating nibble array\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\n                // so converting to nibble array and then hashing it\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\n                payload.getReceiptLogIndex()\n            )\n        );\n        require(processedExits[exitHash] == false, \"FxRootTunnel: EXIT_ALREADY_PROCESSED\");\n        processedExits[exitHash] = true;\n\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\n        ExitPayloadReader.Log memory log = receipt.getLog();\n\n        // check child tunnel\n        require(fxChildTunnel == log.getEmitter(), \"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\");\n\n        bytes32 receiptRoot = payload.getReceiptRoot();\n        // verify receipt inclusion\n        require(\n            MerklePatriciaProof.verify(receipt.toBytes(), branchMaskBytes, payload.getReceiptProof(), receiptRoot),\n            \"FxRootTunnel: INVALID_RECEIPT_PROOF\"\n        );\n\n        // verify checkpoint inclusion\n        _checkBlockMembershipInCheckpoint(\n            blockNumber,\n            payload.getBlockTime(),\n            payload.getTxRoot(),\n            receiptRoot,\n            payload.getHeaderNumber(),\n            payload.getBlockProof()\n        );\n\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\n\n        require(\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\n            \"FxRootTunnel: INVALID_SIGNATURE\"\n        );\n\n        // received message data\n        bytes memory message = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\n        return message;\n    }\n\n    function _checkBlockMembershipInCheckpoint(\n        uint256 blockNumber,\n        uint256 blockTime,\n        bytes32 txRoot,\n        bytes32 receiptRoot,\n        uint256 headerNumber,\n        bytes memory blockProof\n    ) private view returns (uint256) {\n        (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\n\n        require(\n            keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\n                blockNumber - startBlock,\n                headerRoot,\n                blockProof\n            ),\n            \"FxRootTunnel: INVALID_HEADER\"\n        );\n        return createdAt;\n    }\n\n    /**\n     * @notice receive message from  L2 to L1, validated by proof\n     * @dev This function verifies if the transaction actually happened on child chain\n     *\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\n     *  2 - blockNumber - Block number containing the reference tx on child chain\n     *  3 - blockTime - Reference tx block time\n     *  4 - txRoot - Transactions root of block\n     *  5 - receiptRoot - Receipts root of block\n     *  6 - receipt - Receipt of the reference transaction\n     *  7 - receiptProof - Merkle proof of the reference receipt\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\n     *  9 - receiptLogIndex - Log Index to read from the receipt\n     */\n    function receiveMessage(bytes memory inputData) public virtual {\n        bytes memory message = _validateAndExtractMessage(inputData);\n        _processMessageFromChild(message);\n    }\n\n    /**\n     * @notice Process message received from Child Tunnel\n     * @dev function needs to be implemented to handle message as per requirement\n     * This is called by onStateReceive function.\n     * Since it is called via a system call, any event will not be emitted during its execution.\n     * @param message bytes message that was sent from Child Tunnel\n     */\n    function _processMessageFromChild(bytes memory message) internal virtual;\n}"},"contracts/polygon/lib/Merkle.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary Merkle {\n    function checkMembership(\n        bytes32 leaf,\n        uint256 index,\n        bytes32 rootHash,\n        bytes memory proof\n    ) internal pure returns (bool) {\n        require(proof.length % 32 == 0, \"Invalid proof length\");\n        uint256 proofHeight = proof.length / 32;\n        // Proof of size n means, height of the tree is n+1.\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\n        require(index < 2**proofHeight, \"Leaf index is too big\");\n\n        bytes32 proofElement;\n        bytes32 computedHash = leaf;\n        for (uint256 i = 32; i <= proof.length; i += 32) {\n            assembly {\n                proofElement := mload(add(proof, i))\n            }\n\n            if (index % 2 == 0) {\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n\n            index = index / 2;\n        }\n        return computedHash == rootHash;\n    }\n}"},"contracts/polygon/lib/RLPReader.sol":{"content":"/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n */\npragma solidity ^0.8.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item; // Item that's being iterated over.\n        uint256 nextPtr; // Position of the next item in the list.\n    }\n\n    /*\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\n     * @param self The iterator.\n     * @return The next element in the iteration.\n     */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint256 ptr = self.nextPtr;\n        uint256 itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n     * @dev Returns true if the iteration has more elements.\n     * @param self The iterator.\n     * @return true if the iteration has more elements.\n     */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @dev Create an iterator. Reverts if item is not a list.\n     * @param self The RLP item.\n     * @return An 'Iterator' over the item.\n     */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len - _payloadOffset(item.memPtr);\n    }\n\n    /*\n     * @param item RLP encoded list in bytes\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint256 result;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        return result == 0 ? false : true;\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 len = item.len - offset;\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + offset;\n        assembly {\n            result := mload(memPtr)\n\n            // shfit to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 len = item.len - offset; // data length\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(item.memPtr + offset, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\n        else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\n        else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) return 0;\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\n        else if (byte0 < LIST_SHORT_START)\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        else return byte0 - (LIST_LONG_START - 1) + 1;\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(\n        uint256 src,\n        uint256 dest,\n        uint256 len\n    ) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len == 0) return;\n\n        // left over bytes. Mask is used to remove unwanted bytes from the word\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\n\n        assembly {\n            let srcpart := and(mload(src), not(mask)) // zero out src\n            let destpart := and(mload(dest), mask) // retrieve the bytes\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n}"}},"settings":{"libraries":{},"optimizer":{"enabled":true,"runs":50000},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2ChainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IL1Bridge\",\"name\":\"l1Bridge\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengePeriod\",\"type\":\"uint256\"}],\"name\":\"canConfirmRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"destinationChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rootCommittedAts\",\"type\":\"uint256[]\"}],\"name\":\"confirmRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRootConfirmation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"sendCrossDomainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1BridgeCaller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifySender\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PolygonMessengerWrapper","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":1,"Runs":50000,"ConstructorArguments":"0x00000000000000000000000022b1cbb8d98a01a3b71d034bb899775a76eb1cc200000000000000000000000086e4dc95c7fbdbf52e33d563bbdb00823894c287000000000000000000000000fe5e5d361b2ad62c541bab87c45a0b9b018389a200000000000000000000000039f8d0ccd6347052acec0a2167e5ec808d1f14940000000000000000000000000000000000000000000000000000000000000089","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}