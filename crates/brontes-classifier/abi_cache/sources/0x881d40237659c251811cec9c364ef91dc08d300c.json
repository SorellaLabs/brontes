{"expiry":1699576908,"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/Imports.sol":{"content":"  \r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n\r\n// We import the contract so truffle compiles it, and we have the ABI\r\n// available when working from truffle console.\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; //helpers"},"@openzeppelin/contracts/utils/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"contracts/MetaSwap.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\nimport \"./ICHI.sol\";\r\nimport \"./Spender.sol\";\r\n\r\n/**\r\n * @title MetaSwap\r\n */\r\ncontract MetaSwap is Ownable, Pausable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using Address for address payable;\r\n\r\n    struct Adapter {\r\n        address addr; // adapter's address\r\n        bytes4 selector;\r\n        bytes data; // adapter's fixed data\r\n    }\r\n\r\n    ICHI public immutable chi;\r\n    Spender public immutable spender;\r\n\r\n    // Mapping of aggregatorId to aggregator\r\n    mapping(string => Adapter) public adapters;\r\n    mapping(string => bool) public adapterRemoved;\r\n\r\n    event AdapterSet(\r\n        string indexed aggregatorId,\r\n        address indexed addr,\r\n        bytes4 selector,\r\n        bytes data\r\n    );\r\n    event AdapterRemoved(string indexed aggregatorId);\r\n    event Swap(string indexed aggregatorId, address indexed sender);\r\n\r\n    constructor(ICHI _chi) public {\r\n        chi = _chi;\r\n        spender = new Spender();\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the adapter for an aggregator. It can't be changed later.\r\n     * @param aggregatorId Aggregator's identifier\r\n     * @param addr Address of the contract that contains the logic for this aggregator\r\n     * @param selector The function selector of the swap function in the adapter\r\n     * @param data Fixed abi encoded data the will be passed in each delegatecall made to the adapter\r\n     */\r\n    function setAdapter(\r\n        string calldata aggregatorId,\r\n        address addr,\r\n        bytes4 selector,\r\n        bytes calldata data\r\n    ) external onlyOwner {\r\n        require(addr.isContract(), \"ADAPTER_IS_NOT_A_CONTRACT\");\r\n        require(!adapterRemoved[aggregatorId], \"ADAPTER_REMOVED\");\r\n\r\n        Adapter storage adapter = adapters[aggregatorId];\r\n        require(adapter.addr == address(0), \"ADAPTER_EXISTS\");\r\n\r\n        adapter.addr = addr;\r\n        adapter.selector = selector;\r\n        adapter.data = data;\r\n        emit AdapterSet(aggregatorId, addr, selector, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes the adapter for an existing aggregator. This can't be undone.\r\n     * @param aggregatorId Aggregator's identifier\r\n     */\r\n    function removeAdapter(string calldata aggregatorId) external onlyOwner {\r\n        require(\r\n            adapters[aggregatorId].addr != address(0),\r\n            \"ADAPTER_DOES_NOT_EXIST\"\r\n        );\r\n        delete adapters[aggregatorId];\r\n        adapterRemoved[aggregatorId] = true;\r\n        emit AdapterRemoved(aggregatorId);\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a swap\r\n     * @param aggregatorId Identifier of the aggregator to be used for the swap\r\n     * @param data Dynamic data which is concatenated with the fixed aggregator's\r\n     * data in the delecatecall made to the adapter\r\n     */\r\n    function swap(\r\n        string calldata aggregatorId,\r\n        IERC20 tokenFrom,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external payable whenNotPaused nonReentrant {\r\n        _swap(aggregatorId, tokenFrom, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a swap\r\n     * @param aggregatorId Identifier of the aggregator to be used for the swap\r\n     * @param data Dynamic data which is concatenated with the fixed aggregator's\r\n     * data in the delecatecall made to the adapter\r\n     */\r\n    function swapUsingGasToken(\r\n        string calldata aggregatorId,\r\n        IERC20 tokenFrom,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external payable whenNotPaused nonReentrant {\r\n        uint256 gas = gasleft();\r\n\r\n        _swap(aggregatorId, tokenFrom, amount, data);\r\n\r\n        uint256 gasSpent = 21000 + gas - gasleft() + 16 * msg.data.length;\r\n        chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\r\n    }\r\n\r\n    function pauseSwaps() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpauseSwaps() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function _swap(\r\n        string calldata aggregatorId,\r\n        IERC20 tokenFrom,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) internal {\r\n        Adapter storage adapter = adapters[aggregatorId];\r\n\r\n        if (address(tokenFrom) != Constants.ETH) {\r\n            tokenFrom.safeTransferFrom(msg.sender, address(spender), amount);\r\n        }\r\n\r\n        spender.swap{value: msg.value}(\r\n            adapter.addr,\r\n            abi.encodePacked(\r\n                adapter.selector,\r\n                abi.encode(msg.sender),\r\n                adapter.data,\r\n                data\r\n            )\r\n        );\r\n\r\n        emit Swap(aggregatorId, msg.sender);\r\n    }\r\n}\r\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"contracts/ICHI.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ICHI is IERC20 {\r\n    function freeUpTo(uint256 value) external returns (uint256);\r\n\r\n    function freeFromUpTo(\r\n        address from,\r\n        uint256 value\r\n    ) external returns (uint256);\r\n\r\n    function mint(uint256 value) external;\r\n}\r\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"contracts/Spender.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./Constants.sol\";\r\n\r\ncontract Spender {\r\n    address public immutable metaswap;\r\n\r\n    constructor() public {\r\n        metaswap = msg.sender;\r\n    }\r\n\r\n    /// @dev Receives ether from swaps\r\n    fallback() external payable {}\r\n\r\n    function swap(address adapter, bytes calldata data) external payable {\r\n        require(msg.sender == metaswap, \"FORBIDDEN\");\r\n        require(adapter != address(0), \"ADAPTER_NOT_PROVIDED\");\r\n        _delegate(adapter, data, \"ADAPTER_DELEGATECALL_FAILED\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a delegatecall and bubbles up the errors, adapted from\r\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\r\n     * @param target Address of the contract to delegatecall\r\n     * @param data Data passed in the delegatecall\r\n     * @param errorMessage Fallback revert reason\r\n     */\r\n    function _delegate(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"contracts/adapters/UniswapAdapter.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\n\r\nimport \"../Constants.sol\";\r\n\r\ncontract UniswapAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using Address for address payable;\r\n    using SafeMath for uint256;\r\n\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    IUniswapV2Router02 public immutable UNISWAP;\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    address payable public immutable FEE_WALLET;\r\n\r\n    constructor(address payable feeWallet, IUniswapV2Router02 uniswap) public {\r\n        FEE_WALLET = feeWallet;\r\n        UNISWAP = uniswap;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a swap\r\n     * @param recipient The original msg.sender performing the swap\r\n     * @param tokenFrom Token to be swapped\r\n     * @param tokenTo Token to be received\r\n     * @param amountFrom Amount of tokenFrom to swap\r\n     * @param amountTo Minimum amount of tokenTo to receive\r\n     * @param path Used by Uniswap\r\n     * @param deadline Timestamp at which the swap becomes invalid. Used by Uniswap\r\n     * @param feeOnTransfer Use `supportingFeeOnTransfer` Uniswap methods\r\n     * @param fee Amount of tokenFrom sent to the fee wallet\r\n     */\r\n    function swap(\r\n        address payable recipient,\r\n        IERC20 tokenFrom,\r\n        IERC20 tokenTo,\r\n        uint256 amountFrom,\r\n        uint256 amountTo,\r\n        address[] calldata path,\r\n        uint256 deadline,\r\n        bool feeOnTransfer,\r\n        uint256 fee\r\n    ) external payable {\r\n        require(tokenFrom != tokenTo, \"TOKEN_PAIR_INVALID\");\r\n\r\n        if (address(tokenFrom) == Constants.ETH) {\r\n            FEE_WALLET.sendValue(fee);\r\n        } else {\r\n            _transfer(tokenFrom, fee, FEE_WALLET);\r\n        }\r\n\r\n        if (address(tokenFrom) == Constants.ETH) {\r\n            if (feeOnTransfer) {\r\n                UNISWAP.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n                    value: address(this).balance\r\n                }(amountTo, path, address(this), deadline);\r\n            } else {\r\n                UNISWAP.swapExactETHForTokens{value: address(this).balance}(\r\n                    amountTo,\r\n                    path,\r\n                    address(this),\r\n                    deadline\r\n                );\r\n            }\r\n        } else {\r\n            _approveSpender(tokenFrom, address(UNISWAP), amountFrom);\r\n            if (address(tokenTo) == Constants.ETH) {\r\n                if (feeOnTransfer) {\r\n                    UNISWAP.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                        amountFrom,\r\n                        amountTo,\r\n                        path,\r\n                        address(this),\r\n                        deadline\r\n                    );\r\n                } else {\r\n                    UNISWAP.swapExactTokensForETH(\r\n                        amountFrom,\r\n                        amountTo,\r\n                        path,\r\n                        address(this),\r\n                        deadline\r\n                    );\r\n                }\r\n            } else {\r\n                if (feeOnTransfer) {\r\n                    UNISWAP\r\n                        .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                        amountFrom,\r\n                        amountTo,\r\n                        path,\r\n                        address(this),\r\n                        deadline\r\n                    );\r\n                } else {\r\n                    UNISWAP.swapExactTokensForTokens(\r\n                        amountFrom,\r\n                        amountTo,\r\n                        path,\r\n                        address(this),\r\n                        deadline\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        // Transfer remaining balance of tokenFrom to sender\r\n        if (address(tokenFrom) != Constants.ETH) {\r\n            _transfer(tokenFrom, tokenFrom.balanceOf(address(this)), recipient);\r\n        }\r\n\r\n        uint256 weiBalance = address(this).balance;\r\n\r\n        // Transfer remaining balance of tokenTo to sender\r\n        if (address(tokenTo) != Constants.ETH) {\r\n            uint256 balance = tokenTo.balanceOf(address(this));\r\n            require(balance >= amountTo, \"INSUFFICIENT_AMOUNT\");\r\n            _transfer(tokenTo, balance, recipient);\r\n        } else {\r\n            // If tokenTo == ETH, then check that the remaining ETH balance >= amountTo\r\n            require(weiBalance >= amountTo, \"INSUFFICIENT_AMOUNT\");\r\n        }\r\n\r\n        // If there are unused fees or if tokenTo is ETH, transfer to sender\r\n        if (weiBalance > 0) {\r\n            recipient.sendValue(weiBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers token to sender if amount > 0\r\n     * @param token IERC20 token to transfer to sender\r\n     * @param amount Amount of token to transfer\r\n     * @param recipient Address that will receive the tokens\r\n     */\r\n    function _transfer(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        address recipient\r\n    ) internal {\r\n        if (amount > 0) {\r\n            token.safeTransfer(recipient, amount);\r\n        }\r\n    }\r\n\r\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/SafeERC20.sol\r\n    /**\r\n     * @dev Approves max amount of token to the spender if the allowance is lower than amount\r\n     * @param token The ERC20 token to approve\r\n     * @param spender Address to which funds will be approved\r\n     * @param amount Amount used to compare current allowance\r\n     */\r\n    function _approveSpender(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        // If allowance is not enough, approve max possible amount\r\n        uint256 allowance = token.allowance(address(this), spender);\r\n        if (allowance < amount) {\r\n            bytes memory returndata = address(token).functionCall(\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    type(uint256).max\r\n                )\r\n            );\r\n\r\n            if (returndata.length > 0) {\r\n                // Return data is optional\r\n                require(abi.decode(returndata, (bool)), \"APPROVAL_FAILED\");\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"contracts/mocks/MockSelfDestruct.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ncontract MockSelfDestruct {\r\n    constructor() public payable {}\r\n\r\n    fallback() external payable {\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    function kill(address payable target) external payable {\r\n        selfdestruct(target);\r\n    }\r\n}\r\n"},"@openzeppelin/contracts/GSN/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"contracts/mocks/MockAdapter.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\ncontract MockAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using Address for address payable;\r\n\r\n    event MockAdapterEvent(\r\n        address sender,\r\n        uint256 valueFixed,\r\n        uint256 valueDynamic\r\n    );\r\n\r\n    function test(\r\n        address sender,\r\n        uint256 valueFixed,\r\n        uint256 valueDynamic\r\n    ) external payable {\r\n        emit MockAdapterEvent(sender, valueFixed, valueDynamic);\r\n    }\r\n\r\n    function testRevert(\r\n        address,\r\n        uint256,\r\n        uint256\r\n    ) external payable {\r\n        revert(\"SWAP_FAILED\");\r\n    }\r\n\r\n    function testRevertNoReturnData(\r\n        address,\r\n        uint256,\r\n        uint256\r\n    ) external payable {\r\n        revert();\r\n    }\r\n}\r\n"},"contracts/Constants.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary Constants {\r\n    address internal constant ETH = 0x0000000000000000000000000000000000000000;\r\n}\r\n"},"contracts/adapters/FeeCommonAdapter.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nimport \"../Constants.sol\";\r\n\r\ncontract FeeCommonAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using Address for address payable;\r\n    using SafeMath for uint256;\r\n\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    address payable public immutable FEE_WALLET;\r\n\r\n    constructor(address payable feeWallet) public {\r\n        FEE_WALLET = feeWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a swap\r\n     * @param recipient The original msg.sender performing the swap\r\n     * @param aggregator Address of the aggregator's contract\r\n     * @param spender Address to which tokens will be approved\r\n     * @param method Selector of the function to be called in the aggregator's contract\r\n     * @param tokenFrom Token to be swapped\r\n     * @param tokenTo Token to be received\r\n     * @param amountFrom Amount of tokenFrom to swap\r\n     * @param amountTo Minimum amount of tokenTo to receive\r\n     * @param data Data used for the call made to the aggregator's contract\r\n     * @param fee Amount of tokenFrom sent to the fee wallet\r\n     */\r\n    function swap(\r\n        address payable recipient,\r\n        address aggregator,\r\n        address spender,\r\n        bytes4 method,\r\n        IERC20 tokenFrom,\r\n        IERC20 tokenTo,\r\n        uint256 amountFrom,\r\n        uint256 amountTo,\r\n        bytes calldata data,\r\n        uint256 fee\r\n    ) external payable {\r\n        require(tokenFrom != tokenTo, \"TOKEN_PAIR_INVALID\");\r\n\r\n        if (address(tokenFrom) == Constants.ETH) {\r\n            FEE_WALLET.sendValue(fee);\r\n        } else {\r\n            _transfer(tokenFrom, fee, FEE_WALLET);\r\n            _approveSpender(tokenFrom, spender, amountFrom);\r\n        }\r\n\r\n        // We always forward msg.value as it may be necessary to pay fees\r\n        aggregator.functionCallWithValue(\r\n            abi.encodePacked(method, data),\r\n            address(this).balance\r\n        );\r\n\r\n        // Transfer remaining balance of tokenFrom to sender\r\n        if (address(tokenFrom) != Constants.ETH) {\r\n            _transfer(tokenFrom, tokenFrom.balanceOf(address(this)), recipient);\r\n        }\r\n\r\n        uint256 weiBalance = address(this).balance;\r\n\r\n        // Transfer remaining balance of tokenTo to sender\r\n        if (address(tokenTo) != Constants.ETH) {\r\n            uint256 balance = tokenTo.balanceOf(address(this));\r\n            require(balance >= amountTo, \"INSUFFICIENT_AMOUNT\");\r\n            _transfer(tokenTo, balance, recipient);\r\n        } else {\r\n            // If tokenTo == ETH, then check that the remaining ETH balance >= amountTo\r\n            require(weiBalance >= amountTo, \"INSUFFICIENT_AMOUNT\");\r\n        }\r\n\r\n        // If there are unused fees or if tokenTo is ETH, transfer to sender\r\n        if (weiBalance > 0) {\r\n            recipient.sendValue(weiBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers token to sender if amount > 0\r\n     * @param token IERC20 token to transfer to sender\r\n     * @param amount Amount of token to transfer\r\n     * @param recipient Address that will receive the tokens\r\n     */\r\n    function _transfer(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        address recipient\r\n    ) internal {\r\n        if (amount > 0) {\r\n            token.safeTransfer(recipient, amount);\r\n        }\r\n    }\r\n\r\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/SafeERC20.sol\r\n    /**\r\n     * @dev Approves max amount of token to the spender if the allowance is lower than amount\r\n     * @param token The ERC20 token to approve\r\n     * @param spender Address to which funds will be approved\r\n     * @param amount Amount used to compare current allowance\r\n     */\r\n    function _approveSpender(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        // If allowance is not enough, approve max possible amount\r\n        uint256 allowance = token.allowance(address(this), spender);\r\n        if (allowance < amount) {\r\n            bytes memory returndata = address(token).functionCall(\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    type(uint256).max\r\n                )\r\n            );\r\n\r\n            if (returndata.length > 0) {\r\n                // Return data is optional\r\n                require(abi.decode(returndata, (bool)), \"APPROVAL_FAILED\");\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"contracts/IWETH.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n"},"contracts/adapters/CommonAdapter.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nimport \"../Constants.sol\";\r\n\r\ncontract CommonAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using Address for address payable;\r\n\r\n    /**\r\n     * @dev Performs a swap\r\n     * @param recipient The original msg.sender performing the swap\r\n     * @param aggregator Address of the aggregator's contract\r\n     * @param spender Address to which tokens will be approved\r\n     * @param method Selector of the function to be called in the aggregator's contract\r\n     * @param tokenFrom Token to be swapped\r\n     * @param tokenTo Token to be received\r\n     * @param amountFrom Amount of tokenFrom to swap\r\n     * @param amountTo Minimum amount of tokenTo to receive\r\n     * @param data Data used for the call made to the aggregator's contract\r\n     */\r\n    function swap(\r\n        address payable recipient,\r\n        address aggregator,\r\n        address spender,\r\n        bytes4 method,\r\n        IERC20 tokenFrom,\r\n        IERC20 tokenTo,\r\n        uint256 amountFrom,\r\n        uint256 amountTo,\r\n        bytes calldata data\r\n    ) external payable {\r\n        require(tokenFrom != tokenTo, \"TOKEN_PAIR_INVALID\");\r\n\r\n        if (address(tokenFrom) != Constants.ETH) {\r\n            _approveSpender(tokenFrom, spender, amountFrom);\r\n        }\r\n\r\n        // We always forward msg.value as it may be necessary to pay fees\r\n        bytes memory encodedData = abi.encodePacked(method, data);\r\n        aggregator.functionCallWithValue(encodedData, msg.value);\r\n\r\n        // Transfer remaining balance of tokenFrom to sender\r\n        if (address(tokenFrom) != Constants.ETH) {\r\n            uint256 balance = tokenFrom.balanceOf(address(this));\r\n            _transfer(tokenFrom, balance, recipient);\r\n        }\r\n\r\n        uint256 weiBalance = address(this).balance;\r\n\r\n        // Transfer remaining balance of tokenTo to sender\r\n        if (address(tokenTo) != Constants.ETH) {\r\n            uint256 balance = tokenTo.balanceOf(address(this));\r\n            require(balance >= amountTo, \"INSUFFICIENT_AMOUNT\");\r\n            _transfer(tokenTo, balance, recipient);\r\n        } else {\r\n            // If tokenTo == ETH, then check that the remaining ETH balance >= amountTo\r\n            require(weiBalance >= amountTo, \"INSUFFICIENT_AMOUNT\");\r\n        }\r\n\r\n        // If there are unused fees or if tokenTo is ETH, transfer to sender\r\n        if (weiBalance > 0) {\r\n            recipient.sendValue(weiBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers token to sender if amount > 0\r\n     * @param token IERC20 token to transfer to sender\r\n     * @param amount Amount of token to transfer\r\n     * @param recipient Address that will receive the tokens\r\n     */\r\n    function _transfer(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        address recipient\r\n    ) internal {\r\n        if (amount > 0) {\r\n            token.safeTransfer(recipient, amount);\r\n        }\r\n    }\r\n\r\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/SafeERC20.sol\r\n    /**\r\n     * @dev Approves max amount of token to the spender if the allowance is lower than amount\r\n     * @param token The ERC20 token to approve\r\n     * @param spender Address to which funds will be approved\r\n     * @param amount Amount used to compare current allowance\r\n     */\r\n    function _approveSpender(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        // If allowance is not enough, approve max possible amount\r\n        uint256 allowance = token.allowance(address(this), spender);\r\n        if (allowance < amount) {\r\n            bytes memory returndata = address(token).functionCall(\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    type(uint256).max\r\n                )\r\n            );\r\n\r\n            if (returndata.length > 0) {\r\n                // Return data is optional\r\n                require(abi.decode(returndata, (bool)), \"APPROVAL_FAILED\");\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"contracts/adapters/FeeWethAdapter.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nimport \"../Constants.sol\";\r\nimport \"../IWETH.sol\";\r\n\r\ncontract FeeWethAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using Address for address payable;\r\n    using SafeMath for uint256;\r\n\r\n    IWETH public immutable weth;\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    address payable public immutable FEE_WALLET;\r\n\r\n    constructor(IWETH _weth, address payable feeWallet) public {\r\n        weth = _weth;\r\n        FEE_WALLET = feeWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a swap\r\n     * @param recipient The original msg.sender performing the swap\r\n     * @param aggregator Address of the aggregator's contract\r\n     * @param spender Address to which tokens will be approved\r\n     * @param method Selector of the function to be called in the aggregator's contract\r\n     * @param tokenFrom Token to be swapped\r\n     * @param tokenTo Token to be received\r\n     * @param amountFrom Amount of tokenFrom to swap\r\n     * @param amountTo Minimum amount of tokenTo to receive\r\n     * @param data Data used for the call made to the aggregator's contract\r\n     * @param fee Amount of tokenFrom sent to the fee wallet\r\n     */\r\n    function swap(\r\n        address payable recipient,\r\n        address aggregator,\r\n        address spender,\r\n        bytes4 method,\r\n        IERC20 tokenFrom,\r\n        IERC20 tokenTo,\r\n        uint256 amountFrom,\r\n        uint256 amountTo,\r\n        bytes calldata data,\r\n        uint256 fee\r\n    ) external payable {\r\n        require(tokenFrom != tokenTo, \"TOKEN_PAIR_INVALID\");\r\n\r\n        if (address(tokenFrom) == Constants.ETH) {\r\n            FEE_WALLET.sendValue(fee);\r\n            // If tokenFrom is ETH, msg.value = fee + amountFrom (total fee could be 0)\r\n            // Can't deal with ETH, convert to WETH, the remaining balance will be the fee\r\n            weth.deposit{value: amountFrom}();\r\n            _approveSpender(weth, spender, amountFrom);\r\n        } else {\r\n            _transfer(tokenFrom, fee, FEE_WALLET);\r\n            // Otherwise capture tokens from sender\r\n            _approveSpender(tokenFrom, spender, amountFrom);\r\n        }\r\n\r\n        // Perform the swap\r\n        aggregator.functionCallWithValue(\r\n            abi.encodePacked(method, data),\r\n            address(this).balance\r\n        );\r\n\r\n        // Transfer remaining balance of tokenFrom to sender\r\n        if (address(tokenFrom) != Constants.ETH) {\r\n            _transfer(tokenFrom, tokenFrom.balanceOf(address(this)), recipient);\r\n        } else {\r\n            // If using ETH, just unwrap any remaining WETH\r\n            // At the end of this function all ETH will be transferred to the sender\r\n            _unwrapWETH();\r\n        }\r\n\r\n        uint256 weiBalance = address(this).balance;\r\n\r\n        // Transfer remaining balance of tokenTo to sender\r\n        if (address(tokenTo) != Constants.ETH) {\r\n            uint256 balance = tokenTo.balanceOf(address(this));\r\n            require(balance >= amountTo, \"INSUFFICIENT_AMOUNT\");\r\n            _transfer(tokenTo, balance, recipient);\r\n        } else {\r\n            // If tokenTo == ETH, unwrap received WETH and add it to the wei balance,\r\n            // then check that the remaining ETH balance >= amountTo\r\n            // It is safe to not use safeMath as no one can have enough Ether to overflow\r\n            weiBalance += _unwrapWETH();\r\n            require(weiBalance >= amountTo, \"INSUFFICIENT_AMOUNT\");\r\n        }\r\n\r\n        // If there are unused fees or if tokenTo is ETH, transfer to sender\r\n        if (weiBalance > 0) {\r\n            recipient.sendValue(weiBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Unwraps all available WETH into ETH\r\n     */\r\n    function _unwrapWETH() internal returns (uint256) {\r\n        uint256 balance = weth.balanceOf(address(this));\r\n        weth.withdraw(balance);\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers token to sender if amount > 0\r\n     * @param token IERC20 token to transfer to sender\r\n     * @param amount Amount of token to transfer\r\n     * @param recipient Address that will receive the tokens\r\n     */\r\n    function _transfer(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        address recipient\r\n    ) internal {\r\n        if (amount > 0) {\r\n            token.safeTransfer(recipient, amount);\r\n        }\r\n    }\r\n\r\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/SafeERC20.sol\r\n    /**\r\n     * @dev Approves max amount of token to the spender if the allowance is lower than amount\r\n     * @param token The ERC20 token to approve\r\n     * @param spender Address to which funds will be approved\r\n     * @param amount Amount used to compare current allowance\r\n     */\r\n    function _approveSpender(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        // If allowance is not enough, approve max possible amount\r\n        uint256 allowance = token.allowance(address(this), spender);\r\n        if (allowance < amount) {\r\n            bytes memory returndata = address(token).functionCall(\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    type(uint256).max\r\n                )\r\n            );\r\n\r\n            if (returndata.length > 0) {\r\n                // Return data is optional\r\n                require(abi.decode(returndata, (bool)), \"APPROVAL_FAILED\");\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"@openzeppelin/contracts/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"},"contracts/mocks/MockContract.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\n// TAKEN FROM https://github.com/gnosis/mock-contract\r\n// TODO: use their npm package once it is published for solidity 0.6\r\n\r\ninterface MockInterface {\r\n    /**\r\n     * @dev After calling this method, the mock will return `response` when it is called\r\n     * with any calldata that is not mocked more specifically below\r\n     * (e.g. using givenMethodReturn).\r\n     * @param response ABI encoded response that will be returned if method is invoked\r\n     */\r\n    function givenAnyReturn(bytes calldata response) external;\r\n\r\n    function givenAnyReturnBool(bool response) external;\r\n\r\n    function givenAnyReturnUint(uint256 response) external;\r\n\r\n    function givenAnyReturnAddress(address response) external;\r\n\r\n    function givenAnyRevert() external;\r\n\r\n    function givenAnyRevertWithMessage(string calldata message) external;\r\n\r\n    function givenAnyRunOutOfGas() external;\r\n\r\n    /**\r\n     * @dev After calling this method, the mock will return `response` when the given\r\n     * methodId is called regardless of arguments. If the methodId and arguments\r\n     * are mocked more specifically (using `givenMethodAndArguments`) the latter\r\n     * will take precedence.\r\n     * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\r\n     * @param response ABI encoded response that will be returned if method is invoked\r\n     */\r\n    function givenMethodReturn(bytes calldata method, bytes calldata response)\r\n        external;\r\n\r\n    function givenMethodReturnBool(bytes calldata method, bool response)\r\n        external;\r\n\r\n    function givenMethodReturnUint(bytes calldata method, uint256 response)\r\n        external;\r\n\r\n    function givenMethodReturnAddress(bytes calldata method, address response)\r\n        external;\r\n\r\n    function givenMethodRevert(bytes calldata method) external;\r\n\r\n    function givenMethodRevertWithMessage(\r\n        bytes calldata method,\r\n        string calldata message\r\n    ) external;\r\n\r\n    function givenMethodRunOutOfGas(bytes calldata method) external;\r\n\r\n    /**\r\n     * @dev After calling this method, the mock will return `response` when the given\r\n     * methodId is called with matching arguments. These exact calldataMocks will take\r\n     * precedence over all other calldataMocks.\r\n     * @param call ABI encoded calldata (methodId and arguments)\r\n     * @param response ABI encoded response that will be returned if contract is invoked with calldata\r\n     */\r\n    function givenCalldataReturn(bytes calldata call, bytes calldata response)\r\n        external;\r\n\r\n    function givenCalldataReturnBool(bytes calldata call, bool response)\r\n        external;\r\n\r\n    function givenCalldataReturnUint(bytes calldata call, uint256 response)\r\n        external;\r\n\r\n    function givenCalldataReturnAddress(bytes calldata call, address response)\r\n        external;\r\n\r\n    function givenCalldataRevert(bytes calldata call) external;\r\n\r\n    function givenCalldataRevertWithMessage(\r\n        bytes calldata call,\r\n        string calldata message\r\n    ) external;\r\n\r\n    function givenCalldataRunOutOfGas(bytes calldata call) external;\r\n\r\n    /**\r\n     * @dev Returns the number of times anything has been called on this mock since last reset\r\n     */\r\n    function invocationCount() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the number of times the given method has been called on this mock since last reset\r\n     * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\r\n     */\r\n    function invocationCountForMethod(bytes calldata method)\r\n        external\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the number of times this mock has been called with the exact calldata since last reset.\r\n     * @param call ABI encoded calldata (methodId and arguments)\r\n     */\r\n    function invocationCountForCalldata(bytes calldata call)\r\n        external\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Resets all mocked methods and invocation counts.\r\n     */\r\n    function reset() external;\r\n}\r\n\r\n/**\r\n * Implementation of the MockInterface.\r\n */\r\ncontract MockContract is MockInterface {\r\n    enum MockType {Return, Revert, OutOfGas}\r\n\r\n    bytes32 public constant MOCKS_LIST_START = hex\"01\";\r\n    bytes public constant MOCKS_LIST_END = \"0xff\";\r\n    bytes32 public constant MOCKS_LIST_END_HASH = keccak256(MOCKS_LIST_END);\r\n    bytes4 public constant SENTINEL_ANY_MOCKS = hex\"01\";\r\n    bytes public constant DEFAULT_FALLBACK_VALUE = abi.encode(false);\r\n\r\n    // A linked list allows easy iteration and inclusion checks\r\n    mapping(bytes32 => bytes) calldataMocks;\r\n    mapping(bytes => MockType) calldataMockTypes;\r\n    mapping(bytes => bytes) calldataExpectations;\r\n    mapping(bytes => string) calldataRevertMessage;\r\n    mapping(bytes32 => uint256) calldataInvocations;\r\n\r\n    mapping(bytes4 => bytes4) methodIdMocks;\r\n    mapping(bytes4 => MockType) methodIdMockTypes;\r\n    mapping(bytes4 => bytes) methodIdExpectations;\r\n    mapping(bytes4 => string) methodIdRevertMessages;\r\n    mapping(bytes32 => uint256) methodIdInvocations;\r\n\r\n    MockType fallbackMockType;\r\n    bytes fallbackExpectation = DEFAULT_FALLBACK_VALUE;\r\n    string fallbackRevertMessage;\r\n    uint256 invocations;\r\n    uint256 resetCount;\r\n\r\n    constructor() public {\r\n        calldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\r\n        methodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\r\n    }\r\n\r\n    function trackCalldataMock(bytes memory call) private {\r\n        bytes32 callHash = keccak256(call);\r\n        if (calldataMocks[callHash].length == 0) {\r\n            calldataMocks[callHash] = calldataMocks[MOCKS_LIST_START];\r\n            calldataMocks[MOCKS_LIST_START] = call;\r\n        }\r\n    }\r\n\r\n    function trackMethodIdMock(bytes4 methodId) private {\r\n        if (methodIdMocks[methodId] == 0x0) {\r\n            methodIdMocks[methodId] = methodIdMocks[SENTINEL_ANY_MOCKS];\r\n            methodIdMocks[SENTINEL_ANY_MOCKS] = methodId;\r\n        }\r\n    }\r\n\r\n    function _givenAnyReturn(bytes memory response) internal {\r\n        fallbackMockType = MockType.Return;\r\n        fallbackExpectation = response;\r\n    }\r\n\r\n    function givenAnyReturn(bytes calldata response) external override {\r\n        _givenAnyReturn(response);\r\n    }\r\n\r\n    function givenAnyReturnBool(bool response) external override {\r\n        uint256 flag = response ? 1 : 0;\r\n        _givenAnyReturn(uintToBytes(flag));\r\n    }\r\n\r\n    function givenAnyReturnUint(uint256 response) external override {\r\n        _givenAnyReturn(uintToBytes(response));\r\n    }\r\n\r\n    function givenAnyReturnAddress(address response) external override {\r\n        _givenAnyReturn(uintToBytes(uint256(response)));\r\n    }\r\n\r\n    function givenAnyRevert() external override {\r\n        fallbackMockType = MockType.Revert;\r\n        fallbackRevertMessage = \"\";\r\n    }\r\n\r\n    function givenAnyRevertWithMessage(string calldata message)\r\n        external\r\n        override\r\n    {\r\n        fallbackMockType = MockType.Revert;\r\n        fallbackRevertMessage = message;\r\n    }\r\n\r\n    function givenAnyRunOutOfGas() external override {\r\n        fallbackMockType = MockType.OutOfGas;\r\n    }\r\n\r\n    function _givenCalldataReturn(bytes memory call, bytes memory response)\r\n        private\r\n    {\r\n        calldataMockTypes[call] = MockType.Return;\r\n        calldataExpectations[call] = response;\r\n        trackCalldataMock(call);\r\n    }\r\n\r\n    function givenCalldataReturn(bytes calldata call, bytes calldata response)\r\n        external\r\n        override\r\n    {\r\n        _givenCalldataReturn(call, response);\r\n    }\r\n\r\n    function givenCalldataReturnBool(bytes calldata call, bool response)\r\n        external\r\n        override\r\n    {\r\n        uint256 flag = response ? 1 : 0;\r\n        _givenCalldataReturn(call, uintToBytes(flag));\r\n    }\r\n\r\n    function givenCalldataReturnUint(bytes calldata call, uint256 response)\r\n        external\r\n        override\r\n    {\r\n        _givenCalldataReturn(call, uintToBytes(response));\r\n    }\r\n\r\n    function givenCalldataReturnAddress(bytes calldata call, address response)\r\n        external\r\n        override\r\n    {\r\n        _givenCalldataReturn(call, uintToBytes(uint256(response)));\r\n    }\r\n\r\n    function _givenMethodReturn(bytes memory call, bytes memory response)\r\n        private\r\n    {\r\n        bytes4 method = bytesToBytes4(call);\r\n        methodIdMockTypes[method] = MockType.Return;\r\n        methodIdExpectations[method] = response;\r\n        trackMethodIdMock(method);\r\n    }\r\n\r\n    function givenMethodReturn(bytes calldata call, bytes calldata response)\r\n        external\r\n        override\r\n    {\r\n        _givenMethodReturn(call, response);\r\n    }\r\n\r\n    function givenMethodReturnBool(bytes calldata call, bool response)\r\n        external\r\n        override\r\n    {\r\n        uint256 flag = response ? 1 : 0;\r\n        _givenMethodReturn(call, uintToBytes(flag));\r\n    }\r\n\r\n    function givenMethodReturnUint(bytes calldata call, uint256 response)\r\n        external\r\n        override\r\n    {\r\n        _givenMethodReturn(call, uintToBytes(response));\r\n    }\r\n\r\n    function givenMethodReturnAddress(bytes calldata call, address response)\r\n        external\r\n        override\r\n    {\r\n        _givenMethodReturn(call, uintToBytes(uint256(response)));\r\n    }\r\n\r\n    function givenCalldataRevert(bytes calldata call) external override {\r\n        calldataMockTypes[call] = MockType.Revert;\r\n        calldataRevertMessage[call] = \"\";\r\n        trackCalldataMock(call);\r\n    }\r\n\r\n    function givenMethodRevert(bytes calldata call) external override {\r\n        bytes4 method = bytesToBytes4(call);\r\n        methodIdMockTypes[method] = MockType.Revert;\r\n        trackMethodIdMock(method);\r\n    }\r\n\r\n    function givenCalldataRevertWithMessage(\r\n        bytes calldata call,\r\n        string calldata message\r\n    ) external override {\r\n        calldataMockTypes[call] = MockType.Revert;\r\n        calldataRevertMessage[call] = message;\r\n        trackCalldataMock(call);\r\n    }\r\n\r\n    function givenMethodRevertWithMessage(\r\n        bytes calldata call,\r\n        string calldata message\r\n    ) external override {\r\n        bytes4 method = bytesToBytes4(call);\r\n        methodIdMockTypes[method] = MockType.Revert;\r\n        methodIdRevertMessages[method] = message;\r\n        trackMethodIdMock(method);\r\n    }\r\n\r\n    function givenCalldataRunOutOfGas(bytes calldata call) external override {\r\n        calldataMockTypes[call] = MockType.OutOfGas;\r\n        trackCalldataMock(call);\r\n    }\r\n\r\n    function givenMethodRunOutOfGas(bytes calldata call) external override {\r\n        bytes4 method = bytesToBytes4(call);\r\n        methodIdMockTypes[method] = MockType.OutOfGas;\r\n        trackMethodIdMock(method);\r\n    }\r\n\r\n    function invocationCount() external override returns (uint256) {\r\n        return invocations;\r\n    }\r\n\r\n    function invocationCountForMethod(bytes calldata call)\r\n        external\r\n        override\r\n        returns (uint256)\r\n    {\r\n        bytes4 method = bytesToBytes4(call);\r\n        return\r\n            methodIdInvocations[keccak256(\r\n                abi.encodePacked(resetCount, method)\r\n            )];\r\n    }\r\n\r\n    function invocationCountForCalldata(bytes calldata call)\r\n        external\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return\r\n            calldataInvocations[keccak256(abi.encodePacked(resetCount, call))];\r\n    }\r\n\r\n    function reset() external override {\r\n        // Reset all exact calldataMocks\r\n        bytes memory nextMock = calldataMocks[MOCKS_LIST_START];\r\n        bytes32 mockHash = keccak256(nextMock);\r\n        // We cannot compary bytes\r\n        while (mockHash != MOCKS_LIST_END_HASH) {\r\n            // Reset all mock maps\r\n            calldataMockTypes[nextMock] = MockType.Return;\r\n            calldataExpectations[nextMock] = hex\"\";\r\n            calldataRevertMessage[nextMock] = \"\";\r\n            // Set next mock to remove\r\n            nextMock = calldataMocks[mockHash];\r\n            // Remove from linked list\r\n            calldataMocks[mockHash] = \"\";\r\n            // Update mock hash\r\n            mockHash = keccak256(nextMock);\r\n        }\r\n        // Clear list\r\n        calldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\r\n\r\n        // Reset all any calldataMocks\r\n        bytes4 nextAnyMock = methodIdMocks[SENTINEL_ANY_MOCKS];\r\n        while (nextAnyMock != SENTINEL_ANY_MOCKS) {\r\n            bytes4 currentAnyMock = nextAnyMock;\r\n            methodIdMockTypes[currentAnyMock] = MockType.Return;\r\n            methodIdExpectations[currentAnyMock] = hex\"\";\r\n            methodIdRevertMessages[currentAnyMock] = \"\";\r\n            nextAnyMock = methodIdMocks[currentAnyMock];\r\n            // Remove from linked list\r\n            methodIdMocks[currentAnyMock] = 0x0;\r\n        }\r\n        // Clear list\r\n        methodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\r\n\r\n        fallbackExpectation = DEFAULT_FALLBACK_VALUE;\r\n        fallbackMockType = MockType.Return;\r\n        invocations = 0;\r\n        resetCount += 1;\r\n    }\r\n\r\n    function useAllGas() private {\r\n        while (true) {\r\n            bool s;\r\n            assembly {\r\n                //expensive call to EC multiply contract\r\n                s := call(sub(gas(), 2000), 6, 0, 0x0, 0xc0, 0x0, 0x60)\r\n            }\r\n        }\r\n    }\r\n\r\n    function bytesToBytes4(bytes memory b) private pure returns (bytes4) {\r\n        bytes4 out;\r\n        for (uint256 i = 0; i < 4; i++) {\r\n            out |= bytes4(b[i] & 0xFF) >> (i * 8);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    function uintToBytes(uint256 x) private pure returns (bytes memory b) {\r\n        b = new bytes(32);\r\n        assembly {\r\n            mstore(add(b, 32), x)\r\n        }\r\n    }\r\n\r\n    function updateInvocationCount(\r\n        bytes4 methodId,\r\n        bytes memory originalMsgData\r\n    ) public {\r\n        require(\r\n            msg.sender == address(this),\r\n            \"Can only be called from the contract itself\"\r\n        );\r\n        invocations += 1;\r\n        methodIdInvocations[keccak256(\r\n            abi.encodePacked(resetCount, methodId)\r\n        )] += 1;\r\n        calldataInvocations[keccak256(\r\n            abi.encodePacked(resetCount, originalMsgData)\r\n        )] += 1;\r\n    }\r\n\r\n    fallback() external payable {\r\n        bytes4 methodId;\r\n        assembly {\r\n            methodId := calldataload(0)\r\n        }\r\n\r\n        // First, check exact matching overrides\r\n        if (calldataMockTypes[msg.data] == MockType.Revert) {\r\n            revert(calldataRevertMessage[msg.data]);\r\n        }\r\n        if (calldataMockTypes[msg.data] == MockType.OutOfGas) {\r\n            useAllGas();\r\n        }\r\n        bytes memory result = calldataExpectations[msg.data];\r\n\r\n        // Then check method Id overrides\r\n        if (result.length == 0) {\r\n            if (methodIdMockTypes[methodId] == MockType.Revert) {\r\n                revert(methodIdRevertMessages[methodId]);\r\n            }\r\n            if (methodIdMockTypes[methodId] == MockType.OutOfGas) {\r\n                useAllGas();\r\n            }\r\n            result = methodIdExpectations[methodId];\r\n        }\r\n\r\n        // Last, use the fallback override\r\n        if (result.length == 0) {\r\n            if (fallbackMockType == MockType.Revert) {\r\n                revert(fallbackRevertMessage);\r\n            }\r\n            if (fallbackMockType == MockType.OutOfGas) {\r\n                useAllGas();\r\n            }\r\n            result = fallbackExpectation;\r\n        }\r\n\r\n        // Record invocation as separate call so we don't rollback in case we are called with STATICCALL\r\n        (, bytes memory r) = address(this).call{gas: 100000}(\r\n            abi.encodeWithSignature(\r\n                \"updateInvocationCount(bytes4,bytes)\",\r\n                methodId,\r\n                msg.data\r\n            )\r\n        );\r\n        assert(r.length == 0);\r\n\r\n        assembly {\r\n            return(add(0x20, result), mload(result))\r\n        }\r\n    }\r\n}\r\n"},"@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"contracts/adapters/WethAdapter.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nimport \"../Constants.sol\";\r\nimport \"../IWETH.sol\";\r\n\r\ncontract WethAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using Address for address payable;\r\n\r\n    IWETH public immutable weth;\r\n\r\n    constructor(IWETH _weth) public {\r\n        weth = _weth;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a swap\r\n     * @param recipient The original msg.sender performing the swap\r\n     * @param aggregator Address of the aggregator's contract\r\n     * @param spender Address to which tokens will be approved\r\n     * @param method Selector of the function to be called in the aggregator's contract\r\n     * @param tokenFrom Token to be swapped\r\n     * @param tokenTo Token to be received\r\n     * @param amountFrom Amount of tokenFrom to swap\r\n     * @param amountTo Minimum amount of tokenTo to receive\r\n     * @param data Data used for the call made to the aggregator's contract\r\n     */\r\n    function swap(\r\n        address payable recipient,\r\n        address aggregator,\r\n        address spender,\r\n        bytes4 method,\r\n        IERC20 tokenFrom,\r\n        IERC20 tokenTo,\r\n        uint256 amountFrom,\r\n        uint256 amountTo,\r\n        bytes calldata data\r\n    ) external payable {\r\n        require(tokenFrom != tokenTo, \"TOKEN_PAIR_INVALID\");\r\n\r\n        if (address(tokenFrom) == Constants.ETH) {\r\n            // If tokenFrom is ETH, msg.value = fee + amountFrom (total fee could be 0)\r\n            // Can't deal with ETH, convert to WETH, the remaining balance will be the fee\r\n            weth.deposit{value: amountFrom}();\r\n            _approveSpender(weth, spender, amountFrom);\r\n        } else {\r\n            // Otherwise capture tokens from sender\r\n            _approveSpender(tokenFrom, spender, amountFrom);\r\n        }\r\n\r\n        // Perform the swap\r\n        aggregator.functionCallWithValue(\r\n            abi.encodePacked(method, data),\r\n            address(this).balance\r\n        );\r\n\r\n        // Transfer remaining balance of tokenFrom to sender\r\n        if (address(tokenFrom) != Constants.ETH) {\r\n            _transfer(tokenFrom, tokenFrom.balanceOf(address(this)), recipient);\r\n        } else {\r\n            // If using ETH, just unwrap any remaining WETH\r\n            // At the end of this function all ETH will be transferred to the sender\r\n            _unwrapWETH();\r\n        }\r\n\r\n        uint256 weiBalance = address(this).balance;\r\n\r\n        // Transfer remaining balance of tokenTo to sender\r\n        if (address(tokenTo) != Constants.ETH) {\r\n            uint256 balance = tokenTo.balanceOf(address(this));\r\n            require(balance >= amountTo, \"INSUFFICIENT_AMOUNT\");\r\n            _transfer(tokenTo, balance, recipient);\r\n        } else {\r\n            // If tokenTo == ETH, unwrap received WETH and add it to the wei balance,\r\n            // then check that the remaining ETH balance >= amountTo\r\n            // It is safe to not use safeMath as no one can have enough Ether to overflow\r\n            weiBalance += _unwrapWETH();\r\n            require(weiBalance >= amountTo, \"INSUFFICIENT_AMOUNT\");\r\n        }\r\n\r\n        // If there are unused fees or if tokenTo is ETH, transfer to sender\r\n        if (weiBalance > 0) {\r\n            recipient.sendValue(weiBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Unwraps all available WETH into ETH\r\n     */\r\n    function _unwrapWETH() internal returns (uint256) {\r\n        uint256 balance = weth.balanceOf(address(this));\r\n        weth.withdraw(balance);\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers token to sender if amount > 0\r\n     * @param token IERC20 token to transfer to sender\r\n     * @param amount Amount of token to transfer\r\n     * @param recipient Address that will receive the tokens\r\n     */\r\n    function _transfer(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        address recipient\r\n    ) internal {\r\n        if (amount > 0) {\r\n            token.safeTransfer(recipient, amount);\r\n        }\r\n    }\r\n\r\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/SafeERC20.sol\r\n    /**\r\n     * @dev Approves max amount of token to the spender if the allowance is lower than amount\r\n     * @param token The ERC20 token to approve\r\n     * @param spender Address to which funds will be approved\r\n     * @param amount Amount used to compare current allowance\r\n     */\r\n    function _approveSpender(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        // If allowance is not enough, approve max possible amount\r\n        uint256 allowance = token.allowance(address(this), spender);\r\n        if (allowance < amount) {\r\n            bytes memory returndata = address(token).functionCall(\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    type(uint256).max\r\n                )\r\n            );\r\n\r\n            if (returndata.length > 0) {\r\n                // Return data is optional\r\n                require(abi.decode(returndata, (bool)), \"APPROVAL_FAILED\");\r\n            }\r\n        }\r\n    }\r\n}\r\n"}},"settings":{"libraries":{},"metadata":{"useLiteralContent":false},"optimizer":{"enabled":true,"runs":1000000},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"inputs\":[{\"internalType\":\"contract ICHI\",\"name\":\"_chi\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"aggregatorId\",\"type\":\"string\"}],\"name\":\"AdapterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"aggregatorId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"AdapterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"aggregatorId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"adapterRemoved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract ICHI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"aggregatorId\",\"type\":\"string\"}],\"name\":\"removeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"aggregatorId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spender\",\"outputs\":[{\"internalType\":\"contract Spender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"aggregatorId\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"aggregatorId\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapUsingGasToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetaSwap","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":1,"Runs":1000000,"ConstructorArguments":"0x0000000000000000000000000000000000004946c0e9f43f4dee607b0ef1fa1c","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}