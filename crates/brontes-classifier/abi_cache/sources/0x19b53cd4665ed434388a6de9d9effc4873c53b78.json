{"expiry":1699588097,"data":[{"SourceCode":{"language":"Solidity","sources":{"/contracts/Token.sol":{"content":"pragma solidity 0.8.19;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nimport \"./StructLibrary.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./DEXInterfaces.sol\";\r\n\r\ninterface IERC20Metadata is IERC20{\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n\r\ninterface DividendPayingContractOptionalInterface {\r\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\ninterface DividendPayingContractInterface {\r\n  function dividendOf(address _owner) external view returns(uint256);\r\n  function distributeDividends() external payable;\r\n  function withdrawDividend() external;\r\n  event DividendsDistributed(\r\n    address indexed from,\r\n    uint256 weiAmount\r\n  );\r\n  event DividendWithdrawn(\r\n    address indexed to,\r\n    uint256 weiAmount\r\n  );\r\n}\r\n\r\ncontract DividendPayingContract is DividendPayingContractInterface, DividendPayingContractOptionalInterface, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    uint256 constant internal magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n                                                                            \r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n    \r\n    mapping (address => uint256) public holderBalance;\r\n    uint256 public totalBalance;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    receive() external payable {\r\n        distributeDividends();\r\n    }\r\n\r\n    function distributeDividends() public override payable {\r\n        if(totalBalance > 0 && msg.value > 0){\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (msg.value).mul(magnitude) / totalBalance\r\n            );\r\n            emit DividendsDistributed(msg.sender, msg.value);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() external virtual override {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n        withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n\r\n        emit DividendWithdrawn(user, _withdrawableDividend);\r\n        (bool success,) = user.call{value: _withdrawableDividend}(\"\");\r\n\r\n        if(!success) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n            return 0;\r\n        }\r\n\r\n        return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function withdrawDividendOfUserForCompound(address payable user) external onlyOwner returns (uint256 _withdrawableDividend) {\r\n        _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user] + _withdrawableDividend;\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n        }\r\n        (bool success,) = owner().call{value: _withdrawableDividend}(\"\");\r\n        if(!success) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function dividendOf(address _owner) external view override returns(uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner) external view override returns(uint256) {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n        return magnifiedDividendPerShare.mul(holderBalance[_owner]).toInt256Safe()\r\n        .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n    }\r\n\r\n    function _increase(address account, uint256 value) internal {\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _reduce(address account, uint256 value) internal {\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = holderBalance[account];\r\n        holderBalance[account] = newBalance;\r\n        if(newBalance > currentBalance) {\r\n        uint256 increaseAmount = newBalance.sub(currentBalance);\r\n        _increase(account, increaseAmount);\r\n        totalBalance += increaseAmount;\r\n        } else if(newBalance < currentBalance) {\r\n        uint256 reduceAmount = currentBalance.sub(newBalance);\r\n        _reduce(account, reduceAmount);\r\n        totalBalance -= reduceAmount;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract RevShare is DividendPayingContract {\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n    mapping (address => bool) public excludedFromDividends;\r\n\r\n    constructor() {}\r\n\r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 balance) {\r\n        account = _account;\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        balance = holderBalance[account];\r\n    }\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n        if(excludedFromDividends[account]) {\r\n    \t\treturn;\r\n    \t}\r\n\r\n        _setBalance(account, newBalance);\r\n\r\n    \tprocessAccount(account, true);\r\n    }\r\n    \r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n    \tif(amount > 0) {\r\n            emit Claim(account, amount, automatic);\r\n    \t\treturn true;\r\n    \t}\r\n\r\n    \treturn false;\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return totalDividendsDistributed;\r\n    }\r\n\r\n\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n\t\treturn holderBalance[account];\r\n\t}\r\n\r\n    function getNumberOfDividends() external view returns(uint256) {\r\n        return totalBalance;\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n    \texcludedFromDividends[account] = true;\r\n\r\n    \t_setBalance(account, 0);\r\n    }\r\n\r\n    function includeInDividends(address account) external onlyOwner {\r\n    \trequire(excludedFromDividends[account]);\r\n    \texcludedFromDividends[account] = false;\r\n        _setBalance(account, IERC20(owner()).balanceOf(account)); // sets balance back to token balance\r\n    }\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IPriceFeed {\r\n    function latestAnswer() external returns (int256);\r\n}\r\n\r\ncontract CHATX is ERC20, Ownable {\r\n\r\n    mapping (address => bool) public excludedFromTaxes;\r\n    mapping (address => bool) public exFromLimits;\r\n\r\n    address public marketingReceiver;\r\n    address public devWallet;\r\n\r\n    Tax public buyTax;\r\n    Tax public sellTax;\r\n\r\n    RevShare public revShare;\r\n\r\n    TokenDistributionForTax public tokensForTax;\r\n\r\n    TxLimits public txnLimits;\r\n    bool public txnLimitsActive = true;\r\n\r\n    mapping(address => uint256) private _holderLastTransferBlock; // MEV protection\r\n    bool private antiSandwichEnabled = true;\r\n    uint256 private launchBlock;\r\n\r\n    uint256 private swapTokensAtAmount;\r\n\r\n    address public immutable pair;\r\n    IDexRouter public immutable dexRouter;\r\n    IWETH private immutable WETH;\r\n\r\n    IPriceFeed internal immutable priceFeed;\r\n    uint256 private latestEthPrice = 0;\r\n\r\n    uint64 public constant FEE_DIVISOR = 10000;\r\n\r\n    // structs\r\n\r\n    struct TxLimits {\r\n        uint96 transactionLimit;\r\n        uint96 walletLimit;\r\n        uint48 gasLimit;\r\n        bool gasLimitActive;\r\n    }\r\n\r\n    struct Tax {\r\n        uint48 mktingTax;\r\n        uint48 devTax;\r\n        uint48 lpTax;\r\n        uint48 revShareTax;\r\n        uint48 totalTax;\r\n    }\r\n\r\n    struct TokenDistributionForTax {\r\n        uint64 tokensForMkting;\r\n        uint64 tokensForLP;\r\n        uint64 tokensForDev;\r\n        uint64 tokensForRevShare;\r\n        bool gasSaver;\r\n    }\r\n\r\n    // events\r\n\r\n    event UpdatedTransactionLimit(uint newMax);\r\n    event UpdatedWalletLimit(uint newMax);\r\n    event SetExcludedFromFees(address _address, bool _isExcluded);\r\n    event SetExcludedFromLimits(address _address, bool _isExcluded);\r\n    event RemovedLimits();\r\n    event BuyTaxUpdated(uint newAmount);\r\n    event SellTaxUpdated(uint newAmount);\r\n\r\n    // constructor\r\n\r\n    constructor(StructLibrary.Params memory params)\r\n        ERC20(params.name, params.symbol)\r\n    {   \r\n        _mint(address(this), params.totalSupply * 1e18 * params.liquidityPercentage / 10000);\r\n        uint256 leftoverTokens = (params.totalSupply * 1e18) - balanceOf(address(this));\r\n        if(leftoverTokens > 0){\r\n            _mint(msg.sender, leftoverTokens);\r\n        }\r\n\r\n        address _v2Router;\r\n        address _priceFeed;\r\n\r\n        if(block.chainid == 1){\r\n            _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ETH: Uniswap V2\r\n            _priceFeed = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\r\n        } else if(block.chainid == 5){\r\n            _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Goerli ETH: Uniswap V2\r\n            _priceFeed = 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e;\r\n        } else if(block.chainid == 56){\r\n            _v2Router = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // BNB Chain: PCS V2\r\n            _priceFeed = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE;\r\n        } else if(block.chainid == 97){\r\n            _v2Router = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1; // BNB Chain Testnet: PCS V2\r\n            _priceFeed = 0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526;\r\n        } else if(block.chainid == 42161){\r\n            _v2Router = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506; // Arbitrum: SushiSwap\r\n            _priceFeed = 0x639Fe6ab55C921f74e7fac1ee960C0B6293ba612;\r\n        } else {\r\n            revert(\"Chain not configured\");\r\n        }\r\n\r\n        priceFeed = IPriceFeed(_priceFeed);\r\n        require(priceFeed.latestAnswer() > 0, \"wrong price feed\");\r\n\r\n        revShare = new RevShare();\r\n\r\n        dexRouter = IDexRouter(_v2Router);\r\n\r\n        txnLimits.transactionLimit = uint96(totalSupply() * params.transactionLimit / 10000);\r\n        txnLimits.walletLimit = uint96(totalSupply() * params.walletLimit / 10000);\r\n        txnLimits.gasLimit = params.gasLimit * 1 gwei;\r\n        swapTokensAtAmount = totalSupply() * 25 / 100000;\r\n\r\n        marketingReceiver = params.marketingReceiver; // update\r\n        devWallet = params.devWallet; // update\r\n\r\n        buyTax.mktingTax = params.marketingTaxBuy;\r\n        buyTax.lpTax = params.lpTaxBuy;\r\n        buyTax.devTax = params.devTaxBuy;\r\n        buyTax.revShareTax = params.revShareTaxBuy;\r\n        buyTax.totalTax = buyTax.mktingTax + buyTax.lpTax + buyTax.devTax + buyTax.revShareTax;\r\n\r\n        sellTax.mktingTax = params.marketingTaxSell;\r\n        sellTax.lpTax = params.lpTaxSell;\r\n        sellTax.devTax = params.devTaxSell;\r\n        sellTax.revShareTax = params.revShareTaxSell;\r\n        sellTax.totalTax = sellTax.mktingTax + sellTax.lpTax + sellTax.devTax + buyTax.revShareTax;\r\n\r\n        tokensForTax.gasSaver = true;\r\n\r\n        WETH = IWETH(dexRouter.WETH());\r\n        pair = IDexFactory(dexRouter.factory()).createPair(address(this), address(WETH));\r\n\r\n        exFromLimits[pair] = true;\r\n        exFromLimits[msg.sender] = true;\r\n        exFromLimits[address(this)] = true;\r\n        exFromLimits[_v2Router] = true;\r\n\r\n        excludedFromTaxes[msg.sender] = true;\r\n        excludedFromTaxes[address(this)] = true;\r\n        excludedFromTaxes[address(0xdead)] = true;\r\n        excludedFromTaxes[_v2Router] = true;\r\n\r\n        revShare.excludeFromDividends(address(this));\r\n        revShare.excludeFromDividends(address(pair));\r\n        revShare.excludeFromDividends(address(0xdead));\r\n \r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        \r\n        if(!excludedFromTaxes[from] && !excludedFromTaxes[to]){\r\n            verifyLimits(from, to, amount);\r\n            amount -= handleFee(from, to, amount);\r\n        }\r\n\r\n        super._transfer(from,to,amount);\r\n\r\n        revShare.setBalance(payable(to), balanceOf(to));\r\n        revShare.setBalance(payable(from), balanceOf(from));\r\n    }\r\n\r\n    function verifyLimits(address from, address to, uint256 amount) internal {\r\n        if(txnLimitsActive){\r\n            bool exFromLimitsTo = exFromLimits[to];\r\n            uint256 balanceOfTo = balanceOf(to);\r\n            TxLimits memory _txnLimits = txnLimits;\r\n            // buy\r\n            if (from == pair && !exFromLimitsTo) {\r\n                require(amount <= _txnLimits.transactionLimit, \"Max Txn\");\r\n                require(amount + balanceOfTo <= _txnLimits.walletLimit, \"Max Wallet\");\r\n                if(_txnLimits.gasLimitActive){\r\n                    if(block.number >= launchBlock + 4){\r\n                        _txnLimits.gasLimitActive = false;\r\n                        txnLimits = _txnLimits;\r\n                    } else {\r\n                        if(block.number <= launchBlock + 1){\r\n                            revert(\"Early buy\");\r\n                        }\r\n                        require(tx.gasprice <= _txnLimits.gasLimit, \"Gas price exceeds limit.\");\r\n                    }\r\n                }\r\n            }\r\n            // sell\r\n            else if (to == pair && !exFromLimits[from]) {\r\n                require(amount <= _txnLimits.transactionLimit, \"Max Txn\");\r\n            }\r\n            else if(!exFromLimitsTo) {\r\n                require(amount + balanceOfTo <= _txnLimits.walletLimit, \"Max Wallet\");\r\n            }\r\n\r\n            \r\n        }\r\n\r\n        if (antiSandwichEnabled){\r\n            if(to == pair){\r\n                require(_holderLastTransferBlock[from] < block.number, \"Anti MEV\");\r\n            } else {\r\n                _holderLastTransferBlock[to] = block.number;\r\n                _holderLastTransferBlock[tx.origin] = block.number;\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleFee(address from, address to, uint256 amount) internal returns (uint256){\r\n\r\n        if(balanceOf(address(this)) >= swapTokensAtAmount && from != pair) {\r\n            convertTaxes();\r\n        }\r\n        \r\n        uint128 tax = 0;\r\n\r\n        Tax memory taxes;\r\n\r\n        if (to == pair){\r\n            taxes = sellTax;\r\n        } else if (from == pair){\r\n            taxes = buyTax;\r\n        }\r\n\r\n        if(taxes.totalTax > 0){\r\n            TokenDistributionForTax memory tokensForTaxUpdate = tokensForTax;\r\n            tax = uint128(amount * taxes.totalTax / FEE_DIVISOR);\r\n            tokensForTaxUpdate.tokensForLP += uint64(tax * taxes.lpTax / taxes.totalTax / 1e9);\r\n            tokensForTaxUpdate.tokensForMkting += uint64(tax * taxes.mktingTax / taxes.totalTax / 1e9);\r\n            tokensForTaxUpdate.tokensForDev += uint64(tax * taxes.devTax / taxes.totalTax / 1e9);\r\n            tokensForTaxUpdate.tokensForRevShare += uint64(tax * taxes.revShareTax / taxes.totalTax / 1e9);\r\n            tokensForTax = tokensForTaxUpdate;\r\n            super._transfer(from, address(this), tax);\r\n        }\r\n        \r\n        return tax;\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(WETH);\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function convertTaxes() private {\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        TokenDistributionForTax memory tokensForTaxMem = tokensForTax;\r\n        uint256 totalTokensToSwap = tokensForTaxMem.tokensForLP + tokensForTaxMem.tokensForMkting + tokensForTaxMem.tokensForDev + tokensForTaxMem.tokensForRevShare;\r\n        \r\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n\r\n        if(contractBalance > swapTokensAtAmount * 20){\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        if(tokensForTaxMem.tokensForLP > 0){\r\n            uint256 lpTokens = contractBalance * tokensForTaxMem.tokensForLP / totalTokensToSwap;\r\n            super._transfer(address(this), pair, lpTokens);\r\n            try ILpPair(pair).sync(){} catch {}\r\n            contractBalance -= lpTokens;\r\n            totalTokensToSwap -= tokensForTaxMem.tokensForLP;\r\n        }\r\n\r\n        if(contractBalance > 0){\r\n\r\n            swapTokensForETH(contractBalance);\r\n            \r\n            uint256 ethBalance = address(this).balance;\r\n\r\n            bool success;\r\n\r\n            if(tokensForTaxMem.tokensForDev > 0){\r\n                (success,) = devWallet.call{value: ethBalance * tokensForTaxMem.tokensForDev / totalTokensToSwap}(\"\");  \r\n            }\r\n\r\n            if(tokensForTaxMem.tokensForRevShare > 0){\r\n                (success,) = address(revShare).call{value: ethBalance * tokensForTaxMem.tokensForRevShare/ totalTokensToSwap}(\"\");  \r\n            }\r\n\r\n            ethBalance = address(this).balance;\r\n\r\n            if(ethBalance > 0){\r\n                (success,) = marketingReceiver.call{value: ethBalance}(\"\");  \r\n            }\r\n        }\r\n\r\n        tokensForTaxMem.tokensForLP = 0;\r\n        tokensForTaxMem.tokensForMkting = 0;\r\n        tokensForTaxMem.tokensForDev = 0;\r\n        tokensForTaxMem.tokensForRevShare = 0;\r\n\r\n        tokensForTax = tokensForTaxMem;\r\n    }\r\n\r\n    // owner functions\r\n    function setExcludedFromTax(address _address, bool _isExcluded) external onlyOwner {\r\n        require(_address != address(0), \"Zero Address\");\r\n        require(_address != address(this), \"Cannot unexcluded contract\");\r\n        excludedFromTaxes[_address] = _isExcluded;\r\n        emit SetExcludedFromFees(_address, _isExcluded);\r\n    }\r\n\r\n    function changeExcludedFromLimits(address _address, bool _isExcluded) external onlyOwner {\r\n        require(_address != address(0), \"Zero Address\");\r\n        if(!_isExcluded){\r\n            require(_address != pair, \"Cannot remove pair\");\r\n        }\r\n        exFromLimits[_address] = _isExcluded;\r\n        emit SetExcludedFromLimits(_address, _isExcluded);\r\n    }\r\n\r\n    function changeTransactionLimit(uint96 newNumInTokens) external onlyOwner {\r\n        require(newNumInTokens >= (totalSupply() * 5 / 1000)/(10**decimals()), \"Too low\");\r\n        txnLimits.transactionLimit = uint96(newNumInTokens * (10**decimals()));\r\n        emit UpdatedTransactionLimit(txnLimits.transactionLimit);\r\n    }\r\n\r\n    function updateWalletLimit(uint96 newNumInTokens) external onlyOwner {\r\n        require(newNumInTokens >= (totalSupply() * 5 / 1000)/(10**decimals()), \"Too low\");\r\n        txnLimits.walletLimit = uint96(newNumInTokens * (10**decimals()));\r\n        emit UpdatedWalletLimit(txnLimits.walletLimit);\r\n    }\r\n\r\n    function updateSwapTokensAmount(uint256 newAmount) external onlyOwner {\r\n        require(newAmount >= (totalSupply() * 1) / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\r\n        require(newAmount <= (totalSupply() * 5) / 1000, \"Swap amount cannot be higher than 0.5% total supply.\");\r\n        swapTokensAtAmount = newAmount;\r\n    }\r\n\r\n    function changeSellTax(uint48 _mktingTax, uint48 _lpTax, uint48 _devTax, uint48 _revShareTax) external onlyOwner {\r\n        Tax memory taxes;\r\n        taxes.mktingTax = _mktingTax;\r\n        taxes.lpTax = _lpTax;\r\n        taxes.devTax = _devTax;\r\n        taxes.revShareTax = _revShareTax;\r\n        taxes.totalTax = _mktingTax + _lpTax + _devTax + _revShareTax;\r\n        require(taxes.totalTax  <= 1000, \"Keep tax below 10%\");\r\n        emit SellTaxUpdated(taxes.totalTax);\r\n        sellTax = taxes;\r\n    }\r\n\r\n    function updateBuyTax(uint48 _mktingTax, uint48 _lpTax, uint48 _devTax, uint48 _revShareTax) external onlyOwner {\r\n        Tax memory taxes;\r\n        taxes.mktingTax = _mktingTax;\r\n        taxes.lpTax = _lpTax;\r\n        taxes.devTax = _devTax;\r\n        taxes.revShareTax = _revShareTax;\r\n        taxes.totalTax = _mktingTax + _lpTax + _devTax + _revShareTax;\r\n        require(taxes.totalTax  <= 1000, \"Keep tax below 10%\");\r\n        emit BuyTaxUpdated(taxes.totalTax);\r\n        buyTax = taxes;\r\n    }\r\n\r\n    function removeTransactionLimits() external onlyOwner {\r\n        txnLimitsActive = false;\r\n        TxLimits memory _txnLimits;\r\n        uint256 supply = totalSupply();\r\n        _txnLimits.transactionLimit = uint96(supply);\r\n        _txnLimits.walletLimit = uint96(supply);\r\n        txnLimits = _txnLimits;\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    function updateAntiMevEnabled(bool _enabled) external onlyOwner {\r\n        antiSandwichEnabled = _enabled;\r\n    }\r\n\r\n    function changeMarketingAddress(address _address) external onlyOwner {\r\n        require(_address != address(0), \"zero address\");\r\n        marketingReceiver = _address;\r\n    }\r\n\r\n    function setDevAddress(address _address) external onlyOwner {\r\n        require(_address != address(0), \"zero address\");\r\n        devWallet = _address;\r\n    }\r\n\r\n    receive() payable external {}\r\n\r\n    // dividend functions\r\n\r\n    function claim() external {\r\n        revShare.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return revShare.totalDividendsDistributed();\r\n    }\r\n\r\n    function withdrawableDividendOf(address account) public view returns(uint256) {\r\n    \treturn revShare.withdrawableDividendOf(account);\r\n  \t}\r\n\r\n\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n\t\treturn revShare.holderBalance(account);\r\n\t}\r\n\r\n    function getAccountDividendsInfo(address account)\r\n        external view returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n        return revShare.getAccount(account);\r\n    }\r\n    \r\n    function getNumberOfDividends() external view returns(uint256) {\r\n        return revShare.totalBalance();\r\n    }\r\n\r\n    function excludeFromDividends(address _wallet) external onlyOwner {\r\n        revShare.excludeFromDividends(_wallet);\r\n    }\r\n\r\n     function includeInDividends(address _wallet) external onlyOwner {\r\n        revShare.includeInDividends(_wallet);\r\n    }\r\n\r\n    function compound(uint256 minOutput) external {\r\n        uint256 amountEthForCompound = revShare.withdrawDividendOfUserForCompound(payable(msg.sender));\r\n        if(amountEthForCompound > 0){\r\n            buyBackTokens(amountEthForCompound, minOutput, msg.sender);\r\n        } else {\r\n            revert(\"No rewards\");\r\n        }\r\n    }\r\n\r\n    function buyBackTokens(uint256 ethAmountInWei, uint256 minOut, address to) internal {\r\n        // generate the uniswap pair path of weth -> eth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(WETH);\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmountInWei}(\r\n            minOut,\r\n            path,\r\n            address(to),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // helper views\r\n\r\n    function getCompoundOutputByEthAmount(uint256 rewardAmount) external view returns(uint256) {\r\n        if(rewardAmount == 0){\r\n            return 0;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(WETH);\r\n        path[1] = address(this);\r\n        uint256[] memory amounts = dexRouter.getAmountsOut(rewardAmount, path);\r\n        return amounts[1] - (amounts[1] * (buyTax.totalTax + 50) / FEE_DIVISOR);\r\n    }\r\n\r\n    function getCompoundOutputByAddress(address wallet) external view returns(uint256) {\r\n        uint256 rewardAmount = withdrawableDividendOf(wallet);\r\n        if(rewardAmount == 0){\r\n            return 0;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(WETH);\r\n        path[1] = address(this);\r\n        uint256[] memory amounts = dexRouter.getAmountsOut(rewardAmount, path);\r\n        return amounts[1] - (amounts[1] * (buyTax.totalTax + 50) / FEE_DIVISOR);\r\n    }\r\n\r\n    function addLp(address _to) external onlyOwner payable {\r\n        require(address(this).balance > 0 && balanceOf(address(this)) > 0);\r\n\r\n        WETH.deposit{value: address(this).balance}();\r\n\r\n        super._transfer(address(this), address(pair), balanceOf(address(this)));\r\n        IERC20(address(WETH)).transfer(address(pair), IERC20(address(WETH)).balanceOf(address(this)));\r\n        ILpPair(pair).mint(_to);\r\n        launchBlock = block.number;\r\n        txnLimits.gasLimitActive = true;\r\n        latestEthPrice = uint256(priceFeed.latestAnswer());\r\n    }\r\n\r\n    function getMcap() public view returns (uint256){\r\n        return (IERC20(dexRouter.WETH()).balanceOf(address(pair)) * 1e18 * latestEthPrice / balanceOf(address(pair)) * (totalSupply()-balanceOf(address(0xdead))) / 1e18 / 1e8); \r\n    }\r\n}"},"/contracts/DEXInterfaces.sol":{"content":"pragma solidity 0.8.19;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface ILpPair {\r\n    function sync() external;\r\n    function mint(address to) external returns (uint liquidity);\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}"},"/contracts/Context.sol":{"content":"pragma solidity 0.8.19;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"/contracts/StructLibrary.sol":{"content":"pragma solidity 0.8.19;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nlibrary StructLibrary {\r\n    struct Params {\r\n        string name;\r\n        string symbol;\r\n        uint112 totalSupply;\r\n        uint48 liquidityPercentage;\r\n        address marketingReceiver;\r\n        address devWallet;\r\n        uint48 marketingTaxBuy;\r\n        uint48 devTaxBuy;\r\n        uint48 lpTaxBuy;\r\n        uint48 revShareTaxBuy;\r\n        uint48 marketingTaxSell;\r\n        uint48 devTaxSell;\r\n        uint48 lpTaxSell;\r\n        uint48 revShareTaxSell;\r\n        uint128 transactionLimit;\r\n        uint128 walletLimit;\r\n        uint48 gasLimit;\r\n    }\r\n}"},"/contracts/IERC20.sol":{"content":"pragma solidity 0.8.19;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"}},"settings":{"evmVersion":"paris","libraries":{},"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}},"remappings":[]}},"ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint112\",\"name\":\"totalSupply\",\"type\":\"uint112\"},{\"internalType\":\"uint48\",\"name\":\"liquidityPercentage\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"marketingTaxBuy\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"devTaxBuy\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lpTaxBuy\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"revShareTaxBuy\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketingTaxSell\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"devTaxSell\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lpTaxSell\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"revShareTaxSell\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"transactionLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"walletLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint48\",\"name\":\"gasLimit\",\"type\":\"uint48\"}],\"internalType\":\"struct StructLibrary.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"BuyTaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"SellTaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isExcluded\",\"type\":\"bool\"}],\"name\":\"SetExcludedFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isExcluded\",\"type\":\"bool\"}],\"name\":\"SetExcludedFromLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"UpdatedTransactionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"UpdatedWalletLimit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DIVISOR\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addLp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"mktingTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"devTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lpTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"revShareTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"totalTax\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExcluded\",\"type\":\"bool\"}],\"name\":\"changeExcludedFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_mktingTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_lpTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_devTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_revShareTax\",\"type\":\"uint48\"}],\"name\":\"changeSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"newNumInTokens\",\"type\":\"uint96\"}],\"name\":\"changeTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"}],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromTaxes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getCompoundOutputByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"getCompoundOutputByEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"includeInDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTransactionLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revShare\",\"outputs\":[{\"internalType\":\"contract RevShare\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"mktingTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"devTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lpTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"revShareTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"totalTax\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExcluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForTax\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"tokensForMkting\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tokensForLP\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tokensForDev\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tokensForRevShare\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"gasSaver\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txnLimits\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"transactionLimit\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"walletLimit\",\"type\":\"uint96\"},{\"internalType\":\"uint48\",\"name\":\"gasLimit\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"gasLimitActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txnLimitsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateAntiMevEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_mktingTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_lpTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_devTax\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_revShareTax\",\"type\":\"uint48\"}],\"name\":\"updateBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"newNumInTokens\",\"type\":\"uint96\"}],\"name\":\"updateWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CHATX","CompilerVersion":"v0.8.19+commit.7dd6d404","OptimizationUsed":1,"Runs":200,"ConstructorArguments":"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000021340000000000000000000000009e453c9d0532e90000d30b7b54a782e335044dc80000000000000000000000004342d1f5df045dfb6d6daea6dab8b8742f3a255a00000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000000000000000000000000000000000000000000005436861745800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054348415458000000000000000000000000000000000000000000000000000000","EVMVersion":"paris","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}