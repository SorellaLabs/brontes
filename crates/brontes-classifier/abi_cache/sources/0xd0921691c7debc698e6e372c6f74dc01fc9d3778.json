{"expiry":1699513956,"data":[{"SourceCode":"# @version 0.3.3\r\n\"\"\"\r\n@title Boost Delegation V2\r\n@author CurveFi\r\n\"\"\"\r\n\r\n\r\nevent Approval:\r\n    _owner: indexed(address)\r\n    _spender: indexed(address)\r\n    _value: uint256\r\n\r\nevent Transfer:\r\n    _from: indexed(address)\r\n    _to: indexed(address)\r\n    _value: uint256\r\n\r\nevent Boost:\r\n    _from: indexed(address)\r\n    _to: indexed(address)\r\n    _bias: uint256\r\n    _slope: uint256\r\n    _start: uint256\r\n\r\nevent Migrate:\r\n    _token_id: indexed(uint256)\r\n\r\n\r\ninterface BoostV1:\r\n    def ownerOf(_token_id: uint256) -> address: view\r\n    def token_boost(_token_id: uint256) -> int256: view\r\n    def token_expiry(_token_id: uint256) -> uint256: view\r\n\r\ninterface VotingEscrow:\r\n    def balanceOf(_user: address) -> uint256: view\r\n    def totalSupply() -> uint256: view\r\n    def locked__end(_user: address) -> uint256: view\r\n\r\n\r\nstruct Point:\r\n    bias: uint256\r\n    slope: uint256\r\n    ts: uint256\r\n\r\n\r\nNAME: constant(String[32]) = \"Vote-Escrowed Boost\"\r\nSYMBOL: constant(String[8]) = \"veBoost\"\r\nVERSION: constant(String[8]) = \"v2.0.0\"\r\n\r\nEIP712_TYPEHASH: constant(bytes32) = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\")\r\nPERMIT_TYPEHASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\r\n\r\nWEEK: constant(uint256) = 86400 * 7\r\n\r\n\r\nBOOST_V1: immutable(address)\r\nDOMAIN_SEPARATOR: immutable(bytes32)\r\nVE: immutable(address)\r\n\r\n\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\nnonces: public(HashMap[address, uint256])\r\n\r\ndelegated: public(HashMap[address, Point])\r\ndelegated_slope_changes: public(HashMap[address, HashMap[uint256, uint256]])\r\n\r\nreceived: public(HashMap[address, Point])\r\nreceived_slope_changes: public(HashMap[address, HashMap[uint256, uint256]])\r\n\r\nmigrated: public(HashMap[uint256, bool])\r\n\r\n\r\n@external\r\ndef __init__(_boost_v1: address, _ve: address):\r\n    BOOST_V1 = _boost_v1\r\n    DOMAIN_SEPARATOR = keccak256(_abi_encode(EIP712_TYPEHASH, keccak256(NAME), keccak256(VERSION), chain.id, self, block.prevhash))\r\n    VE = _ve\r\n\r\n    log Transfer(ZERO_ADDRESS, msg.sender, 0)\r\n\r\n\r\n@view\r\n@internal\r\ndef _checkpoint_read(_user: address, _delegated: bool) -> Point:\r\n    point: Point = empty(Point)\r\n\r\n    if _delegated:\r\n        point = self.delegated[_user]\r\n    else:\r\n        point = self.received[_user]\r\n\r\n    if point.ts == 0:\r\n        point.ts = block.timestamp\r\n\r\n    if point.ts == block.timestamp:\r\n        return point\r\n\r\n    ts: uint256 = (point.ts / WEEK) * WEEK\r\n    for _ in range(255):\r\n        ts += WEEK\r\n\r\n        dslope: uint256 = 0\r\n        if block.timestamp < ts:\r\n            ts = block.timestamp\r\n        else:\r\n            if _delegated:\r\n                dslope = self.delegated_slope_changes[_user][ts]\r\n            else:\r\n                dslope = self.received_slope_changes[_user][ts]\r\n\r\n        point.bias -= point.slope * (ts - point.ts)\r\n        point.slope -= dslope\r\n        point.ts = ts\r\n\r\n        if ts == block.timestamp:\r\n            break\r\n\r\n    return point\r\n\r\n\r\n@internal\r\ndef _checkpoint_write(_user: address, _delegated: bool) -> Point:\r\n    point: Point = empty(Point)\r\n\r\n    if _delegated:\r\n        point = self.delegated[_user]\r\n    else:\r\n        point = self.received[_user]\r\n\r\n    if point.ts == 0:\r\n        point.ts = block.timestamp\r\n\r\n    if point.ts == block.timestamp:\r\n        return point\r\n\r\n    dbias: uint256 = 0\r\n    ts: uint256 = (point.ts / WEEK) * WEEK\r\n    for _ in range(255):\r\n        ts += WEEK\r\n\r\n        dslope: uint256 = 0\r\n        if block.timestamp < ts:\r\n            ts = block.timestamp\r\n        else:\r\n            if _delegated:\r\n                dslope = self.delegated_slope_changes[_user][ts]\r\n            else:\r\n                dslope = self.received_slope_changes[_user][ts]\r\n\r\n        amount: uint256 = point.slope * (ts - point.ts)\r\n\r\n        dbias += amount\r\n        point.bias -= amount\r\n        point.slope -= dslope\r\n        point.ts = ts\r\n\r\n        if ts == block.timestamp:\r\n            break\r\n\r\n    if _delegated == False and dbias != 0:  # received boost\r\n        log Transfer(_user, ZERO_ADDRESS, dbias)\r\n\r\n    return point\r\n\r\n\r\n@view\r\n@internal\r\ndef _balance_of(_user: address) -> uint256:\r\n    amount: uint256 = VotingEscrow(VE).balanceOf(_user)\r\n\r\n    point: Point = self._checkpoint_read(_user, True)\r\n    amount -= (point.bias - point.slope * (block.timestamp - point.ts))\r\n\r\n    point = self._checkpoint_read(_user, False)\r\n    amount += (point.bias - point.slope * (block.timestamp - point.ts))\r\n    return amount\r\n\r\n\r\n@internal\r\ndef _boost(_from: address, _to: address, _amount: uint256, _endtime: uint256):\r\n    assert _to not in [_from, ZERO_ADDRESS]\r\n    assert _amount != 0\r\n    assert _endtime > block.timestamp\r\n    assert _endtime % WEEK == 0\r\n    assert _endtime <= VotingEscrow(VE).locked__end(_from)\r\n\r\n    # checkpoint delegated point\r\n    point: Point = self._checkpoint_write(_from, True)\r\n    assert _amount <= VotingEscrow(VE).balanceOf(_from) - (point.bias - point.slope * (block.timestamp - point.ts))\r\n\r\n    # calculate slope and bias being added\r\n    slope: uint256 = _amount / (_endtime - block.timestamp)\r\n    bias: uint256 = slope * (_endtime - block.timestamp)\r\n\r\n    # update delegated point\r\n    point.bias += bias\r\n    point.slope += slope\r\n\r\n    # store updated values\r\n    self.delegated[_from] = point\r\n    self.delegated_slope_changes[_from][_endtime] += slope\r\n\r\n    # update received amount\r\n    point = self._checkpoint_write(_to, False)\r\n    point.bias += bias\r\n    point.slope += slope\r\n\r\n    # store updated values\r\n    self.received[_to] = point\r\n    self.received_slope_changes[_to][_endtime] += slope\r\n\r\n    log Transfer(_from, _to, _amount)\r\n    log Boost(_from, _to, bias, slope, block.timestamp)\r\n\r\n    # also checkpoint received and delegated\r\n    self.received[_from] = self._checkpoint_write(_from, False)\r\n    self.delegated[_to] = self._checkpoint_write(_to, True)\r\n\r\n\r\n@external\r\ndef boost(_to: address, _amount: uint256, _endtime: uint256, _from: address = msg.sender):\r\n    # reduce approval if necessary\r\n    if _from != msg.sender:\r\n        allowance: uint256 = self.allowance[_from][msg.sender]\r\n        if allowance != MAX_UINT256:\r\n            self.allowance[_from][msg.sender] = allowance - _amount\r\n            log Approval(_from, msg.sender, allowance - _amount)\r\n\r\n    self._boost(_from, _to, _amount, _endtime)\r\n\r\n\r\n@external\r\ndef migrate(_token_id: uint256):\r\n    assert not self.migrated[_token_id]\r\n\r\n    self._boost(\r\n        convert(shift(_token_id, -96), address),  # from\r\n        BoostV1(BOOST_V1).ownerOf(_token_id),  # to\r\n        convert(BoostV1(BOOST_V1).token_boost(_token_id), uint256),  # amount\r\n        BoostV1(BOOST_V1).token_expiry(_token_id),  # expiry\r\n    )\r\n\r\n    self.migrated[_token_id] = True\r\n    log Migrate(_token_id)\r\n\r\n\r\n@external\r\ndef checkpoint_user(_user: address):\r\n    self.delegated[_user] = self._checkpoint_write(_user, True)\r\n    self.received[_user] = self._checkpoint_write(_user, False)\r\n\r\n\r\n@external\r\ndef approve(_spender: address, _value: uint256) -> bool:\r\n    self.allowance[msg.sender][_spender] = _value\r\n\r\n    log Approval(msg.sender, _spender, _value)\r\n    return True\r\n\r\n\r\n@external\r\ndef permit(_owner: address, _spender: address, _value: uint256, _deadline: uint256, _v: uint8, _r: bytes32, _s: bytes32) -> bool:\r\n    assert _owner != ZERO_ADDRESS\r\n    assert block.timestamp <= _deadline\r\n\r\n    nonce: uint256 = self.nonces[_owner]\r\n    digest: bytes32 = keccak256(\r\n        concat(\r\n            b\"\\x19\\x01\",\r\n            DOMAIN_SEPARATOR,\r\n            keccak256(_abi_encode(PERMIT_TYPEHASH, _owner, _spender, _value, nonce, _deadline))\r\n        )\r\n    )\r\n\r\n    assert ecrecover(digest, convert(_v, uint256), convert(_r, uint256), convert(_s, uint256)) == _owner\r\n\r\n    self.allowance[_owner][_spender] = _value\r\n    self.nonces[_owner] = nonce + 1\r\n\r\n    log Approval(_owner, _spender, _value)\r\n    return True\r\n\r\n\r\n@external\r\ndef increaseAllowance(_spender: address, _added_value: uint256) -> bool:\r\n    allowance: uint256 = self.allowance[msg.sender][_spender] + _added_value\r\n    self.allowance[msg.sender][_spender] = allowance\r\n\r\n    log Approval(msg.sender, _spender, allowance)\r\n    return True\r\n\r\n\r\n@external\r\ndef decreaseAllowance(_spender: address, _subtracted_value: uint256) -> bool:\r\n    allowance: uint256 = self.allowance[msg.sender][_spender] - _subtracted_value\r\n    self.allowance[msg.sender][_spender] = allowance\r\n\r\n    log Approval(msg.sender, _spender, allowance)\r\n    return True\r\n\r\n\r\n@view\r\n@external\r\ndef balanceOf(_user: address) -> uint256:\r\n    return self._balance_of(_user)\r\n\r\n\r\n@view\r\n@external\r\ndef adjusted_balance_of(_user: address) -> uint256:\r\n    return self._balance_of(_user)\r\n\r\n\r\n@view\r\n@external\r\ndef totalSupply() -> uint256:\r\n    return VotingEscrow(VE).totalSupply()\r\n\r\n\r\n@view\r\n@external\r\ndef delegated_balance(_user: address) -> uint256:\r\n    point: Point = self._checkpoint_read(_user, True)\r\n    return point.bias - point.slope * (block.timestamp - point.ts)\r\n\r\n\r\n@view\r\n@external\r\ndef received_balance(_user: address) -> uint256:\r\n    point: Point = self._checkpoint_read(_user, False)\r\n    return point.bias - point.slope * (block.timestamp - point.ts)\r\n\r\n\r\n@view\r\n@external\r\ndef delegable_balance(_user: address) -> uint256:\r\n    point: Point = self._checkpoint_read(_user, True)\r\n    return VotingEscrow(VE).balanceOf(_user) - (point.bias - point.slope * (block.timestamp - point.ts))\r\n\r\n\r\n@pure\r\n@external\r\ndef name() -> String[32]:\r\n    return NAME\r\n\r\n\r\n@pure\r\n@external\r\ndef symbol() -> String[8]:\r\n    return SYMBOL\r\n\r\n\r\n@pure\r\n@external\r\ndef decimals() -> uint8:\r\n    return 18\r\n\r\n\r\n@pure\r\n@external\r\ndef BOOST_V1() -> address:\r\n    return BOOST_V1\r\n\r\n\r\n@pure\r\n@external\r\ndef DOMAIN_SEPARATOR() -> bytes32:\r\n    return DOMAIN_SEPARATOR\r\n\r\n\r\n@pure\r\n@external\r\ndef VE() -> address:\r\n    return VE","ABI":"[{\"name\":\"Approval\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_to\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Boost\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_to\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_bias\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"_slope\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"_start\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Migrate\",\"inputs\":[{\"name\":\"_token_id\",\"type\":\"uint256\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_boost_v1\",\"type\":\"address\"},{\"name\":\"_ve\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"boost\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_endtime\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"boost\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_endtime\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"migrate\",\"inputs\":[{\"name\":\"_token_id\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"checkpoint_user\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"permit\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_added_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtracted_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"adjusted_balance_of\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delegated_balance\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"received_balance\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delegable_balance\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}]},{\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"BOOST_V1\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}]},{\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"VE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delegated\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"bias\",\"type\":\"uint256\"},{\"name\":\"slope\",\"type\":\"uint256\"},{\"name\":\"ts\",\"type\":\"uint256\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delegated_slope_changes\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"received\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"bias\",\"type\":\"uint256\"},{\"name\":\"slope\",\"type\":\"uint256\"},{\"name\":\"ts\",\"type\":\"uint256\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"received_slope_changes\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"migrated\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.3.3","OptimizationUsed":0,"Runs":0,"ConstructorArguments":"0x000000000000000000000000d30dd0b919cb4012b3add78f6dcb6eb7ef225ac80000000000000000000000005f3b5dfeb7b28cdbd7faba78963ee202a494e2a2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":0,"SwarmSource":""}]}