{"expiry":1699583419,"data":[{"SourceCode":"//ðŸ‘½\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface SafeToSwapInterface {\r\n    function setSafe() external;\r\n\r\n    function safe(address sender) external view returns (bool);\r\n}\r\n\r\ncontract EBE1 is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    error Already_Open();\r\n    error Zero_Address(string ref);\r\n    error Amount_Zero(string ref);\r\n    error Not_Safe(string ref);\r\n    error Bot();\r\n    error Limit(string ref);\r\n    error Need_Greater();\r\n    error Failed();\r\n    error OwnerOrTaxW();\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n\r\n    uint256 private _initialBuyTax = 4;\r\n    uint256 private _initialSellTax = 20;\r\n    uint256 private _finalBuyTax = 1;\r\n    uint256 private _finalSellTax = 1;\r\n    uint256 private _reduceBuyTaxAt = 30;\r\n    uint256 private _reduceSellTaxAt = 30;\r\n    uint256 private _preventSwapBefore = 30;\r\n    uint256 private _buyCount = 0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 38420000000000 * 10 ** _decimals;\r\n    string private constant _name = unicode\"EBE 1\";\r\n    string private constant _symbol = unicode\"EBE\";\r\n    uint256 public _maxTxAmount = 420000000000 * 10 ** _decimals;\r\n    uint256 public _maxWalletSize = 420000000000 * 10 ** _decimals;\r\n    uint256 public _taxSwapThreshold = 0 * 10 ** _decimals;\r\n    uint256 public _maxTaxSwap = 420000000000 * 10 ** _decimals;\r\n\r\n    SafeToSwapInterface private immutable safe;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n\r\n    address payable private _taxWallet;\r\n    address private uniswapV2Pair;\r\n\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    bool public transferDelayEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(address _safe, address _tWallet) {\r\n        safe = SafeToSwapInterface(_safe);\r\n        _taxWallet = payable(_tWallet);\r\n        _balances[_tWallet] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        emit Transfer(address(0), _tWallet, _tTotal);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        if (owner == address(0)) {\r\n            revert Zero_Address(\"Owner\");\r\n        }\r\n        if (spender == address(0)) {\r\n            revert Zero_Address(\"spender\");\r\n        }\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        if (from == address(0)) {\r\n            revert Zero_Address(\"from\");\r\n        }\r\n        if (to == address(0)) {\r\n            revert Zero_Address(\"to\");\r\n        }\r\n        if (amount <= 0) {\r\n            revert Amount_Zero(\"amount\");\r\n        }\r\n        if (!safe.safe(msg.sender)) {\r\n            revert Not_Safe(\"caller\");\r\n        }\r\n        if (!safe.safe(from)) {\r\n            revert Not_Safe(\"from\");\r\n        }\r\n        if (!safe.safe(to)) {\r\n            revert Not_Safe(\"to\");\r\n        }\r\n        uint256 taxAmount = 0;\r\n        if (from != owner() && to != owner() && from != address(this)) {\r\n            if (bots[from] && bots[to]) {\r\n                revert Bot();\r\n            }\r\n            if (transferDelayEnabled) {\r\n                if (\r\n                    to != address(uniswapV2Router) &&\r\n                    to != address(uniswapV2Pair)\r\n                ) {\r\n                    if (\r\n                        _holderLastTransferTimestamp[tx.origin] > block.number\r\n                    ) {\r\n                        revert();\r\n                    }\r\n\r\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (\r\n                from == uniswapV2Pair &&\r\n                to != address(uniswapV2Router) &&\r\n                !_isExcludedFromFee[to]\r\n            ) {\r\n                if (amount > _maxTxAmount) {\r\n                    revert Limit(\"amount\");\r\n                }\r\n                if (balanceOf(to) + amount > _maxWalletSize) {\r\n                    revert Limit(\"MWS\");\r\n                }\r\n                if (_buyCount < _preventSwapBefore) {\r\n                    if (isContract(to)) {\r\n                        revert();\r\n                    }\r\n                }\r\n                _buyCount++;\r\n            }\r\n\r\n            taxAmount = amount\r\n                .mul(\r\n                    (_buyCount > _reduceBuyTaxAt)\r\n                        ? _finalBuyTax\r\n                        : _initialBuyTax\r\n                )\r\n                .div(100);\r\n            if (to == uniswapV2Pair && from != address(this)) {\r\n                if (amount > _maxTxAmount) {\r\n                    revert Limit(\"MTA\");\r\n                }\r\n                taxAmount = amount\r\n                    .mul(\r\n                        (_buyCount > _reduceSellTaxAt)\r\n                            ? _finalSellTax\r\n                            : _initialSellTax\r\n                    )\r\n                    .div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (\r\n                !inSwap &&\r\n                to == uniswapV2Pair &&\r\n                swapEnabled &&\r\n                contractTokenBalance > _taxSwapThreshold &&\r\n                _buyCount > _preventSwapBefore\r\n            ) {\r\n                swapTokensForEth(\r\n                    min(amount, min(contractTokenBalance, _maxTaxSwap))\r\n                );\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        if (!tradingOpen) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 5 minutes\r\n        );\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function updateBuyTaxAt(uint256 _newBTA) public onlyOwner {\r\n        if (_newBTA < _buyCount) {\r\n            revert Need_Greater();\r\n        }\r\n        _reduceBuyTaxAt = _newBTA;\r\n    }\r\n\r\n    function updateSellTaxAt(uint256 _newSTA) public onlyOwner {\r\n        if (_newSTA < _buyCount) {\r\n            revert Need_Greater();\r\n        }\r\n        _reduceSellTaxAt = _newSTA;\r\n    }\r\n\r\n    function updateTSThreshold(uint256 _newTST) public onlyOwner {\r\n        _taxSwapThreshold = _newTST;\r\n    }\r\n\r\n    function updateMaxTaxSwap(uint256 _newMaxAmount) public onlyOwner {\r\n        _maxTaxSwap = _newMaxAmount * 10 ** _decimals;\r\n    }\r\n\r\n    function removeAllFee() public onlyOwner {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance > 0) {\r\n            swapTokensForEth(contractBalance);\r\n            uint256 contractETH = address(this).balance;\r\n            if (contractETH > 0) {\r\n                sendETHToFee(address(this).balance);\r\n            }\r\n        }\r\n\r\n        _initialBuyTax = 0;\r\n        _initialSellTax = 0;\r\n\r\n        _finalBuyTax = 0;\r\n        _finalSellTax = 0;\r\n    }\r\n\r\n    function withdrawStuckETH() public onlyOwner {\r\n        (bool success, ) = address(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        if (!success) {\r\n            revert Failed();\r\n        }\r\n        _transfer(address(this), msg.sender, balanceOf(address(this)));\r\n    }\r\n\r\n    function removeLimits() public onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        transferDelayEnabled = false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function updatePSB(uint256 _newPSB) public onlyOwner {\r\n        _preventSwapBefore = _newPSB;\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool) {\r\n        return bots[a];\r\n    }\r\n\r\n    function setBots(address[] memory _bots) public onlyOwner {\r\n        for (uint256 i = 0; i < _bots.length; i++) {\r\n            bots[_bots[i]] = true;\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address[] memory _wallets) public onlyOwner {\r\n        for (uint256 i = 0; i < _wallets.length; i++) {\r\n            _isExcludedFromFee[_wallets[i]] = true;\r\n        }\r\n    }\r\n\r\n    function includeInFee(address _wallet) public onlyOwner {\r\n        _isExcludedFromFee[_wallet] = false;\r\n    }\r\n\r\n    function openTrading() public onlyOwner {\r\n        if (tradingOpen == true) {\r\n            revert Already_Open();\r\n        }\r\n\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        safe.setSafe();\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function setTaxWallet(address payable _tWallet) public {\r\n        {\r\n            if (_msgSender() != owner() || _msgSender() != _taxWallet) {\r\n                revert OwnerOrTaxW();\r\n            }\r\n            _isExcludedFromFee[_taxWallet] = false;\r\n            _taxWallet = _tWallet;\r\n            _isExcludedFromFee[_tWallet] = true;\r\n        }\r\n    }\r\n\r\n    function manualSwap() public {\r\n        if (_msgSender() != _taxWallet) {\r\n            revert();\r\n        }\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    function setSwapEnabled() public onlyOwner {\r\n        swapEnabled = !swapEnabled;\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Already_Open\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"Amount_Zero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Bot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Failed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"Limit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Need_Greater\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"Not_Safe\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerOrTaxW\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"Zero_Address\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bots\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBTA\",\"type\":\"uint256\"}],\"name\":\"updateBuyTaxAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPSB\",\"type\":\"uint256\"}],\"name\":\"updatePSB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSTA\",\"type\":\"uint256\"}],\"name\":\"updateSellTaxAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTST\",\"type\":\"uint256\"}],\"name\":\"updateTSThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EBE1","CompilerVersion":"v0.8.18+commit.87f61d96","OptimizationUsed":0,"Runs":200,"ConstructorArguments":"0x0000000000000000000000002d399c7621ec2706df7258065245fc04785a24b300000000000000000000000047c039265c270c2ae0654d8b9f6135b24eaed2ca","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":0,"SwarmSource":"ipfs://68150bbc4bfb817cf6b01161b282a410cc06fe54b73007cfa324d02010546ef0"}]}