{"expiry":1699511262,"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/utils/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n/**\n * @title Access Control List\n *\n * @notice Access control smart contract provides an API to check\n *      if specific operation is permitted globally and/or\n *      if particular user has a permission to execute it.\n *\n * @notice It deals with two main entities: features and roles.\n *\n * @notice Features are designed to be used to enable/disable specific\n *      functions (public functions) of the smart contract for everyone.\n * @notice User roles are designed to restrict access to specific\n *      functions (restricted functions) of the smart contract to some users.\n *\n * @notice Terms \"role\", \"permissions\" and \"set of permissions\" have equal meaning\n *      in the documentation text and may be used interchangeably.\n * @notice Terms \"permission\", \"single permission\" implies only one permission bit set.\n *\n * @dev This smart contract is designed to be inherited by other\n *      smart contracts which require access control management capabilities.\n *\n * @author Basil Gorin\n */\ncontract AccessControl {\n  /**\n   * @notice Access manager is responsible for assigning the roles to users,\n   *      enabling/disabling global features of the smart contract\n   * @notice Access manager can add, remove and update user roles,\n   *      remove and update global features\n   *\n   * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\n   * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\n   */\n  uint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\n\n  /**\n   * @dev Bitmask representing all the possible permissions (super admin role)\n   * @dev Has all the bits are enabled (2^256 - 1 value)\n   */\n  uint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\n\n  /**\n   * @notice Privileged addresses with defined roles/permissions\n   * @notice In the context of ERC20/ERC721 tokens these can be permissions to\n   *      allow minting or burning tokens, transferring on behalf and so on\n   *\n   * @dev Maps user address to the permissions bitmask (role), where each bit\n   *      represents a permission\n   * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n   *      represents all possible permissions\n   * @dev Zero address mapping represents global features of the smart contract\n   */\n  mapping(address => uint256) public userRoles;\n\n  /**\n   * @dev Fired in updateRole() and updateFeatures()\n   *\n   * @param _by operator which called the function\n   * @param _to address which was granted/revoked permissions\n   * @param _requested permissions requested\n   * @param _actual permissions effectively set\n   */\n  event RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\n\n  /**\n   * @notice Creates an access control instance,\n   *      setting contract creator to have full privileges\n   */\n  constructor() {\n    // contract creator has full privileges\n    userRoles[msg.sender] = FULL_PRIVILEGES_MASK;\n  }\n\n  /**\n   * @notice Retrieves globally set of features enabled\n   *\n   * @dev Auxiliary getter function to maintain compatibility with previous\n   *      versions of the Access Control List smart contract, where\n   *      features was a separate uint256 public field\n   *\n   * @return 256-bit bitmask of the features enabled\n   */\n  function features() public view returns(uint256) {\n    // according to new design features are stored in zero address\n    // mapping of `userRoles` structure\n    return userRoles[address(0)];\n  }\n\n  /**\n   * @notice Updates set of the globally enabled features (`features`),\n   *      taking into account sender's permissions\n   *\n   * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\n   * @dev Function is left for backward compatibility with older versions\n   *\n   * @param _mask bitmask representing a set of features to enable/disable\n   */\n  function updateFeatures(uint256 _mask) public {\n    // delegate call to `updateRole`\n    updateRole(address(0), _mask);\n  }\n\n  /**\n   * @notice Updates set of permissions (role) for a given user,\n   *      taking into account sender's permissions.\n   *\n   * @dev Setting role to zero is equivalent to removing an all permissions\n   * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\n   *      copying senders' permissions (role) to the user\n   * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\n   *\n   * @param operator address of a user to alter permissions for or zero\n   *      to alter global features of the smart contract\n   * @param role bitmask representing a set of permissions to\n   *      enable/disable for a user specified\n   */\n  function updateRole(address operator, uint256 role) public {\n    // caller must have a permission to update user roles\n    require(isSenderInRole(ROLE_ACCESS_MANAGER), \"insufficient privileges (ROLE_ACCESS_MANAGER required)\");\n\n    // evaluate the role and reassign it\n    userRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\n\n    // fire an event\n    emit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\n  }\n\n  /**\n   * @notice Determines the permission bitmask an operator can set on the\n   *      target permission set\n   * @notice Used to calculate the permission bitmask to be set when requested\n   *     in `updateRole` and `updateFeatures` functions\n   *\n   * @dev Calculated based on:\n   *      1) operator's own permission set read from userRoles[operator]\n   *      2) target permission set - what is already set on the target\n   *      3) desired permission set - what do we want set target to\n   *\n   * @dev Corner cases:\n   *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\n   *        `desired` bitset is returned regardless of the `target` permission set value\n   *        (what operator sets is what they get)\n   *      2) Operator with no permissions (zero bitset):\n   *        `target` bitset is returned regardless of the `desired` value\n   *        (operator has no authority and cannot modify anything)\n   *\n   * @dev Example:\n   *      Consider an operator with the permissions bitmask     00001111\n   *      is about to modify the target permission set          01010101\n   *      Operator wants to set that permission set to          00110011\n   *      Based on their role, an operator has the permissions\n   *      to update only lowest 4 bits on the target, meaning that\n   *      high 4 bits of the target set in this example is left\n   *      unchanged and low 4 bits get changed as desired:      01010011\n   *\n   * @param operator address of the contract operator which is about to set the permissions\n   * @param target input set of permissions to operator is going to modify\n   * @param desired desired set of permissions operator would like to set\n   * @return resulting set of permissions given operator will set\n   */\n  function evaluateBy(address operator, uint256 target, uint256 desired) public view returns(uint256) {\n    // read operator's permissions\n    uint256 p = userRoles[operator];\n\n    // taking into account operator's permissions,\n    // 1) enable the permissions desired on the `target`\n    target |= p & desired;\n    // 2) disable the permissions desired on the `target`\n    target &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\n\n    // return calculated result\n    return target;\n  }\n\n  /**\n   * @notice Checks if requested set of features is enabled globally on the contract\n   *\n   * @param required set of features to check against\n   * @return true if all the features requested are enabled, false otherwise\n   */\n  function isFeatureEnabled(uint256 required) public view returns(bool) {\n    // delegate call to `__hasRole`, passing `features` property\n    return __hasRole(features(), required);\n  }\n\n  /**\n   * @notice Checks if transaction sender `msg.sender` has all the permissions required\n   *\n   * @param required set of permissions (role) to check against\n   * @return true if all the permissions requested are enabled, false otherwise\n   */\n  function isSenderInRole(uint256 required) public view returns(bool) {\n    // delegate call to `isOperatorInRole`, passing transaction sender\n    return isOperatorInRole(msg.sender, required);\n  }\n\n  /**\n   * @notice Checks if operator has all the permissions (role) required\n   *\n   * @param operator address of the user to check role for\n   * @param required set of permissions (role) to check\n   * @return true if all the permissions requested are enabled, false otherwise\n   */\n  function isOperatorInRole(address operator, uint256 required) public view returns(bool) {\n    // delegate call to `__hasRole`, passing operator's permissions (role)\n    return __hasRole(userRoles[operator], required);\n  }\n\n  /**\n   * @dev Checks if role `actual` contains all the permissions required `required`\n   *\n   * @param actual existent role\n   * @param required required role\n   * @return true if actual has required role (all permissions), false otherwise\n   */\n  function __hasRole(uint256 actual, uint256 required) internal pure returns(bool) {\n    // check the bitmask for the role required and return the result\n    return actual & required == required;\n  }\n}\n"},"contracts/interfaces/ERC20Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n/**\n * @title ERC20 token receiver interface\n *\n * @dev Interface for any contract that wants to support safe transfers\n *      from ERC20 token smart contracts.\n * @dev Inspired by ERC721 and ERC223 token standards\n *\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n * @dev See https://github.com/ethereum/EIPs/issues/223\n *\n * @author Basil Gorin\n */\ninterface ERC20Receiver {\n  /**\n   * @notice Handle the receipt of a ERC20 token(s)\n   * @dev The ERC20 smart contract calls this function on the recipient\n   *      after a successful transfer (`safeTransferFrom`).\n   *      This function MAY throw to revert and reject the transfer.\n   *      Return of other than the magic value MUST result in the transaction being reverted.\n   * @notice The contract address is always the message sender.\n   *      A wallet/broker/auction application MUST implement the wallet interface\n   *      if it will accept safe transfers.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _value amount of tokens which is being transferred\n   * @param _data additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` unless throwing\n   */\n  function onERC20Received(address _operator, address _from, uint256 _value, bytes calldata _data) external returns(bytes4);\n}\n"},"contracts/EscrowedIlluvium2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport {AddressUtils} from \"./utils/AddressUtils.sol\";\nimport {AccessControl} from \"./utils/AccessControl.sol\";\nimport {ERC20Receiver} from \"./interfaces/ERC20Receiver.sol\";\n\ncontract EscrowedIlluvium2 is AccessControl {\n  /**\n   * @notice Name of the token: Escrowed Illuvium 2\n   *\n   * @notice ERC20 name of the token (long name)\n   *\n   * @dev ERC20 `function name() public view returns (string)`\n   *\n   * @dev Field is declared public: getter name() is created when compiled,\n   *      it returns the name of the token.\n   */\n  string public constant name = \"Escrowed Illuvium 2\";\n\n  /**\n   * @notice Symbol of the token: sILV2\n   *\n   * @notice ERC20 symbol of that token (short name)\n   *\n   * @dev ERC20 `function symbol() public view returns (string)`\n   *\n   * @dev Field is declared public: getter symbol() is created when compiled,\n   *      it returns the symbol of the token\n   */\n  string public constant symbol = \"sILV2\";\n\n  /**\n   * @notice Decimals of the token: 18\n   *\n   * @dev ERC20 `function decimals() public view returns (uint8)`\n   *\n   * @dev Field is declared public: getter decimals() is created when compiled,\n   *      it returns the number of decimals used to get its user representation.\n   *      For example, if `decimals` equals `6`, a balance of `1,500,000` tokens should\n   *      be displayed to a user as `1,5` (`1,500,000 / 10 ** 6`).\n   *\n   * @dev NOTE: This information is only used for _display_ purposes: it in\n   *      no way affects any of the arithmetic of the contract, including balanceOf() and transfer().\n   */\n  uint8 public constant decimals = 18;\n\n  /**\n   * @notice Total supply of the token: initially 7,000,000,\n   *      with the potential to grow up to 10,000,000 during yield farming period (3 years)\n   *\n   * @dev ERC20 `function totalSupply() public view returns (uint256)`\n   *\n   * @dev Field is declared public: getter totalSupply() is created when compiled,\n   *      it returns the amount of tokens in existence.\n   */\n  uint256 public totalSupply; // is set to 7 million * 10^18 in the constructor\n\n  /**\n   * @dev A record of all the token balances\n   * @dev This mapping keeps record of all token owners:\n   *      owner => balance\n   */\n  mapping(address => uint256) public tokenBalances;\n\n  /**\n   * @notice A record of each account's voting delegate\n   *\n   * @dev Auxiliary data structure used to sum up an account's voting power\n   *\n   * @dev This mapping keeps record of all voting power delegations:\n   *      voting delegator (token owner) => voting delegate\n   */\n  mapping(address => address) public votingDelegates;\n\n  /**\n   * @notice A voting power record binds voting power of a delegate to a particular\n   *      block when the voting power delegation change happened\n   */\n  struct VotingPowerRecord {\n    /*\n     * @dev block.number when delegation has changed; starting from\n     *      that block voting power value is in effect\n     */\n    uint64 blockNumber;\n\n    /*\n     * @dev cumulative voting power a delegate has obtained starting\n     *      from the block stored in blockNumber\n     */\n    uint192 votingPower;\n  }\n\n  /**\n   * @notice A record of each account's voting power\n   *\n   * @dev Primarily data structure to store voting power for each account.\n   *      Voting power sums up from the account's token balance and delegated\n   *      balances.\n   *\n   * @dev Stores current value and entire history of its changes.\n   *      The changes are stored as an array of checkpoints.\n   *      Checkpoint is an auxiliary data structure containing voting\n   *      power (number of votes) and block number when the checkpoint is saved\n   *\n   * @dev Maps voting delegate => voting power record\n   */\n  mapping(address => VotingPowerRecord[]) public votingPowerHistory;\n\n  /**\n   * @dev A record of nonces for signing/validating signatures in `delegateWithSig`\n   *      for every delegate, increases after successful validation\n   *\n   * @dev Maps delegate address => delegate nonce\n   */\n  mapping(address => uint256) public nonces;\n\n  /**\n   * @notice A record of all the allowances to spend tokens on behalf\n   * @dev Maps token owner address to an address approved to spend\n   *      some tokens on behalf, maps approved address to that amount\n   * @dev owner => spender => value\n   */\n  mapping(address => mapping(address => uint256)) public transferAllowances;\n\n  /**\n   * @notice Enables ERC20 transfers of the tokens\n   *      (transfer by the token owner himself)\n   * @dev Feature FEATURE_TRANSFERS must be enabled in order for\n   *      `transfer()` function to succeed\n   */\n  uint32 public constant FEATURE_TRANSFERS = 0x0000_0001;\n\n  /**\n   * @notice Enables ERC20 transfers on behalf\n   *      (transfer by someone else on behalf of token owner)\n   * @dev Feature FEATURE_TRANSFERS_ON_BEHALF must be enabled in order for\n   *      `transferFrom()` function to succeed\n   * @dev Token owner must call `approve()` first to authorize\n   *      the transfer on behalf\n   */\n  uint32 public constant FEATURE_TRANSFERS_ON_BEHALF = 0x0000_0002;\n\n  /**\n   * @dev Defines if the default behavior of `transfer` and `transferFrom`\n   *      checks if the receiver smart contract supports ERC20 tokens\n   * @dev When feature FEATURE_UNSAFE_TRANSFERS is enabled the transfers do not\n   *      check if the receiver smart contract supports ERC20 tokens,\n   *      i.e. `transfer` and `transferFrom` behave like `unsafeTransferFrom`\n   * @dev When feature FEATURE_UNSAFE_TRANSFERS is disabled (default) the transfers\n   *      check if the receiver smart contract supports ERC20 tokens,\n   *      i.e. `transfer` and `transferFrom` behave like `safeTransferFrom`\n   */\n  uint32 public constant FEATURE_UNSAFE_TRANSFERS = 0x0000_0004;\n\n  /**\n   * @notice Enables token owners to burn their own tokens,\n   *      including locked tokens which are burnt first\n   * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\n   *      `burn()` function to succeed when called by token owner\n   */\n  uint32 public constant FEATURE_OWN_BURNS = 0x0000_0008;\n\n  /**\n   * @notice Enables approved operators to burn tokens on behalf of their owners,\n   *      including locked tokens which are burnt first\n   * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\n   *      `burn()` function to succeed when called by approved operator\n   */\n  uint32 public constant FEATURE_BURNS_ON_BEHALF = 0x0000_0010;\n\n  /**\n   * @notice Enables delegators to elect delegates\n   * @dev Feature FEATURE_DELEGATIONS must be enabled in order for\n   *      `delegate()` function to succeed\n   */\n  uint32 public constant FEATURE_DELEGATIONS = 0x0000_0020;\n\n  /**\n   * @notice Enables delegators to elect delegates on behalf\n   *      (via an EIP712 signature)\n   * @dev Feature FEATURE_DELEGATIONS must be enabled in order for\n   *      `delegateWithSig()` function to succeed\n   */\n  uint32 public constant FEATURE_DELEGATIONS_ON_BEHALF = 0x0000_0040;\n\n  /**\n   * @notice Token creator is responsible for creating (minting)\n   *      tokens to an arbitrary address\n   * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\n   *      (calling `mint` function)\n   */\n  uint32 public constant ROLE_TOKEN_CREATOR = 0x0001_0000;\n\n  /**\n   * @notice Token destroyer is responsible for destroying (burning)\n   *      tokens owned by an arbitrary address\n   * @dev Role ROLE_TOKEN_DESTROYER allows burning tokens\n   *      (calling `burn` function)\n   */\n  uint32 public constant ROLE_TOKEN_DESTROYER = 0x0002_0000;\n\n  /**\n   * @notice ERC20 receivers are allowed to receive tokens without ERC20 safety checks,\n   *      which may be useful to simplify tokens transfers into \"legacy\" smart contracts\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is not enabled addresses having\n   *      `ROLE_ERC20_RECEIVER` permission are allowed to receive tokens\n   *      via `transfer` and `transferFrom` functions in the same way they\n   *      would via `unsafeTransferFrom` function\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is enabled `ROLE_ERC20_RECEIVER` permission\n   *      doesn't affect the transfer behaviour since\n   *      `transfer` and `transferFrom` behave like `unsafeTransferFrom` for any receiver\n   * @dev ROLE_ERC20_RECEIVER is a shortening for ROLE_UNSAFE_ERC20_RECEIVER\n   */\n  uint32 public constant ROLE_ERC20_RECEIVER = 0x0004_0000;\n\n  /**\n   * @notice ERC20 senders are allowed to send tokens without ERC20 safety checks,\n   *      which may be useful to simplify tokens transfers into \"legacy\" smart contracts\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is not enabled senders having\n   *      `ROLE_ERC20_SENDER` permission are allowed to send tokens\n   *      via `transfer` and `transferFrom` functions in the same way they\n   *      would via `unsafeTransferFrom` function\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is enabled `ROLE_ERC20_SENDER` permission\n   *      doesn't affect the transfer behaviour since\n   *      `transfer` and `transferFrom` behave like `unsafeTransferFrom` for any receiver\n   * @dev ROLE_ERC20_SENDER is a shortening for ROLE_UNSAFE_ERC20_SENDER\n   */\n  uint32 public constant ROLE_ERC20_SENDER = 0x0008_0000;\n\n  /**\n   * @dev Magic value to be returned by ERC20Receiver upon successful reception of token(s)\n   * @dev Equal to `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))`,\n   *      which can be also obtained as `ERC20Receiver(address(0)).onERC20Received.selector`\n   */\n  bytes4 private constant ERC20_RECEIVED = 0x4fc35859;\n\n  /**\n   * @notice EIP-712 contract's domain typeHash, see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\n   */\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n  /**\n   * @notice EIP-712 delegation struct typeHash, see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\n   */\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegate,uint256 nonce,uint256 expiry)\");\n\n  /**\n   * @dev Fired in transfer(), transferFrom() and some other (non-ERC20) functions\n   *\n   * @dev ERC20 `event Transfer(address indexed _from, address indexed _to, uint256 _value)`\n   *\n   * @param _from an address tokens were consumed from\n   * @param _to an address tokens were sent to\n   * @param _value number of tokens transferred\n   */\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * @dev Fired in approve() and approveAtomic() functions\n   *\n   * @dev ERC20 `event Approval(address indexed _owner, address indexed _spender, uint256 _value)`\n   *\n   * @param _owner an address which granted a permission to transfer\n   *      tokens on its behalf\n   * @param _spender an address which received a permission to transfer\n   *      tokens on behalf of the owner `_owner`\n   * @param _value amount of tokens granted to transfer on behalf\n   */\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n  /**\n   * @dev Fired in mint() function\n   *\n   * @param _by an address which minted some tokens (transaction sender)\n   * @param _to an address the tokens were minted to\n   * @param _value an amount of tokens minted\n   */\n  event Minted(address indexed _by, address indexed _to, uint256 _value);\n\n  /**\n   * @dev Fired in burn() function\n   *\n   * @param _by an address which burned some tokens (transaction sender)\n   * @param _from an address the tokens were burnt from\n   * @param _value an amount of tokens burnt\n   */\n  event Burnt(address indexed _by, address indexed _from, uint256 _value);\n\n  /**\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\n   *\n   * @dev Similar to ERC20 Transfer event, but also logs an address which executed transfer\n   *\n   * @dev Fired in transfer(), transferFrom() and some other (non-ERC20) functions\n   *\n   * @param _by an address which performed the transfer\n   * @param _from an address tokens were consumed from\n   * @param _to an address tokens were sent to\n   * @param _value number of tokens transferred\n   */\n  event Transferred(address indexed _by, address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\n   *\n   * @dev Similar to ERC20 Approve event, but also logs old approval value\n   *\n   * @dev Fired in approve() and approveAtomic() functions\n   *\n   * @param _owner an address which granted a permission to transfer\n   *      tokens on its behalf\n   * @param _spender an address which received a permission to transfer\n   *      tokens on behalf of the owner `_owner`\n   * @param _oldValue previously granted amount of tokens to transfer on behalf\n   * @param _value new granted amount of tokens to transfer on behalf\n   */\n  event Approved(address indexed _owner, address indexed _spender, uint256 _oldValue, uint256 _value);\n\n  /**\n   * @dev Notifies that a key-value pair in `votingDelegates` mapping has changed,\n   *      i.e. a delegator address has changed its delegate address\n   *\n   * @param _of delegator address, a token owner\n   * @param _from old delegate, an address which delegate right is revoked\n   * @param _to new delegate, an address which received the voting power\n   */\n  event DelegateChanged(address indexed _of, address indexed _from, address indexed _to);\n\n  /**\n   * @dev Notifies that a key-value pair in `votingPowerHistory` mapping has changed,\n   *      i.e. a delegate's voting power has changed.\n   *\n   * @param _of delegate whose voting power has changed\n   * @param _fromVal previous number of votes delegate had\n   * @param _toVal new number of votes delegate has\n   */\n  event VotingPowerChanged(address indexed _of, uint256 _fromVal, uint256 _toVal);\n\n  // ===== Start: ERC20/ERC223/ERC777 functions =====\n\n  /**\n   * @notice Gets the balance of a particular address\n   *\n   * @dev ERC20 `function balanceOf(address _owner) public view returns (uint256 balance)`\n   *\n   * @param _owner the address to query the the balance for\n   * @return balance an amount of tokens owned by the address specified\n   */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    // read the balance and return\n    return tokenBalances[_owner];\n  }\n\n  /**\n   * @notice Transfers some tokens to an external address or a smart contract\n   *\n   * @dev ERC20 `function transfer(address _to, uint256 _value) public returns (bool success)`\n   *\n   * @dev Called by token owner (an address which has a\n   *      positive token balance tracked by this smart contract)\n   * @dev Throws on any error like\n   *      * insufficient token balance or\n   *      * incorrect `_to` address:\n   *          * zero address or\n   *          * self address or\n   *          * smart contract which doesn't support ERC20\n   *\n   * @param _to an address to transfer tokens to,\n   *      must be either an external address or a smart contract,\n   *      compliant with the ERC20 standard\n   * @param _value amount of tokens to be transferred, must\n   *      be greater than zero\n   * @return success true on success, throws otherwise\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    // just delegate call to `transferFrom`,\n    // `FEATURE_TRANSFERS` is verified inside it\n    return transferFrom(msg.sender, _to, _value);\n  }\n\n  /**\n   * @notice Transfers some tokens on behalf of address `_from' (token owner)\n   *      to some other address `_to`\n   *\n   * @dev ERC20 `function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)`\n   *\n   * @dev Called by token owner on his own or approved address,\n   *      an address approved earlier by token owner to\n   *      transfer some amount of tokens on its behalf\n   * @dev Throws on any error like\n   *      * insufficient token balance or\n   *      * incorrect `_to` address:\n   *          * zero address or\n   *          * same as `_from` address (self transfer)\n   *          * smart contract which doesn't support ERC20\n   *\n   * @param _from token owner which approved caller (transaction sender)\n   *      to transfer `_value` of tokens on its behalf\n   * @param _to an address to transfer tokens to,\n   *      must be either an external address or a smart contract,\n   *      compliant with the ERC20 standard\n   * @param _value amount of tokens to be transferred, must\n   *      be greater than zero\n   * @return success true on success, throws otherwise\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    // depending on `FEATURE_UNSAFE_TRANSFERS` we execute either safe (default)\n    // or unsafe transfer\n    // if `FEATURE_UNSAFE_TRANSFERS` is enabled\n    // or receiver has `ROLE_ERC20_RECEIVER` permission\n    // or sender has `ROLE_ERC20_SENDER` permission\n    if(isFeatureEnabled(FEATURE_UNSAFE_TRANSFERS)\n      || isOperatorInRole(_to, ROLE_ERC20_RECEIVER)\n      || isSenderInRole(ROLE_ERC20_SENDER)) {\n      // we execute unsafe transfer - delegate call to `unsafeTransferFrom`,\n      // `FEATURE_TRANSFERS` is verified inside it\n      unsafeTransferFrom(_from, _to, _value);\n    }\n    // otherwise - if `FEATURE_UNSAFE_TRANSFERS` is disabled\n    // and receiver doesn't have `ROLE_ERC20_RECEIVER` permission\n    else {\n      // we execute safe transfer - delegate call to `safeTransferFrom`, passing empty `_data`,\n      // `FEATURE_TRANSFERS` is verified inside it\n      safeTransferFrom(_from, _to, _value, \"\");\n    }\n\n    // both `unsafeTransferFrom` and `safeTransferFrom` throw on any error, so\n    // if we're here - it means operation successful,\n    // just return true\n    return true;\n  }\n\n  /**\n   * @notice Transfers some tokens on behalf of address `_from' (token owner)\n   *      to some other address `_to`\n   *\n   * @dev Inspired by ERC721 safeTransferFrom, this function allows to\n   *      send arbitrary data to the receiver on successful token transfer\n   * @dev Called by token owner on his own or approved address,\n   *      an address approved earlier by token owner to\n   *      transfer some amount of tokens on its behalf\n   * @dev Throws on any error like\n   *      * insufficient token balance or\n   *      * incorrect `_to` address:\n   *          * zero address or\n   *          * same as `_from` address (self transfer)\n   *          * smart contract which doesn't support ERC20Receiver interface\n   * @dev Returns silently on success, throws otherwise\n   *\n   * @param _from token owner which approved caller (transaction sender)\n   *      to transfer `_value` of tokens on its behalf\n   * @param _to an address to transfer tokens to,\n   *      must be either an external address or a smart contract,\n   *      compliant with the ERC20 standard\n   * @param _value amount of tokens to be transferred, must\n   *      be greater than zero\n   * @param _data [optional] additional data with no specified format,\n   *      sent in onERC20Received call to `_to` in case if its a smart contract\n   */\n  function safeTransferFrom(address _from, address _to, uint256 _value, bytes memory _data) public {\n    // first delegate call to `unsafeTransferFrom`\n    // to perform the unsafe token(s) transfer\n    unsafeTransferFrom(_from, _to, _value);\n\n    // after the successful transfer - check if receiver supports\n    // ERC20Receiver and execute a callback handler `onERC20Received`,\n    // reverting whole transaction on any error:\n    // check if receiver `_to` supports ERC20Receiver interface\n    if(AddressUtils.isContract(_to)) {\n      // if `_to` is a contract - execute onERC20Received\n      bytes4 response = ERC20Receiver(_to).onERC20Received(msg.sender, _from, _value, _data);\n\n      // expected response is ERC20_RECEIVED\n      require(response == ERC20_RECEIVED, \"invalid onERC20Received response\");\n    }\n  }\n\n  /**\n   * @notice Transfers some tokens on behalf of address `_from' (token owner)\n   *      to some other address `_to`\n   *\n   * @dev In contrast to `safeTransferFrom` doesn't check recipient\n   *      smart contract to support ERC20 tokens (ERC20Receiver)\n   * @dev Designed to be used by developers when the receiver is known\n   *      to support ERC20 tokens but doesn't implement ERC20Receiver interface\n   * @dev Called by token owner on his own or approved address,\n   *      an address approved earlier by token owner to\n   *      transfer some amount of tokens on its behalf\n   * @dev Throws on any error like\n   *      * insufficient token balance or\n   *      * incorrect `_to` address:\n   *          * zero address or\n   *          * same as `_from` address (self transfer)\n   * @dev Returns silently on success, throws otherwise\n   *\n   * @param _from token owner which approved caller (transaction sender)\n   *      to transfer `_value` of tokens on its behalf\n   * @param _to an address to transfer tokens to,\n   *      must be either an external address or a smart contract,\n   *      compliant with the ERC20 standard\n   * @param _value amount of tokens to be transferred, must\n   *      be greater than zero\n   */\n  function unsafeTransferFrom(address _from, address _to, uint256 _value) public {\n    // if `_from` is equal to sender, require transfers feature to be enabled\n    // otherwise require transfers on behalf feature to be enabled\n    require(_from == msg.sender && isFeatureEnabled(FEATURE_TRANSFERS)\n         || _from != msg.sender && isFeatureEnabled(FEATURE_TRANSFERS_ON_BEHALF),\n            _from == msg.sender? \"transfers are disabled\": \"transfers on behalf are disabled\");\n\n    // non-zero source address check - Zeppelin\n    // obviously, zero source address is a client mistake\n    // it's not part of ERC20 standard but it's reasonable to fail fast\n    // since for zero value transfer transaction succeeds otherwise\n    require(_from != address(0), \"ERC20: transfer from the zero address\"); // Zeppelin msg\n\n    // non-zero recipient address check\n    require(_to != address(0), \"ERC20: transfer to the zero address\"); // Zeppelin msg\n\n    // sender and recipient cannot be the same\n    require(_from != _to, \"sender and recipient are the same (_from = _to)\");\n\n    // sending tokens to the token smart contract itself is a client mistake\n    require(_to != address(this), \"invalid recipient (transfer to the token smart contract itself)\");\n\n    // according to ERC-20 Token Standard, https://eips.ethereum.org/EIPS/eip-20\n    // \"Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\"\n    if(_value == 0) {\n      // emit an ERC20 transfer event\n      emit Transfer(_from, _to, _value);\n\n      // don't forget to return - we're done\n      return;\n    }\n\n    // no need to make arithmetic overflow check on the _value - by design of mint()\n\n    // in case of transfer on behalf\n    if(_from != msg.sender) {\n      // read allowance value - the amount of tokens allowed to transfer - into the stack\n      uint256 _allowance = transferAllowances[_from][msg.sender];\n\n      // verify sender has an allowance to transfer amount of tokens requested\n      require(_allowance >= _value, \"ERC20: transfer amount exceeds allowance\"); // Zeppelin msg\n\n      // update allowance value on the stack\n      _allowance -= _value;\n\n      // update the allowance value in storage\n      transferAllowances[_from][msg.sender] = _allowance;\n\n      // emit an improved atomic approve event\n      emit Approved(_from, msg.sender, _allowance + _value, _allowance);\n\n      // emit an ERC20 approval event to reflect the decrease\n      emit Approval(_from, msg.sender, _allowance);\n    }\n\n    // verify sender has enough tokens to transfer on behalf\n    require(tokenBalances[_from] >= _value, \"ERC20: transfer amount exceeds balance\"); // Zeppelin msg\n\n    // perform the transfer:\n    // decrease token owner (sender) balance\n    tokenBalances[_from] -= _value;\n\n    // increase `_to` address (receiver) balance\n    tokenBalances[_to] += _value;\n\n    // move voting power associated with the tokens transferred\n    __moveVotingPower(votingDelegates[_from], votingDelegates[_to], _value);\n\n    // emit an improved transfer event\n    emit Transferred(msg.sender, _from, _to, _value);\n\n    // emit an ERC20 transfer event\n    emit Transfer(_from, _to, _value);\n  }\n\n  /**\n   * @notice Approves address called `_spender` to transfer some amount\n   *      of tokens on behalf of the owner\n   *\n   * @dev ERC20 `function approve(address _spender, uint256 _value) public returns (bool success)`\n   *\n   * @dev Caller must not necessarily own any tokens to grant the permission\n   *\n   * @param _spender an address approved by the caller (token owner)\n   *      to spend some tokens on its behalf\n   * @param _value an amount of tokens spender `_spender` is allowed to\n   *      transfer on behalf of the token owner\n   * @return success true on success, throws otherwise\n   */\n  function approve(address _spender, uint256 _value) public returns (bool success) {\n    // non-zero spender address check - Zeppelin\n    // obviously, zero spender address is a client mistake\n    // it's not part of ERC20 standard but it's reasonable to fail fast\n    require(_spender != address(0), \"ERC20: approve to the zero address\"); // Zeppelin msg\n\n    // read old approval value to emmit an improved event (ISBN:978-1-7281-3027-9)\n    uint256 _oldValue = transferAllowances[msg.sender][_spender];\n\n    // perform an operation: write value requested into the storage\n    transferAllowances[msg.sender][_spender] = _value;\n\n    // emit an improved atomic approve event (ISBN:978-1-7281-3027-9)\n    emit Approved(msg.sender, _spender, _oldValue, _value);\n\n    // emit an ERC20 approval event\n    emit Approval(msg.sender, _spender, _value);\n\n    // operation successful, return true\n    return true;\n  }\n\n  /**\n   * @notice Returns the amount which _spender is still allowed to withdraw from _owner.\n   *\n   * @dev ERC20 `function allowance(address _owner, address _spender) public view returns (uint256 remaining)`\n   *\n   * @dev A function to check an amount of tokens owner approved\n   *      to transfer on its behalf by some other address called \"spender\"\n   *\n   * @param _owner an address which approves transferring some tokens on its behalf\n   * @param _spender an address approved to transfer some tokens on behalf\n   * @return remaining an amount of tokens approved address `_spender` can transfer on behalf\n   *      of token owner `_owner`\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n    // read the value from storage and return\n    return transferAllowances[_owner][_spender];\n  }\n\n  // ===== End: ERC20/ERC223/ERC777 functions =====\n\n  // ===== Start: Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9) =====\n\n  /**\n   * @notice Increases the allowance granted to `spender` by the transaction sender\n   *\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\n   *\n   * @dev Throws if value to increase by is zero or too big and causes arithmetic overflow\n   *\n   * @param _spender an address approved by the caller (token owner)\n   *      to spend some tokens on its behalf\n   * @param _value an amount of tokens to increase by\n   * @return success true on success, throws otherwise\n   */\n  function increaseAllowance(address _spender, uint256 _value) public virtual returns (bool) {\n    // read current allowance value\n    uint256 currentVal = transferAllowances[msg.sender][_spender];\n\n    // non-zero _value and arithmetic overflow check on the allowance\n    require(currentVal + _value > currentVal, \"zero value approval increase or arithmetic overflow\");\n\n    // delegate call to `approve` with the new value\n    return approve(_spender, currentVal + _value);\n  }\n\n  /**\n   * @notice Decreases the allowance granted to `spender` by the caller.\n   *\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\n   *\n   * @dev Throws if value to decrease by is zero or is bigger than currently allowed value\n   *\n   * @param _spender an address approved by the caller (token owner)\n   *      to spend some tokens on its behalf\n   * @param _value an amount of tokens to decrease by\n   * @return success true on success, throws otherwise\n   */\n  function decreaseAllowance(address _spender, uint256 _value) public virtual returns (bool) {\n    // read current allowance value\n    uint256 currentVal = transferAllowances[msg.sender][_spender];\n\n    // non-zero _value check on the allowance\n    require(_value > 0, \"zero value approval decrease\");\n\n    // verify allowance decrease doesn't underflow\n    require(currentVal >= _value, \"ERC20: decreased allowance below zero\");\n\n    // delegate call to `approve` with the new value\n    return approve(_spender, currentVal - _value);\n  }\n\n  // ===== End: Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9) =====\n\n  // ===== Start: Minting/burning extension =====\n\n  /**\n   * @dev Mints (creates) some tokens to address specified\n   * @dev The value specified is treated as is without taking\n   *      into account what `decimals` value is\n   * @dev Behaves effectively as `mintTo` function, allowing\n   *      to specify an address to mint tokens to\n   * @dev Requires sender to have `ROLE_TOKEN_CREATOR` permission\n   *\n   * @dev Throws on overflow, if totalSupply + _value doesn't fit into uint256\n   *\n   * @param _to an address to mint tokens to\n   * @param _value an amount of tokens to mint (create)\n   */\n  function mint(address _to, uint256 _value) public {\n    // check if caller has sufficient permissions to mint tokens\n    require(isSenderInRole(ROLE_TOKEN_CREATOR), \"insufficient privileges (ROLE_TOKEN_CREATOR required)\");\n\n    // non-zero recipient address check\n    require(_to != address(0), \"ERC20: mint to the zero address\"); // Zeppelin msg\n\n    // non-zero _value and arithmetic overflow check on the total supply\n    // this check automatically secures arithmetic overflow on the individual balance\n    require(totalSupply + _value > totalSupply, \"zero value mint or arithmetic overflow\");\n\n    // uint192 overflow check (required by voting delegation)\n    require(totalSupply + _value <= type(uint192).max, \"total supply overflow (uint192)\");\n\n    // perform mint:\n    // increase total amount of tokens value\n    totalSupply += _value;\n\n    // increase `_to` address balance\n    tokenBalances[_to] += _value;\n\n    // create voting power associated with the tokens minted\n    __moveVotingPower(address(0), votingDelegates[_to], _value);\n\n    // fire a minted event\n    emit Minted(msg.sender, _to, _value);\n\n    // emit an improved transfer event\n    emit Transferred(msg.sender, address(0), _to, _value);\n\n    // fire ERC20 compliant transfer event\n    emit Transfer(address(0), _to, _value);\n  }\n\n  /**\n   * @dev Burns (destroys) some tokens from the address specified\n   * @dev The value specified is treated as is without taking\n   *      into account what `decimals` value is\n   * @dev Behaves effectively as `burnFrom` function, allowing\n   *      to specify an address to burn tokens from\n   * @dev Requires sender to have `ROLE_TOKEN_DESTROYER` permission\n   *\n   * @param _from an address to burn some tokens from\n   * @param _value an amount of tokens to burn (destroy)\n   */\n  function burn(address _from, uint256 _value) public {\n    // check if caller has sufficient permissions to burn tokens\n    // and if not - check for possibility to burn own tokens or to burn on behalf\n    if(!isSenderInRole(ROLE_TOKEN_DESTROYER)) {\n      // if `_from` is equal to sender, require own burns feature to be enabled\n      // otherwise require burns on behalf feature to be enabled\n      require(_from == msg.sender && isFeatureEnabled(FEATURE_OWN_BURNS)\n           || _from != msg.sender && isFeatureEnabled(FEATURE_BURNS_ON_BEHALF),\n              _from == msg.sender? \"burns are disabled\": \"burns on behalf are disabled\");\n\n      // in case of burn on behalf\n      if(_from != msg.sender) {\n        // read allowance value - the amount of tokens allowed to be burnt - into the stack\n        uint256 _allowance = transferAllowances[_from][msg.sender];\n\n        // verify sender has an allowance to burn amount of tokens requested\n        require(_allowance >= _value, \"ERC20: burn amount exceeds allowance\"); // Zeppelin msg\n\n        // update allowance value on the stack\n        _allowance -= _value;\n\n        // update the allowance value in storage\n        transferAllowances[_from][msg.sender] = _allowance;\n\n        // emit an improved atomic approve event\n        emit Approved(msg.sender, _from, _allowance + _value, _allowance);\n\n        // emit an ERC20 approval event to reflect the decrease\n        emit Approval(_from, msg.sender, _allowance);\n      }\n    }\n\n    // at this point we know that either sender is ROLE_TOKEN_DESTROYER or\n    // we burn own tokens or on behalf (in latest case we already checked and updated allowances)\n    // we have left to execute balance checks and burning logic itself\n\n    // non-zero burn value check\n    require(_value != 0, \"zero value burn\");\n\n    // non-zero source address check - Zeppelin\n    require(_from != address(0), \"ERC20: burn from the zero address\"); // Zeppelin msg\n\n    // verify `_from` address has enough tokens to destroy\n    // (basically this is a arithmetic overflow check)\n    require(tokenBalances[_from] >= _value, \"ERC20: burn amount exceeds balance\"); // Zeppelin msg\n\n    // perform burn:\n    // decrease `_from` address balance\n    tokenBalances[_from] -= _value;\n\n    // decrease total amount of tokens value\n    totalSupply -= _value;\n\n    // destroy voting power associated with the tokens burnt\n    __moveVotingPower(votingDelegates[_from], address(0), _value);\n\n    // fire a burnt event\n    emit Burnt(msg.sender, _from, _value);\n\n    // emit an improved transfer event\n    emit Transferred(msg.sender, _from, address(0), _value);\n\n    // fire ERC20 compliant transfer event\n    emit Transfer(_from, address(0), _value);\n  }\n\n  // ===== End: Minting/burning extension =====\n\n  // ===== Start: DAO Support (Compound-like voting delegation) =====\n\n  /**\n   * @notice Gets current voting power of the account `_of`\n   * @param _of the address of account to get voting power of\n   * @return current cumulative voting power of the account,\n   *      sum of token balances of all its voting delegators\n   */\n  function getVotingPower(address _of) public view returns (uint256) {\n    // get a link to an array of voting power history records for an address specified\n    VotingPowerRecord[] storage history = votingPowerHistory[_of];\n\n    // lookup the history and return latest element\n    return history.length == 0? 0: history[history.length - 1].votingPower;\n  }\n\n  /**\n   * @notice Gets past voting power of the account `_of` at some block `_blockNum`\n   * @dev Throws if `_blockNum` is not in the past (not the finalized block)\n   * @param _of the address of account to get voting power of\n   * @param _blockNum block number to get the voting power at\n   * @return past cumulative voting power of the account,\n   *      sum of token balances of all its voting delegators at block number `_blockNum`\n   */\n  function getVotingPowerAt(address _of, uint256 _blockNum) public view returns (uint256) {\n    // make sure block number is not in the past (not the finalized block)\n    require(_blockNum < block.number, \"not yet determined\"); // Compound msg\n\n    // get a link to an array of voting power history records for an address specified\n    VotingPowerRecord[] storage history = votingPowerHistory[_of];\n\n    // if voting power history for the account provided is empty\n    if(history.length == 0) {\n      // than voting power is zero - return the result\n      return 0;\n    }\n\n    // check latest voting power history record block number:\n    // if history was not updated after the block of interest\n    if(history[history.length - 1].blockNumber <= _blockNum) {\n      // we're done - return last voting power record\n      return getVotingPower(_of);\n    }\n\n    // check first voting power history record block number:\n    // if history was never updated before the block of interest\n    if(history[0].blockNumber > _blockNum) {\n      // we're done - voting power at the block num of interest was zero\n      return 0;\n    }\n\n    // `votingPowerHistory[_of]` is an array ordered by `blockNumber`, ascending;\n    // apply binary search on `votingPowerHistory[_of]` to find such an entry number `i`, that\n    // `votingPowerHistory[_of][i].blockNumber <= _blockNum`, but in the same time\n    // `votingPowerHistory[_of][i + 1].blockNumber > _blockNum`\n    // return the result - voting power found at index `i`\n    return history[__binaryLookup(_of, _blockNum)].votingPower;\n  }\n\n  /**\n   * @dev Reads an entire voting power history array for the delegate specified\n   *\n   * @param _of delegate to query voting power history for\n   * @return voting power history array for the delegate of interest\n   */\n  function getVotingPowerHistory(address _of) public view returns(VotingPowerRecord[] memory) {\n    // return an entire array as memory\n    return votingPowerHistory[_of];\n  }\n\n  /**\n   * @dev Returns length of the voting power history array for the delegate specified;\n   *      useful since reading an entire array just to get its length is expensive (gas cost)\n   *\n   * @param _of delegate to query voting power history length for\n   * @return voting power history array length for the delegate of interest\n   */\n  function getVotingPowerHistoryLength(address _of) public view returns(uint256) {\n    // read array length and return\n    return votingPowerHistory[_of].length;\n  }\n\n  /**\n   * @notice Delegates voting power of the delegator `msg.sender` to the delegate `_to`\n   *\n   * @dev Accepts zero value address to delegate voting power to, effectively\n   *      removing the delegate in that case\n   *\n   * @param _to address to delegate voting power to\n   */\n  function delegate(address _to) public {\n    // verify delegations are enabled\n    require(isFeatureEnabled(FEATURE_DELEGATIONS), \"delegations are disabled\");\n    // delegate call to `__delegate`\n    __delegate(msg.sender, _to);\n  }\n\n  /**\n   * @notice Delegates voting power of the delegator (represented by its signature) to the delegate `_to`\n   *\n   * @dev Accepts zero value address to delegate voting power to, effectively\n   *      removing the delegate in that case\n   *\n   * @dev Compliant with EIP-712: Ethereum typed structured data hashing and signing,\n   *      see https://eips.ethereum.org/EIPS/eip-712\n   *\n   * @param _to address to delegate voting power to\n   * @param _nonce nonce used to construct the signature, and used to validate it;\n   *      nonce is increased by one after successful signature validation and vote delegation\n   * @param _exp signature expiration time\n   * @param v the recovery byte of the signature\n   * @param r half of the ECDSA signature pair\n   * @param s half of the ECDSA signature pair\n   */\n  function delegateWithSig(address _to, uint256 _nonce, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public {\n    // verify delegations on behalf are enabled\n    require(isFeatureEnabled(FEATURE_DELEGATIONS_ON_BEHALF), \"delegations on behalf are disabled\");\n\n    // build the EIP-712 contract domain separator\n    bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), block.chainid, address(this)));\n\n    // build the EIP-712 hashStruct of the delegation message\n    bytes32 hashStruct = keccak256(abi.encode(DELEGATION_TYPEHASH, _to, _nonce, _exp));\n\n    // calculate the EIP-712 digest \"\\x19\\x01\" ‖ domainSeparator ‖ hashStruct(message)\n    bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, hashStruct));\n\n    // recover the address who signed the message with v, r, s\n    address signer = ecrecover(digest, v, r, s);\n\n    // perform message integrity and security validations\n    require(signer != address(0), \"invalid signature\"); // Compound msg\n    require(_nonce == nonces[signer], \"invalid nonce\"); // Compound msg\n    require(block.timestamp < _exp, \"signature expired\"); // Compound msg\n\n    // update the nonce for that particular signer to avoid replay attack\n    nonces[signer]++;\n\n    // delegate call to `__delegate` - execute the logic required\n    __delegate(signer, _to);\n  }\n\n  /**\n   * @dev Auxiliary function to delegate delegator's `_from` voting power to the delegate `_to`\n   * @dev Writes to `votingDelegates` and `votingPowerHistory` mappings\n   *\n   * @param _from delegator who delegates his voting power\n   * @param _to delegate who receives the voting power\n   */\n  function __delegate(address _from, address _to) private {\n    // read current delegate to be replaced by a new one\n    address _fromDelegate = votingDelegates[_from];\n\n    // read current voting power (it is equal to token balance)\n    uint256 _value = tokenBalances[_from];\n\n    // reassign voting delegate to `_to`\n    votingDelegates[_from] = _to;\n\n    // update voting power for `_fromDelegate` and `_to`\n    __moveVotingPower(_fromDelegate, _to, _value);\n\n    // emit an event\n    emit DelegateChanged(_from, _fromDelegate, _to);\n  }\n\n  /**\n   * @dev Auxiliary function to move voting power `_value`\n   *      from delegate `_from` to the delegate `_to`\n   *\n   * @dev Doesn't have any effect if `_from == _to`, or if `_value == 0`\n   *\n   * @param _from delegate to move voting power from\n   * @param _to delegate to move voting power to\n   * @param _value voting power to move from `_from` to `_to`\n   */\n  function __moveVotingPower(address _from, address _to, uint256 _value) private {\n    // if there is no move (`_from == _to`) or there is nothing to move (`_value == 0`)\n    if(_from == _to || _value == 0) {\n      // return silently with no action\n      return;\n    }\n\n    // if source address is not zero - decrease its voting power\n    if(_from != address(0)) {\n      // read current source address voting power\n      uint256 _fromVal = getVotingPower(_from);\n\n      // calculate decreased voting power\n      // underflow is not possible by design:\n      // voting power is limited by token balance which is checked by the callee\n      uint256 _toVal = _fromVal - _value;\n\n      // update source voting power from `_fromVal` to `_toVal`\n      __updateVotingPower(_from, _fromVal, _toVal);\n    }\n\n    // if destination address is not zero - increase its voting power\n    if(_to != address(0)) {\n      // read current destination address voting power\n      uint256 _fromVal = getVotingPower(_to);\n\n      // calculate increased voting power\n      // overflow is not possible by design:\n      // max token supply limits the cumulative voting power\n      uint256 _toVal = _fromVal + _value;\n\n      // update destination voting power from `_fromVal` to `_toVal`\n      __updateVotingPower(_to, _fromVal, _toVal);\n    }\n  }\n\n  /**\n   * @dev Auxiliary function to update voting power of the delegate `_of`\n   *      from value `_fromVal` to value `_toVal`\n   *\n   * @param _of delegate to update its voting power\n   * @param _fromVal old voting power of the delegate\n   * @param _toVal new voting power of the delegate\n   */\n  function __updateVotingPower(address _of, uint256 _fromVal, uint256 _toVal) private {\n    // get a link to an array of voting power history records for an address specified\n    VotingPowerRecord[] storage history = votingPowerHistory[_of];\n\n    // if there is an existing voting power value stored for current block\n    if(history.length != 0 && history[history.length - 1].blockNumber == block.number) {\n      // update voting power which is already stored in the current block\n      history[history.length - 1].votingPower = uint192(_toVal);\n    }\n    // otherwise - if there is no value stored for current block\n    else {\n      // add new element into array representing the value for current block\n      history.push(VotingPowerRecord(uint64(block.number), uint192(_toVal)));\n    }\n\n    // emit an event\n    emit VotingPowerChanged(_of, _fromVal, _toVal);\n  }\n\n  /**\n   * @dev Auxiliary function to lookup an element in a sorted (asc) array of elements\n   *\n   * @dev This function finds the closest element in an array to the value\n   *      of interest (not exceeding that value) and returns its index within an array\n   *\n   * @dev An array to search in is `votingPowerHistory[_to][i].blockNumber`,\n   *      it is sorted in ascending order (blockNumber increases)\n   *\n   * @param _to an address of the delegate to get an array for\n   * @param n value of interest to look for\n   * @return an index of the closest element in an array to the value\n   *      of interest (not exceeding that value)\n   */\n  function __binaryLookup(address _to, uint256 n) private view returns(uint256) {\n    // get a link to an array of voting power history records for an address specified\n    VotingPowerRecord[] storage history = votingPowerHistory[_to];\n\n    // left bound of the search interval, originally start of the array\n    uint256 i = 0;\n\n    // right bound of the search interval, originally end of the array\n    uint256 j = history.length - 1;\n\n    // the iteration process narrows down the bounds by\n    // splitting the interval in a half oce per each iteration\n    while(j > i) {\n      // get an index in the middle of the interval [i, j]\n      uint256 k = j - (j - i) / 2;\n\n      // read an element to compare it with the value of interest\n      VotingPowerRecord memory cp = history[k];\n\n      // if we've got a strict equal - we're lucky and done\n      if(cp.blockNumber == n) {\n        // just return the result - index `k`\n        return k;\n      }\n      // if the value of interest is bigger - move left bound to the middle\n      else if (cp.blockNumber < n) {\n        // move left bound `i` to the middle position `k`\n        i = k;\n      }\n      // otherwise, when the value of interest is smaller - move right bound to the middle\n      else {\n        // move right bound `j` to the middle position `k - 1`:\n        // element at position `k` is bigger and cannot be the result\n        j = k - 1;\n      }\n    }\n\n    // reaching that point means no exact match found\n    // since we're interested in the element which is not bigger than the\n    // element of interest, we return the lower bound `i`\n    return i;\n  }\n}\n\n// ===== End: DAO Support (Compound-like voting delegation) =====\n"},"contracts/utils/AddressUtils.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n/**\n * @title Address Utils\n *\n * @dev Utility library of inline functions on addresses\n *\n * @author Basil Gorin\n */\nlibrary AddressUtils {\n\n  /**\n   * @notice Checks if the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *      as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    // a variable to load `extcodesize` to\n    uint256 size = 0;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\n    // TODO: Check this again before the Serenity release, because all addresses will be contracts.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      // retrieve the size of the code at address `addr`\n      size := extcodesize(addr)\n    }\n\n    // positive size indicates a smart contract address\n    return size > 0;\n  }\n\n}\n"}},"settings":{"libraries":{},"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromVal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toVal\",\"type\":\"uint256\"}],\"name\":\"VotingPowerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_BURNS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_DELEGATIONS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_DELEGATIONS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_OWN_BURNS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_TRANSFERS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_UNSAFE_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ERC20_RECEIVER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ERC20_SENDER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TOKEN_CREATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TOKEN_DESTROYER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"desired\",\"type\":\"uint256\"}],\"name\":\"evaluateBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"getVotingPowerAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getVotingPowerHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"votingPower\",\"type\":\"uint192\"}],\"internalType\":\"struct EscrowedIlluvium2.VotingPowerRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getVotingPowerHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAllowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unsafeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingDelegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingPowerHistory\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"votingPower\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EscrowedIlluvium2","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":0,"Runs":200,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}