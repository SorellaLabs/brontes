{"expiry":1699511565,"data":[{"SourceCode":"# @version ^0.3.9\r\n# @title Settled EthXYToken\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\nevent Transfer:\r\n    _from: indexed(address)\r\n    _to: indexed(address)\r\n    _value: uint256\r\n\r\nevent Approval:\r\n    _owner: indexed(address)\r\n    _spender: indexed(address)\r\n    _value: uint256\r\n\r\n_name: constant(String[24]) = \"Settled ETHXY Token\"\r\n_symbol: constant(String[5]) = \"SEXY\"\r\ndecimals: public(constant(uint256)) = 18\r\ntotalSupply: public(uint256)\r\n\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\n\r\nminter: public(address)\r\n\r\n@view\r\n@external\r\ndef name() -> String[24]:\r\n    return _name\r\n\r\n@view\r\n@external\r\ndef symbol() -> String[5]:\r\n    return _symbol\r\n\r\n@external\r\ndef __init__():\r\n    self.minter = msg.sender\r\n\r\n@external\r\ndef set_minter(minter: address):\r\n    assert msg.sender == self.minter\r\n    self.minter = minter\r\n\r\n@external\r\ndef approve(spender: address, amount: uint256) -> bool:\r\n    self.allowance[msg.sender][spender] = amount\r\n    log Approval(msg.sender, spender, amount)\r\n    return True\r\n\r\n@external\r\ndef increaseAllowance(spender: address, addedValue: uint256) -> bool:\r\n    self.allowance[msg.sender][spender] += addedValue\r\n    log Approval(msg.sender, spender, self.allowance[msg.sender][spender])\r\n    return True\r\n\r\n@external\r\ndef decreaseAllowance(spender: address, subtractedValue: uint256) -> bool:\r\n    self.allowance[msg.sender][spender] -= subtractedValue\r\n    log Approval(msg.sender, spender, self.allowance[msg.sender][spender])\r\n    return True\r\n\r\n@external\r\ndef transfer(_to: address, _value: uint256) -> bool:\r\n    self.balanceOf[msg.sender] -= _value\r\n    self.balanceOf[_to] += _value\r\n    log Transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef transferFrom(_from: address, _to: address, _value: uint256) -> bool:\r\n    self.allowance[_from][msg.sender] -= _value\r\n    self.balanceOf[_from] -= _value\r\n    self.balanceOf[_to] += _value\r\n    log Transfer(_from, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef mint(_to: address, _value: uint256):\r\n    assert msg.sender == self.minter\r\n    self.balanceOf[_to] += _value\r\n    self.totalSupply += _value\r\n    log Transfer(ZERO_ADDRESS, _to, _value)\r\n\r\n@external\r\ndef burn(_value: uint256) -> uint256:\r\n    self.balanceOf[msg.sender] -= _value\r\n    self.totalSupply -= _value\r\n    log Transfer(msg.sender, ZERO_ADDRESS, _value)\r\n    return _value\r\n\r\n################################################################\r\n#                           EIP-2612                           #\r\n################################################################\r\n\r\nnonces: public(HashMap[address, uint256])\r\n\r\n_DOMAIN_TYPEHASH: constant(bytes32) = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\r\n_PERMIT_TYPE_HASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\r\n_MINT_TYPE_HASH: constant(bytes32) = keccak256(\"Mint(address to,uint256 value,uint256 amountMinted)\")\r\n\r\n\r\n@external\r\ndef permit(owner: address, spender: address, amount: uint256, deadline: uint256, v: uint8, r: bytes32, s: bytes32):\r\n    assert deadline >= block.timestamp\r\n    nonce: uint256 = self.nonces[owner]\r\n    self.nonces[owner] = nonce + 1\r\n\r\n    domain_separator: bytes32 = keccak256(\r\n        _abi_encode(_DOMAIN_TYPEHASH, keccak256(_name), keccak256(\"1.0\"), chain.id, self)\r\n    )\r\n\r\n    struct_hash: bytes32 = keccak256(_abi_encode(_PERMIT_TYPE_HASH, owner, spender, amount, nonce, deadline))\r\n    hash: bytes32 = keccak256(\r\n        concat(\r\n            b\"\\x19\\x01\",\r\n            domain_separator,\r\n            struct_hash\r\n        )\r\n    )\r\n\r\n    assert owner == ecrecover(hash, v, r, s)\r\n    self.nonces[owner] += 1\r\n    self.allowance[owner][spender] = amount\r\n    log Approval(owner, spender, amount)\r\n\r\namount_minted: public(HashMap[address, uint256])\r\n\r\n@external\r\ndef mint_by_sig(to: address, amount: uint256, v: uint8, r: bytes32, s: bytes32):\r\n    domain_separator: bytes32 = keccak256(\r\n        _abi_encode(_DOMAIN_TYPEHASH, keccak256(_name), keccak256(\"1.0\"), chain.id, self)\r\n    )\r\n\r\n    struct_hash: bytes32 = keccak256(_abi_encode(_MINT_TYPE_HASH, to, amount, self.amount_minted[to]))\r\n    hash: bytes32 = keccak256(\r\n        concat(\r\n            b\"\\x19\\x01\",\r\n            domain_separator,\r\n            struct_hash\r\n        )\r\n    )\r\n\r\n    assert self.minter == ecrecover(hash, v, r, s)\r\n\r\n    self.amount_minted[to] += amount\r\n    self._mint(to, amount)\r\n\r\n@internal\r\ndef _mint(_to: address, _value: uint256):\r\n    self.balanceOf[_to] += _value\r\n    self.totalSupply += _value\r\n    log Transfer(ZERO_ADDRESS, _to, _value)\r\n\r\n@internal\r\ndef _burn(_from: address, _value: uint256):\r\n    assert self.balanceOf[_from] >= _value\r\n    self.balanceOf[_from] -= _value\r\n    self.totalSupply -= _value\r\n    log Transfer(_from, ZERO_ADDRESS, _value)","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_to\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_minter\",\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"permit\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint_by_sig\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"amount_minted\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]","ContractName":"Settled EthXYToken","CompilerVersion":"vyper:0.3.9","OptimizationUsed":0,"Runs":0,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":0,"SwarmSource":""}]}