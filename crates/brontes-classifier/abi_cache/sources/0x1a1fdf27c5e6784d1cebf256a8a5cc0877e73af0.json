{"expiry":1699511265,"data":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: /Users/matthewmcclure/repos/Token-Audit/node_modules/openzeppelin-zos/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: /Users/matthewmcclure/repos/Token-Audit/node_modules/openzeppelin-zos/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: /Users/matthewmcclure/repos/Token-Audit/node_modules/openzeppelin-zos/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: /Users/matthewmcclure/repos/Token-Audit/node_modules/zos-lib/contracts/migrations/Migratable.sol\r\n\r\n/**\r\n * @title Migratable\r\n * Helper contract to support intialization and migration schemes between\r\n * different implementations of a contract in the context of upgradeability.\r\n * To use it, replace the constructor with a function that has the\r\n * `isInitializer` modifier starting with `\"0\"` as `migrationId`.\r\n * When you want to apply some migration code during an upgrade, increase\r\n * the `migrationId`. Or, if the migration code must be applied only after\r\n * another migration has been already applied, use the `isMigration` modifier.\r\n * This helper supports multiple inheritance.\r\n * WARNING: It is the developer's responsibility to ensure that migrations are\r\n * applied in a correct order, or that they are run at all.\r\n * See `Initializable` for a simpler version.\r\n */\r\ncontract Migratable {\r\n  /**\r\n   * @dev Emitted when the contract applies a migration.\r\n   * @param contractName Name of the Contract.\r\n   * @param migrationId Identifier of the migration applied.\r\n   */\r\n  event Migrated(string contractName, string migrationId);\r\n\r\n  /**\r\n   * @dev Mapping of the already applied migrations.\r\n   * (contractName => (migrationId => bool))\r\n   */\r\n  mapping (string => mapping (string => bool)) internal migrated;\r\n\r\n  /**\r\n   * @dev Internal migration id used to specify that a contract has already been initialized.\r\n   */\r\n  string constant private INITIALIZED_ID = \"initialized\";\r\n\r\n\r\n  /**\r\n   * @dev Modifier to use in the initialization function of a contract.\r\n   * @param contractName Name of the contract.\r\n   * @param migrationId Identifier of the migration.\r\n   */\r\n  modifier isInitializer(string contractName, string migrationId) {\r\n    validateMigrationIsPending(contractName, INITIALIZED_ID);\r\n    validateMigrationIsPending(contractName, migrationId);\r\n    _;\r\n    emit Migrated(contractName, migrationId);\r\n    migrated[contractName][migrationId] = true;\r\n    migrated[contractName][INITIALIZED_ID] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to use in the migration of a contract.\r\n   * @param contractName Name of the contract.\r\n   * @param requiredMigrationId Identifier of the previous migration, required\r\n   * to apply new one.\r\n   * @param newMigrationId Identifier of the new migration to be applied.\r\n   */\r\n  modifier isMigration(string contractName, string requiredMigrationId, string newMigrationId) {\r\n    require(isMigrated(contractName, requiredMigrationId), \"Prerequisite migration ID has not been run yet\");\r\n    validateMigrationIsPending(contractName, newMigrationId);\r\n    _;\r\n    emit Migrated(contractName, newMigrationId);\r\n    migrated[contractName][newMigrationId] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the contract migration was applied.\r\n   * @param contractName Name of the contract.\r\n   * @param migrationId Identifier of the migration.\r\n   * @return true if the contract migration was applied, false otherwise.\r\n   */\r\n  function isMigrated(string contractName, string migrationId) public view returns(bool) {\r\n    return migrated[contractName][migrationId];\r\n  }\r\n\r\n  /**\r\n   * @dev Initializer that marks the contract as initialized.\r\n   * It is important to run this if you had deployed a previous version of a Migratable contract.\r\n   * For more information see https://github.com/zeppelinos/zos-lib/issues/158.\r\n   */\r\n  function initialize() isInitializer(\"Migratable\", \"1.2.1\") public {\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the requested migration was already executed.\r\n   * @param contractName Name of the contract.\r\n   * @param migrationId Identifier of the migration.\r\n   */\r\n  function validateMigrationIsPending(string contractName, string migrationId) private {\r\n    require(!isMigrated(contractName, migrationId), \"Requested target migration ID has already been run\");\r\n  }\r\n}\r\n\r\n// File: /Users/matthewmcclure/repos/Token-Audit/node_modules/openzeppelin-zos/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is Migratable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function initialize(address _sender) public isInitializer(\"Ownable\", \"1.9.0\") {\r\n    owner = _sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: /Users/matthewmcclure/repos/Token-Audit/node_modules/openzeppelin-zos/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: /Users/matthewmcclure/repos/Token-Audit/contracts/Escrow.sol\r\n\r\n/**\r\n * @title Escrow\r\n * @dev Escrow contract that works with RNDR token\r\n * This contract holds tokens while render jobs are being completed\r\n * and information on token allottment per job\r\n */\r\ncontract Escrow is Migratable, Ownable {\r\n  using SafeERC20 for ERC20;\r\n  using SafeMath for uint256;\r\n\r\n  // This is a mapping of job IDs to the number of tokens allotted to the job\r\n  mapping(string => uint256) private jobBalances;\r\n  // This is the address of the render token contract\r\n  address public renderTokenAddress;\r\n  // This is the address with authority to call the disburseJob function\r\n  address public disbursalAddress;\r\n\r\n  // Emit new disbursal address when disbursalAddress has been changed\r\n  event DisbursalAddressUpdate(address disbursalAddress);\r\n  // Emit the jobId along with the new balance of the job\r\n  // Used on job creation, additional funding added to jobs, and job disbursal\r\n  // Internal systems for assigning jobs will watch this event to determine balances available\r\n  event JobBalanceUpdate(string _jobId, uint256 _balance);\r\n  // Emit new contract address when renderTokenAddress has been changed\r\n  event RenderTokenAddressUpdate(address renderTokenAddress);\r\n\r\n  /**\r\n   * @dev Modifier to check if the message sender can call the disburseJob function\r\n   */\r\n  modifier canDisburse() {\r\n    require(msg.sender == disbursalAddress, \"message sender not authorized to disburse funds\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Initailization\r\n   * @param _owner because this contract uses proxies, owner must be passed in as a param\r\n   * @param _renderTokenAddress see renderTokenAddress\r\n   */\r\n  function initialize (address _owner, address _renderTokenAddress) public isInitializer(\"Escrow\", \"0\") {\r\n    require(_owner != address(0), \"_owner must not be null\");\r\n    require(_renderTokenAddress != address(0), \"_renderTokenAddress must not be null\");\r\n    Ownable.initialize(_owner);\r\n    disbursalAddress = _owner;\r\n    renderTokenAddress = _renderTokenAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Change the address authorized to distribute tokens for completed jobs\r\n   *\r\n   * Because there are no on-chain details to indicate who performed a render, an outside\r\n   * system must call the disburseJob function with the information needed to properly\r\n   * distribute tokens. This function updates the address with the authority to perform distributions\r\n   * @param _newDisbursalAddress see disbursalAddress\r\n   */\r\n  function changeDisbursalAddress(address _newDisbursalAddress) external onlyOwner {\r\n    disbursalAddress = _newDisbursalAddress;\r\n\r\n    emit DisbursalAddressUpdate(disbursalAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Change the address allowances will be sent to after job completion\r\n   *\r\n   * Ideally, this will not be used, but is included as a failsafe.\r\n   * RNDR is still in its infancy, and changes may need to be made to this\r\n   * contract and / or the renderToken contract. Including methods to update the\r\n   * addresses allows the contracts to update independently.\r\n   * If the RNDR token contract is ever migrated to another address for\r\n   * either added security or functionality, this will need to be called.\r\n   * @param _newRenderTokenAddress see renderTokenAddress\r\n   */\r\n  function changeRenderTokenAddress(address _newRenderTokenAddress) external onlyOwner {\r\n    require(_newRenderTokenAddress != address(0), \"_newRenderTokenAddress must not be null\");\r\n    renderTokenAddress = _newRenderTokenAddress;\r\n\r\n    emit RenderTokenAddressUpdate(renderTokenAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Send allowances to node(s) that performed a job\r\n   *\r\n   * This can only be called by the disbursalAddress, an accound owned\r\n   * by OTOY, and it provides the number of tokens to send to each node\r\n   * @param _jobId the ID of the job used in the jobBalances mapping\r\n   * @param _recipients the address(es) of the nodes that performed rendering\r\n   * @param _amounts the amount(s) to send to each address. These must be in the same\r\n   * order as the recipient addresses\r\n   */\r\n  function disburseJob(string _jobId, address[] _recipients, uint256[] _amounts) external canDisburse {\r\n    require(jobBalances[_jobId] > 0, \"_jobId has no available balance\");\r\n    require(_recipients.length == _amounts.length, \"_recipients and _amounts must be the same length\");\r\n\r\n    for(uint256 i = 0; i < _recipients.length; i++) {\r\n      jobBalances[_jobId] = jobBalances[_jobId].sub(_amounts[i]);\r\n      ERC20(renderTokenAddress).safeTransfer(_recipients[i], _amounts[i]);\r\n    }\r\n\r\n    emit JobBalanceUpdate(_jobId, jobBalances[_jobId]);\r\n  }\r\n\r\n  /**\r\n   * @dev Add RNDR tokens to a job\r\n   *\r\n   * This can only be called by a function on the RNDR token contract\r\n   * @param _jobId the ID of the job used in the jobBalances mapping\r\n   * @param _tokens the number of tokens sent by the artist to fund the job\r\n   */\r\n  function fundJob(string _jobId, uint256 _tokens) external {\r\n    // Jobs can only be created by the address stored in the renderTokenAddress variable\r\n    require(msg.sender == renderTokenAddress, \"message sender not authorized\");\r\n    jobBalances[_jobId] = jobBalances[_jobId].add(_tokens);\r\n\r\n    emit JobBalanceUpdate(_jobId, jobBalances[_jobId]);\r\n  }\r\n\r\n  /**\r\n   * @dev See the tokens available for a job\r\n   *\r\n   * @param _jobId the ID used to lookup the job balance\r\n   */\r\n  function jobBalance(string _jobId) external view returns(uint256) {\r\n    return jobBalances[_jobId];\r\n  }\r\n\r\n}\r\n\r\n// File: /Users/matthewmcclure/repos/Token-Audit/contracts/MigratableERC20.sol\r\n\r\n/**\r\n * @title MigratableERC20\r\n * @dev This strategy carries out an optional migration of the token balances. This migration is performed and paid for\r\n * @dev by the token holders. The new token contract starts with no initial supply and no balances. The only way to\r\n * @dev \"mint\" the new tokens is for users to \"turn in\" their old ones. This is done by first approving the amount they\r\n * @dev want to migrate via `ERC20.approve(newTokenAddress, amountToMigrate)` and then calling a function of the new\r\n * @dev token called `migrateTokens`. The old tokens are sent to a burn address, and the holder receives an equal amount\r\n * @dev in the new contract.\r\n */\r\ncontract MigratableERC20 is Migratable {\r\n  using SafeERC20 for ERC20;\r\n\r\n  /// Burn address where the old tokens are going to be transferred\r\n  address public constant BURN_ADDRESS = address(0xdead);\r\n\r\n  /// Address of the old token contract\r\n  ERC20 public legacyToken;\r\n\r\n  /**\r\n   * @dev Initializes the new token contract\r\n   * @param _legacyToken address of the old token contract\r\n   */\r\n  function initialize(address _legacyToken) isInitializer(\"OptInERC20Migration\", \"1.9.0\") public {\r\n    legacyToken = ERC20(_legacyToken);\r\n  }\r\n\r\n  /**\r\n   * @dev Migrates the total balance of the token holder to this token contract\r\n   * @dev This function will burn the old token balance and mint the same balance in the new token contract\r\n   */\r\n  function migrate() public {\r\n    uint256 amount = legacyToken.balanceOf(msg.sender);\r\n    migrateToken(amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Migrates the given amount of old-token balance to the new token contract\r\n   * @dev This function will burn a given amount of tokens from the old contract and mint the same amount in the new one\r\n   * @param _amount uint256 representing the amount of tokens to be migrated\r\n   */\r\n  function migrateToken(uint256 _amount) public {\r\n    migrateTokenTo(msg.sender, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a given amount of the old token contract for a token holder and mints the same amount of\r\n   * @dev new tokens for a given recipient address\r\n   * @param _amount uint256 representing the amount of tokens to be migrated\r\n   * @param _to address the recipient that will receive the new minted tokens\r\n   */\r\n  function migrateTokenTo(address _to, uint256 _amount) public {\r\n    _mintMigratedTokens(_to, _amount);\r\n    legacyToken.safeTransferFrom(msg.sender, BURN_ADDRESS, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal minting function\r\n   * This function must be overwritten by the implementation\r\n   */\r\n  function _mintMigratedTokens(address _to, uint256 _amount) internal;\r\n}\r\n\r\n// File: /Users/matthewmcclure/repos/Token-Audit/node_modules/openzeppelin-zos/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: /Users/matthewmcclure/repos/Token-Audit/node_modules/openzeppelin-zos/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/RenderToken.sol\r\n\r\n// Escrow constract\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RenderToken\r\n * @dev ERC20 mintable token\r\n * The token will be minted by the crowdsale contract only\r\n */\r\ncontract RenderToken is Migratable, MigratableERC20, Ownable, StandardToken {\r\n\r\n  string public constant name = \"Render Token\";\r\n  string public constant symbol = \"RNDR\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  // The address of the contract that manages job balances. Address is used for forwarding tokens\r\n  // that come in to fund jobs\r\n  address public escrowContractAddress;\r\n\r\n  // Emit new contract address when escrowContractAddress has been changed\r\n  event EscrowContractAddressUpdate(address escrowContractAddress);\r\n  // Emit information related to tokens being escrowed\r\n  event TokensEscrowed(address indexed sender, string jobId, uint256 amount);\r\n  // Emit information related to legacy tokens being migrated\r\n  event TokenMigration(address indexed receiver, uint256 amount);\r\n\r\n  /**\r\n   * @dev Initailization\r\n   * @param _owner because this contract uses proxies, owner must be passed in as a param\r\n   */\r\n  function initialize(address _owner, address _legacyToken) public isInitializer(\"RenderToken\", \"0\") {\r\n    require(_owner != address(0), \"_owner must not be null\");\r\n    require(_legacyToken != address(0), \"_legacyToken must not be null\");\r\n    Ownable.initialize(_owner);\r\n    MigratableERC20.initialize(_legacyToken);\r\n  }\r\n\r\n  /**\r\n   * @dev Take tokens prior to beginning a job\r\n   *\r\n   * This function is called by the artist, and it will transfer tokens\r\n   * to a separate escrow contract to be held until the job is completed\r\n   * @param _jobID is the ID of the job used within the ORC backend\r\n   * @param _amount is the number of RNDR tokens being held in escrow\r\n   */\r\n  function holdInEscrow(string _jobID, uint256 _amount) public {\r\n    require(transfer(escrowContractAddress, _amount), \"token transfer to escrow address failed\");\r\n    Escrow(escrowContractAddress).fundJob(_jobID, _amount);\r\n\r\n    emit TokensEscrowed(msg.sender, _jobID, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Mints new tokens equal to the amount of legacy tokens burned\r\n   *\r\n   * This function is called internally, but triggered by a user choosing to\r\n   * migrate their balance.\r\n   * @param _to is the address tokens will be sent to\r\n   * @param _amount is the number of RNDR tokens being sent to the address\r\n   */\r\n  function _mintMigratedTokens(address _to, uint256 _amount) internal {\r\n    require(_to != address(0), \"_to address must not be null\");\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n\r\n    emit TokenMigration(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Set the address of the escrow contract\r\n   *\r\n   * This will dictate the contract that will hold tokens in escrow and keep\r\n   * a ledger of funds available for jobs.\r\n   * RNDR is still in its infancy, and changes may need to be made to this\r\n   * contract and / or the escrow contract. Including methods to update the\r\n   * addresses allows the contracts to update independently.\r\n   * If the escrow contract is ever migrated to another address for\r\n   * either added security or functionality, this will need to be called.\r\n   * @param _escrowAddress see escrowContractAddress\r\n   */\r\n  function setEscrowContractAddress(address _escrowAddress) public onlyOwner {\r\n    require(_escrowAddress != address(0), \"_escrowAddress must not be null\");\r\n    escrowContractAddress = _escrowAddress;\r\n\r\n    emit EscrowContractAddressUpdate(escrowContractAddress);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"legacyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrowAddress\",\"type\":\"address\"}],\"name\":\"setEscrowContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobID\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"holdInEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_legacyToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"isMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrateTokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrowContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"escrowContractAddress\",\"type\":\"address\"}],\"name\":\"EscrowContractAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"jobId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensEscrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"Migrated\",\"type\":\"event\"}]","ContractName":"RenderToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":0,"Runs":200,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":0,"SwarmSource":"bzzr://bee336d5a3712ac588627b4ae25c6c37a8e218480762cfe46fbd8767607ae134"}]}