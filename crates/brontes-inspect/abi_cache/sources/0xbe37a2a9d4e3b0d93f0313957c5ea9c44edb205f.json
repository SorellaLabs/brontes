{"expiry":1699494229,"data":[{"SourceCode":{"language":"Solidity","sources":{"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"src/HelloBridge.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\n\nimport {IERC20} from \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {ECDSA} from \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\";\nimport {Ownable} from \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport {HelloBridgeStore} from \"./HelloBridgeStore.sol\";\n/* -------------------------------------------------------------------------- */\n/*                                   errors                                   */\n/* -------------------------------------------------------------------------- */\nerror SignerNotWithdrawSigner();\nerror NoAmountToWithdraw();\nerror CannotBridgeToUnsupportedChain();\nerror Paused();\nerror NotPaused();\nerror ZeroAddress();\n\n///@notice The owner will always be a multisig wallet.\n\n\n/* -------------------------------------------------------------------------- */\n/*                                 HelloBridge                                */\n/* -------------------------------------------------------------------------- */\n/**\n * @title A cross-chain bridge for HelloToken\n * @author 0xSimon\n * @notice It is recommended to use the provided UI to bridge your tokens from chain A to chain B\n * @dev Assumptions:\n *     - On chains that this contract is deployed to (besides the mainnet), the entire supply of HelloToken will be minted and sent to this contract.\n */\ncontract HelloBridge is Ownable {\n    using ECDSA for bytes32;\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   events                                   */\n    /* -------------------------------------------------------------------------- */\n    event Deposit(address indexed sender, uint256 amount, uint256 chainId);\n    event Claim(address indexed sender, uint256 totalDepositedOnOtherChain, uint256 otherChainId);\n    event SupportedChainChanged(uint256 chainID, bool isSupported);\n    event SupportedChainsChanged(uint256[] chainIDs, bool isSupported);\n    event WithdrawSigner1Changed(address signer);\n    event WithdrawSigner2Changed(address signer);\n    event PausedChanged(bool depositPaused, bool claimPaused);\n    event BridgeStoreChanged(address store);\n\n    /* -------------------------------------------------------------------------- */\n    /*                                  constants                                 */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice The HelloToken contract\n     */\n    IERC20 public immutable HELLO_TOKEN;\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   states                                   */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice The signer providing signatures for claiming tokens on the destination chain\n     */\n    address public withdrawSigner1;\n    address public withdrawSigner2;\n\n    /**\n     * @notice Storage contract for deposits and withdrawals numbers\n     */\n    HelloBridgeStore public store;\n\n    /**\n     * @notice A mapping to store which destination chains are supported\n     */\n    mapping(uint256 => bool) public supportedChains;\n\n    bool public depositPaused;\n    bool public claimPaused;\n\n    /**\n     * @notice Deploys the contract and saves the HelloToken contract address\n     *  @dev `msg.sender` is assigned to the owner, pay attention if this contract is deployed via another contract\n     *  @param _helloToken The address of HelloToken\n     */\n    constructor(address _helloToken) {\n        HELLO_TOKEN = IERC20(_helloToken);\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                  external                                  */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice Bridge HelloToken to another chain. HelloToken will be transferred to this contract.\n     * @notice Ensure approvals for HelloToken has been set and the destination chain is supported.\n     * @param amount Amount of HelloToken to bridge to another chain\n     * @param chainId The chain ID of the destination chain\n     * @dev Reverts if the destination chain is not supported\n     */\n    function sendToChain(uint256 amount, uint256 chainId) external {\n        if (depositPaused) _revert(Paused.selector);\n\n        // check chain\n        if (!supportedChains[chainId]) _revert(CannotBridgeToUnsupportedChain.selector);\n\n        // update state\n        uint256 _currentDepsosit = store.totalCrossChainDeposits(msg.sender, chainId);\n        store.setTotalCrossChainDeposits(msg.sender, chainId, _currentDepsosit + amount);\n\n        // transfer tokens\n        HELLO_TOKEN.transferFrom(msg.sender, address(this), amount);\n\n        emit Deposit(msg.sender, amount, chainId);\n    }\n\n    /**\n     * @notice Claims tokens deposited in the source chain. A signature is required.\n     * @notice HelloToken will be transferred from this account to the caller.\n     * @param totalDepositedOnOtherChain The total amount you have deposited in the source chain\n     * @param otherChainId The chain ID of the source chain\n     * @param signature The signature signed by `withdrawSigner`\n     * @dev Reverts if there's no amount to claim.\n     * @dev Reverts if the signature is invalid\n     * @dev Assumptions:\n     *     - `otherChainId` is supported, a user would not have been able to deposit if the path from `otherChainId` to this chain is not supported\n     *     - `totalDepositedOnOtherChain` is checked on chain with ID `otherChainId` before a signature is generated for this transaction\n     */\n    function claimFromChain(\n        uint256 totalDepositedOnOtherChain,\n        uint256 otherChainId,\n        bytes memory signature,\n        bytes memory signature2\n    ) external {\n        if (claimPaused) _revert(Paused.selector);\n\n        // note: this can never undeflow as the user would not have been able to withdraw if they had no balance\n        uint256 amountToWithdraw =\n            totalDepositedOnOtherChain - store.totalCrossChainWithdrawals(msg.sender, otherChainId);\n\n        // check amount\n        if (amountToWithdraw == 0) _revert(NoAmountToWithdraw.selector);\n\n        // check signature\n        bytes32 hash = keccak256(\n            abi.encodePacked(msg.sender, totalDepositedOnOtherChain, otherChainId, block.chainid, address(this))\n        );\n\n        if (hash.toEthSignedMessageHash().recover(signature) != withdrawSigner1) {\n            _revert(SignerNotWithdrawSigner.selector);\n        }\n\n        if (hash.toEthSignedMessageHash().recover(signature2) != withdrawSigner2) {\n            _revert(SignerNotWithdrawSigner.selector);\n        }\n\n        // update state\n        store.setTotalCrossChainWithdrawals(msg.sender, otherChainId, totalDepositedOnOtherChain);\n\n        // transfer tokens\n        HELLO_TOKEN.transfer(msg.sender, amountToWithdraw);\n\n        emit Claim(msg.sender, totalDepositedOnOtherChain, otherChainId);\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   owners                                   */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice Owner only - Updates the address of the withdrawal signer\n     * @param _withdrawSigner Address of the withdrawal signer\n     */\n    function setWithdrawSigner(address _withdrawSigner) external onlyOwner {\n        // check\n        if (_withdrawSigner == address(0)) {\n            _revert(ZeroAddress.selector);\n        }\n\n        // set\n        withdrawSigner1 = _withdrawSigner;\n\n        // emit\n        emit WithdrawSigner1Changed(_withdrawSigner);\n    }\n\n    function setWithdrawSigner2(address _withdrawSigner2) external onlyOwner {\n        // check\n        if (_withdrawSigner2 == address(0)) {\n            _revert(ZeroAddress.selector);\n        }\n\n        // set\n        withdrawSigner2 = _withdrawSigner2;\n\n        // emit\n        emit WithdrawSigner2Changed(_withdrawSigner2);\n    }\n\n    /**\n     * @notice Owner only - Updates a supported destination chain\n     * @param chainId Chain ID of a destination chain\n     * @param isSupported Whether the destination chain is supported\n     */\n    function setSupportedChain(uint256 chainId, bool isSupported) external onlyOwner {\n        _setSupportedChain(chainId, isSupported);\n\n        emit SupportedChainChanged(chainId, isSupported);\n    }\n\n    /**\n     * @notice Owner only - Batch update supported destination chains\n     * @param chainIds Chain IDs of the destination chains\n     * @param isSupported Whether the destination chains are supported\n     */\n    function setSupportedChains(uint256[] calldata chainIds, bool isSupported) external onlyOwner {\n        for (uint256 i; i < chainIds.length;) {\n            _setSupportedChain(chainIds[i], isSupported);\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit SupportedChainsChanged(chainIds, isSupported);\n    }\n\n    /**\n     * @notice Pause / unpause deposit & claim\n     * @param depositPaused_ Whether to pause deposit\n     * @param depositPaused_ Whether to pause claim\n     */\n    function setPaused(bool depositPaused_, bool claimPaused_) external onlyOwner {\n        depositPaused = depositPaused_;\n        claimPaused = claimPaused_;\n\n        emit PausedChanged(depositPaused_, claimPaused_);\n    }\n\n    function setBridgeStore(address a_) external onlyOwner {\n        // check\n        if (a_ == address(0)) {\n            _revert(ZeroAddress.selector);\n        }\n\n        // set\n        store = HelloBridgeStore(a_);\n\n        // emit\n        emit BridgeStoreChanged(a_);\n    }\n\n    /**\n     * @notice Migrates the bridge contract to another. Tokens in this contract will be transferred to the new contract.\n     * @dev The new bridge contract should use the data stored in `store`.\n     * @param bridgeAddress Address of the new contract\n     */\n    function migrateBridge(address bridgeAddress) external onlyOwner {\n        // check zero\n        if (bridgeAddress == address(0)) {\n            _revert(ZeroAddress.selector);\n        }\n\n        // check paused\n        if (!depositPaused || !claimPaused) {\n            _revert(NotPaused.selector);\n        }\n\n        HELLO_TOKEN.transfer(bridgeAddress, HELLO_TOKEN.balanceOf(address(this)));\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                  internal                                  */\n    /* -------------------------------------------------------------------------- */\n    function _setSupportedChain(uint256 chainId, bool isSupported) internal {\n        supportedChains[chainId] = isSupported;\n    }\n\n    function _revert(bytes4 selector) internal pure {\n        assembly {\n            mstore(0x0, selector)\n            revert(0x0, 0x04)\n        }\n    }\n}\n"},"src/HelloToken.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\n\nimport \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\nimport \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\nimport \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\nimport {IERC20} from \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\n///@notice The owner will always be a multisig wallet.\n\n/* -------------------------------------------------------------------------- */\n/*                                   errors                                   */\n/* -------------------------------------------------------------------------- */\nerror Blacklisted();\nerror ZeroAddress();\n\n/* -------------------------------------------------------------------------- */\n/*                                 HelloToken                                 */\n/* -------------------------------------------------------------------------- */\n/**\n * @title Contract for the ERC20 HelloToken on chains other than the mainnet (the chain with main dex LP)\n * @notice The full supply of tokens are minted to the deployer on deploy, and should be transferred to the bridge on this chain.\n * @notice Assumptions:\n *  - The bridge contract is the only entry point for bridged tokens from other chains\n *  - Tokens getting bridge to the chain for which this contract resides in must first be deposited in the\n *    bridge contract on the source chain\n * @author 0xSimon\n */\ncontract Hello is Initializable, ERC20Upgradeable, OwnableUpgradeable {\n    /* -------------------------------------------------------------------------- */\n    /*                                   events                                   */\n    /* -------------------------------------------------------------------------- */\n    event BlacklistedChanged(address wallet, bool status);\n    event OnRescueToken(address tokenAddress, uint256 tokens);\n    event OnClearStuckBalance(uint256 amountPercentage, address adr);\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   states                                   */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice A mapping that stores blacklisted addresses\n     */\n    mapping(address => bool) public blacklisted;\n\n    /* -------------------------------------------------------------------------- */\n    /*                                 constructor                                */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice Deploys the contract and mints the entire supply to the deployer\n     * @dev `tx.origin` is used instead of `msg.sender` just in case this contract get deployed via a contract\n     *  @custom:oz-upgrades-unsafe-allow constructor\n\n     */\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize() public initializer {\n        __ERC20_init(\"Hello\", \"HELLO\");\n        __Ownable_init();\n        _mint(tx.origin, 1e9 ether);\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                  overrides                                 */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @dev Override the _transfer function to support blacklisting\n     */\n    function _transfer(address sender, address to, uint256 amount) internal override {\n        if (blacklisted[sender] || blacklisted[to]) {\n            revert Blacklisted();\n        }\n\n        super._transfer(sender, to, amount);\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   owners                                   */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice Owner only - Updates the blacklist mapping\n     * @param _wallet the address to update the blacklist status of\n     * @param status whether the address is blacklisted\n     */\n    function setBlacklisted(address _wallet, bool status) external onlyOwner {\n        // check zero\n        if (_wallet == address(0)) {\n            revert ZeroAddress();\n        }\n\n        // update\n        blacklisted[_wallet] = status;\n\n        // emit\n        emit BlacklistedChanged(_wallet, status);\n    }\n\n    function rescueToken(address tokenAddress, uint256 tokens) external onlyOwner {\n        IERC20(tokenAddress).transfer(msg.sender, tokens);\n        emit OnRescueToken(tokenAddress, tokens);\n    }\n\n    function clearStuckBalance(address adr) external onlyOwner {\n        if (adr == address(0)) revert ZeroAddress();\n        uint256 __balance = address(this).balance;\n        (bool success,) = payable(adr).call{value: __balance}(\"\");\n        require(success);\n        emit OnClearStuckBalance(__balance, adr);\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"src/HelloBridgeStore.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\n\nimport {Ownable} from \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\n\n\n///@notice The contract is a storage contract for the bridge contract.\n///@notice The owner will always be a multisig wallet.\n\n/* -------------------------------------------------------------------------- */\n/*                                   errors                                   */\n/* -------------------------------------------------------------------------- */\nerror SignerNotWithdrawSigner();\nerror NoAmountToWithdraw();\nerror CannotBridgeToUnsupportedChain();\nerror Paused();\nerror NotPaused();\nerror ZeroAddress();\n\ncontract HelloBridgeStore is Ownable {\n    /* -------------------------------------------------------------------------- */\n    /*                                   errors                                   */\n    /* -------------------------------------------------------------------------- */\n    error ErrUnauthorized();\n    error ErrZeroAddress();\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   events                                   */\n    /* -------------------------------------------------------------------------- */\n    event BridgeContractChanged(address bridgeContract);\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   states                                   */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice A mapping that stores how much HelloToken a user has deposited to bridge to a destination chain\n     * @dev Maps from userAddress -> chainID -> amount\n     */\n    mapping(address => mapping(uint256 => uint256)) public totalCrossChainDeposits;\n\n    /**\n     * @notice A mapping that stores how much HelloToken a user has withdrawn from a destination chain\n     * @dev Maps from userAddress -> chainID -> amount\n     */\n    mapping(address => mapping(uint256 => uint256)) public totalCrossChainWithdrawals;\n\n    /**\n     * @notice The bridge contract associated with this storage contract.\n     * This is the only contract authorized to update `totalCrossChainDeposits` & `totalCrossChainWithdrawals`\n     */\n    address public bridgeContract;\n\n    /* -------------------------------------------------------------------------- */\n    /*                                    owner                                   */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice Updates the bridge contract associated with this storage contract\n     */\n    function setBridgeContract(address b_) external onlyOwner {\n        if (b_ == address(0)) {\n            revert ErrZeroAddress();\n        }\n\n        bridgeContract = b_;\n\n        emit BridgeContractChanged(b_);\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                  external                                  */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice Updates totalCrossChainDeposits of a user to a destination chain\n     * @param address_ The address to update\n     * @param chainID_ The destination chainID of the deposit\n     * @param amount_ The amount of token deposited\n     */\n    function setTotalCrossChainDeposits(address address_, uint256 chainID_, uint256 amount_) external {\n        if (msg.sender != bridgeContract) {\n            revert ErrUnauthorized();\n        }\n\n        totalCrossChainDeposits[address_][chainID_] = amount_;\n    }\n\n    /**\n     * @notice Updates totalCrossChainWithdrawals of a user from a source chain\n     * @param address_ The address to update\n     * @param chainID_ The source chainID of the withdrawal\n     * @param amount_ The amount of token withdrawn\n     */\n    function setTotalCrossChainWithdrawals(address address_, uint256 chainID_, uint256 amount_) external {\n        if (msg.sender != bridgeContract) {\n            revert ErrUnauthorized();\n        }\n\n        totalCrossChainWithdrawals[address_][chainID_] = amount_;\n    }\n}"},"src/KillerWhalesS1.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\n\nimport \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\";\nimport {IERC20} from \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\n///@notice The owner will always be a multisig wallet.\n\n\n/* -------------------------------------------------------------------------- */\n/*                                   errors                                   */\n/* -------------------------------------------------------------------------- */\nerror InsufficientEth();\nerror EpisodeDoesNotExist();\nerror EpisodeAlreadyPurchased();\nerror NotOwnerOrAdmin();\nerror SignerCannotBeZeroAddress();\nerror InvalidSignature();\nerror VoucherExpired();\nerror CannotPurchaseWithoutSignerApproval();\n\n/* -------------------------------------------------------------------------- */\n/*                               KillerWhalesS1                               */\n/* -------------------------------------------------------------------------- */\n/**\n * @title Contract for purchasing episodes for Season 1 of KillerWhales using HelloToken\n * @author 0xSimon\n */\ncontract KillerWhalesS1 is Ownable {\n    using ECDSA for bytes32;\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   events                                   */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice emits when an episode is purchased by a user\n     */\n    event EpisodesPurchased(address indexed user, uint256[] episode);\n    event SeasonPassPurchased(address indexed user);\n    event SignerChanged(address signer);\n    event SignerOnlyChanged(bool signerOnly);\n    event PricePerEpisodeChanged(uint256 pricePerEpisode);\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   statse                                   */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @dev The max episodeID (i.e. available episodes 0, 1, ..., 4)\n     */\n    uint256 private constant MAX_EPISODE_ID = 4;\n\n    /**\n     * @notice The Bitpos if a user owns the season pass\n     */\n    uint256 private constant OWNS_SEASON_PASS_BITPOS = (1 << 255);\n\n    /**\n     * @notice The HelloToken contract\n     */\n    IERC20 public immutable HELLO_TOKEN;\n\n    /**\n     * @notice The price per episode\n     */\n\n    uint256 public pricePerEpisode = 1 ether;\n\n    /**\n     * @notice The signer providing signatures for discounts on episodes\n     */\n    address public signer;\n\n    /**\n     * @notice if true, episodes can only be purchased through signatures\n     */\n    bool public signerOnly;\n\n    /**\n     * @notice A mapping that stores purchased episodes for every user\n     * @dev Maps between an address to a bitmap that contains purchased episodes\n     * @dev Assumptions:\n     *     - There are only 5 episodes in Season 1 therefore the bitmap can never overflow\n     * Examples:\n     *     - If a user has purchased episode 0, the bitmap would look like:\n     *                          00000001\n     *     - If a user has purchased episodes 1 & 3, the bitmap would look like:\n     *                          00001010\n     */\n    mapping(address => uint256) public episodePurchasedBitmap;\n\n    /* -------------------------------------------------------------------------- */\n    /*                                 constructor                                */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice Deploys the contract and saves the HelloToken contract address and the signer\n     * @dev `msg.sender` is assigned to the owner, pay attention if this contract is deployed via another contract\n     * @param _helloToken The address of HelloToken\n     * @param _signer Address of the discount signer\n     */\n    constructor(address _helloToken, address _signer) {\n        HELLO_TOKEN = IERC20(_helloToken);\n        if (_signer == address(0)) {\n            _revert(SignerCannotBeZeroAddress.selector);\n        }\n        signer = _signer;\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                  external                                  */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice Purchase episodes without discount\n     * @notice HelloTokens will be transferred to this contract\n     * @notice Ensure approvals for HelloToken has been set\n     * @param episodeIds the episodeIDs to be purchased\n     * @dev Reverts if the any of the episodes in the argument has been purchased already\n     * @dev Reverts if the any of the episodes in the argument does not exist (i.e. > MAX_EPISODE_ID)\n     */\n    function purchaseEpisodesNoDiscount(uint256[] calldata episodeIds) external {\n        if (signerOnly) {\n            _revert(CannotPurchaseWithoutSignerApproval.selector);\n        }\n\n        // calculate total price\n        uint256 __totalPrice = episodeIds.length * pricePerEpisode;\n\n        // update state\n        _grantEpisodes(msg.sender, episodeIds);\n\n        // transfer tokens\n        HELLO_TOKEN.transferFrom(msg.sender, address(this), __totalPrice);\n    }\n\n    /**\n     * @notice Purchase espidoes with discount\n     * @notice HelloTokens will be transferred to this contract\n     * @notice Ensure approvals for HelloToken has been set\n     * @param episodeIds the episodeIDs to be purchased\n     * @param _discount the discount to be applied in basisPoint (e.g. 500 for 5% discount)\n     * @param _expirationTimestamp the expiration timestamp for which this discount can be applied\n     * @param signature the signature signed by `signer`\n     */\n    function purchaseEpisodeWithDiscount(\n        uint256[] calldata episodeIds,\n        uint256 _discount,\n        uint256 _expirationTimestamp,\n        bytes calldata signature\n    ) external {\n        if (signerOnly) {\n            _revert(CannotPurchaseWithoutSignerApproval.selector);\n        }\n\n        // check signature\n        _checkDiscountSignature(episodeIds, _discount, _expirationTimestamp, signature);\n\n        // calculate total price - discount\n        uint256 __totalPrice = episodeIds.length * pricePerEpisode * (10_000 - _discount) / 10_000;\n\n        // update state\n        _grantEpisodes(msg.sender, episodeIds);\n\n        // transfer tokens\n        HELLO_TOKEN.transferFrom(msg.sender, address(this), __totalPrice);\n    }\n\n    /// @notice Purchase episodes with a total price and signature\n    /// @notice HelloTokens will be transferred to this contract\n    /// @notice grant episodes to the user\n    /// @param episodeIds the episodeIDs to be purchased\n    /// @param totalPrice the total price of the episodes\n    /// @param _expirationTimestamp the expiration timestamp for which this price is applied\n    /// @param signature the signature signed by `signer`\n    function purchaseEpisodesSignatureOnly(\n        uint256[] calldata episodeIds,\n        uint256 totalPrice,\n        uint256 _expirationTimestamp,\n        bytes calldata signature\n    ) external {\n        // check signature\n        _checkTotalPriceSignature(episodeIds, totalPrice, _expirationTimestamp, signature);\n\n        // update state\n        _grantEpisodes(msg.sender, episodeIds);\n\n        // transfer tokens\n        HELLO_TOKEN.transferFrom(msg.sender, address(this), totalPrice);\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                    owner                                   */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice Owner only - Updates the address of the discount signer\n     * @param _signer Address of the discount signer\n     */\n    function setSigner(address _signer) external onlyOwner {\n        if (_signer == address(0)) {\n            _revert(SignerCannotBeZeroAddress.selector);\n        }\n        signer = _signer;\n\n        emit SignerChanged(_signer);\n    }\n\n    /**\n     * @notice Owner only - Updates the signerOnly flag\n     * @param _signerOnly if true, episodes can only be purchased through signatures\n     */\n    function setSignerOnly(bool _signerOnly) external onlyOwner {\n        signerOnly = _signerOnly;\n\n        emit SignerOnlyChanged(_signerOnly);\n    }\n\n    /**\n     * @notice Owner only - Updates the price per episode\n     * @param _price Price per episode\n     */\n    function setPricePerEpisode(uint256 _price) external onlyOwner {\n        pricePerEpisode = _price;\n\n        emit PricePerEpisodeChanged(_price);\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                    views                                   */\n    /* -------------------------------------------------------------------------- */\n    /**\n     * @notice Returns the episodes purchased by the supplied address\n     * @param account The address to check\n     */\n    function episodesOfOwner(address account) external view returns (uint256[] memory) {\n        uint256[] memory episodes = new uint256[](MAX_EPISODE_ID+1);\n        uint256 map = episodePurchasedBitmap[account];\n        uint256 count;\n        assembly {\n            let i := 0\n            let len := add(MAX_EPISODE_ID, 1)\n            for {} lt(i, len) { i := add(i, 1) } {\n                // Check if the bit is set\n                if gt(and(map, shl(i, 1)), 0) {\n                    count := add(count, 1)\n                    mstore(add(episodes, mul(count, 0x20)), i)\n                }\n            }\n        }\n\n        // Resizing the array according to the count\n        assembly {\n            mstore(episodes, count)\n        }\n        return episodes;\n    }\n\n    function isSeasonPassHolder(address account) external view returns (bool) {\n        return _isSeasonPassHolder(episodePurchasedBitmap[account]);\n    }\n\n    function _isSeasonPassHolder(uint256 bitmap) internal pure returns (bool) {\n        return (bitmap & OWNS_SEASON_PASS_BITPOS) != 0;\n    }\n\n    /**\n     * @notice Returns whether an episode has been purchased by the supplied address\n     * @param account The address to check\n     * @param account The episodeId to check\n     * @dev Reverts if an episode does not exist (i.e. > MAX_EPISODE_ID)\n     */\n    function ownsEpisode(address account, uint256 episodeId) external view returns (bool) {\n        if (episodeId > MAX_EPISODE_ID) {\n            _revert(EpisodeDoesNotExist.selector);\n        }\n        uint256 map = episodePurchasedBitmap[account];\n        if (_isSeasonPassHolder(map)) {\n            return true;\n        }\n        return (map & (1 << episodeId)) != 0;\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                  internal                                  */\n    /* -------------------------------------------------------------------------- */\n    function _revert(bytes4 code) internal pure {\n        assembly {\n            mstore(0x0, code)\n            revert(0x0, 0x04)\n        }\n    }\n\n    /**\n     * @dev Checks whether a signature is valid for discount on purchase\n     * @dev Reverts if now > expirationTimestamp\n     * @dev Reverts if the signature is invalid\n     * @param _discount the discount in basis point (e.g. 500 for 5% discount)\n     * @param _expirationTimestamp the expiration timestamp for which this discount can be applied\n     * @param signature the signature\n     */\n    function _checkDiscountSignature(\n        uint256[] memory episodeIds,\n        uint256 _discount,\n        uint256 _expirationTimestamp,\n        bytes memory signature\n    ) internal view {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                msg.sender, episodeIds, _discount, block.chainid, address(this), _expirationTimestamp, \"discount\"\n            )\n        );\n\n        if (block.timestamp > _expirationTimestamp) {\n            _revert(VoucherExpired.selector);\n        }\n        if (hash.toEthSignedMessageHash().recover(signature) != signer) {\n            _revert(InvalidSignature.selector);\n        }\n    }\n\n    /**\n     * @dev Checks whether a signature is valid for price  on purchase\n     * @dev Reverts if now > expirationTimestamp\n     * @dev Reverts if the signature is invalid\n     * @param _totalPrice the total price for all the episodes\n     * @param _expirationTimestamp the expiration timestamp for which this discount can be applied\n     * @param signature the signature\n     */\n    function _checkTotalPriceSignature(\n        uint256[] memory episodeIds,\n        uint256 _totalPrice,\n        uint256 _expirationTimestamp,\n        bytes memory signature\n    ) internal view {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                msg.sender, episodeIds, _totalPrice, block.chainid, address(this), _expirationTimestamp, \"totalPrice\"\n            )\n        );\n\n        if (block.timestamp > _expirationTimestamp) {\n            _revert(VoucherExpired.selector);\n        }\n        if (hash.toEthSignedMessageHash().recover(signature) != signer) {\n            _revert(InvalidSignature.selector);\n        }\n    }\n\n    /**\n     * @dev Updates episodePurchasedBitmap for a user\n     * @dev Reverts if any of the episodes does not exist\n     * @dev Reverts if any of the episodes has been been purchased\n     * @param user the address to be updated\n     * @param episodeIds the IDs of the purchased episodes\n     */\n    function _grantEpisodes(address user, uint256[] memory episodeIds) internal {\n        uint256 existingEpisodeBitmap = episodePurchasedBitmap[user];\n        uint256 newEpisodeBitmap = existingEpisodeBitmap;\n\n        // loop, check episodeId\n        for (uint256 i; i < episodeIds.length;) {\n            uint256 episodeId = episodeIds[i];\n\n            // episode doesn't exist\n            if (episodeId > MAX_EPISODE_ID) {\n                _revert(EpisodeDoesNotExist.selector);\n            }\n            uint256 shiftedEpisodeId = 1 << episodeId;\n\n            //buying 5 episodes is equivalent to buying the season pass, therefore, the episode CAN be repurchased only in this specific case.\n            if (episodeIds.length != MAX_EPISODE_ID + 1) {\n                // episode already purchased\n                if ((existingEpisodeBitmap & shiftedEpisodeId) != 0) {\n                    _revert(EpisodeAlreadyPurchased.selector);\n                }\n            }\n\n            // update bitmap\n            newEpisodeBitmap |= shiftedEpisodeId;\n\n            // next loop\n            unchecked {\n                ++i;\n            }\n        }\n\n        // got all episodes => season pass\n        if (episodeIds.length == MAX_EPISODE_ID + 1) {\n            newEpisodeBitmap |= OWNS_SEASON_PASS_BITPOS;\n            emit SeasonPassPurchased(user);\n        }\n\n        // update\n        episodePurchasedBitmap[user] = newEpisodeBitmap;\n\n        emit EpisodesPurchased(user, episodeIds);\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"}},"settings":{"libraries":{},"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Blacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BlacklistedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"OnClearStuckBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"OnRescueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Hello","CompilerVersion":"v0.8.19+commit.7dd6d404","OptimizationUsed":1,"Runs":200,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}