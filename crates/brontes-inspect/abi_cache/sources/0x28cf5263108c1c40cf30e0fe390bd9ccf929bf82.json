{"expiry":1699494170,"data":[{"SourceCode":"// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B7~&@@@@@@@@@@@@@@@@G!:&@@@@@@@@@@@@@@@&5~.&@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&P~    P@@@@@@@@@@@@&Y^    G@@@@@@@@@@@@#J:    G@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#J:       G@@@@@@@@@B7.       G@@@@@@@@&G!.       G@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@G!.          G@@@@@&P~           B@@@@@&Y:           G@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@&Y^              ~&&#J:              ^#&B7.              G@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@#7.                                                         &@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@G                                                         ^5&@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@J              ^5&@&:              ~P&@&:             .7B@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@J          .!G@@@@@@J          .?B@@@@@@J          :Y#@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@J       :J#@@@@@@@@@J       ^5&@@@@@@@@@?      .~P&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@J    ~P&@@@@@@@@@@@@J   .7B@@@@@@@@@@@@@?   :?#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@B^?B@@@@@@@@@@@@@@@@B~J#@@@@@@@@@@@@@@@@#!5&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n//\n//          Telegram: t.me/YODerc\n//          Twitter:  twitter.com/YODerc20\n//          Website:  https://year-of-dragon.website/\n//\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@                                                                                                @@\n// @@   This token was launched using software provided by Metadrop. To learn more or to launch      @@\n// @@   your own token, visit: https://metadrop.com. See legal info at the end of this file.         @@\n// @@                                                                                                @@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n//\n// SPDX-License-Identifier: BUSL-1.1\n// Metadrop Contracts (v2.1.0)\n//// Sources flattened with hardhat v2.17.2 https://hardhat.org\n\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.3\n\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.9.3\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.3\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.9.3\n\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n// File contracts/ERC20Factory/ERC20/IERC20ConfigByMetadrop.sol\n\n// Metadrop Contracts (v2.1.0)\n\n/**\n *\n * @title IERC20ByMetadrop.sol. Interface for metadrop ERC20 standard\n *\n * @author metadrop\n *\n */\n\npragma solidity 0.8.21;\n\ninterface IERC20ConfigByMetadrop {\n  enum VaultType {\n    unicrypt,\n    metavault\n  }\n\n  struct ERC20Config {\n    bytes baseParameters;\n    bytes supplyParameters;\n    bytes taxParameters;\n    bytes poolParameters;\n  }\n\n  struct ERC20BaseParameters {\n    string name;\n    string symbol;\n    bool addLiquidityOnCreate;\n    bool usesDRIPool;\n  }\n\n  struct ERC20SupplyParameters {\n    uint256 maxSupply;\n    uint256 lpSupply;\n    uint256 projectSupply;\n    uint256 maxTokensPerWallet;\n    uint256 maxTokensPerTxn;\n    uint256 lpLockupInDays;\n    uint256 botProtectionDurationInSeconds;\n    address projectSupplyRecipient;\n    address projectLPOwner;\n    bool burnLPTokens;\n  }\n\n  struct ERC20TaxParameters {\n    uint256 projectBuyTaxBasisPoints;\n    uint256 projectSellTaxBasisPoints;\n    uint256 taxSwapThresholdBasisPoints;\n    uint256 metadropBuyTaxBasisPoints;\n    uint256 metadropSellTaxBasisPoints;\n    uint256 metadropTaxPeriodInDays;\n    address projectTaxRecipient;\n    address metadropTaxRecipient;\n  }\n\n  struct ERC20PoolParameters {\n    uint256 poolSupply;\n    uint256 poolStartDate;\n    uint256 poolEndDate;\n    uint256 poolVestingInDays;\n    uint256 poolMaxETH;\n    uint256 poolPerAddressMaxETH;\n    uint256 poolMinETH;\n    uint256 poolPerTransactionMinETH;\n  }\n}\n\n// File contracts/Global/IConfigStructures.sol\n\n// Metadrop Contracts (v2.1.0)\n\n/**\n *\n * @title IConfigStructures.sol. Interface for common config structures used accross the platform\n *\n * @author metadrop\n *\n */\n\npragma solidity 0.8.21;\n\ninterface IConfigStructures {\n  enum DropStatus {\n    approved,\n    deployed,\n    cancelled\n  }\n\n  enum TemplateStatus {\n    live,\n    terminated\n  }\n\n  // The current status of the mint:\n  //   - notEnabled: This type of mint is not part of this drop\n  //   - notYetOpen: This type of mint is part of the drop, but it hasn't started yet\n  //   - open: it's ready for ya, get in there.\n  //   - finished: been and gone.\n  //   - unknown: theoretically impossible.\n  enum MintStatus {\n    notEnabled,\n    notYetOpen,\n    open,\n    finished,\n    unknown\n  }\n\n  struct SubListConfig {\n    uint256 start;\n    uint256 end;\n    uint256 phaseMaxSupply;\n  }\n\n  struct PrimarySaleModuleInstance {\n    address instanceAddress;\n    string instanceDescription;\n  }\n\n  struct NFTModuleConfig {\n    uint256 templateId;\n    bytes configData;\n    bytes vestingData;\n  }\n\n  struct PrimarySaleModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct ProjectBeneficiary {\n    address payable payeeAddress;\n    uint256 payeeShares;\n  }\n\n  struct VestingConfig {\n    uint256 start;\n    uint256 projectUpFrontShare;\n    uint256 projectVestedShare;\n    uint256 vestingPeriodInDays;\n    uint256 vestingCliff;\n    ProjectBeneficiary[] projectPayees;\n  }\n\n  struct RoyaltySplitterModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct InLifeModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct InLifeModules {\n    InLifeModuleConfig[] modules;\n  }\n\n  struct NFTConfig {\n    uint256 supply;\n    string name;\n    string symbol;\n    bytes32 positionProof;\n    bool includePriorPhasesInMintTracking;\n    bool singleMetadataCollection;\n    uint256 reservedAllocation;\n    uint256 assistanceRequestWindowInSeconds;\n  }\n\n  struct Template {\n    TemplateStatus status;\n    uint16 templateNumber;\n    uint32 loadedDate;\n    address payable templateAddress;\n    string templateDescription;\n  }\n\n  struct RoyaltyDetails {\n    address newRoyaltyPaymentSplitterInstance;\n    uint96 royaltyFromSalesInBasisPoints;\n  }\n\n  struct SignedDropMessageDetails {\n    uint256 messageTimeStamp;\n    bytes32 messageHash;\n    bytes messageSignature;\n  }\n}\n\n// File contracts/ERC20Factory/ERC20/IERC20ByMetadrop.sol\n\n// Metadrop Contracts (v2.1.0)\n\npragma solidity 0.8.21;\n\n/**\n * @dev Metadrop core ERC-20 contract, interface\n */\ninterface IERC20ByMetadrop is\n  IConfigStructures,\n  IERC20,\n  IERC20ConfigByMetadrop,\n  IERC20Metadata\n{\n  event AutoSwapThresholdUpdated(uint256 oldThreshold, uint256 newThreshold);\n\n  event ExternalCallError(uint256 identifier);\n\n  event InitialLiquidityAdded(uint256 tokenA, uint256 tokenB, uint256 lpToken);\n\n  event LimitsUpdated(\n    uint256 oldMaxTokensPerTransaction,\n    uint256 newMaxTokensPerTransaction,\n    uint256 oldMaxTokensPerWallet,\n    uint256 newMaxTokensPerWallet\n  );\n\n  event LiquidityLocked(uint256 lpTokens, uint256 lpLockupInDays);\n\n  event LiquidityBurned(uint256 lpTokens);\n\n  event LiquidityPoolCreated(address addedPool);\n\n  event LiquidityPoolAdded(address addedPool);\n\n  event LiquidityPoolRemoved(address removedPool);\n\n  event MetadropTaxBasisPointsChanged(\n    uint256 oldBuyBasisPoints,\n    uint256 newBuyBasisPoints,\n    uint256 oldSellBasisPoints,\n    uint256 newSellBasisPoints\n  );\n\n  event ProjectTaxBasisPointsChanged(\n    uint256 oldBuyBasisPoints,\n    uint256 newBuyBasisPoints,\n    uint256 oldSellBasisPoints,\n    uint256 newSellBasisPoints\n  );\n\n  event RevenueAutoSwap();\n\n  event ProjectTaxRecipientUpdated(address treasury);\n\n  event UnlimitedAddressAdded(address addedUnlimted);\n\n  event UnlimitedAddressRemoved(address removedUnlimted);\n\n  event ValidCallerAdded(bytes32 addedValidCaller);\n\n  event ValidCallerRemoved(bytes32 removedValidCaller);\n\n  /**\n   * @dev function {addInitialLiquidity}\n   *\n   * Add initial liquidity to the uniswap pair\n   *\n   * @param vaultFee_ The vault fee in wei. This must match the required fee from the external vault contract.\n   * @param lpLockupInDaysOverride_ The number of days to lock liquidity NOTE you can pass 0 to use the stored value.\n   * This value is an override, and will override a stored value which is LOWER that it. If the value you are passing is\n   * LOWER than the stored value the stored value will not be reduced.\n   *\n   * Example usage 1: When creating the coin the lpLockupInDays is set to 0. This means that on this call the\n   * user can set the lockup to any value they like, as all integer values greater than zero will be used to override\n   * that set in storage.\n   *\n   * Example usage 2: When using a DRI Pool the lockup period is set on this contract and the pool need not know anything\n   * about this setting. The pool can pass back a 0 on this call and know that the existing value stored on this contract\n   * will be used.\n   * @param burnLPTokensOverride_ If the LP tokens should be burned (otherwise they are locked). This is an override field\n   * that can ONLY be used to override a held value of FALSE with a new value of TRUE.\n   *\n   * Example usage 1: When creating the coin the user didn't add liquidity, or specify that the LP tokens were to be burned.\n   * So burnLPTokens is held as FALSE. When they add liquidity they want to lock tokens, so they pass this in as FALSE again,\n   * and it remains FALSE.\n   *\n   * Example usage 2: As above, but when later adding liquidity the user wants to burn the LP. So the stored value is FALSE\n   * and the user passes TRUE into this method. The TRUE overrides the held value of FALSE and the tokens are burned.\n   *\n   * Example uusage 3: The user is using a DRI pool and they have specified on the coin creation that the LP tokens are to\n   * be burned. This contract therefore holds TRUE for burnLPTokens. The DRI pool does not need to know what the user has\n   * selected. It can safely pass back FALSE to this method call and the stored value of TRUE will remain, resulting in the\n   * LP tokens being burned.\n   */\n  function addInitialLiquidity(\n    uint256 vaultFee_,\n    uint256 lpLockupInDaysOverride_,\n    bool burnLPTokensOverride_\n  ) external payable;\n\n  /**\n   * @dev function {isLiquidityPool}\n   *\n   * Return if an address is a liquidity pool\n   *\n   * @param queryAddress_ The address being queried\n   * @return bool The address is / isn't a liquidity pool\n   */\n  function isLiquidityPool(address queryAddress_) external view returns (bool);\n\n  /**\n   * @dev function {liquidityPools}\n   *\n   * Returns a list of all liquidity pools\n   *\n   * @return liquidityPools_ a list of all liquidity pools\n   */\n  function liquidityPools()\n    external\n    view\n    returns (address[] memory liquidityPools_);\n\n  /**\n   * @dev function {addLiquidityPool} onlyOwner\n   *\n   * Allows the manager to add a liquidity pool to the pool enumerable set\n   *\n   * @param newLiquidityPool_ The address of the new liquidity pool\n   */\n  function addLiquidityPool(address newLiquidityPool_) external;\n\n  /**\n   * @dev function {removeLiquidityPool} onlyOwner\n   *\n   * Allows the manager to remove a liquidity pool\n   *\n   * @param removedLiquidityPool_ The address of the old removed liquidity pool\n   */\n  function removeLiquidityPool(address removedLiquidityPool_) external;\n\n  /**\n   * @dev function {isUnlimited}\n   *\n   * Return if an address is unlimited (is not subject to per txn and per wallet limits)\n   *\n   * @param queryAddress_ The address being queried\n   * @return bool The address is / isn't unlimited\n   */\n  function isUnlimited(address queryAddress_) external view returns (bool);\n\n  /**\n   * @dev function {unlimitedAddresses}\n   *\n   * Returns a list of all unlimited addresses\n   *\n   * @return unlimitedAddresses_ a list of all unlimited addresses\n   */\n  function unlimitedAddresses()\n    external\n    view\n    returns (address[] memory unlimitedAddresses_);\n\n  /**\n   * @dev function {addUnlimited} onlyOwner\n   *\n   * Allows the manager to add an unlimited address\n   *\n   * @param newUnlimited_ The address of the new unlimited address\n   */\n  function addUnlimited(address newUnlimited_) external;\n\n  /**\n   * @dev function {removeUnlimited} onlyOwner\n   *\n   * Allows the manager to remove an unlimited address\n   *\n   * @param removedUnlimited_ The address of the old removed unlimited address\n   */\n  function removeUnlimited(address removedUnlimited_) external;\n\n  /**\n   * @dev function {isValidCaller}\n   *\n   * Return if an address is a valid caller\n   *\n   * @param queryHash_ The code hash being queried\n   * @return bool The address is / isn't a valid caller\n   */\n  function isValidCaller(bytes32 queryHash_) external view returns (bool);\n\n  /**\n   * @dev function {validCallers}\n   *\n   * Returns a list of all valid caller code hashes\n   *\n   * @return validCallerHashes_ a list of all valid caller code hashes\n   */\n  function validCallers()\n    external\n    view\n    returns (bytes32[] memory validCallerHashes_);\n\n  /**\n   * @dev function {addValidCaller} onlyOwner\n   *\n   * Allows the owner to add the hash of a valid caller\n   *\n   * @param newValidCallerHash_ The hash of the new valid caller\n   */\n  function addValidCaller(bytes32 newValidCallerHash_) external;\n\n  /**\n   * @dev function {removeValidCaller} onlyOwner\n   *\n   * Allows the owner to remove a valid caller\n   *\n   * @param removedValidCallerHash_ The hash of the old removed valid caller\n   */\n  function removeValidCaller(bytes32 removedValidCallerHash_) external;\n\n  /**\n   * @dev function {setProjectTaxRecipient} onlyOwner\n   *\n   * Allows the manager to set the project tax recipient address\n   *\n   * @param projectTaxRecipient_ New recipient address\n   */\n  function setProjectTaxRecipient(address projectTaxRecipient_) external;\n\n  /**\n   * @dev function {setSwapThresholdBasisPoints} onlyOwner\n   *\n   * Allows the manager to set the autoswap threshold\n   *\n   * @param swapThresholdBasisPoints_ New swap threshold in basis points\n   */\n  function setSwapThresholdBasisPoints(\n    uint16 swapThresholdBasisPoints_\n  ) external;\n\n  /**\n   * @dev function {setProjectTaxRates} onlyOwner\n   *\n   * Change the tax rates, subject to only ever decreasing\n   *\n   * @param newProjectBuyTaxBasisPoints_ The new buy tax rate\n   * @param newProjectSellTaxBasisPoints_ The new sell tax rate\n   */\n  function setProjectTaxRates(\n    uint16 newProjectBuyTaxBasisPoints_,\n    uint16 newProjectSellTaxBasisPoints_\n  ) external;\n\n  /**\n   * @dev function {setLimits} onlyOwner\n   *\n   * Change the limits on transactions and holdings\n   *\n   * @param newMaxTokensPerTransaction_ The new per txn limit\n   * @param newMaxTokensPerWallet_ The new tokens per wallet limit\n   */\n  function setLimits(\n    uint256 newMaxTokensPerTransaction_,\n    uint256 newMaxTokensPerWallet_\n  ) external;\n\n  /**\n   * @dev function {limitsEnforced}\n   *\n   * Return if limits are enforced on this contract\n   *\n   * @return bool : they are / aren't\n   */\n  function limitsEnforced() external view returns (bool);\n\n  /**\n   * @dev getMetadropBuyTaxBasisPoints\n   *\n   * Return the metadrop buy tax basis points given the timed expiry\n   */\n  function getMetadropBuyTaxBasisPoints() external view returns (uint256);\n\n  /**\n   * @dev getMetadropSellTaxBasisPoints\n   *\n   * Return the metadrop sell tax basis points given the timed expiry\n   */\n  function getMetadropSellTaxBasisPoints() external view returns (uint256);\n\n  /**\n   * @dev totalBuyTaxBasisPoints\n   *\n   * Provide easy to view tax total:\n   */\n  function totalBuyTaxBasisPoints() external view returns (uint256);\n\n  /**\n   * @dev totalSellTaxBasisPoints\n   *\n   * Provide easy to view tax total:\n   */\n  function totalSellTaxBasisPoints() external view returns (uint256);\n\n  /**\n   * @dev distributeTaxTokens\n   *\n   * Allows the distribution of tax tokens to the designated recipient(s)\n   *\n   * As part of standard processing the tax token balance being above the threshold\n   * will trigger an autoswap to ETH and distribution of this ETH to the designated\n   * recipients. This is automatic and there is no need for user involvement.\n   *\n   * As part of this swap there are a number of calculations performed, particularly\n   * if the tax balance is above MAX_SWAP_THRESHOLD_MULTIPLE.\n   *\n   * Testing indicates that these calculations are safe. But given the data / code\n   * interactions it remains possible that some edge case set of scenarios may cause\n   * an issue with these calculations.\n   *\n   * This method is therefore provided as a 'fallback' option to safely distribute\n   * accumulated taxes from the contract, with a direct transfer of the ERC20 tokens\n   * themselves.\n   */\n  function distributeTaxTokens() external;\n\n  /**\n   * @dev function {withdrawETH} onlyOwner\n   *\n   * A withdraw function to allow ETH to be withdrawn by the manager\n   *\n   * This contract should never hold ETH. The only envisaged scenario where\n   * it might hold ETH is a failed autoswap where the uniswap swap has completed,\n   * the recipient of ETH reverts, the contract then wraps to WETH and the\n   * wrap to WETH fails.\n   *\n   * This feels unlikely. But, for safety, we include this method.\n   *\n   * @param amount_ The amount to withdraw\n   */\n  function withdrawETH(uint256 amount_) external;\n\n  /**\n   * @dev function {withdrawERC20} onlyOwner\n   *\n   * A withdraw function to allow ERC20s (except address(this)) to be withdrawn.\n   *\n   * This contract should never hold ERC20s other than tax tokens. The only envisaged\n   * scenario where it might hold an ERC20 is a failed autoswap where the uniswap swap\n   * has completed, the recipient of ETH reverts, the contract then wraps to WETH, the\n   * wrap to WETH succeeds, BUT then the transfer of WETH fails.\n   *\n   * This feels even less likely than the scenario where ETH is held on the contract.\n   * But, for safety, we include this method.\n   *\n   * @param token_ The ERC20 contract\n   * @param amount_ The amount to withdraw\n   */\n  function withdrawERC20(address token_, uint256 amount_) external;\n\n  /**\n   * @dev Destroys a `value` amount of tokens from the caller.\n   *\n   * See {ERC20-_burn}.\n   */\n  function burn(uint256 value) external;\n\n  /**\n   * @dev Destroys a `value` amount of tokens from `account`, deducting from\n   * the caller's allowance.\n   *\n   * See {ERC20-_burn} and {ERC20-allowance}.\n   *\n   * Requirements:\n   *\n   * - the caller must have allowance for ``accounts``'s tokens of at least\n   * `value`.\n   */\n  function burnFrom(address account, uint256 value) external;\n}\n\n// File contracts/Global/IErrors.sol\n\n// Metadrop Contracts (v2.1.0)\n\n/**\n *\n * @title IErrors.sol. Interface for error definitions used across the platform\n *\n * @author metadrop\n *\n */\n\npragma solidity 0.8.21;\n\ninterface IErrors {\n  enum BondingCurveErrorType {\n    OK, //                                                  No error\n    INVALID_NUMITEMS, //                                    The numItem value is 0\n    SPOT_PRICE_OVERFLOW //                                  The updated spot price doesn't fit into 128 bits\n  }\n\n  error AdapterParamsMustBeEmpty(); //                      The adapter parameters on this LZ call must be empty.\n\n  error AdditionToPoolIsBelowPerTransactionMinimum(); //    The contribution amount is less than the minimum.\n\n  error AdditionToPoolWouldExceedPoolCap(); //              This addition to the pool would exceed the pool cap.\n\n  error AdditionToPoolWouldExceedPerAddressCap(); //        This addition to the pool would exceed the per address cap.\n\n  error AddressAlreadySet(); //                             The address being set can only be set once, and is already non-0.\n\n  error AllowanceDecreasedBelowZero(); //                   You cannot decrease the allowance below zero.\n\n  error AlreadyInitialised(); //                            The contract is already initialised: it cannot be initialised twice!\n\n  error ApprovalCallerNotOwnerNorApproved(); //             The caller must own the token or be an approved operator.\n\n  error ApproveFromTheZeroAddress(); //                     Approval cannot be called from the zero address (indeed, how have you??).\n\n  error ApproveToTheZeroAddress(); //                       Approval cannot be given to the zero address.\n\n  error ApprovalQueryForNonexistentToken(); //              The token does not exist.\n\n  error AuctionStatusIsNotEnded(); //                       Throw if the action required the auction to be closed, and it isn't.\n\n  error AuctionStatusIsNotOpen(); //                        Throw if the action requires the auction to be open, and it isn't.\n\n  error AuxCallFailed(\n    address[] modules,\n    uint256 value,\n    bytes data,\n    uint256 txGas\n  ); //                                                     An auxilliary call from the drop factory failed.\n\n  error BalanceMismatch(); //                               An error when comparing balance amounts.\n\n  error BalanceQueryForZeroAddress(); //                    Cannot query the balance for the zero address.\n\n  error BidMustBeBelowTheFloorWhenReducingQuantity(); //    Only bids that are below the floor can reduce the quantity of the bid.\n\n  error BidMustBeBelowTheFloorForRefundDuringAuction(); //  Only bids that are below the floor can be refunded during the auction.\n\n  error BondingCurveError(BondingCurveErrorType error); //  An error of the type specified has occured in bonding curve processing.\n\n  error BurnExceedsBalance(); //                            The amount you have selected to burn exceeds the addresses balance.\n\n  error BurnFromTheZeroAddress(); //                        Tokens cannot be burned from the zero address. (Also, how have you called this!?!)\n\n  error CallerIsNotDepositBoxOwner(); //                    The caller is not the owner of the deposit box.\n\n  error CallerIsNotFactory(); //                            The caller of this function must match the factory address in storage.\n\n  error CallerIsNotFactoryOrProjectOwner(); //              The caller of this function must match the factory address OR project owner address.\n\n  error CallerIsNotFactoryProjectOwnerOrPool(); //          The caller of this function must match the factory address, project owner or pool address.\n\n  error CallerIsNotTheOwner(); //                           The caller is not the owner of this contract.\n\n  error CallerIsNotTheManager(); //                         The caller is not the manager of this contract.\n\n  error CallerMustBeLzApp(); //                             The caller must be an LZ application.\n\n  error CallerIsNotPlatformAdmin(address caller); //        The caller of this function must be part of the platformAdmin group.\n\n  error CallerIsNotSuperAdmin(address caller); //           The caller of this function must match the superAdmin address in storage.\n\n  error CannotAddLiquidityOnCreateAndUseDRIPool(); //       Cannot use both liquidity added on create and a DRIPool in the same token.\n\n  error CannotSetNewOwnerToTheZeroAddress(); //             You can't set the owner of this contract to the zero address (address(0)).\n\n  error CannotSetToZeroAddress(); //                        The corresponding address cannot be set to the zero address (address(0)).\n\n  error CannotSetNewManagerToTheZeroAddress(); //           Cannot transfer the manager to the zero address (address(0)).\n\n  error CannotWithdrawThisToken(); //                       Cannot withdraw the specified token.\n\n  error CanOnlyReduce(); //                                 The given operation can only reduce the value specified.\n\n  error CollectionAlreadyRevealed(); //                     The collection is already revealed; you cannot call reveal again.\n\n  error ContractIsDecommissioned(); //                      This contract is decommissioned!\n\n  error ContractIsPaused(); //                              The call requires the contract to be unpaused, and it is paused.\n\n  error ContractIsNotPaused(); //                           The call required the contract to be paused, and it is NOT paused.\n\n  error DecreasedAllowanceBelowZero(); //                   The request would decrease the allowance below zero, and that is not allowed.\n\n  error DestinationIsNotTrustedSource(); //                 The destination that is being called through LZ has not been set as trusted.\n\n  error DeployerOnly(); //                                  This method can only be called by the deployer address.\n\n  error DeploymentError(); //                               Error on deployment.\n\n  error DepositBoxIsNotOpen(); //                           This action cannot complete as the deposit box is not open.\n\n  error DriPoolAddressCannotBeAddressZero(); //             The Dri Pool address cannot be the zero address.\n\n  error GasLimitIsTooLow(); //                              The gas limit for the LayerZero call is too low.\n\n  error IncorrectConfirmationValue(); //                    You need to enter the right confirmation value to call this funtion (usually 69420).\n\n  error IncorrectPayment(); //                              The function call did not include passing the correct payment.\n\n  error InitialLiquidityAlreadyAdded(); //                  Initial liquidity has already been added. You can't do it again.\n\n  error InitialLiquidityNotYetAdded(); //                   Initial liquidity needs to have been added for this to succedd.\n\n  error InsufficientAllowance(); //                         There is not a high enough allowance for this operation.\n\n  error InvalidAdapterParams(); //                          The current adapter params for LayerZero on this contract won't work :(.\n\n  error InvalidAddress(); //                                An address being processed in the function is not valid.\n\n  error InvalidEndpointCaller(); //                         The calling address is not a valid LZ endpoint. The LZ endpoint was set at contract creation\n  //                                                        and cannot be altered after. Check the address LZ endpoint address on the contract.\n\n  error InvalidMinGas(); //                                 The minimum gas setting for LZ in invalid.\n\n  error InvalidOracleSignature(); //                        The signature provided with the contract call is not valid, either in format or signer.\n\n  error InvalidPayload(); //                                The LZ payload is invalid\n\n  error InvalidReceiver(); //                               The address used as a target for funds is not valid.\n\n  error InvalidSourceSendingContract(); //                  The LZ message is being related from a source contract on another chain that is NOT trusted.\n\n  error InvalidTotalShares(); //                            Total shares must equal 100 percent in basis points.\n\n  error LimitsCanOnlyBeRaised(); //                          Limits are UP ONLY.\n\n  error ListLengthMismatch(); //                            Two or more lists were compared and they did not match length.\n\n  error LiquidityPoolMustBeAContractAddress(); //           Cannot add a non-contract as a liquidity pool.\n\n  error LiquidityPoolCannotBeAddressZero(); //              Cannot add a liquidity pool from the zero address.\n\n  error LPLockUpMustFitUint88(); //                         LP lockup is held in a uint88, so must fit.\n\n  error NoTrustedPathRecord(); //                           LZ needs a trusted path record for this to work. What's that, you ask?\n\n  error MachineAddressCannotBeAddressZero(); //             Cannot set the machine address to the zero address.\n\n  error ManagerUnauthorizedAccount(); //                    The caller is not the pending manager.\n\n  error MaxBidQuantityIs255(); //                           Validation: as we use a uint8 array to track bid positions the max bid quantity is 255.\n\n  error MaxPublicMintAllowanceExceeded(\n    uint256 requested,\n    uint256 alreadyMinted,\n    uint256 maxAllowance\n  ); //                                                     The calling address has requested a quantity that would exceed the max allowance.\n\n  error MaxSupplyTooHigh(); //                              Max supply must fit in a uint128.\n\n  error MaxTokensPerWalletExceeded(); //                    The transfer would exceed the max tokens per wallet limit.\n\n  error MaxTokensPerTxnExceeded(); //                       The transfer would exceed the max tokens per transaction limit.\n\n  error MetadataIsLocked(); //                              The metadata on this contract is locked; it cannot be altered!\n\n  error MetadropFactoryOnlyOncePerReveal(); //              This function can only be called (a) by the factory and, (b) just one time!\n\n  error MetadropModulesOnly(); //                           Can only be called from a metadrop contract.\n\n  error MetadropOracleCannotBeAddressZero(); //             The metadrop Oracle cannot be the zero address (address(0)).\n\n  error MinGasLimitNotSet(); //                             The minimum gas limit for LayerZero has not been set.\n\n  error MintERC2309QuantityExceedsLimit(); //               The `quantity` minted with ERC2309 exceeds the safety limit.\n\n  error MintingIsClosedForever(); //                        Minting is, as the error suggests, so over (and locked forever).\n\n  error MintToZeroAddress(); //                             Cannot mint to the zero address.\n\n  error MintZeroQuantity(); //                              The quantity of tokens minted must be more than zero.\n\n  error NewBuyTaxBasisPointsExceedsMaximum(); //            Project owner trying to set the tax rate too high.\n\n  error NewSellTaxBasisPointsExceedsMaximum(); //           Project owner trying to set the tax rate too high.\n\n  error NoETHForLiquidityPair(); //                         No ETH has been provided for the liquidity pair.\n\n  error TaxPeriodStillInForce(); //                         The minimum tax period has not yet expired.\n\n  error NoPaymentDue(); //                                  No payment is due for this address.\n\n  error NoRefundForCaller(); //                             Error thrown when the calling address has no refund owed.\n\n  error NoStoredMessage(); //                               There is no stored message matching the passed parameters.\n\n  error NothingToClaim(); //                                The calling address has nothing to claim.\n\n  error NoTokenForLiquidityPair(); //                       There is no token to add to the LP.\n\n  error OperationDidNotSucceed(); //                        The operation failed (vague much?).\n\n  error OracleSignatureHasExpired(); //                     A signature has been provided but it is too old.\n\n  error OwnableUnauthorizedAccount(); //                    The caller is not the pending owner.\n\n  error OwnershipNotInitializedForExtraData(); //           The `extraData` cannot be set on an uninitialized ownership slot.\n\n  error OwnerQueryForNonexistentToken(); //                 The token does not exist.\n\n  error ParametersDoNotMatchSignedMessage(); //             The parameters passed with the signed message do not match the message itself.\n\n  error ParamTooLargeStartDate(); //                        The passed parameter exceeds the var type max.\n\n  error ParamTooLargeEndDate(); //                          The passed parameter exceeds the var type max.\n\n  error ParamTooLargeMinETH(); //                           The passed parameter exceeds the var type max.\n\n  error ParamTooLargePerAddressMax(); //                    The passed parameter exceeds the var type max.\n\n  error ParamTooLargeVestingDays(); //                      The passed parameter exceeds the var type max.\n\n  error ParamTooLargePoolSupply(); //                       The passed parameter exceeds the var type max.\n\n  error ParamTooLargePoolPerTxnMinETH(); //                 The passed parameter exceeds the var type max.\n\n  error PassedConfigDoesNotMatchApproved(); //              The config provided on the call does not match the approved config.\n\n  error PauseCutOffHasPassed(); //                          The time period in which we can pause has passed; this contract can no longer be paused.\n\n  error PaymentMustCoverPerMintFee(); //                    The payment passed must at least cover the per mint fee for the quantity requested.\n\n  error PermitDidNotSucceed(); //                           The safeERC20 permit failed.\n\n  error PlatformAdminCannotBeAddressZero(); //              We cannot use the zero address (address(0)) as a platformAdmin.\n\n  error PlatformTreasuryCannotBeAddressZero(); //           The treasury address cannot be set to the zero address.\n\n  error PoolIsAboveMinimum(); //                            You required the pool to be below the minimum, and it is not\n\n  error PoolIsBelowMinimum(); //                            You required the pool to be above the minimum, and it is not\n\n  error PoolPhaseIsClosed(); //                             The block.timestamp is either before the pool is open or after it is closed.\n\n  error PoolPhaseIsNotAfter(); //                           The block.timestamp is either before or during the pool open phase.\n\n  error PoolVestingNotYetComplete(); //                     Tokens in the pool are not yet vested.\n\n  error ProjectOwnerCannotBeAddressZero(); //               The project owner has to be a non zero address.\n\n  error ProofInvalid(); //                                  The provided proof is not valid with the provided arguments.\n\n  error QuantityExceedsRemainingCollectionSupply(); //      The requested quantity would breach the collection supply.\n\n  error QuantityExceedsRemainingPhaseSupply(); //           The requested quantity would breach the phase supply.\n\n  error QuantityExceedsMaxPossibleCollectionSupply(); //    The requested quantity would breach the maximum trackable supply\n\n  error ReferralIdAlreadyUsed(); //                         This referral ID has already been used; they are one use only.\n\n  error RequestingMoreThanAvailableBalance(); //             The request exceeds the available balance.\n\n  error RequestingMoreThanRemainingAllocation(\n    uint256 previouslyMinted,\n    uint256 requested,\n    uint256 remainingAllocation\n  ); //                                                     Number of tokens requested for this mint exceeds the remaining allocation (taking the\n  //                                                        original allocation from the list and deducting minted tokens).\n\n  error RoyaltyFeeWillExceedSalePrice(); //                 The ERC2981 royalty specified will exceed the sale price.\n\n  error ShareTotalCannotBeZero(); //                        The total of all the shares cannot be nothing.\n\n  error SliceOutOfBounds(); //                              The bytes slice operation was out of bounds.\n\n  error SliceOverflow(); //                                 The bytes slice operation overlowed.\n\n  error SuperAdminCannotBeAddressZero(); //                 The superAdmin cannot be the sero address (address(0)).\n\n  error SupplyTotalMismatch(); //                           The sum of the team supply and lp supply does not match.\n\n  error SupportWindowIsNotOpen(); //                        The project owner has not requested support within the support request expiry window.\n\n  error TaxFreeAddressCannotBeAddressZero(); //             A tax free address cannot be address(0)\n\n  error TemplateCannotBeAddressZero(); //                   The address for a template cannot be address zero (address(0)).\n\n  error TemplateNotFound(); //                              There is no template that matches the passed template Id.\n\n  error ThisMintIsClosed(); //                              It's over (well, this mint is, anyway).\n\n  error TotalSharesMustMatchDenominator(); //               The total of all shares must equal the denominator value.\n\n  error TransferAmountExceedsBalance(); //                  The transfer amount exceeds the accounts available balance.\n\n  error TransferCallerNotOwnerNorApproved(); //             The caller must own the token or be an approved operator.\n\n  error TransferFailed(); //                                The transfer has failed.\n\n  error TransferFromIncorrectOwner(); //                    The token must be owned by `from`.\n\n  error TransferToNonERC721ReceiverImplementer(); //        Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n\n  error TransferFromZeroAddress(); //                       Cannot transfer from the zero address. Indeed, this surely is impossible, and likely a waste to check??\n\n  error TransferToZeroAddress(); //                         Cannot transfer to the zero address.\n\n  error UnrecognisedVRFMode(); //                           Currently supported VRF modes are 0: chainlink and 1: arrng\n\n  error URIQueryForNonexistentToken(); //                   The token does not exist.\n\n  error ValueExceedsMaximum(); //                           The value sent exceeds the maximum allowed (super useful explanation huh?).\n\n  error VRFCoordinatorCannotBeAddressZero(); //             The VRF coordinator cannot be the zero address (address(0)).\n}\n\n// File contracts/ERC20Factory/ERC20Factory/IERC20FactoryByMetadrop.sol\n\n// Metadrop Contracts (v2.1.0)\n\npragma solidity 0.8.21;\n\n/**\n * @dev Metadrop ERC-20 factory, interface\n */\ninterface IERC20FactoryByMetadrop is\n  IConfigStructures,\n  IErrors,\n  IERC20ConfigByMetadrop\n{\n  event DriPoolAddressUpdated(address oldAddress, address newAddress);\n\n  event ERC20Created(\n    string metaId,\n    address indexed deployer,\n    address contractInstance,\n    address driPoolInstance,\n    string symbol,\n    string name,\n    bytes constructorArgs\n  );\n\n  event MachineAddressUpdated(address oldAddress, address newAddress);\n\n  event OracleAddressUpdated(address oldAddress, address newAddress);\n\n  event MessageValidityInSecondsUpdated(\n    uint256 oldMessageValidityInSeconds,\n    uint256 newMessageValidityInSeconds\n  );\n\n  event PlatformTreasuryUpdated(address oldAddress, address newAddress);\n\n  /**\n   * @dev function {initialiseMachineAddress}\n   *\n   * Initialise the machine template address. This needs to be separate from\n   * the constructor as the machine needs the factory address on its constructor.\n   *\n   * This must ALWAYS be called as part of deployment.\n   *\n   * @param machineTemplate_ the machine address\n   */\n  function initialiseMachineAddress(address machineTemplate_) external;\n\n  /**\n   * @dev function {decommissionFactory} onlySuperAdmin\n   *\n   * Make this factory unusable for creating new ERC20s, forever\n   *\n   */\n  function decommissionFactory() external;\n\n  /**\n   * @dev function {setMetadropOracleAddress} onlyPlatformAdmin\n   *\n   * Set the metadrop trusted oracle address\n   *\n   * @param metadropOracleAddress_ Trusted metadrop oracle address\n   */\n  function setMetadropOracleAddress(address metadropOracleAddress_) external;\n\n  /**\n   * @dev function {setMessageValidityInSeconds} onlyPlatformAdmin\n   *\n   * Set the validity period of signed messages\n   *\n   * @param messageValidityInSeconds_ Validity period in seconds for messages signed by the trusted oracle\n   */\n  function setMessageValidityInSeconds(\n    uint256 messageValidityInSeconds_\n  ) external;\n\n  /**\n   * @dev function {setPlatformTreasury} onlySuperAdmin\n   *\n   * Set the address that platform fees will be paid to / can be withdrawn to.\n   * Note that this is restricted to the highest authority level, the super\n   * admin. Platform admins can trigger a withdrawal to the treasury, but only\n   * the default admin can set or alter the treasury address. It is recommended\n   * that the default admin is highly secured and restrited e.g. a multi-sig.\n   *\n   * @param platformTreasury_ New treasury address\n   */\n  function setPlatformTreasury(address platformTreasury_) external;\n\n  /**\n   * @dev function {setMachineAddress} onlyPlatformAdmin\n   *\n   * Set a new machine template address\n   *\n   * @param newMachineAddress_ the new machine address\n   */\n  function setMachineAddress(address newMachineAddress_) external;\n\n  /**\n   * @dev function {setDriPoolAddress} onlyPlatformAdmin\n   *\n   * Set a new launch pool template address\n   *\n   * @param newDriPoolAddress_ the new launch pool address\n   */\n  function setDriPoolAddress(address newDriPoolAddress_) external;\n\n  /**\n   * @dev function {withdrawETH} onlyPlatformAdmin\n   *\n   * A withdraw function to allow ETH to be withdrawn to the treasury\n   *\n   * @param amount_ The amount to withdraw\n   */\n  function withdrawETH(uint256 amount_) external;\n\n  /**\n   * @dev function {withdrawERC20} onlyPlatformAdmin\n   *\n   * A withdraw function to allow ERC20s to be withdrawn to the treasury\n   *\n   * @param token_ The contract address of the token being withdrawn\n   * @param amount_ The amount to withdraw\n   */\n  function withdrawERC20(IERC20 token_, uint256 amount_) external;\n\n  /**\n   * @dev function {createERC20}\n   *\n   * Create an ERC-20\n   *\n   * @param metaId_ The drop Id being approved\n   * @param salt_ Salt for create2\n   * @param erc20Config_ ERC20 configuration\n   * @param signedMessage_ The signed message object\n   * @param vaultFee_ The fee for the token vault\n   * @param deploymentFee_ The fee for deployment, if any\n   * @return deployedAddress_ The deployed ERC20 contract address\n   */\n  function createERC20(\n    string calldata metaId_,\n    bytes32 salt_,\n    ERC20Config calldata erc20Config_,\n    SignedDropMessageDetails calldata signedMessage_,\n    uint256 vaultFee_,\n    uint256 deploymentFee_\n  ) external payable returns (address deployedAddress_);\n\n  /**\n   * @dev function {createConfigHash}\n   *\n   * Create the config hash\n   *\n   * @param metaId_ The drop Id being approved\n   * @param salt_ Salt for create2\n   * @param erc20Config_ ERC20 configuration\n   * @param messageTimeStamp_ When the message for this config hash was signed\n   * @param vaultFee_ The fee for the token vault\n   * @param deploymentFee_ The fee for deployment, if any\n   * @param deployer_ Address performing the deployment\n   * @return configHash_ The bytes32 config hash\n   */\n  function createConfigHash(\n    string calldata metaId_,\n    bytes32 salt_,\n    ERC20Config calldata erc20Config_,\n    uint256 messageTimeStamp_,\n    uint256 vaultFee_,\n    uint256 deploymentFee_,\n    address deployer_\n  ) external pure returns (bytes32 configHash_);\n}\n\n// File contracts/Global/Revert.sol\n\n// Metadrop Contracts (v2.1.0)\n\n/**\n *\n * @title Revert.sol. For efficient reverts\n *\n * @author metadrop\n *\n */\n\npragma solidity 0.8.21;\n\nabstract contract Revert {\n  /**\n   * @dev For more efficient reverts.\n   */\n  function _revert(bytes4 errorSelector) internal pure {\n    assembly {\n      mstore(0x00, errorSelector)\n      revert(0x00, 0x04)\n    }\n  }\n}\n\n// File contracts/Global/OZ/Ownable.sol\n\n// Metadrop Contracts (v2.1.0)\n// Metadrop based on OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity 0.8.21;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is IErrors, Revert, Context {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev Initializes the contract setting the deployer as the initial owner.\n   */\n  constructor() {\n    _transferOwnership(_msgSender());\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    _checkOwner();\n    _;\n  }\n\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() public view virtual returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if the sender is not the owner.\n   */\n  function _checkOwner() internal view virtual {\n    if (owner() != _msgSender()) {\n      _revert(CallerIsNotTheOwner.selector);\n    }\n  }\n\n  /**\n   * @dev Leaves the contract without owner. It will not be possible to call\n   * `onlyOwner` functions. Can only be called by the current owner.\n   *\n   * NOTE: Renouncing ownership will leave the contract without an owner,\n   * thereby disabling any functionality that is only available to the owner.\n   */\n  function renounceOwnership() public virtual onlyOwner {\n    _transferOwnership(address(0));\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public virtual onlyOwner {\n    if (newOwner == address(0)) {\n      _revert(CannotSetNewOwnerToTheZeroAddress.selector);\n    }\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Internal function without access restriction.\n   */\n  function _transferOwnership(address newOwner) internal virtual {\n    address oldOwner = _owner;\n    _owner = newOwner;\n    emit OwnershipTransferred(oldOwner, newOwner);\n  }\n}\n\n// File contracts/Global/OZ/Ownable2Step.sol\n\n// Metadrop Contracts (v2.1.0)\n// Metadrop based on OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity 0.8.21;\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n  address private _pendingOwner;\n\n  event OwnershipTransferStarted(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev Returns the address of the pending owner.\n   */\n  function pendingOwner() public view virtual returns (address) {\n    return _pendingOwner;\n  }\n\n  /**\n   * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(\n    address newOwner\n  ) public virtual override onlyOwner {\n    _pendingOwner = newOwner;\n    emit OwnershipTransferStarted(owner(), newOwner);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n   * Internal function without access restriction.\n   */\n  function _transferOwnership(address newOwner) internal virtual override {\n    delete _pendingOwner;\n    super._transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev The new owner accepts the ownership transfer.\n   */\n  function acceptOwnership() public virtual {\n    address sender = _msgSender();\n    if (pendingOwner() != sender) {\n      _revert(OwnableUnauthorizedAccount.selector);\n    }\n    _transferOwnership(sender);\n  }\n}\n\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol@v4.9.3\n\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.9.3\n\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\n// File contracts/Global/OZ/SafeERC20.sol\n\n// Metadrop Contracts (v2.1.0)\n// Metadrop based on OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity 0.8.21;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    unchecked {\n      uint256 oldAllowance = token.allowance(address(this), spender);\n      if (oldAllowance < value) {\n        revert IErrors.DecreasedAllowanceBelowZero();\n      }\n      forceApprove(token, spender, oldAllowance - value);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n   * 0 before setting it to a non-zero value.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n   * Revert on invalid signature.\n   */\n  function safePermit(\n    IERC20Permit token,\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) internal {\n    uint256 nonceBefore = token.nonces(owner);\n    token.permit(owner, spender, value, deadline, v, r, s);\n    uint256 nonceAfter = token.nonces(owner);\n    if (nonceAfter != (nonceBefore + 1)) {\n      revert IErrors.PermitDidNotSucceed();\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data, \"call fail\");\n    if ((returndata.length != 0) && !abi.decode(returndata, (bool))) {\n      revert IErrors.OperationDidNotSucceed();\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success &&\n      (returndata.length == 0 || abi.decode(returndata, (bool))) &&\n      address(token).code.length > 0;\n  }\n}\n\n// File contracts/ThirdParty/Unicrypt/IUniswapV2Locker.sol\n\n// Interface definition for UniswapV2Locker.sol\n\npragma solidity 0.8.21;\n\ninterface IERCBurn {\n  function burn(uint256 _amount) external;\n\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  function allowance(address owner, address spender) external returns (uint256);\n\n  function balanceOf(address account) external view returns (uint256);\n}\n\ninterface IMigrator {\n  function migrate(\n    address lpToken,\n    uint256 amount,\n    uint256 unlockDate,\n    address owner\n  ) external returns (bool);\n}\n\ninterface IUniswapV2Locker {\n  struct UserInfo {\n    EnumerableSet.AddressSet lockedTokens; // records all tokens the user has locked\n    mapping(address => uint256[]) locksForToken; // map erc20 address to lock id for that token\n  }\n\n  struct TokenLock {\n    uint256 lockDate; // the date the token was locked\n    uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\n    uint256 initialAmount; // the initial lock amount\n    uint256 unlockDate; // the date the token can be withdrawn\n    uint256 lockID; // lockID nonce per uni pair\n    address owner;\n  }\n\n  struct FeeStruct {\n    uint256 ethFee; // Small eth fee to prevent spam on the platform\n    IERCBurn secondaryFeeToken; // UNCX or UNCL\n    uint256 secondaryTokenFee; // optional, UNCX or UNCL\n    uint256 secondaryTokenDiscount; // discount on liquidity fee for burning secondaryToken\n    uint256 liquidityFee; // fee on univ2 liquidity tokens\n    uint256 referralPercent; // fee for referrals\n    IERCBurn referralToken; // token the refferer must hold to qualify as a referrer\n    uint256 referralHold; // balance the referrer must hold to qualify as a referrer\n    uint256 referralDiscount; // discount on flatrate fees for using a valid referral address\n  }\n\n  function setDev(address payable _devaddr) external;\n\n  /**\n   * @notice set the migrator contract which allows locked lp tokens to be migrated to uniswap v3\n   */\n  function setMigrator(IMigrator _migrator) external;\n\n  function setSecondaryFeeToken(address _secondaryFeeToken) external;\n\n  /**\n   * @notice referrers need to hold the specified token and hold amount to be elegible for referral fees\n   */\n  function setReferralTokenAndHold(\n    IERCBurn _referralToken,\n    uint256 _hold\n  ) external;\n\n  function setFees(\n    uint256 _referralPercent,\n    uint256 _referralDiscount,\n    uint256 _ethFee,\n    uint256 _secondaryTokenFee,\n    uint256 _secondaryTokenDiscount,\n    uint256 _liquidityFee\n  ) external;\n\n  /**\n   * @notice whitelisted accounts dont pay flatrate fees on locking\n   */\n  function whitelistFeeAccount(address _user, bool _add) external;\n\n  /**\n   * @notice Creates a new lock\n   * @param _lpToken the univ2 token address\n   * @param _amount amount of LP tokens to lock\n   * @param _unlock_date the unix timestamp (in seconds) until unlock\n   * @param _referral the referrer address if any or address(0) for none\n   * @param _fee_in_eth fees can be paid in eth or in a secondary token such as UNCX with a discount on univ2 tokens\n   * @param _withdrawer the user who can withdraw liquidity once the lock expires.\n   */\n  function lockLPToken(\n    address _lpToken,\n    uint256 _amount,\n    uint256 _unlock_date,\n    address payable _referral,\n    bool _fee_in_eth,\n    address payable _withdrawer\n  ) external payable;\n\n  /**\n   * @notice extend a lock with a new unlock date, _index and _lockID ensure the correct lock is changed\n   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\n   */\n  function relock(\n    address _lpToken,\n    uint256 _index,\n    uint256 _lockID,\n    uint256 _unlock_date\n  ) external;\n\n  /**\n   * @notice withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed\n   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\n   */\n  function withdraw(\n    address _lpToken,\n    uint256 _index,\n    uint256 _lockID,\n    uint256 _amount\n  ) external;\n\n  /**\n   * @notice increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees, and faster loading on our live block explorer\n   */\n  function incrementLock(\n    address _lpToken,\n    uint256 _index,\n    uint256 _lockID,\n    uint256 _amount\n  ) external;\n\n  /**\n   * @notice split a lock into two seperate locks, useful when a lock is about to expire and youd like to relock a portion\n   * and withdraw a smaller portion\n   */\n  function splitLock(\n    address _lpToken,\n    uint256 _index,\n    uint256 _lockID,\n    uint256 _amount\n  ) external payable;\n\n  /**\n   * @notice transfer a lock to a new owner, e.g. presale project -> project owner\n   */\n  function transferLockOwnership(\n    address _lpToken,\n    uint256 _index,\n    uint256 _lockID,\n    address payable _newOwner\n  ) external;\n\n  /**\n   * @notice migrates liquidity to uniswap v3\n   */\n  function migrate(\n    address _lpToken,\n    uint256 _index,\n    uint256 _lockID,\n    uint256 _amount\n  ) external;\n\n  function getNumLocksForToken(\n    address _lpToken\n  ) external view returns (uint256);\n\n  function getNumLockedTokens() external view returns (uint256);\n\n  function getLockedTokenAtIndex(\n    uint256 _index\n  ) external view returns (address);\n\n  // user functions\n  function getUserNumLockedTokens(\n    address _user\n  ) external view returns (uint256);\n\n  function getUserLockedTokenAtIndex(\n    address _user,\n    uint256 _index\n  ) external view returns (address);\n\n  function getUserNumLocksForToken(\n    address _user,\n    address _lpToken\n  ) external view returns (uint256);\n\n  function getUserLockForTokenAtIndex(\n    address _user,\n    address _lpToken,\n    uint256 _index\n  )\n    external\n    view\n    returns (uint256, uint256, uint256, uint256, uint256, address);\n\n  // whitelist\n  function getWhitelistedUsersLength() external view returns (uint256);\n\n  function getWhitelistedUserAtIndex(\n    uint256 _index\n  ) external view returns (address);\n\n  function getUserWhitelistStatus(address _user) external view returns (bool);\n}\n\n// File contracts/ThirdParty/WETH/IWETH.sol\n\npragma solidity 0.8.21;\n\ninterface IWETH is IERC20 {\n  function deposit() external payable;\n\n  function withdraw(uint256 wad) external;\n}\n\n// File contracts/ERC20Factory/ERC20/ERC20ByMetadrop.sol\n\n// Metadrop Contracts (v2.1.0)\n\npragma solidity 0.8.21;\n\n/**\n * @dev Metadrop core ERC-20 contract\n *\n * @dev Implementation of the {IERC20} interface.\n *\n */\ncontract ERC20ByMetadrop is Context, IERC20ByMetadrop, Ownable2Step {\n  bytes32 public constant x_META_ID_HASH =\n    0x27412226711d13eb9bb221b603ebc6c9865228d2e2778cbd99c7f90719615f3f;\n\n  using EnumerableSet for EnumerableSet.AddressSet;\n  using EnumerableSet for EnumerableSet.Bytes32Set;\n  using SafeERC20 for IERC20;\n\n  uint256 public constant x_CONST_VERSION = 100020001000000000;\n  uint256 internal constant CONST_BP_DENOM = 10000;\n  uint256 internal constant CONST_ROUND_DEC = 100000000000;\n  uint256 internal constant CONST_CALL_GAS_LIMIT = 50000;\n  uint256 internal constant CONST_MAX_SWAP_THRESHOLD_MULTIPLE = 20;\n\n  uint256 public immutable lpSupply;\n  uint256 public immutable projectSupply;\n  uint256 public immutable botProtectionDurationInSeconds;\n  address public immutable metadropTaxRecipient;\n  address public immutable uniswapV2Pair;\n  address public immutable driPool;\n  address public immutable lpOwner;\n  address public immutable projectSupplyRecipient;\n  address public immutable metadropFactory;\n  uint256 public immutable metadropTaxPeriodInDays;\n  bool internal immutable _tokenHasTax;\n  IUniswapV2Locker internal immutable _tokenVault;\n  IUniswapV2Router02 internal immutable _uniswapRouter;\n  VaultType public immutable vaultType;\n\n  /** @dev {Storage Slot 1} Vars read as part of transfers packed to a single\n   * slot for warm reads.\n   *   Slot 1:\n   *      128\n   *       32\n   *   16 * 5\n   *    8 * 2\n   *   ------\n   *      256\n   *   ------ */\n  uint128 private _totalSupply;\n  uint32 public fundedDate;\n  uint16 public projectBuyTaxBasisPoints;\n  uint16 public projectSellTaxBasisPoints;\n  uint16 public metadropBuyTaxBasisPoints;\n  uint16 public metadropSellTaxBasisPoints;\n  uint16 public swapThresholdBasisPoints;\n  /** @dev {_autoSwapInProgress} We start with {_autoSwapInProgress} ON, as we don't want to\n   * call autoswap when processing initial liquidity from this address. We turn this OFF when\n   * liquidity has been loaded, and use this bool to control processing during auto-swaps\n   * from that point onwards. */\n  bool private _autoSwapInProgress = true;\n\n  /** @dev {Storage Slot 2} Vars read as part of transfers packed to a single\n   * slot for warm reads.\n   *   Slot 1:\n   *      128\n   *      128\n   *   ------\n   *      256\n   *   ------ */\n  uint128 public maxTokensPerTransaction;\n  uint128 public maxTokensPerWallet;\n\n  /** @dev {Storage Slot 3} Not read / written in transfers (unless autoswap taking place):\n   *      160\n   *       88\n   *        8\n   *   ------\n   *      256\n   *   ------ */\n  address public projectTaxRecipient;\n  uint88 public lpLockupInDays;\n  bool public burnLPTokens;\n\n  /** @dev {Storage Slot 4} Potentially written in transfers:\n   *   Slot 3:\n   *      128\n   *      128\n   *   ------\n   *      256\n   *   ------ */\n  uint128 public projectTaxPendingSwap;\n  uint128 public metadropTaxPendingSwap;\n\n  /** @dev {Storage Slot 5 to n} Not read as part of transfers etc. */\n  string private _name;\n  string private _symbol;\n\n  /** @dev {_balances} Addresses balances */\n  mapping(address => uint256) private _balances;\n\n  /** @dev {_allowances} Addresses allocance details */\n  mapping(address => mapping(address => uint256)) private _allowances;\n\n  /** @dev {_validCallerCodeHashes} Code hashes of callers we consider valid */\n  EnumerableSet.Bytes32Set private _validCallerCodeHashes;\n\n  /** @dev {_liquidityPools} Enumerable set for liquidity pool addresses */\n  EnumerableSet.AddressSet private _liquidityPools;\n\n  /** @dev {_unlimited} Enumerable set for addresses where limits do not apply */\n  EnumerableSet.AddressSet private _unlimited;\n\n  /**\n   * @dev {constructor}\n   *\n   * @param integrationAddresses_ The project owner, uniswap router, unicrypt vault, metadrop factory and pool template.\n   * @param baseParams_ configuration of this ERC20.\n   * @param supplyParams_ Supply configuration of this ERC20.\n   * @param taxParams_  Tax configuration of this ERC20\n   * @param taxParams_  Launch pool configuration of this ERC20\n   */\n  constructor(\n    address[5] memory integrationAddresses_,\n    bytes memory baseParams_,\n    bytes memory supplyParams_,\n    bytes memory taxParams_,\n    bytes memory poolParams_\n  ) {\n    _decodeBaseParams(integrationAddresses_[0], baseParams_);\n    _uniswapRouter = IUniswapV2Router02(integrationAddresses_[1]);\n    _tokenVault = IUniswapV2Locker(integrationAddresses_[2]);\n    metadropFactory = (integrationAddresses_[3]);\n\n    ERC20SupplyParameters memory supplyParams = abi.decode(\n      supplyParams_,\n      (ERC20SupplyParameters)\n    );\n\n    ERC20TaxParameters memory taxParams = abi.decode(\n      taxParams_,\n      (ERC20TaxParameters)\n    );\n\n    driPool = integrationAddresses_[4];\n\n    ERC20PoolParameters memory poolParams;\n\n    if (integrationAddresses_[4] != address(0)) {\n      poolParams = abi.decode(poolParams_, (ERC20PoolParameters));\n    }\n\n    _processSupplyParams(supplyParams, poolParams);\n    projectSupplyRecipient = supplyParams.projectSupplyRecipient;\n    lpSupply = supplyParams.lpSupply * (10 ** decimals());\n    projectSupply = supplyParams.projectSupply * (10 ** decimals());\n    maxTokensPerWallet = uint128(\n      supplyParams.maxTokensPerWallet * (10 ** decimals())\n    );\n    maxTokensPerTransaction = uint128(\n      supplyParams.maxTokensPerTxn * (10 ** decimals())\n    );\n    lpLockupInDays = uint88(supplyParams.lpLockupInDays);\n    botProtectionDurationInSeconds = supplyParams\n      .botProtectionDurationInSeconds;\n    lpOwner = supplyParams.projectLPOwner;\n    burnLPTokens = supplyParams.burnLPTokens;\n\n    _tokenHasTax = _processTaxParams(taxParams);\n    metadropTaxPeriodInDays = taxParams.metadropTaxPeriodInDays;\n    swapThresholdBasisPoints = uint16(taxParams.taxSwapThresholdBasisPoints);\n    projectTaxRecipient = taxParams.projectTaxRecipient;\n    metadropTaxRecipient = taxParams.metadropTaxRecipient;\n\n    vaultType = VaultType.unicrypt;\n\n    _mintBalances(\n      lpSupply,\n      projectSupply,\n      poolParams.poolSupply * (10 ** decimals())\n    );\n\n    uniswapV2Pair = _createPair();\n  }\n\n  /**\n   * @dev {onlyOwnerFactoryOrPool}\n   *\n   * Throws if called by any account other than the owner, factory or pool.\n   */\n  modifier onlyOwnerFactoryOrPool() {\n    if (\n      metadropFactory != _msgSender() &&\n      owner() != _msgSender() &&\n      driPool != _msgSender()\n    ) {\n      _revert(CallerIsNotFactoryProjectOwnerOrPool.selector);\n    }\n    _;\n  }\n\n  /**\n   * @dev function {_decodeBaseParams}\n   *\n   * Decode NFT Parameters\n   *\n   * @param projectOwner_ The owner of this contract\n   * @param encodedBaseParams_ The base params encoded into a bytes array\n   */\n  function _decodeBaseParams(\n    address projectOwner_,\n    bytes memory encodedBaseParams_\n  ) internal {\n    _transferOwnership(projectOwner_);\n\n    (_name, _symbol) = abi.decode(encodedBaseParams_, (string, string));\n  }\n\n  /**\n   * @dev function {_processSupplyParams}\n   *\n   * Process provided supply params\n   *\n   * @param erc20SupplyParameters_ The supply params\n   * @param erc20PoolParameters_ The pool params\n   */\n  function _processSupplyParams(\n    ERC20SupplyParameters memory erc20SupplyParameters_,\n    ERC20PoolParameters memory erc20PoolParameters_\n  ) internal {\n    if (\n      erc20SupplyParameters_.maxSupply !=\n      (erc20SupplyParameters_.lpSupply +\n        erc20SupplyParameters_.projectSupply +\n        erc20PoolParameters_.poolSupply)\n    ) {\n      _revert(SupplyTotalMismatch.selector);\n    }\n\n    if (erc20SupplyParameters_.maxSupply > type(uint128).max) {\n      _revert(MaxSupplyTooHigh.selector);\n    }\n\n    if (erc20SupplyParameters_.lpLockupInDays > type(uint88).max) {\n      _revert(LPLockUpMustFitUint88.selector);\n    }\n\n    _unlimited.add(erc20SupplyParameters_.projectSupplyRecipient);\n    _unlimited.add(address(this));\n    _unlimited.add(address(0));\n  }\n\n  /**\n   * @dev function {_processTaxParams}\n   *\n   * Process provided tax params\n   *\n   * @param erc20TaxParameters_ The tax params\n   */\n  function _processTaxParams(\n    ERC20TaxParameters memory erc20TaxParameters_\n  ) internal returns (bool tokenHasTax_) {\n    /**\n     * @dev We use the immutable var {_tokenHasTax} to avoid unneccesary storage writes and reads. If this\n     * token does NOT have tax applied then there is no need to store or read these parameters, and we can\n     * avoid this simply by checking the immutable var. Pass back the value for this var from this method.\n     */\n    if (\n      erc20TaxParameters_.projectBuyTaxBasisPoints == 0 &&\n      erc20TaxParameters_.projectSellTaxBasisPoints == 0 &&\n      erc20TaxParameters_.metadropBuyTaxBasisPoints == 0 &&\n      erc20TaxParameters_.metadropSellTaxBasisPoints == 0\n    ) {\n      return false;\n    } else {\n      projectBuyTaxBasisPoints = uint16(\n        erc20TaxParameters_.projectBuyTaxBasisPoints\n      );\n      projectSellTaxBasisPoints = uint16(\n        erc20TaxParameters_.projectSellTaxBasisPoints\n      );\n      metadropBuyTaxBasisPoints = uint16(\n        erc20TaxParameters_.metadropBuyTaxBasisPoints\n      );\n      metadropSellTaxBasisPoints = uint16(\n        erc20TaxParameters_.metadropSellTaxBasisPoints\n      );\n      return true;\n    }\n  }\n\n  /**\n   * @dev function {_mintBalances}\n   *\n   * Mint initial balances\n   *\n   * @param lpMint_ The number of tokens for liquidity\n   * @param projectMint_ The number of tokens for the project treasury\n   * @param poolMint_ The number of tokens for the launch pool\n   */\n  function _mintBalances(\n    uint256 lpMint_,\n    uint256 projectMint_,\n    uint256 poolMint_\n  ) internal {\n    if (lpMint_ > 0) {\n      _mint(address(this), lpMint_);\n    }\n\n    if (projectMint_ > 0) {\n      _mint(projectSupplyRecipient, projectMint_);\n    }\n\n    if (poolMint_ > 0) {\n      _mint(driPool, poolMint_);\n    }\n  }\n\n  /**\n   * @dev function {_createPair}\n   *\n   * Create the uniswap pair\n   *\n   * @return uniswapV2Pair_ The pair address\n   */\n  function _createPair() internal returns (address uniswapV2Pair_) {\n    if (_totalSupply > 0) {\n      uniswapV2Pair_ = IUniswapV2Factory(_uniswapRouter.factory()).createPair(\n        address(this),\n        _uniswapRouter.WETH()\n      );\n\n      _liquidityPools.add(uniswapV2Pair_);\n      emit LiquidityPoolCreated(uniswapV2Pair_);\n    }\n    _unlimited.add(address(_uniswapRouter));\n    _unlimited.add(uniswapV2Pair_);\n    return (uniswapV2Pair_);\n  }\n\n  /**\n   * @dev function {addInitialLiquidity}\n   *\n   * Add initial liquidity to the uniswap pair\n   *\n   * @param vaultFee_ The vault fee in wei. This must match the required fee from the external vault contract.\n   * @param lpLockupInDaysOverride_ The number of days to lock liquidity NOTE you can pass 0 to use the stored value.\n   * This value is an override, and will override a stored value which is LOWER that it. If the value you are passing is\n   * LOWER than the stored value the stored value will not be reduced.\n   *\n   * Example usage 1: When creating the coin the lpLockupInDays is set to 0. This means that on this call the\n   * user can set the lockup to any value they like, as all integer values greater than zero will be used to override\n   * that set in storage.\n   *\n   * Example usage 2: When using a DRI Pool the lockup period is set on this contract and the pool need not know anything\n   * about this setting. The pool can pass back a 0 on this call and know that the existing value stored on this contract\n   * will be used.\n   * @param burnLPTokensOverride_ If the LP tokens should be burned (otherwise they are locked). This is an override field\n   * that can ONLY be used to override a held value of FALSE with a new value of TRUE.\n   *\n   * Example usage 1: When creating the coin the user didn't add liquidity, or specify that the LP tokens were to be burned.\n   * So burnLPTokens is held as FALSE. When they add liquidity they want to lock tokens, so they pass this in as FALSE again,\n   * and it remains FALSE.\n   *\n   * Example usage 2: As above, but when later adding liquidity the user wants to burn the LP. So the stored value is FALSE\n   * and the user passes TRUE into this method. The TRUE overrides the held value of FALSE and the tokens are burned.\n   *\n   * Example uusage 3: The user is using a DRI pool and they have specified on the coin creation that the LP tokens are to\n   * be burned. This contract therefore holds TRUE for burnLPTokens. The DRI pool does not need to know what the user has\n   * selected. It can safely pass back FALSE to this method call and the stored value of TRUE will remain, resulting in the\n   * LP tokens being burned.\n   */\n  function addInitialLiquidity(\n    uint256 vaultFee_,\n    uint256 lpLockupInDaysOverride_,\n    bool burnLPTokensOverride_\n  ) external payable onlyOwnerFactoryOrPool {\n    uint256 ethForLiquidity;\n\n    if ((burnLPTokens == false) && (burnLPTokensOverride_ == true)) {\n      burnLPTokens = true;\n    }\n\n    if (burnLPTokens) {\n      if (msg.value == 0) {\n        _revert(NoETHForLiquidityPair.selector);\n      }\n      ethForLiquidity = msg.value;\n    } else {\n      if (vaultFee_ >= msg.value) {\n        // The amount of ETH MUST exceed the vault fee, otherwise what liquidity are we adding?\n        _revert(NoETHForLiquidityPair.selector);\n      }\n      ethForLiquidity = msg.value - vaultFee_;\n    }\n\n    if (lpLockupInDaysOverride_ > lpLockupInDays) {\n      lpLockupInDays = uint88(lpLockupInDaysOverride_);\n    }\n\n    _addInitialLiquidity(ethForLiquidity, vaultFee_);\n  }\n\n  /**\n   * @dev function {_addInitialLiquidity}\n   *\n   * Add initial liquidity to the uniswap pair (internal function that does processing)\n   *\n   * @param ethAmount_ The amount of ETH passed into the call\n   * @param vaultFee_ The vault fee in wei. This must match the required fee from the external vault contract.\n   */\n  function _addInitialLiquidity(\n    uint256 ethAmount_,\n    uint256 vaultFee_\n  ) internal {\n    // Funded date is the date of first funding. We can only add initial liquidity once. If this date is set,\n    // we cannot proceed\n    if (fundedDate != 0) {\n      _revert(InitialLiquidityAlreadyAdded.selector);\n    }\n\n    fundedDate = uint32(block.timestamp);\n\n    // Can only do this if this contract holds tokens:\n    if (balanceOf(address(this)) == 0) {\n      _revert(NoTokenForLiquidityPair.selector);\n    }\n\n    // Approve the uniswap router for an inifinite amount (max uint256)\n    // This means that we don't need to worry about later incrememtal\n    // approvals on tax swaps, as the uniswap router allowance will never\n    // be decreased (see code in decreaseAllowance for reference)\n    _approve(address(this), address(_uniswapRouter), type(uint256).max);\n\n    // Add the liquidity:\n    (uint256 amountA, uint256 amountB, uint256 lpTokens) = _uniswapRouter\n      .addLiquidityETH{value: ethAmount_}(\n      address(this),\n      balanceOf(address(this)),\n      0,\n      0,\n      address(this),\n      block.timestamp\n    );\n\n    emit InitialLiquidityAdded(amountA, amountB, lpTokens);\n\n    // We now set this to false so that future transactions can be eligibile for autoswaps\n    _autoSwapInProgress = false;\n\n    // Are we locking, or burning?\n    if (burnLPTokens) {\n      _burnLiquidity(lpTokens);\n    } else {\n      // Lock the liquidity:\n      _addLiquidityToVault(vaultFee_, lpTokens);\n    }\n  }\n\n  /**\n   * @dev function {_addLiquidityToVault}\n   *\n   * Lock initial liquidity on vault contract\n   *\n   * @param vaultFee_ The vault fee in wei. This must match the required fee from the external vault contract.\n   * @param lpTokens_ The amount of LP tokens to be locked\n   */\n  function _addLiquidityToVault(uint256 vaultFee_, uint256 lpTokens_) internal {\n    IERC20(uniswapV2Pair).approve(address(_tokenVault), lpTokens_);\n\n    _tokenVault.lockLPToken{value: vaultFee_}(\n      uniswapV2Pair,\n      IERC20(uniswapV2Pair).balanceOf(address(this)),\n      block.timestamp + (lpLockupInDays * 1 days),\n      payable(address(0)),\n      true,\n      payable(lpOwner)\n    );\n\n    emit LiquidityLocked(lpTokens_, lpLockupInDays);\n  }\n\n  /**\n   * @dev function {_burnLiquidity}\n   *\n   * Burn LP tokens\n   *\n   * @param lpTokens_ The amount of LP tokens to be locked\n   */\n  function _burnLiquidity(uint256 lpTokens_) internal {\n    IERC20(uniswapV2Pair).transfer(address(0), lpTokens_);\n\n    emit LiquidityBurned(lpTokens_);\n  }\n\n  /**\n   * @dev function {isLiquidityPool}\n   *\n   * Return if an address is a liquidity pool\n   *\n   * @param queryAddress_ The address being queried\n   * @return bool The address is / isn't a liquidity pool\n   */\n  function isLiquidityPool(address queryAddress_) public view returns (bool) {\n    /** @dev We check the uniswapV2Pair address first as this is an immutable variable and therefore does not need\n     * to be fetched from storage, saving gas if this address IS the uniswapV2Pool. We also add this address\n     * to the enumerated set for ease of reference (for example it is returned in the getter), and it does\n     * not add gas to any other calls, that still complete in 0(1) time.\n     */\n    return (queryAddress_ == uniswapV2Pair ||\n      _liquidityPools.contains(queryAddress_));\n  }\n\n  /**\n   * @dev function {liquidityPools}\n   *\n   * Returns a list of all liquidity pools\n   *\n   * @return liquidityPools_ a list of all liquidity pools\n   */\n  function liquidityPools()\n    external\n    view\n    returns (address[] memory liquidityPools_)\n  {\n    return (_liquidityPools.values());\n  }\n\n  /**\n   * @dev function {addLiquidityPool} onlyOwner\n   *\n   * Allows the manager to add a liquidity pool to the pool enumerable set\n   *\n   * @param newLiquidityPool_ The address of the new liquidity pool\n   */\n  function addLiquidityPool(address newLiquidityPool_) public onlyOwner {\n    // Don't allow calls that didn't pass an address:\n    if (newLiquidityPool_ == address(0)) {\n      _revert(LiquidityPoolCannotBeAddressZero.selector);\n    }\n    // Only allow smart contract addresses to be added, as only these can be pools:\n    if (newLiquidityPool_.code.length == 0) {\n      _revert(LiquidityPoolMustBeAContractAddress.selector);\n    }\n    // Add this to the enumerated list:\n    _liquidityPools.add(newLiquidityPool_);\n    emit LiquidityPoolAdded(newLiquidityPool_);\n  }\n\n  /**\n   * @dev function {removeLiquidityPool} onlyOwner\n   *\n   * Allows the manager to remove a liquidity pool\n   *\n   * @param removedLiquidityPool_ The address of the old removed liquidity pool\n   */\n  function removeLiquidityPool(\n    address removedLiquidityPool_\n  ) external onlyOwner {\n    // Remove this from the enumerated list:\n    _liquidityPools.remove(removedLiquidityPool_);\n    emit LiquidityPoolRemoved(removedLiquidityPool_);\n  }\n\n  /**\n   * @dev function {isUnlimited}\n   *\n   * Return if an address is unlimited (is not subject to per txn and per wallet limits)\n   *\n   * @param queryAddress_ The address being queried\n   * @return bool The address is / isn't unlimited\n   */\n  function isUnlimited(address queryAddress_) public view returns (bool) {\n    return (_unlimited.contains(queryAddress_));\n  }\n\n  /**\n   * @dev function {unlimitedAddresses}\n   *\n   * Returns a list of all unlimited addresses\n   *\n   * @return unlimitedAddresses_ a list of all unlimited addresses\n   */\n  function unlimitedAddresses()\n    external\n    view\n    returns (address[] memory unlimitedAddresses_)\n  {\n    return (_unlimited.values());\n  }\n\n  /**\n   * @dev function {addUnlimited} onlyOwner\n   *\n   * Allows the manager to add an unlimited address\n   *\n   * @param newUnlimited_ The address of the new unlimited address\n   */\n  function addUnlimited(address newUnlimited_) external onlyOwner {\n    // Add this to the enumerated list:\n    _unlimited.add(newUnlimited_);\n    emit UnlimitedAddressAdded(newUnlimited_);\n  }\n\n  /**\n   * @dev function {removeUnlimited} onlyOwner\n   *\n   * Allows the manager to remove an unlimited address\n   *\n   * @param removedUnlimited_ The address of the old removed unlimited address\n   */\n  function removeUnlimited(address removedUnlimited_) external onlyOwner {\n    // Remove this from the enumerated list:\n    _unlimited.remove(removedUnlimited_);\n    emit UnlimitedAddressRemoved(removedUnlimited_);\n  }\n\n  /**\n   * @dev function {isValidCaller}\n   *\n   * Return if an address is a valid caller\n   *\n   * @param queryHash_ The code hash being queried\n   * @return bool The address is / isn't a valid caller\n   */\n  function isValidCaller(bytes32 queryHash_) public view returns (bool) {\n    return (_validCallerCodeHashes.contains(queryHash_));\n  }\n\n  /**\n   * @dev function {validCallers}\n   *\n   * Returns a list of all valid caller code hashes\n   *\n   * @return validCallerHashes_ a list of all valid caller code hashes\n   */\n  function validCallers()\n    external\n    view\n    returns (bytes32[] memory validCallerHashes_)\n  {\n    return (_validCallerCodeHashes.values());\n  }\n\n  /**\n   * @dev function {addValidCaller} onlyOwner\n   *\n   * Allows the owner to add the hash of a valid caller\n   *\n   * @param newValidCallerHash_ The hash of the new valid caller\n   */\n  function addValidCaller(bytes32 newValidCallerHash_) external onlyOwner {\n    _validCallerCodeHashes.add(newValidCallerHash_);\n    emit ValidCallerAdded(newValidCallerHash_);\n  }\n\n  /**\n   * @dev function {removeValidCaller} onlyOwner\n   *\n   * Allows the owner to remove a valid caller\n   *\n   * @param removedValidCallerHash_ The hash of the old removed valid caller\n   */\n  function removeValidCaller(\n    bytes32 removedValidCallerHash_\n  ) external onlyOwner {\n    // Remove this from the enumerated list:\n    _validCallerCodeHashes.remove(removedValidCallerHash_);\n    emit ValidCallerRemoved(removedValidCallerHash_);\n  }\n\n  /**\n   * @dev function {setProjectTaxRecipient} onlyOwner\n   *\n   * Allows the manager to set the project tax recipient address\n   *\n   * @param projectTaxRecipient_ New recipient address\n   */\n  function setProjectTaxRecipient(\n    address projectTaxRecipient_\n  ) external onlyOwner {\n    projectTaxRecipient = projectTaxRecipient_;\n    emit ProjectTaxRecipientUpdated(projectTaxRecipient_);\n  }\n\n  /**\n   * @dev function {setSwapThresholdBasisPoints} onlyOwner\n   *\n   * Allows the manager to set the autoswap threshold\n   *\n   * @param swapThresholdBasisPoints_ New swap threshold in basis points\n   */\n  function setSwapThresholdBasisPoints(\n    uint16 swapThresholdBasisPoints_\n  ) external onlyOwner {\n    uint256 oldswapThresholdBasisPoints = swapThresholdBasisPoints;\n    swapThresholdBasisPoints = swapThresholdBasisPoints_;\n    emit AutoSwapThresholdUpdated(\n      oldswapThresholdBasisPoints,\n      swapThresholdBasisPoints_\n    );\n  }\n\n  /**\n   * @dev function {setProjectTaxRates} onlyOwner\n   *\n   * Change the tax rates, subject to only ever decreasing\n   *\n   * @param newProjectBuyTaxBasisPoints_ The new buy tax rate\n   * @param newProjectSellTaxBasisPoints_ The new sell tax rate\n   */\n  function setProjectTaxRates(\n    uint16 newProjectBuyTaxBasisPoints_,\n    uint16 newProjectSellTaxBasisPoints_\n  ) external onlyOwner {\n    uint16 oldBuyTaxBasisPoints = projectBuyTaxBasisPoints;\n    uint16 oldSellTaxBasisPoints = projectSellTaxBasisPoints;\n\n    // Cannot increase, down only\n    if (newProjectBuyTaxBasisPoints_ > oldBuyTaxBasisPoints) {\n      _revert(CanOnlyReduce.selector);\n    }\n    // Cannot increase, down only\n    if (newProjectSellTaxBasisPoints_ > oldSellTaxBasisPoints) {\n      _revert(CanOnlyReduce.selector);\n    }\n\n    projectBuyTaxBasisPoints = newProjectBuyTaxBasisPoints_;\n    projectSellTaxBasisPoints = newProjectSellTaxBasisPoints_;\n\n    // If either rate has been reduced to zero we set the metadrop tax rate\n    // (if non zero) to zero as well:\n    if (\n      newProjectBuyTaxBasisPoints_ == 0 || newProjectSellTaxBasisPoints_ == 0\n    ) {\n      uint16 oldMetadropBuyTaxBasisPoints = metadropBuyTaxBasisPoints;\n      uint16 oldMetadropSellTaxBasisPoints = metadropSellTaxBasisPoints;\n      uint16 newMetadropBuyTaxBasisPoints = oldMetadropBuyTaxBasisPoints;\n      uint16 newMetadropSellTaxBasisPoints = oldMetadropSellTaxBasisPoints;\n\n      if (newProjectBuyTaxBasisPoints_ == 0) {\n        newMetadropBuyTaxBasisPoints = 0;\n        metadropBuyTaxBasisPoints = 0;\n      }\n      if (newProjectSellTaxBasisPoints_ == 0) {\n        newMetadropSellTaxBasisPoints = 0;\n        metadropSellTaxBasisPoints = 0;\n      }\n\n      emit MetadropTaxBasisPointsChanged(\n        oldMetadropBuyTaxBasisPoints,\n        newMetadropBuyTaxBasisPoints,\n        oldMetadropSellTaxBasisPoints,\n        newMetadropSellTaxBasisPoints\n      );\n    }\n\n    emit ProjectTaxBasisPointsChanged(\n      oldBuyTaxBasisPoints,\n      newProjectBuyTaxBasisPoints_,\n      oldSellTaxBasisPoints,\n      newProjectSellTaxBasisPoints_\n    );\n  }\n\n  /**\n   * @dev function {setLimits} onlyOwner\n   *\n   * Change the limits on transactions and holdings\n   *\n   * @param newMaxTokensPerTransaction_ The new per txn limit\n   * @param newMaxTokensPerWallet_ The new tokens per wallet limit\n   */\n  function setLimits(\n    uint256 newMaxTokensPerTransaction_,\n    uint256 newMaxTokensPerWallet_\n  ) external onlyOwner {\n    uint256 oldMaxTokensPerTransaction = maxTokensPerTransaction;\n    uint256 oldMaxTokensPerWallet = maxTokensPerWallet;\n    // Limit can only be increased:\n    if (\n      (oldMaxTokensPerTransaction == 0 && newMaxTokensPerTransaction_ != 0) ||\n      (oldMaxTokensPerWallet == 0 && newMaxTokensPerWallet_ != 0)\n    ) {\n      _revert(LimitsCanOnlyBeRaised.selector);\n    }\n    if (\n      ((newMaxTokensPerTransaction_ != 0) &&\n        newMaxTokensPerTransaction_ < oldMaxTokensPerTransaction) ||\n      ((newMaxTokensPerWallet_ != 0) &&\n        newMaxTokensPerWallet_ < oldMaxTokensPerWallet)\n    ) {\n      _revert(LimitsCanOnlyBeRaised.selector);\n    }\n\n    maxTokensPerTransaction = uint128(newMaxTokensPerTransaction_);\n    maxTokensPerWallet = uint128(newMaxTokensPerWallet_);\n\n    emit LimitsUpdated(\n      oldMaxTokensPerTransaction,\n      newMaxTokensPerTransaction_,\n      oldMaxTokensPerWallet,\n      newMaxTokensPerWallet_\n    );\n  }\n\n  /**\n   * @dev function {limitsEnforced}\n   *\n   * Return if limits are enforced on this contract\n   *\n   * @return bool : they are / aren't\n   */\n  function limitsEnforced() public view returns (bool) {\n    // Limits are not enforced if\n    // this is renounced AND after then protection end date\n    // OR prior to LP funding:\n    // The second clause of 'fundedDate == 0' isn't strictly needed, since with a funded\n    // date of 0 we would always expect the block.timestamp to be less than 0 plus\n    // the botProtectionDurationInSeconds. But, to cover the miniscule chance of a user\n    // selecting a truly enormous bot protection period, such that when added to 0 it\n    // is more than the current block.timestamp, we have included this second clause. There\n    // is no permanent gas overhead (the logic will be returning from the first clause after\n    // the bot protection period has expired). During the bot protection period there is a minor\n    // gas overhead from evaluating the fundedDate == 0 (which will be false), but this is minimal.\n    if (\n      (owner() == address(0) &&\n        block.timestamp > fundedDate + botProtectionDurationInSeconds) ||\n      fundedDate == 0\n    ) {\n      return false;\n    } else {\n      // LP has been funded AND we are within the protection period:\n      return true;\n    }\n  }\n\n  /**\n   * @dev Returns the name of the token.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev Returns the symbol of the token, usually a shorter version of the\n   * name.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns the number of decimals used to get its user representation.\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n   *\n   * Tokens usually opt for a value of 18, imitating the relationship between\n   * Ether and Wei. This is the default value returned by this function, unless\n   * it's overridden.\n   *\n   * NOTE: This information is only used for _display_ purposes: it in\n   * no way affects any of the arithmetic of the contract, including\n   * {IERC20-balanceOf} and {IERC20-transfer}.\n   */\n  function decimals() public view virtual override returns (uint8) {\n    return 18;\n  }\n\n  /**\n   * @dev See {IERC20-totalSupply}.\n   */\n  function totalSupply() public view virtual override returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev getMetadropBuyTaxBasisPoints\n   *\n   * Return the metadrop buy tax basis points given the timed expiry\n   */\n  function getMetadropBuyTaxBasisPoints() public view returns (uint256) {\n    // If we are outside the metadrop tax period this is ZERO\n    if (block.timestamp > (fundedDate + (metadropTaxPeriodInDays * 1 days))) {\n      return 0;\n    } else {\n      return metadropBuyTaxBasisPoints;\n    }\n  }\n\n  /**\n   * @dev getMetadropSellTaxBasisPoints\n   *\n   * Return the metadrop sell tax basis points given the timed expiry\n   */\n  function getMetadropSellTaxBasisPoints() public view returns (uint256) {\n    // If we are outside the metadrop tax period this is ZERO\n    if (block.timestamp > (fundedDate + (metadropTaxPeriodInDays * 1 days))) {\n      return 0;\n    } else {\n      return metadropSellTaxBasisPoints;\n    }\n  }\n\n  /**\n   * @dev totalBuyTaxBasisPoints\n   *\n   * Provide easy to view tax total:\n   */\n  function totalBuyTaxBasisPoints() public view returns (uint256) {\n    return projectBuyTaxBasisPoints + getMetadropBuyTaxBasisPoints();\n  }\n\n  /**\n   * @dev totalSellTaxBasisPoints\n   *\n   * Provide easy to view tax total:\n   */\n  function totalSellTaxBasisPoints() public view returns (uint256) {\n    return projectSellTaxBasisPoints + getMetadropSellTaxBasisPoints();\n  }\n\n  /**\n   * @dev See {IERC20-balanceOf}.\n   */\n  function balanceOf(\n    address account\n  ) public view virtual override returns (uint256) {\n    return _balances[account];\n  }\n\n  /**\n   * @dev See {IERC20-transfer}.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   */\n  function transfer(\n    address to,\n    uint256 amount\n  ) public virtual override(IERC20) returns (bool) {\n    address owner = _msgSender();\n    _transfer(\n      owner,\n      to,\n      amount,\n      (isLiquidityPool(owner) || isLiquidityPool(to))\n    );\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-allowance}.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) public view virtual override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  /**\n   * @dev See {IERC20-approve}.\n   *\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function approve(\n    address spender,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address owner = _msgSender();\n    _approve(owner, spender, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-transferFrom}.\n   *\n   * Emits an {Approval} event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of {ERC20}.\n   *\n   * NOTE: Does not update the allowance if the current allowance\n   * is the maximum `uint256`.\n   *\n   * Requirements:\n   *\n   * - `from` and `to` cannot be the zero address.\n   * - `from` must have a balance of at least `amount`.\n   * - the caller must have allowance for ``from``'s tokens of at least\n   * `amount`.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address spender = _msgSender();\n    _spendAllowance(from, spender, amount);\n    _transfer(from, to, amount, (isLiquidityPool(from) || isLiquidityPool(to)));\n    return true;\n  }\n\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  ) public virtual returns (bool) {\n    address owner = _msgSender();\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\n    return true;\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  ) public virtual returns (bool) {\n    address owner = _msgSender();\n    uint256 currentAllowance = allowance(owner, spender);\n    if (currentAllowance < subtractedValue) {\n      _revert(AllowanceDecreasedBelowZero.selector);\n    }\n    unchecked {\n      _approve(owner, spender, currentAllowance - subtractedValue);\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev Moves `amount` of tokens from `from` to `to`.\n   *\n   * This internal function is equivalent to {transfer}, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a {Transfer} event.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `from` must have a balance of at least `amount`.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 amount,\n    bool applyTax\n  ) internal virtual {\n    _beforeTokenTransfer(from, to, amount);\n\n    // Perform pre-tax validation (e.g. amount doesn't exceed balance, max txn amount)\n    uint256 fromBalance = _pretaxValidationAndLimits(from, to, amount);\n\n    // Perform autoswap if eligible\n    _autoSwap(from, to);\n\n    // Process taxes\n    uint256 amountMinusTax = _taxProcessing(applyTax, to, from, amount);\n\n    // Perform post-tax validation (e.g. total balance after post-tax amount applied)\n    _posttaxValidationAndLimits(from, to, amountMinusTax);\n\n    _balances[from] = fromBalance - amount;\n    _balances[to] += amountMinusTax;\n\n    emit Transfer(from, to, amountMinusTax);\n\n    _afterTokenTransfer(from, to, amount);\n  }\n\n  /**\n   * @dev function {_pretaxValidationAndLimits}\n   *\n   * Perform validation on pre-tax amounts\n   *\n   * @param from_ From address for the transaction\n   * @param to_ To address for the transaction\n   * @param amount_ Amount of the transaction\n   */\n  function _pretaxValidationAndLimits(\n    address from_,\n    address to_,\n    uint256 amount_\n  ) internal view returns (uint256 fromBalance_) {\n    // This can't be a transfer to the liquidity pool before the funding date\n    // UNLESS the from address is this contract. This ensures that the initial\n    // LP funding transaction is from this contract using the supply of tokens\n    // designated for the LP pool, and therefore the initial price in the pool\n    // is being set as expected.\n    //\n    // This protects from, for example, tokens from a team minted supply being\n    // paired with ETH and added to the pool, setting the initial price, BEFORE\n    // the initial liquidity is added through this contract.\n    if (to_ == uniswapV2Pair && from_ != address(this) && fundedDate == 0) {\n      _revert(InitialLiquidityNotYetAdded.selector);\n    }\n\n    if (from_ == address(0)) {\n      _revert(TransferFromZeroAddress.selector);\n    }\n\n    if (to_ == address(0)) {\n      _revert(TransferToZeroAddress.selector);\n    }\n\n    fromBalance_ = _balances[from_];\n\n    if (fromBalance_ < amount_) {\n      _revert(TransferAmountExceedsBalance.selector);\n    }\n\n    if (\n      limitsEnforced() &&\n      (maxTokensPerTransaction != 0) &&\n      ((isLiquidityPool(from_) && !isUnlimited(to_)) ||\n        (isLiquidityPool(to_) && !isUnlimited(from_)))\n    ) {\n      // Liquidity pools aren't always going to round cleanly. This can (and does)\n      // mean that a limit of 5,000 tokens (for example) will trigger on a transfer\n      // of 5,000 tokens, as the transfer is actually for 5,000.00000000000000213.\n      // While 4,999 will work fine, it isn't hugely user friendly. So we buffer\n      // the limit with rounding decimals, which in all cases are considerably less\n      // than one whole token:\n      uint256 roundedLimited;\n\n      unchecked {\n        roundedLimited = maxTokensPerTransaction + CONST_ROUND_DEC;\n      }\n\n      if (amount_ > roundedLimited) {\n        _revert(MaxTokensPerTxnExceeded.selector);\n      }\n    }\n\n    return (fromBalance_);\n  }\n\n  /**\n   * @dev function {_posttaxValidationAndLimits}\n   *\n   * Perform validation on post-tax amounts\n   *\n   * @param to_ To address for the transaction\n   * @param amount_ Amount of the transaction\n   */\n  function _posttaxValidationAndLimits(\n    address from_,\n    address to_,\n    uint256 amount_\n  ) internal view {\n    if (\n      limitsEnforced() &&\n      (maxTokensPerWallet != 0) &&\n      !isUnlimited(to_) &&\n      // If this is a buy (from a liquidity pool), we apply if the to_\n      // address isn't noted as unlimited:\n      (isLiquidityPool(from_) && !isUnlimited(to_))\n    ) {\n      // Liquidity pools aren't always going to round cleanly. This can (and does)\n      // mean that a limit of 5,000 tokens (for example) will trigger on a max holding\n      // of 5,000 tokens, as the transfer to achieve that is actually for\n      // 5,000.00000000000000213. While 4,999 will work fine, it isn't hugely user friendly.\n      // So we buffer the limit with rounding decimals, which in all cases are considerably\n      // less than one whole token:\n      uint256 roundedLimited;\n\n      unchecked {\n        roundedLimited = maxTokensPerWallet + CONST_ROUND_DEC;\n      }\n\n      if ((amount_ + balanceOf(to_) > roundedLimited)) {\n        _revert(MaxTokensPerWalletExceeded.selector);\n      }\n    }\n  }\n\n  /**\n   * @dev function {_taxProcessing}\n   *\n   * Perform tax processing\n   *\n   * @param applyTax_ Do we apply tax to this transaction?\n   * @param to_ The reciever of the token\n   * @param from_ The sender of the token\n   * @param sentAmount_ The amount being send\n   * @return amountLessTax_ The amount that will be recieved, i.e. the send amount minus tax\n   */\n  function _taxProcessing(\n    bool applyTax_,\n    address to_,\n    address from_,\n    uint256 sentAmount_\n  ) internal returns (uint256 amountLessTax_) {\n    amountLessTax_ = sentAmount_;\n    unchecked {\n      if (_tokenHasTax && applyTax_ && !_autoSwapInProgress) {\n        uint256 tax;\n\n        // on sell\n        if (isLiquidityPool(to_) && totalSellTaxBasisPoints() > 0) {\n          if (projectSellTaxBasisPoints > 0) {\n            uint256 projectTax = ((sentAmount_ * projectSellTaxBasisPoints) /\n              CONST_BP_DENOM);\n            projectTaxPendingSwap += uint128(projectTax);\n            tax += projectTax;\n          }\n          uint256 metadropSellTax = getMetadropSellTaxBasisPoints();\n          if (metadropSellTax > 0) {\n            uint256 metadropTax = ((sentAmount_ * metadropSellTax) /\n              CONST_BP_DENOM);\n            metadropTaxPendingSwap += uint128(metadropTax);\n            tax += metadropTax;\n          }\n        }\n        // on buy\n        else if (isLiquidityPool(from_) && totalBuyTaxBasisPoints() > 0) {\n          if (projectBuyTaxBasisPoints > 0) {\n            uint256 projectTax = ((sentAmount_ * projectBuyTaxBasisPoints) /\n              CONST_BP_DENOM);\n            projectTaxPendingSwap += uint128(projectTax);\n            tax += projectTax;\n          }\n          uint256 metadropBuyTax = getMetadropBuyTaxBasisPoints();\n          if (metadropBuyTax > 0) {\n            uint256 metadropTax = ((sentAmount_ * metadropBuyTax) /\n              CONST_BP_DENOM);\n            metadropTaxPendingSwap += uint128(metadropTax);\n            tax += metadropTax;\n          }\n        }\n\n        if (tax > 0) {\n          _balances[address(this)] += tax;\n          emit Transfer(from_, address(this), tax);\n          amountLessTax_ -= tax;\n        }\n      }\n    }\n    return (amountLessTax_);\n  }\n\n  /**\n   * @dev function {_autoSwap}\n   *\n   * Automate the swap of accumulated tax fees to native token\n   *\n   * @param from_ The sender of the token\n   * @param to_ The recipient of the token\n   */\n  function _autoSwap(address from_, address to_) internal {\n    if (_tokenHasTax) {\n      uint256 contractBalance = projectTaxPendingSwap + metadropTaxPendingSwap;\n      uint256 swapBalance = contractBalance;\n\n      uint256 swapThresholdInTokens = (_totalSupply *\n        swapThresholdBasisPoints) / CONST_BP_DENOM;\n\n      if (_eligibleForSwap(from_, to_, swapBalance, swapThresholdInTokens)) {\n        // Store that a swap back is in progress:\n        _autoSwapInProgress = true;\n        // Check if we need to reduce the amount of tokens for this swap:\n        if (\n          swapBalance >\n          swapThresholdInTokens * CONST_MAX_SWAP_THRESHOLD_MULTIPLE\n        ) {\n          swapBalance =\n            swapThresholdInTokens *\n            CONST_MAX_SWAP_THRESHOLD_MULTIPLE;\n        }\n        // Perform the auto swap to native token:\n        _swapTaxForNative(swapBalance, contractBalance);\n        // Flag that the autoswap is complete:\n        _autoSwapInProgress = false;\n      }\n    }\n  }\n\n  /**\n   * @dev function {_eligibleForSwap}\n   *\n   * Is the current transfer eligible for autoswap\n   *\n   * @param from_ The sender of the token\n   * @param to_ The recipient of the token\n   * @param taxBalance_ The current accumulated tax balance\n   * @param swapThresholdInTokens_ The swap threshold as a token amount\n   */\n  function _eligibleForSwap(\n    address from_,\n    address to_,\n    uint256 taxBalance_,\n    uint256 swapThresholdInTokens_\n  ) internal view returns (bool) {\n    return (taxBalance_ >= swapThresholdInTokens_ &&\n      !_autoSwapInProgress &&\n      !isLiquidityPool(from_) &&\n      from_ != address(_uniswapRouter) &&\n      to_ != address(_uniswapRouter));\n  }\n\n  /**\n   * @dev function {_swapTaxForNative}\n   *\n   * Swap tokens taken as tax for native token\n   *\n   * @param swapBalance_ The current accumulated tax balance to swap\n   * @param contractBalance_ The current accumulated total tax balance\n   */\n  function _swapTaxForNative(\n    uint256 swapBalance_,\n    uint256 contractBalance_\n  ) internal {\n    uint256 preSwapBalance = address(this).balance;\n\n    address[] memory path = new address[](2);\n    path[0] = address(this);\n    path[1] = _uniswapRouter.WETH();\n\n    // Wrap external calls in try / catch to handle errors\n    try\n      _uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n        swapBalance_,\n        0,\n        path,\n        address(this),\n        block.timestamp + 600\n      )\n    {\n      uint256 postSwapBalance = address(this).balance;\n\n      uint256 balanceToDistribute = postSwapBalance - preSwapBalance;\n\n      uint256 totalPendingSwap = projectTaxPendingSwap + metadropTaxPendingSwap;\n\n      uint256 projectBalanceToDistribute = (balanceToDistribute *\n        projectTaxPendingSwap) / totalPendingSwap;\n\n      uint256 metadropBalanceToDistribute = (balanceToDistribute *\n        metadropTaxPendingSwap) / totalPendingSwap;\n\n      // We will not have swapped all tax tokens IF the amount was greater than the max auto swap.\n      // We therefore cannot just set the pending swap counters to 0. Instead, in this scenario,\n      // we must reduce them in proportion to the swap amount vs the remaining balance + swap\n      // amount.\n      //\n      // For example:\n      //  * swap Balance is 250\n      //  * contract balance is 385.\n      //  * projectTaxPendingSwap is 300\n      //  * metadropTaxPendingSwap is 85.\n      //\n      // The new total for the projectTaxPendingSwap is:\n      //   = 300 - ((300 * 250) / 385)\n      //   = 300 - 194\n      //   = 106\n      // The new total for the metadropTaxPendingSwap is:\n      //   = 85 - ((85 * 250) / 385)\n      //   = 85 - 55\n      //   = 30\n      //\n\n      if (swapBalance_ < contractBalance_) {\n        // Calculate the project tax spending swap reduction amount:\n        uint256 projectTaxPendingSwapReduction = (projectTaxPendingSwap *\n          swapBalance_) / contractBalance_;\n        projectTaxPendingSwap -= uint128(projectTaxPendingSwapReduction);\n\n        // The metadrop tax pending swap reduction is therefore the total swap amount minus the\n        // project tax spending swap reduction:\n        metadropTaxPendingSwap -= uint128(\n          swapBalance_ - projectTaxPendingSwapReduction\n        );\n      } else {\n        (projectTaxPendingSwap, metadropTaxPendingSwap) = (0, 0);\n      }\n\n      // Distribute to treasuries:\n      bool success;\n      address weth;\n      uint256 gas;\n\n      if (projectBalanceToDistribute > 0) {\n        // If no gas limit was provided or provided gas limit greater than gas left, just use the remaining gas.\n        gas = (CONST_CALL_GAS_LIMIT == 0 || CONST_CALL_GAS_LIMIT > gasleft())\n          ? gasleft()\n          : CONST_CALL_GAS_LIMIT;\n\n        // We limit the gas passed so that a called address cannot cause a block out of gas error:\n        (success, ) = projectTaxRecipient.call{\n          value: projectBalanceToDistribute,\n          gas: gas\n        }(\"\");\n\n        // If the ETH transfer fails, wrap the ETH and send it as WETH. We do this so that a called\n        // address cannot cause this transfer to fail, either intentionally or by mistake:\n        if (!success) {\n          if (weth == address(0)) {\n            weth = _uniswapRouter.WETH();\n          }\n\n          try IWETH(weth).deposit{value: projectBalanceToDistribute}() {\n            try\n              IERC20(address(weth)).transfer(\n                projectTaxRecipient,\n                projectBalanceToDistribute\n              )\n            {} catch {\n              // Dont allow a failed external call (in this case to WETH) to stop a transfer.\n              // Emit that this has occured and continue.\n              emit ExternalCallError(1);\n            }\n          } catch {\n            // Dont allow a failed external call (in this case to WETH) to stop a transfer.\n            // Emit that this has occured and continue.\n            emit ExternalCallError(2);\n          }\n        }\n      }\n\n      if (metadropBalanceToDistribute > 0) {\n        // If no gas limit was provided or provided gas limit greater than gas left, just use the remaining gas.\n        gas = (CONST_CALL_GAS_LIMIT == 0 || CONST_CALL_GAS_LIMIT > gasleft())\n          ? gasleft()\n          : CONST_CALL_GAS_LIMIT;\n\n        (success, ) = metadropTaxRecipient.call{\n          value: metadropBalanceToDistribute,\n          gas: gas\n        }(\"\");\n\n        // If the ETH transfer fails, wrap the ETH and send it as WETH. We do this so that a called\n        // address cannot cause this transfer to fail, either intentionally or by mistake:\n        if (!success) {\n          if (weth == address(0)) {\n            weth = _uniswapRouter.WETH();\n          }\n          try IWETH(weth).deposit{value: metadropBalanceToDistribute}() {\n            try\n              IERC20(address(weth)).transfer(\n                metadropTaxRecipient,\n                metadropBalanceToDistribute\n              )\n            {} catch {\n              // Dont allow a failed external call (in this case to WETH) to stop a transfer.\n              // Emit that this has occured and continue.\n              emit ExternalCallError(3);\n            }\n          } catch {\n            // Dont allow a failed external call (in this case to WETH) to stop a transfer.\n            // Emit that this has occured and continue.\n            emit ExternalCallError(4);\n          }\n        }\n      }\n    } catch {\n      // Dont allow a failed external call (in this case to uniswap) to stop a transfer.\n      // Emit that this has occured and continue.\n      emit ExternalCallError(5);\n    }\n  }\n\n  /**\n   * @dev distributeTaxTokens\n   *\n   * Allows the distribution of tax tokens to the designated recipient(s)\n   *\n   * As part of standard processing the tax token balance being above the threshold\n   * will trigger an autoswap to ETH and distribution of this ETH to the designated\n   * recipients. This is automatic and there is no need for user involvement.\n   *\n   * As part of this swap there are a number of calculations performed, particularly\n   * if the tax balance is above CONST_MAX_SWAP_THRESHOLD_MULTIPLE.\n   *\n   * Testing indicates that these calculations are safe. But given the data / code\n   * interactions it remains possible that some edge case set of scenarios may cause\n   * an issue with these calculations.\n   *\n   * This method is therefore provided as a 'fallback' option to safely distribute\n   * accumulated taxes from the contract, with a direct transfer of the ERC20 tokens\n   * themselves.\n   */\n  function distributeTaxTokens() external {\n    if (projectTaxPendingSwap > 0) {\n      uint256 projectDistribution = projectTaxPendingSwap;\n      projectTaxPendingSwap = 0;\n      _transfer(address(this), projectTaxRecipient, projectDistribution, false);\n    }\n\n    if (metadropTaxPendingSwap > 0) {\n      uint256 metadropDistribution = metadropTaxPendingSwap;\n      metadropTaxPendingSwap = 0;\n      _transfer(\n        address(this),\n        metadropTaxRecipient,\n        metadropDistribution,\n        false\n      );\n    }\n  }\n\n  /**\n   * @dev function {withdrawETH} onlyOwner\n   *\n   * A withdraw function to allow ETH to be withdrawn by the manager\n   *\n   * This contract should never hold ETH. The only envisaged scenario where\n   * it might hold ETH is a failed autoswap where the uniswap swap has completed,\n   * the recipient of ETH reverts, the contract then wraps to WETH and the\n   * wrap to WETH fails.\n   *\n   * This feels unlikely. But, for safety, we include this method.\n   *\n   * @param amount_ The amount to withdraw\n   */\n  function withdrawETH(uint256 amount_) external onlyOwner {\n    (bool success, ) = _msgSender().call{value: amount_}(\"\");\n    if (!success) {\n      _revert(TransferFailed.selector);\n    }\n  }\n\n  /**\n   * @dev function {withdrawERC20} onlyOwner\n   *\n   * A withdraw function to allow ERC20s (except address(this)) to be withdrawn.\n   *\n   * This contract should never hold ERC20s other than tax tokens. The only envisaged\n   * scenario where it might hold an ERC20 is a failed autoswap where the uniswap swap\n   * has completed, the recipient of ETH reverts, the contract then wraps to WETH, the\n   * wrap to WETH succeeds, BUT then the transfer of WETH fails.\n   *\n   * This feels even less likely than the scenario where ETH is held on the contract.\n   * But, for safety, we include this method.\n   *\n   * @param token_ The ERC20 contract\n   * @param amount_ The amount to withdraw\n   */\n  function withdrawERC20(address token_, uint256 amount_) external onlyOwner {\n    if (token_ == address(this)) {\n      _revert(CannotWithdrawThisToken.selector);\n    }\n    IERC20(token_).safeTransfer(_msgSender(), amount_);\n  }\n\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n   * the total supply.\n   *\n   * Emits a {Transfer} event with `from` set to the zero address.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   */\n  function _mint(address account, uint256 amount) internal virtual {\n    if (account == address(0)) {\n      _revert(MintToZeroAddress.selector);\n    }\n\n    _beforeTokenTransfer(address(0), account, amount);\n\n    _totalSupply += uint128(amount);\n    unchecked {\n      // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n      _balances[account] += amount;\n    }\n    emit Transfer(address(0), account, amount);\n\n    _afterTokenTransfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, reducing the\n   * total supply.\n   *\n   * Emits a {Transfer} event with `to` set to the zero address.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   * - `account` must have at least `amount` tokens.\n   */\n  function _burn(address account, uint256 amount) internal virtual {\n    if (account == address(0)) {\n      _revert(BurnFromTheZeroAddress.selector);\n    }\n\n    _beforeTokenTransfer(account, address(0), amount);\n\n    uint256 accountBalance = _balances[account];\n    if (accountBalance < amount) {\n      _revert(BurnExceedsBalance.selector);\n    }\n\n    unchecked {\n      _balances[account] = accountBalance - amount;\n      // Overflow not possible: amount <= accountBalance <= totalSupply.\n      _totalSupply -= uint128(amount);\n    }\n\n    emit Transfer(account, address(0), amount);\n\n    _afterTokenTransfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n   *\n   * This internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `owner` cannot be the zero address.\n   * - `spender` cannot be the zero address.\n   */\n  function _approve(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    if (owner == address(0)) {\n      _revert(ApproveFromTheZeroAddress.selector);\n    }\n\n    if (spender == address(0)) {\n      _revert(ApproveToTheZeroAddress.selector);\n    }\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n  /**\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n   *\n   * Does not update the allowance amount in case of infinite allowance.\n   * Revert if not enough allowance is available.\n   *\n   * Might emit an {Approval} event.\n   */\n  function _spendAllowance(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    uint256 currentAllowance = allowance(owner, spender);\n    if (currentAllowance != type(uint256).max) {\n      if (currentAllowance < amount) {\n        _revert(InsufficientAllowance.selector);\n      }\n\n      unchecked {\n        _approve(owner, spender, currentAllowance - amount);\n      }\n    }\n  }\n\n  /**\n   * @dev Destroys a `value` amount of tokens from the caller.\n   *\n   * See {ERC20-_burn}.\n   */\n  function burn(uint256 value) public virtual {\n    _burn(_msgSender(), value);\n  }\n\n  /**\n   * @dev Destroys a `value` amount of tokens from `account`, deducting from\n   * the caller's allowance.\n   *\n   * See {ERC20-_burn} and {ERC20-allowance}.\n   *\n   * Requirements:\n   *\n   * - the caller must have allowance for ``accounts``'s tokens of at least\n   * `value`.\n   */\n  function burnFrom(address account, uint256 value) public virtual {\n    _spendAllowance(account, _msgSender(), value);\n    _burn(account, value);\n  }\n\n  /**\n   * @dev Hook that is called before any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * will be transferred to `to`.\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * has been transferred to `to`.\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _afterTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n\n  receive() external payable {}\n}\n\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@                                                                                                @@\n// @@   Metadrop has no affiliation with and does not endorse this token or its creators in any      @@\n// @@   way, unless otherwise stated. For all terms and conditions associated with tokens launched   @@\n// @@   using Metadrop software, refer to the terms published at metadrop[dot]com/legal.             @@\n// @@                                                                                                @@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@","ABI":"[{\"inputs\":[{\"internalType\":\"address[5]\",\"name\":\"integrationAddresses_\",\"type\":\"address[5]\"},{\"internalType\":\"bytes\",\"name\":\"baseParams_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"supplyParams_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"taxParams_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"poolParams_\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdapterParamsMustBeEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdditionToPoolIsBelowPerTransactionMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdditionToPoolWouldExceedPerAddressCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdditionToPoolWouldExceedPoolCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllowanceDecreasedBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionStatusIsNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionStatusIsNotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"}],\"name\":\"AuxCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidMustBeBelowTheFloorForRefundDuringAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidMustBeBelowTheFloorWhenReducingQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IErrors.BondingCurveErrorType\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"BondingCurveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotDepositBoxOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotFactoryOrProjectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotFactoryProjectOwnerOrPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotPlatformAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotSuperAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotTheManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerMustBeLzApp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanOnlyReduce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotAddLiquidityOnCreateAndUseDRIPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetNewManagerToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetNewOwnerToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotWithdrawThisToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionAlreadyRevealed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsDecommissioned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecreasedAllowanceBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeployerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeploymentError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositBoxIsNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DestinationIsNotTrustedSource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DriPoolAddressCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GasLimitIsTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectConfirmationValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialLiquidityAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialLiquidityNotYetAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAdapterParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOracleSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSourceSendingContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTotalShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LPLockUpMustFitUint88\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LimitsCanOnlyBeRaised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityPoolCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityPoolMustBeAContractAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MachineAddressCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxBidQuantityIs255\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"}],\"name\":\"MaxPublicMintAllowanceExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokensPerTxnExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokensPerWalletExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadataIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadropFactoryOnlyOncePerReveal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadropModulesOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadropOracleCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinGasLimitNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintingIsClosedForever\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewBuyTaxBasisPointsExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewSellTaxBasisPointsExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoETHForLiquidityPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPaymentDue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRefundForCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStoredMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokenForLiquidityPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTrustedPathRecord\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationDidNotSucceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleSignatureHasExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargeEndDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargeMinETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargePerAddressMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargePoolPerTxnMinETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargePoolSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargeStartDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargeVestingDays\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParametersDoNotMatchSignedMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PassedConfigDoesNotMatchApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PauseCutOffHasPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentMustCoverPerMintFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitDidNotSucceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlatformAdminCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlatformTreasuryCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsAboveMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsBelowMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolPhaseIsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolPhaseIsNotAfter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolVestingNotYetComplete\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProjectOwnerCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityExceedsMaxPossibleCollectionSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityExceedsRemainingCollectionSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityExceedsRemainingPhaseSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReferralIdAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestingMoreThanAvailableBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"previouslyMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAllocation\",\"type\":\"uint256\"}],\"name\":\"RequestingMoreThanRemainingAllocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyFeeWillExceedSalePrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShareTotalCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SuperAdminCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplyTotalMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupportWindowIsNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaxFreeAddressCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaxPeriodStillInForce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TemplateCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TemplateNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThisMintIsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSharesMustMatchDenominator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnrecognisedVRFMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VRFCoordinatorCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueExceedsMaximum\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"AutoSwapThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"ExternalCallError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpToken\",\"type\":\"uint256\"}],\"name\":\"InitialLiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTokensPerTransaction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTokensPerTransaction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTokensPerWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTokensPerWallet\",\"type\":\"uint256\"}],\"name\":\"LimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidityBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpLockupInDays\",\"type\":\"uint256\"}],\"name\":\"LiquidityLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBuyBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSellBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellBasisPoints\",\"type\":\"uint256\"}],\"name\":\"MetadropTaxBasisPointsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBuyBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSellBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellBasisPoints\",\"type\":\"uint256\"}],\"name\":\"ProjectTaxBasisPointsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"ProjectTaxRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RevenueAutoSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedUnlimted\",\"type\":\"address\"}],\"name\":\"UnlimitedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedUnlimted\",\"type\":\"address\"}],\"name\":\"UnlimitedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"addedValidCaller\",\"type\":\"bytes32\"}],\"name\":\"ValidCallerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"removedValidCaller\",\"type\":\"bytes32\"}],\"name\":\"ValidCallerRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpLockupInDaysOverride_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burnLPTokensOverride_\",\"type\":\"bool\"}],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityPool_\",\"type\":\"address\"}],\"name\":\"addLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUnlimited_\",\"type\":\"address\"}],\"name\":\"addUnlimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newValidCallerHash_\",\"type\":\"bytes32\"}],\"name\":\"addValidCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botProtectionDurationInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnLPTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeTaxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"driPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundedDate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetadropBuyTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetadropSellTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryAddress_\",\"type\":\"address\"}],\"name\":\"isLiquidityPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryAddress_\",\"type\":\"address\"}],\"name\":\"isUnlimited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"queryHash_\",\"type\":\"bytes32\"}],\"name\":\"isValidCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsEnforced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"liquidityPools_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpLockupInDays\",\"outputs\":[{\"internalType\":\"uint88\",\"name\":\"\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerTransaction\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerWallet\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropBuyTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropSellTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropTaxPendingSwap\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropTaxPeriodInDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropTaxRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectBuyTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectSellTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectSupplyRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectTaxPendingSwap\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectTaxRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedLiquidityPool_\",\"type\":\"address\"}],\"name\":\"removeLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedUnlimited_\",\"type\":\"address\"}],\"name\":\"removeUnlimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"removedValidCallerHash_\",\"type\":\"bytes32\"}],\"name\":\"removeValidCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTokensPerTransaction_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxTokensPerWallet_\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newProjectBuyTaxBasisPoints_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newProjectSellTaxBasisPoints_\",\"type\":\"uint16\"}],\"name\":\"setProjectTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectTaxRecipient_\",\"type\":\"address\"}],\"name\":\"setProjectTaxRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"swapThresholdBasisPoints_\",\"type\":\"uint16\"}],\"name\":\"setSwapThresholdBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThresholdBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlimitedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"unlimitedAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validCallers\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"validCallerHashes_\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultType\",\"outputs\":[{\"internalType\":\"enum IERC20ConfigByMetadrop.VaultType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"x_CONST_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"x_META_ID_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ERC20ByMetadrop","CompilerVersion":"v0.8.21+commit.d9974bed","OptimizationUsed":1,"Runs":200,"ConstructorArguments":"0x000000000000000000000000fb9d224f671666174ee7570d9273cb376ee1a8da0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000663a5c229c09b049e36dcc11a9b0d4a8eb9db2140000000000000000000000008cdd488363de72635b55bb263cc4c29041e6aa1a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001259656172204f662054686520447261676f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003594f4400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001312d000000000000000000000000000000000000000000000000000000000001312d00000000000000000000000000000000000000000000000000000000000000001f00000000000000000000000000000000000000000000000000000000bbf81e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb9d224f671666174ee7570d9273cb376ee1a8da0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000009c400000000000000000000000000000000000000000000000000000000000009c4000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000009ce781223e056ed1d45c367e393966c15cb57f6000000000000000000000000de3ff2a50bd1ba1bd6a608ea0138946dddf595bc000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"BSL 1.1","Proxy":0,"SwarmSource":""}]}