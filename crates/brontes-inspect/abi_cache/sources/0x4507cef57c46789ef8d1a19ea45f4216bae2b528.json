{"expiry":1699484677,"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/governance/IGovernanceToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n/**\r\n * @title Governance token interface.\r\n */\r\ninterface IGovernanceToken {\r\n    /// @notice A checkpoint for marking number of votes as of a given block.\r\n    struct Checkpoint {\r\n        // The 32-bit unsigned integer is valid until these estimated dates for these given chains:\r\n        //  - BSC: Sat Dec 23 2428 18:23:11 UTC\r\n        //  - ETH: Tue Apr 18 3826 09:27:12 UTC\r\n        // This assumes that block mining rates don't speed up.\r\n        uint32 blockNumber;\r\n        // This type is set to `uint224` for optimizations purposes (i.e., specifically to fit in a 32-byte block). It\r\n        // assumes that the number of votes for the implementing governance token never exceeds the maximum value for a\r\n        // 224-bit number.\r\n        uint224 votes;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the number of votes for an account as of a block number.\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check.\r\n     * @param blockNumber The block number to get the vote balance at.\r\n     * @return The number of votes the account had as of the given block.\r\n     */\r\n    function getVotesAtBlock(address account, uint32 blockNumber) external view returns (uint224);\r\n\r\n    /// @notice Emitted whenever a new delegate is set for an account.\r\n    event DelegateChanged(address indexed delegator, address currentDelegate, address newDelegate);\r\n\r\n    /// @notice Emitted when a delegate's vote count changes.\r\n    event DelegateVotesChanged(address indexed delegatee, uint224 oldVotes, uint224 newVotes);\r\n}\r\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"contracts/T1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"./governance/IGovernanceToken.sol\";\nimport \"./tax/ITaxHandler.sol\";\nimport \"./treasury/ITreasuryHandler.sol\";\n\n/**\n * @title Tokenfi token contract\n * @dev The Tokenfi token has modular systems for tax and treasury handler as well as governance capabilities.\n */\ncontract T1 is IERC20, IGovernanceToken, Ownable {\n    using Address for address payable;\n\n    /// @dev Registry of user token balances.\n    mapping(address => uint256) private _balances;\n\n    /// @dev Registry of addresses users have given allowances to.\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    /// @notice Registry of user delegates for governance.\n    mapping(address => address) public delegates;\n\n    /// @notice Registry of nonces for vote delegation.\n    mapping(address => uint256) public nonces;\n\n    /// @notice Registry of the number of balance checkpoints an account has.\n    mapping(address => uint32) public numCheckpoints;\n\n    /// @notice Registry of balance checkpoints per account.\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain.\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\n    bytes32 public constant DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice The contract implementing tax calculations.\n    ITaxHandler public taxHandler;\n\n    /// @notice The contract that performs treasury-related operations.\n    ITreasuryHandler public treasuryHandler;\n\n    /// @notice Emitted when the tax handler contract is changed.\n    event TaxHandlerChanged(address oldAddress, address newAddress);\n\n    /// @notice Emitted when the treasury handler contract is changed.\n    event TreasuryHandlerChanged(address oldAddress, address newAddress);\n\n    /// @dev Name of the token.\n    string private _name;\n\n    /// @dev Symbol of the token.\n    string private _symbol;\n\n    /**\n     * @param name_ Name of the token.\n     * @param symbol_ Symbol of the token.\n     * @param taxHandlerAddress Initial tax handler contract.\n     * @param treasuryHandlerAddress Initial treasury handler contract.\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address taxHandlerAddress,\n        address treasuryHandlerAddress\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n\n        taxHandler = ITaxHandler(taxHandlerAddress);\n        treasuryHandler = ITreasuryHandler(treasuryHandlerAddress);\n\n        _balances[_msgSender()] = totalSupply();\n\n        emit Transfer(address(0), _msgSender(), totalSupply());\n    }\n\n    /**\n     * @notice Get token name.\n     * @return Name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @notice Get token symbol.\n     * @return Symbol of the token.\n     */\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @notice Get number of decimals used by the token.\n     * @return Number of decimals used by the token.\n     */\n    function decimals() external pure returns (uint8) {\n        return 9;\n    }\n\n    /**\n     * @notice Get the maximum number of tokens.\n     * @return The maximum number of tokens that will ever be in existence.\n     */\n    function totalSupply() public pure override returns (uint256) {\n        // Five billion, i.e., 5,000,000,000 tokens.\n        return 5e9 * 1e9;\n    }\n\n    /**\n     * @notice Get token balance of given account.\n     * @param account Address to retrieve balance for.\n     * @return The number of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @notice Transfer tokens from caller's address to another.\n     * @param recipient Address to send the caller's tokens to.\n     * @param amount The number of tokens to transfer to recipient.\n     * @return True if transfer succeeds, else an error is raised.\n     */\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @notice Get the allowance `owner` has given `spender`.\n     * @param owner The address on behalf of whom tokens can be spent by `spender`.\n     * @param spender The address authorized to spend tokens on behalf of `owner`.\n     * @return The allowance `owner` has given `spender`.\n     */\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @notice Approve address to spend caller's tokens.\n     * @dev This method can be exploited by malicious spenders if their allowance is already non-zero. See the following\n     * document for details: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit.\n     * Ensure the spender can be trusted before calling this method if they've already been approved before. Otherwise\n     * use either the `increaseAllowance`/`decreaseAllowance` functions, or first set their allowance to zero, before\n     * setting a new allowance.\n     * @param spender Address to authorize for token expenditure.\n     * @param amount The number of tokens `spender` is allowed to spend.\n     * @return True if the approval succeeds, else an error is raised.\n     */\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice Transfer tokens from one address to another.\n     * @param sender Address to move tokens from.\n     * @param recipient Address to send the caller's tokens to.\n     * @param amount The number of tokens to transfer to recipient.\n     * @return True if the transfer succeeds, else an error is raised.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"FLOKI:transferFrom:ALLOWANCE_EXCEEDED: Transfer amount exceeds allowance.\"\n        );\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice Increase spender's allowance.\n     * @param spender Address of user authorized to spend caller's tokens.\n     * @param addedValue The number of tokens to add to `spender`'s allowance.\n     * @return True if the allowance is successfully increased, else an error is raised.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n\n        return true;\n    }\n\n    /**\n     * @notice Decrease spender's allowance.\n     * @param spender Address of user authorized to spend caller's tokens.\n     * @param subtractedValue The number of tokens to remove from `spender`'s allowance.\n     * @return True if the allowance is successfully decreased, else an error is raised.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"FLOKI:decreaseAllowance:ALLOWANCE_UNDERFLOW: Subtraction results in sub-zero allowance.\"\n        );\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice Delegate votes to given address.\n     * @dev It should be noted that users that want to vote themselves, also need to call this method, albeit with their\n     * own address.\n     * @param delegatee Address to delegate votes to.\n     */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegate votes from signatory to `delegatee`.\n     * @param delegatee The address to delegate votes to.\n     * @param nonce The contract state required to match the signature.\n     * @param expiry The time at which to expire the signature.\n     * @param v The recovery byte of the signature.\n     * @param r Half of the ECDSA signature pair.\n     * @param s Half of the ECDSA signature pair.\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), block.chainid, address(this))\n        );\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n        address signatory = ecrecover(digest, v, r, s);\n\n        require(signatory != address(0), \"FLOKI:delegateBySig:INVALID_SIGNATURE: Received signature was invalid.\");\n        require(block.timestamp <= expiry, \"FLOKI:delegateBySig:EXPIRED_SIGNATURE: Received signature has expired.\");\n        require(nonce == nonces[signatory]++, \"FLOKI:delegateBySig:INVALID_NONCE: Received nonce was invalid.\");\n\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Determine the number of votes for an account as of a block number.\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check.\n     * @param blockNumber The block number to get the vote balance at.\n     * @return The number of votes the account had as of the given block.\n     */\n    function getVotesAtBlock(address account, uint32 blockNumber) public view returns (uint224) {\n        require(\n            blockNumber < block.number,\n            \"FLOKI:getVotesAtBlock:FUTURE_BLOCK: Cannot get votes at a block in the future.\"\n        );\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance.\n        if (checkpoints[account][nCheckpoints - 1].blockNumber <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance.\n        if (checkpoints[account][0].blockNumber > blockNumber) {\n            return 0;\n        }\n\n        // Perform binary search.\n        uint32 lowerBound = 0;\n        uint32 upperBound = nCheckpoints - 1;\n        while (upperBound > lowerBound) {\n            uint32 center = upperBound - (upperBound - lowerBound) / 2;\n            Checkpoint memory checkpoint = checkpoints[account][center];\n\n            if (checkpoint.blockNumber == blockNumber) {\n                return checkpoint.votes;\n            } else if (checkpoint.blockNumber < blockNumber) {\n                lowerBound = center;\n            } else {\n                upperBound = center - 1;\n            }\n        }\n\n        // No exact block found. Use last known balance before that block number.\n        return checkpoints[account][lowerBound].votes;\n    }\n\n    /**\n     * @notice Set new tax handler contract.\n     * @param taxHandlerAddress Address of new tax handler contract.\n     */\n    function setTaxHandler(address taxHandlerAddress) external onlyOwner {\n        address oldTaxHandlerAddress = address(taxHandler);\n        taxHandler = ITaxHandler(taxHandlerAddress);\n\n        emit TaxHandlerChanged(oldTaxHandlerAddress, taxHandlerAddress);\n    }\n\n    /**\n     * @notice Set new treasury handler contract.\n     * @param treasuryHandlerAddress Address of new treasury handler contract.\n     */\n    function setTreasuryHandler(address treasuryHandlerAddress) external onlyOwner {\n        address oldTreasuryHandlerAddress = address(treasuryHandler);\n        treasuryHandler = ITreasuryHandler(treasuryHandlerAddress);\n\n        emit TreasuryHandlerChanged(oldTreasuryHandlerAddress, treasuryHandlerAddress);\n    }\n\n    /**\n     * @notice Send any tokens or ETH stuck in the token contract to the treasury handler.\n     * @param tokenAddress Address of the token to withdraw. If set to the zero address, ETH will be withdrawn.\n     * @param amount The number of tokens to withdraw.\n     * @dev The treasury handler has a method to send any tokens to the treasury (except for what it uses to swap).\n     */\n    function withdraw(address tokenAddress, uint256 amount) external onlyOwner {\n        if (tokenAddress == address(0)) {\n            payable(address(treasuryHandler)).sendValue(amount);\n        } else {\n            IERC20(tokenAddress).transferFrom(address(this), address(treasuryHandler), amount);\n        }\n    }\n\n    /**\n     * @notice Delegate votes from one address to another.\n     * @param delegator Address from which to delegate votes for.\n     * @param delegatee Address to delegate votes to.\n     */\n    function _delegate(address delegator, address delegatee) private {\n        address currentDelegate = delegates[delegator];\n        uint256 delegatorBalance = _balances[delegator];\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, uint224(delegatorBalance));\n    }\n\n    /**\n     * @notice Move delegates from one address to another.\n     * @param from Representative to move delegates from.\n     * @param to Representative to move delegates to.\n     * @param amount Number of delegates to move.\n     */\n    function _moveDelegates(\n        address from,\n        address to,\n        uint224 amount\n    ) private {\n        // No need to update checkpoints if the votes don't actually move between different delegates. This can be the\n        // case where tokens are transferred between two parties that have delegated their votes to the same address.\n        if (from == to) {\n            return;\n        }\n\n        // Some users preemptively delegate their votes (i.e. before they have any tokens). No need to perform an update\n        // to the checkpoints in that case.\n        if (amount == 0) {\n            return;\n        }\n\n        if (from != address(0)) {\n            uint32 fromRepNum = numCheckpoints[from];\n            uint224 fromRepOld = fromRepNum > 0 ? checkpoints[from][fromRepNum - 1].votes : 0;\n            uint224 fromRepNew = fromRepOld - amount;\n\n            _writeCheckpoint(from, fromRepNum, fromRepOld, fromRepNew);\n        }\n\n        if (to != address(0)) {\n            uint32 toRepNum = numCheckpoints[to];\n            uint224 toRepOld = toRepNum > 0 ? checkpoints[to][toRepNum - 1].votes : 0;\n            uint224 toRepNew = toRepOld + amount;\n\n            _writeCheckpoint(to, toRepNum, toRepOld, toRepNew);\n        }\n    }\n\n    /**\n     * @notice Write balance checkpoint to chain.\n     * @param delegatee The address to write the checkpoint for.\n     * @param nCheckpoints The number of checkpoints `delegatee` already has.\n     * @param oldVotes Number of votes prior to this checkpoint.\n     * @param newVotes Number of votes `delegatee` now has.\n     */\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint224 oldVotes,\n        uint224 newVotes\n    ) private {\n        uint32 blockNumber = uint32(block.number);\n\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].blockNumber == blockNumber) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    /**\n     * @notice Approve spender on behalf of owner.\n     * @param owner Address on behalf of whom tokens can be spent by `spender`.\n     * @param spender Address to authorize for token expenditure.\n     * @param amount The number of tokens `spender` is allowed to spend.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"FLOKI:_approve:OWNER_ZERO: Cannot approve for the zero address.\");\n        require(spender != address(0), \"FLOKI:_approve:SPENDER_ZERO: Cannot approve to the zero address.\");\n\n        _allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from account `from` to account `to`.\n     * @param from Address the tokens are moved out of.\n     * @param to Address the tokens are moved to.\n     * @param amount The number of tokens to transfer.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), \"FLOKI:_transfer:FROM_ZERO: Cannot transfer from the zero address.\");\n        require(to != address(0), \"FLOKI:_transfer:TO_ZERO: Cannot transfer to the zero address.\");\n        require(amount > 0, \"FLOKI:_transfer:ZERO_AMOUNT: Transfer amount must be greater than zero.\");\n        require(amount <= _balances[from], \"FLOKI:_transfer:INSUFFICIENT_BALANCE: Transfer amount exceeds balance.\");\n\n        treasuryHandler.beforeTransferHandler(from, to, amount);\n\n        uint256 tax = taxHandler.getTax(from, to, amount);\n        uint256 taxedAmount = amount - tax;\n\n        _balances[from] -= amount;\n        _balances[to] += taxedAmount;\n        _moveDelegates(delegates[from], delegates[to], uint224(taxedAmount));\n\n        if (tax > 0) {\n            _balances[address(treasuryHandler)] += tax;\n\n            _moveDelegates(delegates[from], delegates[address(treasuryHandler)], uint224(tax));\n\n            emit Transfer(from, address(treasuryHandler), tax);\n        }\n\n        treasuryHandler.afterTransferHandler(from, to, amount);\n\n        emit Transfer(from, to, taxedAmount);\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"contracts/tax/ITaxHandler.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n/**\r\n * @title Tax handler interface\r\n * @dev Any class that implements this interface can be used for protocol-specific tax calculations.\r\n */\r\ninterface ITaxHandler {\r\n    /**\r\n     * @notice Get number of tokens to pay as tax.\r\n     * @param benefactor Address of the benefactor.\r\n     * @param beneficiary Address of the beneficiary.\r\n     * @param amount Number of tokens in the transfer.\r\n     * @return Number of tokens to pay as tax.\r\n     */\r\n    function getTax(\r\n        address benefactor,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) external view returns (uint256);\r\n}\r\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"contracts/treasury/ITreasuryHandler.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n/**\r\n * @title Treasury handler interface\r\n * @dev Any class that implements this interface can be used for protocol-specific operations pertaining to the treasury.\r\n */\r\ninterface ITreasuryHandler {\r\n    /**\r\n     * @notice Perform operations before a transfer is executed.\r\n     * @param benefactor Address of the benefactor.\r\n     * @param beneficiary Address of the beneficiary.\r\n     * @param amount Number of tokens in the transfer.\r\n     */\r\n    function beforeTransferHandler(\r\n        address benefactor,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Perform operations after a transfer is executed.\r\n     * @param benefactor Address of the benefactor.\r\n     * @param beneficiary Address of the beneficiary.\r\n     * @param amount Number of tokens in the transfer.\r\n     */\r\n    function afterTransferHandler(\r\n        address benefactor,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n"}},"settings":{"libraries":{},"metadata":{"bytecodeHash":"none"},"optimizer":{"enabled":true,"runs":888},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"taxHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryHandlerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentDelegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint224\",\"name\":\"oldVotes\",\"type\":\"uint224\"},{\"indexed\":false,\"internalType\":\"uint224\",\"name\":\"newVotes\",\"type\":\"uint224\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"TaxHandlerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"TreasuryHandlerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"getVotesAtBlock\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxHandlerAddress\",\"type\":\"address\"}],\"name\":\"setTaxHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryHandlerAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxHandler\",\"outputs\":[{\"internalType\":\"contract ITaxHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryHandler\",\"outputs\":[{\"internalType\":\"contract ITreasuryHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"T1","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":1,"Runs":888,"ConstructorArguments":"0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000155e6ff9a7039a7d15f108647ea5ac7c7aa593ac00000000000000000000000007df8296e4d8d161bf76b00fa84367cc43e946810000000000000000000000000000000000000000000000000000000000000002543100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025431000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}