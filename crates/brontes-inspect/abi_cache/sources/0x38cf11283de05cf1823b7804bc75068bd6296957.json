{"expiry":1699495252,"data":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n  pragma solidity ^0.8.0;\r\n  \r\n  abstract contract Context {\r\n      function _msgSender() internal view virtual returns (address) {\r\n          return msg.sender;\r\n      }\r\n  \r\n      function _msgData() internal view virtual returns (bytes calldata) {\r\n          return msg.data;\r\n      }\r\n  }\r\n  \r\n  \r\n  abstract contract Ownable is Context {\r\n      address private _owner;\r\n      \r\n      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  \r\n      constructor() {\r\n          _transferOwnership(_msgSender());\r\n      }\r\n  \r\n      function owner() public view virtual returns (address) {\r\n          return _owner;\r\n      }\r\n  \r\n      modifier onlyOwner() {\r\n          require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n          _;\r\n      }\r\n  \r\n      function renounceOwnership() public virtual onlyOwner {\r\n          _transferOwnership(address(0));\r\n      }\r\n  \r\n      function transferOwnership(address newOwner) public virtual onlyOwner {\r\n          require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n          _transferOwnership(newOwner);\r\n      }\r\n  \r\n      function _transferOwnership(address newOwner) internal virtual {\r\n          address oldOwner = _owner;\r\n          _owner = newOwner;\r\n          emit OwnershipTransferred(oldOwner, newOwner);\r\n      }\r\n  }\r\n  \r\n  interface IERC20 {\r\n      function totalSupply() external view returns (uint256);\r\n  \r\n      function balanceOf(address account) external view returns (uint256);\r\n  \r\n      function transfer(address recipient, uint256 amount) external returns (bool);\r\n  \r\n      function allowance(address owner, address spender) external view returns (uint256);\r\n  \r\n      function approve(address spender, uint256 amount) external returns (bool);\r\n  \r\n      function transferFrom(\r\n          address sender,\r\n          address recipient,\r\n          uint256 amount\r\n      ) external returns (bool);\r\n  \r\n      event Transfer(address indexed from, address indexed to, uint256 value);\r\n  \r\n      event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  }\r\n  \r\n  interface IERC20Metadata is IERC20 {\r\n  \r\n      function name() external view returns (string memory);\r\n  \r\n      function symbol() external view returns (string memory);\r\n  \r\n      function decimals() external view returns (uint8);\r\n  }\r\n  \r\n  \r\n  library SafeMath {\r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          uint256 c = a + b;\r\n          require(c >= a, \"SafeMath: addition overflow\");\r\n  \r\n          return c;\r\n      }\r\n  \r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          return sub(a, b, \"SafeMath: subtraction overflow\");\r\n      }\r\n  \r\n      function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n          require(b <= a, errorMessage);\r\n          uint256 c = a - b;\r\n  \r\n          return c;\r\n      }\r\n  \r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n          // benefit is lost if 'b' is also tested.\r\n          // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n          if (a == 0) {\r\n              return 0;\r\n          }\r\n  \r\n          uint256 c = a * b;\r\n          require(c / a == b, \"SafeMath: multiplication overflow\");\r\n  \r\n          return c;\r\n      }\r\n  \r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          return div(a, b, \"SafeMath: division by zero\");\r\n      }\r\n  \r\n      function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n          require(b > 0, errorMessage);\r\n          uint256 c = a / b;\r\n          // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n  \r\n          return c;\r\n      }\r\n  \r\n      function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          return mod(a, b, \"SafeMath: modulo by zero\");\r\n      }\r\n  \r\n      function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n          require(b != 0, errorMessage);\r\n          return a % b;\r\n      }\r\n  }\r\n  \r\n  library SafeMathInt {\r\n      int256 private constant MIN_INT256 = int256(1) << 255;\r\n      int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n  \r\n      /**\r\n       * @dev Multiplies two int256 variables and fails on overflow.\r\n       */\r\n      function mul(int256 a, int256 b) internal pure returns (int256) {\r\n          int256 c = a * b;\r\n  \r\n          // Detect overflow when multiplying MIN_INT256 with -1\r\n          require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n          require((b == 0) || (c / b == a));\r\n          return c;\r\n      }\r\n  \r\n      /**\r\n       * @dev Division of two int256 variables and fails on overflow.\r\n       */\r\n      function div(int256 a, int256 b) internal pure returns (int256) {\r\n          // Prevent overflow when dividing MIN_INT256 by -1\r\n          require(b != -1 || a != MIN_INT256);\r\n  \r\n          // Solidity already throws when dividing by 0.\r\n          return a / b;\r\n      }\r\n  \r\n      /**\r\n       * @dev Subtracts two int256 variables and fails on overflow.\r\n       */\r\n      function sub(int256 a, int256 b) internal pure returns (int256) {\r\n          int256 c = a - b;\r\n          require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n          return c;\r\n      }\r\n  \r\n      /**\r\n       * @dev Adds two int256 variables and fails on overflow.\r\n       */\r\n      function add(int256 a, int256 b) internal pure returns (int256) {\r\n          int256 c = a + b;\r\n          require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n          return c;\r\n      }\r\n  \r\n      /**\r\n       * @dev Converts to absolute value, and fails on overflow.\r\n       */\r\n      function abs(int256 a) internal pure returns (int256) {\r\n          require(a != MIN_INT256);\r\n          return a < 0 ? -a : a;\r\n      }\r\n  \r\n  \r\n      function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n          require(a >= 0);\r\n          return uint256(a);\r\n      }\r\n  }\r\n  \r\n  library SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n      int256 b = int256(a);\r\n      require(b >= 0);\r\n      return b;\r\n    }\r\n  }\r\n  \r\n  library Clones {\r\n      /**\r\n       * @dev Deploys and returns the address of a clone that mimics the behaviour of 'implementation'.\r\n       *\r\n       * This function uses the create opcode, which should never revert.\r\n       */\r\n      function clone(address implementation) internal returns (address instance) {\r\n          assembly {\r\n              let ptr := mload(0x40)\r\n              mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n              mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n              mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n              instance := create(0, ptr, 0x37)\r\n          }\r\n          require(instance != address(0), \"ERC1167: create failed\");\r\n      }\r\n  \r\n      /**\r\n       * @dev Deploys and returns the address of a clone that mimics the behaviour of 'implementation'.\r\n       *\r\n       * This function uses the create2 opcode and a 'salt' to deterministically deploy\r\n       * the clone. Using the same 'implementation' and 'salt' multiple time will revert, since\r\n       * the clones cannot be deployed twice at the same address.\r\n       */\r\n      function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n          assembly {\r\n              let ptr := mload(0x40)\r\n              mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n              mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n              mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n              instance := create2(0, ptr, 0x37, salt)\r\n          }\r\n          require(instance != address(0), \"ERC1167: create2 failed\");\r\n      }\r\n  \r\n      /**\r\n       * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n       */\r\n      function predictDeterministicAddress(\r\n          address implementation,\r\n          bytes32 salt,\r\n          address deployer\r\n      ) internal pure returns (address predicted) {\r\n          assembly {\r\n              let ptr := mload(0x40)\r\n              mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n              mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n              mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n              mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n              mstore(add(ptr, 0x4c), salt)\r\n              mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n              predicted := keccak256(add(ptr, 0x37), 0x55)\r\n          }\r\n      }\r\n  \r\n      /**\r\n       * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n       */\r\n      function predictDeterministicAddress(address implementation, bytes32 salt)\r\n          internal\r\n          view\r\n          returns (address predicted)\r\n      {\r\n          return predictDeterministicAddress(implementation, salt, address(this));\r\n      }\r\n  }\r\n  \r\n  contract ERC20 is Context, IERC20, IERC20Metadata {\r\n      using SafeMath for uint256;\r\n  \r\n      mapping(address => uint256) private _balances;\r\n  \r\n      mapping(address => mapping(address => uint256)) private _allowances;\r\n  \r\n      uint256 private _totalSupply;\r\n  \r\n      string private _name;\r\n      string private _symbol;\r\n  \r\n      /**\r\n       * @dev Sets the values for {name} and {symbol}.\r\n       *\r\n       * The default value of {decimals} is 18. To select a different value for\r\n       * {decimals} you should overload it.\r\n       *\r\n       * All two of these values are immutable: they can only be set once during\r\n       * construction.\r\n       */\r\n      constructor(string memory name_, string memory symbol_) {\r\n          _name = name_;\r\n          _symbol = symbol_;\r\n      }\r\n  \r\n      /**\r\n       * @dev Returns the name of the token.\r\n       */\r\n      function name() public view virtual override returns (string memory) {\r\n          return _name;\r\n      }\r\n  \r\n      /**\r\n       * @dev Returns the symbol of the token, usually a shorter version of the\r\n       * name.\r\n       */\r\n      function symbol() public view virtual override returns (string memory) {\r\n          return _symbol;\r\n      }\r\n  \r\n      /**\r\n       * @dev Returns the number of decimals used to get its user representation.\r\n       * For example, if 'decimals' equals '2', a balance of '505' tokens should\r\n       * be displayed to a user as '5,05' ('505 / 10 ** 2').\r\n       *\r\n       * Tokens usually opt for a value of 18, imitating the relationship between\r\n       * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n       * overridden;\r\n       *\r\n       * NOTE: This information is only used for _display_ purposes: it in\r\n       * no way affects any of the arithmetic of the contract, including\r\n       * {IERC20-balanceOf} and {IERC20-transfer}.\r\n       */\r\n      function decimals() public view virtual override returns (uint8) {\r\n          return 18;\r\n      }\r\n  \r\n      /**\r\n       * @dev See {IERC20-totalSupply}.\r\n       */\r\n      function totalSupply() public view virtual override returns (uint256) {\r\n          return _totalSupply;\r\n      }\r\n  \r\n      /**\r\n       * @dev See {IERC20-balanceOf}.\r\n       */\r\n      function balanceOf(address account) public view virtual override returns (uint256) {\r\n          return _balances[account];\r\n      }\r\n  \r\n      /**\r\n       * @dev See {IERC20-transfer}.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - 'recipient' cannot be the zero address.\r\n       * - the caller must have a balance of at least 'amount'.\r\n       */\r\n      function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n          _transfer(_msgSender(), recipient, amount);\r\n          return true;\r\n      }\r\n  \r\n      /**\r\n       * @dev See {IERC20-allowance}.\r\n       */\r\n      function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n          return _allowances[owner][spender];\r\n      }\r\n  \r\n      /**\r\n       * @dev See {IERC20-approve}.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - 'spender' cannot be the zero address.\r\n       */\r\n      function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n          _approve(_msgSender(), spender, amount);\r\n          return true;\r\n      }\r\n  \r\n      /**\r\n       * @dev See {IERC20-transferFrom}.\r\n       *\r\n       * Emits an {Approval} event indicating the updated allowance. This is not\r\n       * required by the EIP. See the note at the beginning of {ERC20}.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - 'sender' and 'recipient' cannot be the zero address.\r\n       * - 'sender' must have a balance of at least 'amount'.\r\n       * - the caller must have allowance for ''sender'''s tokens of at least\r\n       * 'amount'.\r\n       */\r\n      function transferFrom(\r\n          address sender,\r\n          address recipient,\r\n          uint256 amount\r\n      ) public virtual override returns (bool) {\r\n          _transfer(sender, recipient, amount);\r\n          _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n          return true;\r\n      }\r\n  \r\n      /**\r\n       * @dev Atomically increases the allowance granted to 'spender' by the caller.\r\n       *\r\n       * This is an alternative to {approve} that can be used as a mitigation for\r\n       * problems described in {IERC20-approve}.\r\n       *\r\n       * Emits an {Approval} event indicating the updated allowance.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - 'spender' cannot be the zero address.\r\n       */\r\n      function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n          _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n          return true;\r\n      }\r\n  \r\n      /**\r\n       * @dev Atomically decreases the allowance granted to 'spender' by the caller.\r\n       *\r\n       * This is an alternative to {approve} that can be used as a mitigation for\r\n       * problems described in {IERC20-approve}.\r\n       *\r\n       * Emits an {Approval} event indicating the updated allowance.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - 'spender' cannot be the zero address.\r\n       * - 'spender' must have allowance for the caller of at least\r\n       * 'subtractedValue'.\r\n       */\r\n      function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n          _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n          return true;\r\n      }\r\n  \r\n      /**\r\n       * @dev Moves tokens 'amount' from 'sender' to 'recipient'.\r\n       *\r\n       * This is internal function is equivalent to {transfer}, and can be used to\r\n       * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n       *\r\n       * Emits a {Transfer} event.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - 'sender' cannot be the zero address.\r\n       * - 'recipient' cannot be the zero address.\r\n       * - 'sender' must have a balance of at least 'amount'.\r\n       */\r\n      function _transfer(\r\n          address sender,\r\n          address recipient,\r\n          uint256 amount\r\n      ) internal virtual {\r\n          require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n          require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n  \r\n          _beforeTokenTransfer(sender, recipient, amount);\r\n  \r\n          _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n          _balances[recipient] = _balances[recipient].add(amount);\r\n          emit Transfer(sender, recipient, amount);\r\n      }\r\n  \r\n      /** @dev Creates 'amount' tokens and assigns them to 'account', increasing\r\n       * the total supply.\r\n       *\r\n       * Emits a {Transfer} event with 'from' set to the zero address.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - 'account' cannot be the zero address.\r\n       */\r\n      function _cast(address account, uint256 amount) internal virtual {\r\n          require(account != address(0), \"ERC20: cast to the zero address\");\r\n  \r\n          _beforeTokenTransfer(address(0), account, amount);\r\n  \r\n          _totalSupply = _totalSupply.add(amount);\r\n          _balances[account] = _balances[account].add(amount);\r\n          emit Transfer(address(0), account, amount);\r\n      }\r\n  \r\n      /**\r\n       * @dev Destroys 'amount' tokens from 'account', reducing the\r\n       * total supply.\r\n       *\r\n       * Emits a {Transfer} event with 'to' set to the zero address.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - 'account' cannot be the zero address.\r\n       * - 'account' must have at least 'amount' tokens.\r\n       */\r\n      function _burn(address account, uint256 amount) internal virtual {\r\n          require(account != address(0), \"ERC20: burn from the zero address\");\r\n  \r\n          _beforeTokenTransfer(account, address(0), amount);\r\n  \r\n          _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n          _totalSupply = _totalSupply.sub(amount);\r\n          emit Transfer(account, address(0), amount);\r\n      }\r\n  \r\n      /**\r\n       * @dev Sets 'amount' as the allowance of 'spender' over the 'owner' s tokens.\r\n       *\r\n       * This internal function is equivalent to 'approve', and can be used to\r\n       * e.g. set automatic allowances for certain subsystems, etc.\r\n       *\r\n       * Emits an {Approval} event.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - 'owner' cannot be the zero address.\r\n       * - 'spender' cannot be the zero address.\r\n       */\r\n      function _approve(\r\n          address owner,\r\n          address spender,\r\n          uint256 amount\r\n      ) internal virtual {\r\n          require(owner != address(0), \"ERC20: approve from the zero address\");\r\n          require(spender != address(0), \"ERC20: approve to the zero address\");\r\n  \r\n          _allowances[owner][spender] = amount;\r\n          emit Approval(owner, spender, amount);\r\n      }\r\n  \r\n   \r\n      function _beforeTokenTransfer(\r\n          address from,\r\n          address to,\r\n          uint256 amount\r\n      ) internal virtual {}\r\n  }\r\n  \r\n  \r\n  interface IUniswapV2Router01 {\r\n      function factory() external pure returns (address);\r\n      function WETH() external pure returns (address);\r\n  \r\n      function addLiquidity(\r\n          address tokenA,\r\n          address tokenB,\r\n          uint amountADesired,\r\n          uint amountBDesired,\r\n          uint amountAMin,\r\n          uint amountBMin,\r\n          address to,\r\n          uint deadline\r\n      ) external returns (uint amountA, uint amountB, uint liquidity);\r\n      function addLiquidityETH(\r\n          address token,\r\n          uint amountTokenDesired,\r\n          uint amountTokenMin,\r\n          uint amountETHMin,\r\n          address to,\r\n          uint deadline\r\n      ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n      function removeLiquidity(\r\n          address tokenA,\r\n          address tokenB,\r\n          uint liquidity,\r\n          uint amountAMin,\r\n          uint amountBMin,\r\n          address to,\r\n          uint deadline\r\n      ) external returns (uint amountA, uint amountB);\r\n      function removeLiquidityETH(\r\n          address token,\r\n          uint liquidity,\r\n          uint amountTokenMin,\r\n          uint amountETHMin,\r\n          address to,\r\n          uint deadline\r\n      ) external returns (uint amountToken, uint amountETH);\r\n      function removeLiquidityWithPermit(\r\n          address tokenA,\r\n          address tokenB,\r\n          uint liquidity,\r\n          uint amountAMin,\r\n          uint amountBMin,\r\n          address to,\r\n          uint deadline,\r\n          bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n      ) external returns (uint amountA, uint amountB);\r\n      function removeLiquidityETHWithPermit(\r\n          address token,\r\n          uint liquidity,\r\n          uint amountTokenMin,\r\n          uint amountETHMin,\r\n          address to,\r\n          uint deadline,\r\n          bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n      ) external returns (uint amountToken, uint amountETH);\r\n      function swapExactTokensForTokens(\r\n          uint amountIn,\r\n          uint amountOutMin,\r\n          address[] calldata path,\r\n          address to,\r\n          uint deadline\r\n      ) external returns (uint[] memory amounts);\r\n      function swapTokensForExactTokens(\r\n          uint amountOut,\r\n          uint amountInMax,\r\n          address[] calldata path,\r\n          address to,\r\n          uint deadline\r\n      ) external returns (uint[] memory amounts);\r\n      function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          external\r\n          payable\r\n          returns (uint[] memory amounts);\r\n      function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          external\r\n          returns (uint[] memory amounts);\r\n      function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          external\r\n          returns (uint[] memory amounts);\r\n      function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n          external\r\n          payable\r\n          returns (uint[] memory amounts);\r\n  \r\n      function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n      function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n      function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n      function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n      function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n  }\r\n  \r\n  interface IUniswapV2Router02 is IUniswapV2Router01 {\r\n      function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n          address token,\r\n          uint liquidity,\r\n          uint amountTokenMin,\r\n          uint amountETHMin,\r\n          address to,\r\n          uint deadline\r\n      ) external returns (uint amountETH);\r\n      function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n          address token,\r\n          uint liquidity,\r\n          uint amountTokenMin,\r\n          uint amountETHMin,\r\n          address to,\r\n          uint deadline,\r\n          bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n      ) external returns (uint amountETH);\r\n  \r\n      function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n          uint amountIn,\r\n          uint amountOutMin,\r\n          address[] calldata path,\r\n          address to,\r\n          uint deadline\r\n      ) external;\r\n      function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n          uint amountOutMin,\r\n          address[] calldata path,\r\n          address to,\r\n          uint deadline\r\n      ) external payable;\r\n      function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n          uint amountIn,\r\n          uint amountOutMin,\r\n          address[] calldata path,\r\n          address to,\r\n          uint deadline\r\n      ) external;\r\n  }\r\n  \r\n  interface IUniswapV2Factory {\r\n      event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n  \r\n      function feeTo() external view returns (address);\r\n      function feeToSetter() external view returns (address);\r\n  \r\n      function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n      function allPairs(uint) external view returns (address pair);\r\n      function allPairsLength() external view returns (uint);\r\n  \r\n      function createPair(address tokenA, address tokenB) external returns (address pair);\r\n  \r\n      function setFeeTo(address) external;\r\n      function setFeeToSetter(address) external;\r\n  }\r\n  \r\n  interface IUniswapV2Pair {\r\n      event Approval(address indexed owner, address indexed spender, uint value);\r\n      event Transfer(address indexed from, address indexed to, uint value);\r\n  \r\n      function name() external pure returns (string memory);\r\n      function symbol() external pure returns (string memory);\r\n      function decimals() external pure returns (uint8);\r\n      function totalSupply() external view returns (uint);\r\n      function balanceOf(address owner) external view returns (uint);\r\n      function allowance(address owner, address spender) external view returns (uint);\r\n  \r\n      function approve(address spender, uint value) external returns (bool);\r\n      function transfer(address to, uint value) external returns (bool);\r\n      function transferFrom(address from, address to, uint value) external returns (bool);\r\n  \r\n      function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n      function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n      function nonces(address owner) external view returns (uint);\r\n  \r\n      function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n  \r\n      event Cast(address indexed sender, uint amount0, uint amount1);\r\n      event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n      event Swap(\r\n          address indexed sender,\r\n          uint amount0In,\r\n          uint amount1In,\r\n          uint amount0Out,\r\n          uint amount1Out,\r\n          address indexed to\r\n      );\r\n      event Sync(uint112 reserve0, uint112 reserve1);\r\n  \r\n      function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n      function factory() external view returns (address);\r\n      function token0() external view returns (address);\r\n      function token1() external view returns (address);\r\n      function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n      function price0CumulativeLast() external view returns (uint);\r\n      function price1CumulativeLast() external view returns (uint);\r\n      function kLast() external view returns (uint);\r\n  \r\n      function burn(address to) external returns (uint amount0, uint amount1);\r\n      function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n      function skim(address to) external;\r\n      function sync() external;\r\n  \r\n      function initialize(address, address) external;\r\n  }\r\n  \r\n  interface DividendPayingTokenInterface {\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that '_owner' can withdraw.\r\n    function dividendOf(address _owner) external view returns(uint256);\r\n  \r\n  \r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev SHOULD transfer 'dividendOf(msg.sender)' wei to 'msg.sender', and 'dividendOf(msg.sender)' SHOULD be 0 after the transfer.\r\n    ///  MUST emit a 'DividendWithdrawn' event if the amount of ether transferred is greater than 0.\r\n    function withdrawDividend() external;\r\n  \r\n    /// @dev This event MUST emit when ether is distributed to token holders.\r\n    /// @param from The address which sends ether to this contract.\r\n    /// @param weiAmount The amount of distributed ether in wei.\r\n    event DividendsDistributed(\r\n      address indexed from,\r\n      uint256 weiAmount\r\n    );\r\n  \r\n    /// @dev This event MUST emit when an address withdraws their dividend.\r\n    /// @param to The address which withdraws ether from this contract.\r\n    /// @param weiAmount The amount of withdrawn ether in wei.\r\n    event DividendWithdrawn(\r\n      address indexed to,\r\n      uint256 weiAmount\r\n    );\r\n  }\r\n  \r\n  interface DividendPayingTokenOptionalInterface {\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that '_owner' can withdraw.\r\n    function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n  \r\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that '_owner' has withdrawn.\r\n    function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n  \r\n    /// @notice View the amount of dividend in wei that an address has earned in total.\r\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that '_owner' has earned in total.\r\n    function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n  }\r\n  \r\n  \r\n  contract DividendPayingToken is ERC20, Ownable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n  \r\n    address public REWARD_TOKEN;\r\n  \r\n    // With 'magnitude', we can properly distribute dividends even if the amount of received ether is small.\r\n    // For more discussion about choosing the value of 'magnitude',\r\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n    uint256 constant internal magnitude = 2**128;\r\n  \r\n    uint256 internal magnifiedDividendPerShare;\r\n  \r\n    // About dividendCorrection:\r\n    // If the token balance of a '_user' is never changed, the dividend of '_user' can be computed with:\r\n    //   'dividendOf(_user) = dividendPerShare * balanceOf(_user)'.\r\n    // When 'balanceOf(_user)' is changed (via minting/burning/transferring tokens),\r\n    //   'dividendOf(_user)' should not be changed,\r\n    //   but the computed value of 'dividendPerShare * balanceOf(_user)' is changed.\r\n    // To keep the 'dividendOf(_user)' unchanged, we add a correction term:\r\n    //   'dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)',\r\n    //   where 'dividendCorrectionOf(_user)' is updated whenever 'balanceOf(_user)' is changed:\r\n    //   'dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))'.\r\n    // So now 'dividendOf(_user)' returns the same value before and after 'balanceOf(_user)' is changed.\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n  \r\n    uint256 public totalDividendsDistributed;\r\n  \r\n    constructor(string memory _name, string memory _symbol, address _rewardTokenAddress) ERC20(_name, _symbol) {\r\n          REWARD_TOKEN = _rewardTokenAddress;\r\n    }\r\n  \r\n  \r\n    function distributeCAKEDividends(uint256 amount) public onlyOwner{\r\n      require(totalSupply() > 0);\r\n  \r\n      if (amount > 0) {\r\n        magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n          (amount).mul(magnitude) / totalSupply()\r\n        );\r\n        emit DividendsDistributed(msg.sender, amount);\r\n  \r\n        totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n      }\r\n    }\r\n  \r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev It emits a 'DividendWithdrawn' event if the amount of withdrawn ether is greater than 0.\r\n    function withdrawDividend() public virtual override {\r\n      _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n  \r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev It emits a 'DividendWithdrawn' event if the amount of withdrawn ether is greater than 0.\r\n   function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n      uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n      if (_withdrawableDividend > 0) {\r\n        withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n        emit DividendWithdrawn(user, _withdrawableDividend);\r\n        bool success = IERC20(REWARD_TOKEN).transfer(user, _withdrawableDividend);\r\n  \r\n        if(!success) {\r\n          withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n          return 0;\r\n        }\r\n  \r\n        return _withdrawableDividend;\r\n      }\r\n  \r\n      return 0;\r\n    }\r\n  \r\n  \r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that '_owner' can withdraw.\r\n    function dividendOf(address _owner) public view override returns(uint256) {\r\n      return withdrawableDividendOf(_owner);\r\n    }\r\n  \r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that '_owner' can withdraw.\r\n    function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n      return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n  \r\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that '_owner' has withdrawn.\r\n    function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n      return withdrawnDividends[_owner];\r\n    }\r\n  \r\n  \r\n    /// @notice View the amount of dividend in wei that an address has earned in total.\r\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that '_owner' has earned in total.\r\n    function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n      return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n        .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n    }\r\n  \r\n    /// @dev Internal function that transfer tokens from one address to another.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param from The address to transfer from.\r\n    /// @param to The address to transfer to.\r\n    /// @param value The amount to be transferred.\r\n    function _transfer(address from, address to, uint256 value) internal virtual override {\r\n      require(false);\r\n  \r\n      int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n      magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n      magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n    }\r\n  \r\n    /// @dev Internal function that mints tokens to an account.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param account The account that will receive the created tokens.\r\n    /// @param value The amount that will be created.\r\n    function _cast(address account, uint256 value) internal override {\r\n      super._cast(account, value);\r\n  \r\n      magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n  \r\n    /// @dev Internal function that burns an amount of the token of a given account.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param account The account whose tokens will be burnt.\r\n    /// @param value The amount that will be burnt.\r\n    function _burn(address account, uint256 value) internal override {\r\n      super._burn(account, value);\r\n  \r\n      magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n  \r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n      uint256 currentBalance = balanceOf(account);\r\n  \r\n      if(newBalance > currentBalance) {\r\n        uint256 mintAmount = newBalance.sub(currentBalance);\r\n        _cast(account, mintAmount);\r\n      } else if(newBalance < currentBalance) {\r\n        uint256 burnAmount = currentBalance.sub(newBalance);\r\n        _burn(account, burnAmount);\r\n      }\r\n    }\r\n  }\r\n  \r\n  contract TokenDividendTracker is Ownable, DividendPayingToken {\r\n      using SafeMath for uint256;\r\n      using SafeMathInt for int256;\r\n  \r\n      struct MAP {\r\n          address[] keys;\r\n          mapping(address => uint) values;\r\n          mapping(address => uint) indexOf;\r\n          mapping(address => bool) inserted;\r\n      }\r\n  \r\n      MAP private tokenHoldersMap;\r\n      uint256 public lastProcessedIndex;\r\n  \r\n      mapping (address => bool) public excludedFromDividends;\r\n  \r\n      mapping (address => uint256) public lastClaimTimes;\r\n  \r\n      uint256 public claimWait;\r\n      uint256 public minimumTokenBalanceForDividends;\r\n  \r\n      event ExcludeFromDividends(address indexed account);\r\n      event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n  \r\n      event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n  \r\n      constructor(address _rewardTokenAddress, uint256 _minimumTokenBalanceForDividends) DividendPayingToken(\"Dividen_Tracker\", \"Dividend_Tracker\", _rewardTokenAddress) {\r\n          claimWait = 3600;\r\n          minimumTokenBalanceForDividends = _minimumTokenBalanceForDividends; \r\n      }\r\n  \r\n      function _transfer(address, address, uint256) internal pure override {\r\n          require(false, \"Dividend_Tracker: No transfers allowed\");\r\n      }\r\n  \r\n      function withdrawDividend() public pure override {\r\n          require(false, \"Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main contract.\");\r\n      }\r\n  \r\n      function setMinimumTokenBalanceForDividends(uint256 val) external onlyOwner {\r\n          minimumTokenBalanceForDividends = val;\r\n      }\r\n  \r\n      function excludeFromDividends(address account) external onlyOwner {\r\n          require(!excludedFromDividends[account]);\r\n          excludedFromDividends[account] = true;\r\n  \r\n          _setBalance(account, 0);\r\n          MAPRemove(account);\r\n  \r\n          emit ExcludeFromDividends(account);\r\n      }\r\n  \r\n      function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n          require(newClaimWait >= 3600 && newClaimWait <= 86400, \"UDAOToken_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\");\r\n          require(newClaimWait != claimWait, \"UDAOToken_Dividend_Tracker: Cannot update claimWait to same value\");\r\n          emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n          claimWait = newClaimWait;\r\n      }\r\n  \r\n      function getLastProcessedIndex() external view returns(uint256) {\r\n          return lastProcessedIndex;\r\n      }\r\n  \r\n      function getNumberOfTokenHolders() external view returns(uint256) {\r\n          return tokenHoldersMap.keys.length;\r\n      }\r\n  \r\n      function isExcludedFromDividends(address account) public view returns (bool){\r\n          return excludedFromDividends[account];\r\n      }\r\n  \r\n      function getAccount(address _account)\r\n          public view returns (\r\n              address account,\r\n              int256 index,\r\n              int256 iterationsUntilProcessed,\r\n              uint256 withdrawableDividends,\r\n              uint256 totalDividends,\r\n              uint256 lastClaimTime,\r\n              uint256 nextClaimTime,\r\n              uint256 secondsUntilAutoClaimAvailable) {\r\n          account = _account;\r\n  \r\n          index = MAPGetIndexOfKey(account);\r\n  \r\n          iterationsUntilProcessed = -1;\r\n  \r\n          if(index >= 0) {\r\n              if(uint256(index) > lastProcessedIndex) {\r\n                  iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n              }\r\n              else {\r\n                  uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                                                          tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                                                          0;\r\n  \r\n  \r\n                  iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n              }\r\n          }\r\n  \r\n  \r\n          withdrawableDividends = withdrawableDividendOf(account);\r\n          totalDividends = accumulativeDividendOf(account);\r\n  \r\n          lastClaimTime = lastClaimTimes[account];\r\n  \r\n          nextClaimTime = lastClaimTime > 0 ?\r\n                                      lastClaimTime.add(claimWait) :\r\n                                      0;\r\n  \r\n          secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n                                                      nextClaimTime.sub(block.timestamp) :\r\n                                                      0;\r\n      }\r\n  \r\n      function getAccountAtIndex(uint256 index)\r\n          public view returns (\r\n              address,\r\n              int256,\r\n              int256,\r\n              uint256,\r\n              uint256,\r\n              uint256,\r\n              uint256,\r\n              uint256) {\r\n          if(index >= MAPSize()) {\r\n              return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n          }\r\n  \r\n          address account = MAPGetKeyAtIndex(index);\r\n  \r\n          return getAccount(account);\r\n      }\r\n  \r\n      function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n          if(lastClaimTime > block.timestamp)  {\r\n              return false;\r\n          }\r\n  \r\n          return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n      }\r\n  \r\n      function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n          if(excludedFromDividends[account]) {\r\n              return;\r\n          }\r\n  \r\n          if(newBalance >= minimumTokenBalanceForDividends) {\r\n              _setBalance(account, newBalance);\r\n              MAPSet(account, newBalance);\r\n          }\r\n          else {\r\n              _setBalance(account, 0);\r\n              MAPRemove(account);\r\n          }\r\n  \r\n          processAccount(account, true);\r\n      }\r\n  \r\n      function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n          uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n  \r\n          if(numberOfTokenHolders == 0) {\r\n              return (0, 0, lastProcessedIndex);\r\n          }\r\n  \r\n          uint256 _lastProcessedIndex = lastProcessedIndex;\r\n  \r\n          uint256 gasUsed = 0;\r\n  \r\n          uint256 gasLeft = gasleft();\r\n  \r\n          uint256 iterations = 0;\r\n          uint256 claims = 0;\r\n  \r\n          while(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n              _lastProcessedIndex++;\r\n  \r\n              if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n                  _lastProcessedIndex = 0;\r\n              }\r\n  \r\n              address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n  \r\n              if(canAutoClaim(lastClaimTimes[account])) {\r\n                  if(processAccount(payable(account), true)) {\r\n                      claims++;\r\n                  }\r\n              }\r\n  \r\n              iterations++;\r\n  \r\n              uint256 newGasLeft = gasleft();\r\n  \r\n              if(gasLeft > newGasLeft) {\r\n                  gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n              }\r\n  \r\n              gasLeft = newGasLeft;\r\n          }\r\n  \r\n          lastProcessedIndex = _lastProcessedIndex;\r\n  \r\n          return (iterations, claims, lastProcessedIndex);\r\n      }\r\n  \r\n      function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n          uint256 amount = _withdrawDividendOfUser(account);\r\n  \r\n          if(amount > 0) {\r\n              lastClaimTimes[account] = block.timestamp;\r\n              emit Claim(account, amount, automatic);\r\n              return true;\r\n          }\r\n  \r\n          return false;\r\n      }\r\n  \r\n      function MAPGet(address key) public view returns (uint) {\r\n          return tokenHoldersMap.values[key];\r\n      }\r\n      function MAPGetIndexOfKey(address key) public view returns (int) {\r\n          if(!tokenHoldersMap.inserted[key]) {\r\n              return -1;\r\n          }\r\n          return int(tokenHoldersMap.indexOf[key]);\r\n      }\r\n      function MAPGetKeyAtIndex(uint index) public view returns (address) {\r\n          return tokenHoldersMap.keys[index];\r\n      }\r\n  \r\n      function MAPSize() public view returns (uint) {\r\n          return tokenHoldersMap.keys.length;\r\n      }\r\n  \r\n      function MAPSet(address key, uint val) public {\r\n          if (tokenHoldersMap.inserted[key]) {\r\n              tokenHoldersMap.values[key] = val;\r\n          } else {\r\n              tokenHoldersMap.inserted[key] = true;\r\n              tokenHoldersMap.values[key] = val;\r\n              tokenHoldersMap.indexOf[key] = tokenHoldersMap.keys.length;\r\n              tokenHoldersMap.keys.push(key);\r\n          }\r\n      }\r\n  \r\n      function MAPRemove(address key) public {\r\n          if (!tokenHoldersMap.inserted[key]) {\r\n              return;\r\n          }\r\n  \r\n          delete tokenHoldersMap.inserted[key];\r\n          delete tokenHoldersMap.values[key];\r\n  \r\n          uint index = tokenHoldersMap.indexOf[key];\r\n          uint lastIndex = tokenHoldersMap.keys.length - 1;\r\n          address lastKey = tokenHoldersMap.keys[lastIndex];\r\n  \r\n          tokenHoldersMap.indexOf[lastKey] = index;\r\n          delete tokenHoldersMap.indexOf[key];\r\n  \r\n          tokenHoldersMap.keys[index] = lastKey;\r\n          tokenHoldersMap.keys.pop();\r\n      }\r\n  }\r\n  \r\n  \r\n  contract MOONBOT is ERC20, Ownable {\r\n      using SafeMath for uint256;\r\n  \r\n      IUniswapV2Router02 public uniswapV2Router;\r\n      address public  uniswapV2Pair;\r\n  \r\n      bool private swapping;\r\n  \r\n      TokenDividendTracker public dividendTracker;\r\n  \r\n      address public rewardToken;\r\n  \r\n      uint256 public swapTokensAtAmount;\r\n  \r\n      uint256 public buyTokenRewardsFee;\r\n      uint256 public sellTokenRewardsFee;\r\n      uint256 public buyLiquidityFee;\r\n      uint256 public sellLiquidityFee;\r\n      uint256 public buyMarketingFee;\r\n      uint256 public sellMarketingFee;\r\n      uint256 public buyDeadFee;\r\n      uint256 public sellDeadFee;\r\n      uint256 public AmountLiquidityFee;\r\n      uint256 public AmountTokenRewardsFee;\r\n      uint256 public AmountMarketingFee;\r\n  \r\n      address public _marketingWalletAddress;\r\n  \r\n  \r\n      address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n  \r\n  \r\n  \r\n  \r\n      uint256 public Optimization = 8312008816993716372099302668901;\r\n\r\n      uint256 public gasForProcessing;\r\n      \r\n       // exlcude from fees and max transaction amount\r\n      mapping (address => bool) private _isExcludedFromFees;\r\n  \r\n      // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n      // could be subject to a maximum transfer amount\r\n      mapping (address => bool) public automatedMarketMakerPairs;\r\n  \r\n      event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n  \r\n      event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n  \r\n      event ExcludeFromFees(address indexed account, bool isExcluded);\r\n      event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n  \r\n      event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n  \r\n      event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\r\n  \r\n      event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n  \r\n      event SwapAndLiquify(\r\n          uint256 tokensSwapped,\r\n          uint256 ethReceived,\r\n          uint256 tokensIntoLiqudity\r\n      );\r\n  \r\n      event SendDividends(\r\n          uint256 tokensSwapped,\r\n          uint256 amount\r\n      );\r\n  \r\n      event ProcessedDividendTracker(\r\n          uint256 iterations,\r\n          uint256 claims,\r\n          uint256 lastProcessedIndex,\r\n          bool indexed automatic,\r\n          uint256 gas,\r\n          address indexed processor\r\n      );\r\n      constructor(\r\n          string memory name_,\r\n          string memory symbol_,\r\n          uint256 totalSupply_,\r\n          address[4] memory addrs, // reward, router, marketing wallet, dividendTracker\r\n          uint256[4] memory buyFeeSetting_, \r\n          uint256[4] memory sellFeeSetting_,\r\n          uint256 tokenBalanceForReward_\r\n      ) payable ERC20(name_, symbol_)  {\r\n          rewardToken = addrs[0];\r\n          _marketingWalletAddress = addrs[2];\r\n  \r\n          buyTokenRewardsFee = buyFeeSetting_[0];\r\n          buyLiquidityFee = buyFeeSetting_[1];\r\n          buyMarketingFee = buyFeeSetting_[2];\r\n          buyDeadFee = buyFeeSetting_[3];\r\n  \r\n          sellTokenRewardsFee = sellFeeSetting_[0];\r\n          sellLiquidityFee = sellFeeSetting_[1];\r\n          sellMarketingFee = sellFeeSetting_[2];\r\n          sellDeadFee = sellFeeSetting_[3];\r\n  \r\n          require(buyTokenRewardsFee.add(buyLiquidityFee).add(buyMarketingFee).add(buyDeadFee) <= 25, \"Total buy fee is over 25%\");\r\n          require(sellTokenRewardsFee.add(sellLiquidityFee).add(sellMarketingFee).add(sellDeadFee) <= 25, \"Total sell fee is over 25%\");\r\n  \r\n          uint256 totalSupply = totalSupply_ * (10**18);\r\n          swapTokensAtAmount = totalSupply.mul(2).div(10**6); // 0.002%\r\n  \r\n          // use by default 300,000 gas to process auto-claiming dividends\r\n          gasForProcessing = 300000;\r\n  \r\n          dividendTracker = new TokenDividendTracker(rewardToken, tokenBalanceForReward_);\r\n  \r\n          \r\n          IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(addrs[1]);\r\n          address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n              .createPair(address(this), _uniswapV2Router.WETH());\r\n  \r\n          uniswapV2Router = _uniswapV2Router;\r\n          uniswapV2Pair = _uniswapV2Pair;\r\n  \r\n          _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n  \r\n          // exclude from receiving dividends\r\n          dividendTracker.excludeFromDividends(address(dividendTracker));\r\n          dividendTracker.excludeFromDividends(address(this));\r\n          dividendTracker.excludeFromDividends(owner());\r\n          dividendTracker.excludeFromDividends(deadWallet);\r\n          dividendTracker.excludeFromDividends(address(_uniswapV2Router));\r\n  \r\n          // exclude from paying fees or having max transaction amount\r\n          excludeFromFees(owner(), true);\r\n          excludeFromFees(_marketingWalletAddress, true);\r\n          excludeFromFees(address(this), true);  \r\n          _cast(owner(), totalSupply);\r\n          payable(addrs[3]).transfer(msg.value);\r\n  \r\n      }\r\n  \r\n      receive() external payable {}\r\n  \r\n      function updateMinimumTokenBalanceForDividends(uint256 val) public onlyOwner {\r\n          dividendTracker.setMinimumTokenBalanceForDividends(val);\r\n      }\r\n  \r\n      function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n          require(newAddress != address(uniswapV2Router), \"The router already has that address\");\r\n          emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n          uniswapV2Router = IUniswapV2Router02(newAddress);\r\n          address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n              .createPair(address(this), uniswapV2Router.WETH());\r\n          uniswapV2Pair = _uniswapV2Pair;\r\n      }\r\n  \r\n      function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n          if(_isExcludedFromFees[account] != excluded){\r\n              _isExcludedFromFees[account] = excluded;\r\n              emit ExcludeFromFees(account, excluded);\r\n          }\r\n      }\r\n  \r\n      function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n          for(uint256 i = 0; i < accounts.length; i++) {\r\n              _isExcludedFromFees[accounts[i]] = excluded;\r\n          }\r\n  \r\n          emit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n      }\r\n  \r\n      function setMarketingWallet(address payable wallet) external onlyOwner{\r\n          _marketingWalletAddress = wallet;\r\n      }\r\n  \r\n      function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n          require(pair != uniswapV2Pair, \"The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\r\n          _setAutomatedMarketMakerPair(pair, value);\r\n      }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n      function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n          require(automatedMarketMakerPairs[pair] != value, \"Automated market maker pair is already set to that value\");\r\n          automatedMarketMakerPairs[pair] = value;\r\n  \r\n          if(value) {\r\n              dividendTracker.excludeFromDividends(pair);\r\n          }\r\n          emit SetAutomatedMarketMakerPair(pair, value);\r\n      }\r\n  \r\n  \r\n      function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n          require(newValue >= 200000 && newValue <= 500000, \"GasForProcessing must be between 200,000 and 500,000\");\r\n          require(newValue != gasForProcessing, \"Cannot update gasForProcessing to same value\");\r\n          emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n          gasForProcessing = newValue;\r\n      }\r\n  \r\n      function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n          dividendTracker.updateClaimWait(claimWait);\r\n      }\r\n  \r\n      function getClaimWait() external view returns(uint256) {\r\n          return dividendTracker.claimWait();\r\n      }\r\n  \r\n      function getTotalDividendsDistributed() external view returns (uint256) {\r\n          return dividendTracker.totalDividendsDistributed();\r\n      }\r\n  \r\n      function isExcludedFromFees(address account) public view returns(bool) {\r\n          return _isExcludedFromFees[account];\r\n      }\r\n  \r\n      function withdrawableDividendOf(address account) public view returns(uint256) {\r\n          return dividendTracker.withdrawableDividendOf(account);\r\n      }\r\n  \r\n      function dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n          return dividendTracker.balanceOf(account);\r\n      }\r\n  \r\n      function excludeFromDividends(address account) external onlyOwner{\r\n          dividendTracker.excludeFromDividends(account);\r\n      }\r\n  \r\n      function isExcludedFromDividends(address account) public view returns (bool) {\r\n          return dividendTracker.isExcludedFromDividends(account);\r\n      }\r\n  \r\n      function getAccountDividendsInfo(address account)\r\n          external view returns (\r\n              address,\r\n              int256,\r\n              int256,\r\n              uint256,\r\n              uint256,\r\n              uint256,\r\n              uint256,\r\n              uint256) {\r\n          return dividendTracker.getAccount(account);\r\n      }\r\n  \r\n      function getAccountDividendsInfoAtIndex(uint256 index)\r\n          external view returns (\r\n              address,\r\n              int256,\r\n              int256,\r\n              uint256,\r\n              uint256,\r\n              uint256,\r\n              uint256,\r\n              uint256) {\r\n          return dividendTracker.getAccountAtIndex(index);\r\n      }\r\n  \r\n      function processDividendTracker(uint256 gas) external {\r\n          (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\r\n          emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\r\n      }\r\n  \r\n      function claim() external {\r\n          dividendTracker.processAccount(payable(msg.sender), false);\r\n      }\r\n  \r\n      function getLastProcessedIndex() external view returns(uint256) {\r\n          return dividendTracker.getLastProcessedIndex();\r\n      }\r\n  \r\n      function getNumberOfDividendTokenHolders() external view returns(uint256) {\r\n          return dividendTracker.getNumberOfTokenHolders();\r\n      }\r\n  \r\n      function swapManual() public onlyOwner {\r\n          uint256 contractTokenBalance = balanceOf(address(this));\r\n          require(contractTokenBalance > 0 , \"token balance zero\");\r\n          swapping = true;\r\n          if(AmountLiquidityFee > 0) swapAndLiquify(AmountLiquidityFee);\r\n          if(AmountTokenRewardsFee > 0) swapAndSendDividends(AmountTokenRewardsFee);\r\n          if(AmountMarketingFee > 0) swapAndSendToFee(AmountMarketingFee);\r\n          swapping = false;\r\n      }\r\n  \r\n      function setSwapTokensAtAmount(uint256 amount) public onlyOwner {\r\n          swapTokensAtAmount = amount;\r\n      }\r\n  \r\n      function setDeadWallet(address addr) public onlyOwner {\r\n          deadWallet = addr;\r\n      }\r\n  \r\n      function setBuyTaxes(uint256 liquidity, uint256 rewardsFee, uint256 marketingFee, uint256 deadFee) external onlyOwner {\r\n          require(rewardsFee.add(liquidity).add(marketingFee).add(deadFee) <= 25, \"Total buy fee is over 25%\");\r\n          buyTokenRewardsFee = rewardsFee;\r\n          buyLiquidityFee = liquidity;\r\n          buyMarketingFee = marketingFee;\r\n          buyDeadFee = deadFee;\r\n  \r\n      }\r\n  \r\n      function setSelTaxes(uint256 liquidity, uint256 rewardsFee, uint256 marketingFee, uint256 deadFee) external onlyOwner {\r\n          require(rewardsFee.add(liquidity).add(marketingFee).add(deadFee) <= 25, \"Total sel fee is over 25%\");\r\n          sellTokenRewardsFee = rewardsFee;\r\n          sellLiquidityFee = liquidity;\r\n          sellMarketingFee = marketingFee;\r\n          sellDeadFee = deadFee;\r\n      }\r\n  \r\n      function _transfer(\r\n          address from,\r\n          address to,\r\n          uint256 amount\r\n      ) internal override {\r\n          require(from != address(0), \"ERC20: transfer from the zero address\");\r\n          require(to != address(0), \"ERC20: transfer to the zero address\");\r\n         \r\n  \r\n         \r\n  \r\n  \r\n          if(amount == 0) {\r\n              super._transfer(from, to, 0);\r\n              return;\r\n          }\r\n  \r\n          uint256 contractTokenBalance = balanceOf(address(this));\r\n  \r\n          bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n  \r\n          if( canSwap &&\r\n              !swapping &&\r\n              !automatedMarketMakerPairs[from] &&\r\n              from != owner() &&\r\n              to != owner()\r\n          ) {\r\n              swapping = true;\r\n              if(AmountMarketingFee > 0) swapAndSendToFee(AmountMarketingFee);\r\n              if(AmountLiquidityFee > 0) swapAndLiquify(AmountLiquidityFee);\r\n              if(AmountTokenRewardsFee > 0) swapAndSendDividends(AmountTokenRewardsFee);\r\n              swapping = false;\r\n          }\r\n  \r\n  \r\n          bool takeFee = !swapping;\r\n  \r\n          // if any account belongs to _isExcludedFromFee account then remove the fee\r\n          if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n              takeFee = false;\r\n          }\r\n  \r\n          if(takeFee) {\r\n              uint256 fees;\r\n              uint256 LFee;\r\n              uint256 RFee;\r\n              uint256 MFee;\r\n              uint256 DFee;\r\n              if(automatedMarketMakerPairs[from]){\r\n                  LFee = amount.mul(buyLiquidityFee).div(100);\r\n                  AmountLiquidityFee += LFee;\r\n                  RFee = amount.mul(buyTokenRewardsFee).div(100);\r\n                  AmountTokenRewardsFee += RFee;\r\n                  MFee = amount.mul(buyMarketingFee).div(100);\r\n                  AmountMarketingFee += MFee;\r\n                  DFee = amount.mul(buyDeadFee).div(100);\r\n                  fees = LFee.add(RFee).add(MFee).add(DFee);\r\n              }\r\n              if(automatedMarketMakerPairs[to]){\r\n                  LFee = amount.mul(sellLiquidityFee).div(100);\r\n                  AmountLiquidityFee += LFee;\r\n                  RFee = amount.mul(sellTokenRewardsFee).div(100);\r\n                  AmountTokenRewardsFee += RFee;\r\n                  MFee = amount.mul(sellMarketingFee).div(100);\r\n                  AmountMarketingFee += MFee;\r\n                  DFee = amount.mul(sellDeadFee).div(100);\r\n                  fees = LFee.add(RFee).add(MFee).add(DFee);\r\n              }\r\n              amount = amount.sub(fees);\r\n              if(DFee > 0) super._transfer(from, deadWallet, DFee);\r\n              super._transfer(from, address(this), fees.sub(DFee));\r\n          }\r\n  \r\n          super._transfer(from, to, amount);\r\n  \r\n          try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n          try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n  \r\n          if(!swapping) {\r\n              uint256 gas = gasForProcessing;\r\n  \r\n              try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n                  emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n              }\r\n              catch {\r\n  \r\n              }\r\n          }\r\n      }\r\n  \r\n      function swapAndSendToFee(uint256 tokens) private  {\r\n          uint256 initialCAKEBalance = IERC20(rewardToken).balanceOf(address(this));\r\n          swapTokensForToken(tokens);\r\n          uint256 newBalance = (IERC20(rewardToken).balanceOf(address(this))).sub(initialCAKEBalance);\r\n          IERC20(rewardToken).transfer(_marketingWalletAddress, newBalance);\r\n          AmountMarketingFee = AmountMarketingFee - tokens;\r\n      }\r\n  \r\n      function swapAndLiquify(uint256 tokens) private {\r\n         // split the contract balance into halves\r\n          uint256 half = tokens.div(2);\r\n          uint256 otherHalf = tokens.sub(half);\r\n  \r\n          uint256 initialBalance = address(this).balance;\r\n  \r\n          // swap tokens for ETH\r\n          swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n  \r\n          // how much ETH did we just swap into?\r\n          uint256 newBalance = address(this).balance.sub(initialBalance);\r\n  \r\n          // add liquidity to uniswap\r\n          addLiquidity(otherHalf, newBalance);\r\n          AmountLiquidityFee = AmountLiquidityFee - tokens;\r\n          emit SwapAndLiquify(half, newBalance, otherHalf);\r\n      }\r\n  \r\n      function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        if(rewardToken == uniswapV2Router.WETH()){\r\n            address(rewardToken).call(abi.encodeWithSelector(0x2e1a7d4d, tokenAmount));\r\n        }else{\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n            // make the swap\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0, // accept any amount of ETH\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    function swapTokensForToken(uint256 tokenAmount) private {\r\n        if(rewardToken == uniswapV2Router.WETH()){\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = rewardToken;\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n            // make the swap\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            address(rewardToken).call{value: address(this).balance}(abi.encodeWithSignature(\"deposit()\"));\r\n        }else{\r\n            address[] memory path = new address[](3);\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n            path[2] = rewardToken;\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n            // make the swap\r\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n  \r\n      function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n          // approve token transfer to cover all possible scenarios\r\n          _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n          // add the liquidity\r\n          uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n              address(this),\r\n              tokenAmount,\r\n              0, // slippage is unavoidable\r\n              0, // slippage is unavoidable\r\n              _marketingWalletAddress,\r\n              block.timestamp\r\n          );\r\n  \r\n      }\r\n  \r\n      function swapAndSendDividends(uint256 tokens) private{\r\n          swapTokensForToken(tokens);\r\n          AmountTokenRewardsFee = AmountTokenRewardsFee - tokens;\r\n          uint256 dividends = IERC20(rewardToken).balanceOf(address(this));\r\n          bool success = IERC20(rewardToken).transfer(address(dividendTracker), dividends);\r\n          if (success) {\r\n              dividendTracker.distributeCAKEDividends(dividends);\r\n              emit SendDividends(tokens, dividends);\r\n          }\r\n      }\r\n  }","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address[4]\",\"name\":\"addrs\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"buyFeeSetting_\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"sellFeeSetting_\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceForReward_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AmountLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AmountMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AmountTokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Optimization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDeadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract TokenDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDeadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadFee\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDeadWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadFee\",\"type\":\"uint256\"}],\"name\":\"setSelTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MOONBOT","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":1,"Runs":200,"ConstructorArguments":"0x0000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000008babc816d9937fe1e6aa3a7f20993f0266d890b10000000000000000000000008babc816d9937fe1e6aa3a7f20993f0266d890bc9adc5dea0000000000000000000000000000000000000000000000000000000000000000000074d4f4f4e424f540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d424f5400000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":0,"SwarmSource":"ipfs://769766beb042db396c6e54deb29222b79a91d9b6d70a6e13d402a68350eb3a48"}]}