{"expiry":1699492107,"data":[{"SourceCode":{"language":"Solidity","sources":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"contracts/Pool.sol":{"content":"//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract ReferalPool is Ownable {\n    enum ReferalLevels {\n        Basic,\n        Advanced,\n        Pro\n    }\n    struct Referals {\n        ReferalLevels level;\n        uint256 totalRewards;\n        uint256 claimedRewards;\n        uint256 lastClaimedAt;\n        uint256 lastRewardsAt;\n        address lastRewardFrom;\n        bool isAtMaxLevel;\n        uint256 referalCount;\n    }\n\n    struct TierStructure {\n        uint256 minReferals;\n        uint256 rewardPercentage;\n    }\n\n    uint256 constant DEVIDE_FACTOR = 10000;\n\n    address public superAdmin;\n    IERC20 public Token;\n\n    uint256 public totalRewardsSent;\n\n    mapping(ReferalLevels => TierStructure) public levelDetails;\n\n    mapping(address => Referals) public referalDetails;\n\n    mapping(address => address) public userReferal;\n\n    event NewReferalAdded(address referee, address referal);\n    event NewReferalBonusAdded(address from, address to, uint256 amount);\n\n    modifier onlySuper() {\n        require(\n            msg.sender == superAdmin,\n            \"Ownable: caller is not the Super admin\"\n        );\n        _;\n    }\n\n    constructor(address _superAdmin, address _token) {\n        TierStructure storage _level1 = levelDetails[ReferalLevels.Basic];\n        TierStructure storage _level2 = levelDetails[ReferalLevels.Advanced];\n        TierStructure storage _level3 = levelDetails[ReferalLevels.Pro];\n\n        _level1.minReferals = 1;\n        _level1.rewardPercentage = 100;\n\n        _level2.minReferals = 4;\n        _level2.rewardPercentage = 200;\n\n        _level3.minReferals = 7;\n        _level3.rewardPercentage = 300;\n\n        superAdmin = _superAdmin;\n        Token = IERC20(_token);\n    }\n\n    function setReferal(address _referal) external {\n        require(\n            userReferal[msg.sender] == address(0),\n            \"Referal address already set\"\n        );\n\n        require(msg.sender != _referal, \"Can not set own address\");\n\n        userReferal[msg.sender] = _referal;\n\n        Referals storage referal = referalDetails[_referal];\n\n        referal.referalCount++;\n\n        if (!referal.isAtMaxLevel) {\n            updateReferalLevel(_referal);\n        }\n\n        emit NewReferalAdded(msg.sender, _referal);\n    }\n\n    function setReferalBonus(\n        address from,\n        uint256 buyAmount\n    ) external onlyOwner {\n        if (userReferal[from] == address(0)) return;\n        Referals storage referal = referalDetails[userReferal[from]];\n        TierStructure memory tier = levelDetails[referal.level];\n\n        uint256 _bonus = (buyAmount * tier.rewardPercentage) / DEVIDE_FACTOR;\n\n        referal.lastRewardFrom = from;\n        referal.lastRewardsAt = block.timestamp;\n        referal.totalRewards += _bonus;\n\n        Token.transfer(userReferal[from], _bonus);\n\n        emit NewReferalBonusAdded(from, userReferal[from], _bonus);\n    }\n\n    function changeTiers(\n        ReferalLevels level,\n        uint256 newMinReferals,\n        uint256 newRewardPercentage\n    ) external onlySuper {\n        TierStructure storage tier = levelDetails[level];\n\n        // Check that the provided values are valid\n        require(newMinReferals > 0, \"Minimum referrals must be greater than 0\");\n        require(\n            newRewardPercentage > 0,\n            \"Reward percentage must be greater than 0\"\n        );\n\n        // Update the tier structure with the new values\n        tier.minReferals = newMinReferals;\n        tier.rewardPercentage = newRewardPercentage;\n    }\n\n    function updateReferalLevel(address _user) internal {\n        Referals storage referal = referalDetails[_user];\n\n        uint256 referalCount = referal.referalCount;\n        ReferalLevels newLevel;\n\n        if (referalCount >= levelDetails[ReferalLevels.Pro].minReferals) {\n            newLevel = ReferalLevels.Pro;\n        } else if (\n            referalCount >= levelDetails[ReferalLevels.Advanced].minReferals\n        ) {\n            newLevel = ReferalLevels.Advanced;\n        } else {\n            newLevel = ReferalLevels.Basic;\n        }\n\n        // Update the referral's level if it has changed\n        if (referal.level != newLevel) {\n            referal.level = newLevel;\n            if (newLevel == ReferalLevels.Pro) referal.isAtMaxLevel = true;\n        }\n    }\n\n    function claimRewards() external {\n        Referals storage referal = referalDetails[msg.sender];\n\n        require(referal.totalRewards > 0, \"you didn't start earning yet\");\n\n        uint256 claimabaleRewards = referal.totalRewards -\n            referal.claimedRewards;\n\n        require(claimabaleRewards > 0, \"you don't have any claiamble rewards\");\n\n        referal.claimedRewards += claimabaleRewards;\n\n        referal.lastClaimedAt = block.timestamp;\n        Token.transfer(msg.sender, claimabaleRewards);\n\n        totalRewardsSent += claimabaleRewards;\n    }\n}\n"}},"settings":{"libraries":{},"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referal\",\"type\":\"address\"}],\"name\":\"NewReferalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewReferalBonusAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ReferalPool.ReferalLevels\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newMinReferals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardPercentage\",\"type\":\"uint256\"}],\"name\":\"changeTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ReferalPool.ReferalLevels\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minReferals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referalDetails\",\"outputs\":[{\"internalType\":\"enum ReferalPool.ReferalLevels\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardsAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lastRewardFrom\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAtMaxLevel\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"referalCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referal\",\"type\":\"address\"}],\"name\":\"setReferal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"name\":\"setReferalBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReferal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ReferalPool","CompilerVersion":"v0.8.19+commit.7dd6d404","OptimizationUsed":1,"Runs":200,"ConstructorArguments":"0x00000000000000000000000064ab7f64187af212007a3ee9fdf990101de4bc1600000000000000000000000015e5c6a964219a63e3554f9d3df817b48cf79499","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}