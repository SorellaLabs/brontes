{"expiry":1699495174,"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/TellorStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.7.4;\n\n/**\n * @title Tellor Oracle Storage Library\n * @dev Contains all the variables/structs used by Tellor\n */\n\ncontract TellorStorage {\n    //Internal struct for use in proof-of-work submission\n    struct Details {\n        uint256 value;\n        address miner;\n    }\n\n    struct Dispute {\n        bytes32 hash; //unique hash of dispute: keccak256(_miner,_requestId,_timestamp)\n        int256 tally; //current tally of votes for - against measure\n        bool executed; //is the dispute settled\n        bool disputeVotePassed; //did the vote pass?\n        bool isPropFork; //true for fork proposal NEW\n        address reportedMiner; //miner who submitted the 'bad value' will get disputeFee if dispute vote fails\n        address reportingParty; //miner reporting the 'bad value'-pay disputeFee will get reportedMiner's stake if dispute vote passes\n        address proposedForkAddress; //new fork address (if fork proposal)\n        mapping(bytes32 => uint256) disputeUintVars;\n        //Each of the variables below is saved in the mapping disputeUintVars for each disputeID\n        //e.g. TellorStorageStruct.DisputeById[disputeID].disputeUintVars[keccak256(\"requestId\")]\n        //These are the variables saved in this mapping:\n        // uint keccak256(\"requestId\");//apiID of disputed value\n        // uint keccak256(\"timestamp\");//timestamp of disputed value\n        // uint keccak256(\"value\"); //the value being disputed\n        // uint keccak256(\"minExecutionDate\");//7 days from when dispute initialized\n        // uint keccak256(\"numberOfVotes\");//the number of parties who have voted on the measure\n        // uint keccak256(\"blockNumber\");// the blocknumber for which votes will be calculated from\n        // uint keccak256(\"minerSlot\"); //index in dispute array\n        // uint keccak256(\"fee\"); //fee paid corresponding to dispute\n        mapping(address => bool) voted; //mapping of address to whether or not they voted\n    }\n\n    struct StakeInfo {\n        uint256 currentStatus; //0-not Staked, 1=Staked, 2=LockedForWithdraw 3= OnDispute 4=ReadyForUnlocking 5=Unlocked\n        uint256 startDate; //stake start date\n    }\n\n    //Internal struct to allow balances to be queried by blocknumber for voting purposes\n    struct Checkpoint {\n        uint128 fromBlock; // fromBlock is the block number that the value was generated from\n        uint128 value; // value is the amount of tokens at a specific block number\n    }\n\n    struct Request {\n        uint256[] requestTimestamps; //array of all newValueTimestamps requested\n        mapping(bytes32 => uint256) apiUintVars;\n        //Each of the variables below is saved in the mapping apiUintVars for each api request\n        //e.g. requestDetails[_requestId].apiUintVars[keccak256(\"totalTip\")]\n        //These are the variables saved in this mapping:\n        // uint keccak256(\"requestQPosition\"); //index in requestQ\n        // uint keccak256(\"totalTip\");//bonus portion of payout\n        mapping(uint256 => uint256) minedBlockNum; //[apiId][minedTimestamp]=>block.number\n        //This the time series of finalValues stored by the contract where uint UNIX timestamp is mapped to value\n        mapping(uint256 => uint256) finalValues;\n        mapping(uint256 => bool) inDispute; //checks if API id is in dispute or finalized.\n        mapping(uint256 => address[5]) minersByValue;\n        mapping(uint256 => uint256[5]) valuesByTimestamp;\n    }\n\n    uint256[51] requestQ; //uint50 array of the top50 requests by payment amount\n    uint256[] public newValueTimestamps; //array of all timestamps requested\n    //Address fields in the Tellor contract are saved the addressVars mapping\n    //e.g. addressVars[keccak256(\"tellorContract\")] = address\n    //These are the variables saved in this mapping:\n    // address keccak256(\"tellorContract\");//Tellor address\n    // address  keccak256(\"_owner\");//Tellor Owner address\n    // address  keccak256(\"_deity\");//Tellor Owner that can do things at will\n    // address  keccak256(\"pending_owner\"); // The proposed new owner\n    //uint fields in the Tellor contract are saved the uintVars mapping\n    //e.g. uintVars[keccak256(\"decimals\")] = uint\n    //These are the variables saved in this mapping:\n    // keccak256(\"decimals\");    //18 decimal standard ERC20\n    // keccak256(\"disputeFee\");//cost to dispute a mined value\n    // keccak256(\"disputeCount\");//totalHistoricalDisputes\n    // keccak256(\"total_supply\"); //total_supply of the token in circulation\n    // keccak256(\"stakeAmount\");//stakeAmount for miners (we can cut gas if we just hardcoded it in...or should it be variable?)\n    // keccak256(\"stakerCount\"); //number of parties currently staked\n    // keccak256(\"timeOfLastNewValue\"); // time of last challenge solved\n    // keccak256(\"difficulty\"); // Difficulty of current block\n    // keccak256(\"currentTotalTips\"); //value of highest api/timestamp PayoutPool\n    // keccak256(\"currentRequestId\"); //API being mined--updates with the ApiOnQ Id\n    // keccak256(\"requestCount\"); // total number of requests through the system\n    // keccak256(\"slotProgress\");//Number of miners who have mined this value so far\n    // keccak256(\"miningReward\");//Mining Reward in PoWo tokens given to all miners per value\n    // keccak256(\"timeTarget\"); //The time between blocks (mined Oracle values)\n    // keccak256(\"_tblock\"); //\n    // keccak256(\"runningTips\"); // VAriable to track running tips\n    // keccak256(\"currentReward\"); // The current reward\n    // keccak256(\"devShare\"); // The amount directed towards th devShare\n    // keccak256(\"currentTotalTips\"); //\n\n    //This is a boolean that tells you if a given challenge has been completed by a given miner\n    mapping(uint256 => uint256) requestIdByTimestamp; //minedTimestamp to apiId\n    mapping(uint256 => uint256) requestIdByRequestQIndex; //link from payoutPoolIndex (position in payout pool array) to apiId\n    mapping(uint256 => Dispute) public disputesById; //disputeId=> Dispute details\n    mapping(bytes32 => uint256) public requestIdByQueryHash; // api bytes32 gets an id = to count of requests array\n    mapping(bytes32 => uint256) public disputeIdByDisputeHash; //maps a hash to an ID for each dispute\n    mapping(bytes32 => mapping(address => bool)) public minersByChallenge;\n    Details[5] public currentMiners; //This struct is for organizing the five mined values to find the median\n    mapping(address => StakeInfo) stakerDetails; //mapping from a persons address to their staking info\n    mapping(uint256 => Request) requestDetails;\n\n    mapping(bytes32 => uint256) public uints;\n    mapping(bytes32 => address) public addresses;\n    mapping(bytes32 => bytes32) public bytesVars;\n\n    //ERC20 storage\n    mapping(address => Checkpoint[]) public balances;\n    mapping(address => mapping(address => uint256)) public _allowances;\n\n    //Migration storage\n    mapping(address => bool) public migrated;\n}\n"},"contracts/TellorVariables.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.7.4;\n\n// Helper contract to store hashes of variables\ncontract TellorVariables {\n    bytes32 constant _BLOCK_NUMBER =\n        0x4b4cefd5ced7569ef0d091282b4bca9c52a034c56471a6061afd1bf307a2de7c; //keccak256(\"_BLOCK_NUMBER\");\n    bytes32 constant _CURRENT_CHALLENGE =\n        0xd54702836c9d21d0727ffacc3e39f57c92b5ae0f50177e593bfb5ec66e3de280; //keccak256(\"_CURRENT_CHALLENGE\");\n    bytes32 constant _CURRENT_REQUESTID =\n        0xf5126bb0ac211fbeeac2c0e89d4c02ac8cadb2da1cfb27b53c6c1f4587b48020; //keccak256(\"_CURRENT_REQUESTID\");\n    bytes32 constant _CURRENT_REWARD =\n        0xd415862fd27fb74541e0f6f725b0c0d5b5fa1f22367d9b78ec6f61d97d05d5f8; //keccak256(\"_CURRENT_REWARD\");\n    bytes32 constant _CURRENT_TOTAL_TIPS =\n        0x09659d32f99e50ac728058418d38174fe83a137c455ff1847e6fb8e15f78f77a; //keccak256(\"_CURRENT_TOTAL_TIPS\");\n    bytes32 constant _DEITY =\n        0x5fc094d10c65bc33cc842217b2eccca0191ff24148319da094e540a559898961; //keccak256(\"_DEITY\");\n    bytes32 constant _DIFFICULTY =\n        0xf758978fc1647996a3d9992f611883adc442931dc49488312360acc90601759b; //keccak256(\"_DIFFICULTY\");\n    bytes32 constant _DISPUTE_COUNT =\n        0x310199159a20c50879ffb440b45802138b5b162ec9426720e9dd3ee8bbcdb9d7; //keccak256(\"_DISPUTE_COUNT\");\n    bytes32 constant _DISPUTE_FEE =\n        0x675d2171f68d6f5545d54fb9b1fb61a0e6897e6188ca1cd664e7c9530d91ecfc; //keccak256(\"_DISPUTE_FEE\");\n    bytes32 constant _DISPUTE_ROUNDS =\n        0x6ab2b18aafe78fd59c6a4092015bddd9fcacb8170f72b299074f74d76a91a923; //keccak256(\"_DISPUTE_ROUNDS\");\n    bytes32 constant _FEE =\n        0x1da95f11543c9b03927178e07951795dfc95c7501a9d1cf00e13414ca33bc409; //keccak256(\"FEE\");\n    bytes32 constant _MIN_EXECUTION_DATE =\n        0x46f7d53798d31923f6952572c6a19ad2d1a8238d26649c2f3493a6d69e425d28; //keccak256(\"_MIN_EXECUTION_DATE\");\n    bytes32 constant _MINER_SLOT =\n        0x6de96ee4d33a0617f40a846309c8759048857f51b9d59a12d3c3786d4778883d; //keccak256(\"_MINER_SLOT\");\n    bytes32 constant _NUM_OF_VOTES =\n        0x1da378694063870452ce03b189f48e04c1aa026348e74e6c86e10738514ad2c4; //keccak256(\"_NUM_OF_VOTES\");\n    bytes32 constant _OLD_TELLOR =\n        0x56e0987db9eaec01ed9e0af003a0fd5c062371f9d23722eb4a3ebc74f16ea371; //keccak256(\"_OLD_TELLOR\");\n    bytes32 constant _ORIGINAL_ID =\n        0xed92b4c1e0a9e559a31171d487ecbec963526662038ecfa3a71160bd62fb8733; //keccak256(\"_ORIGINAL_ID\");\n    bytes32 constant _OWNER =\n        0x7a39905194de50bde334d18b76bbb36dddd11641d4d50b470cb837cf3bae5def; //keccak256(\"_OWNER\");\n    bytes32 constant _PAID =\n        0x29169706298d2b6df50a532e958b56426de1465348b93650fca42d456eaec5fc; //keccak256(\"_PAID\");\n    bytes32 constant _PENDING_OWNER =\n        0x7ec081f029b8ac7e2321f6ae8c6a6a517fda8fcbf63cabd63dfffaeaafa56cc0; //keccak256(\"_PENDING_OWNER\");\n    bytes32 constant _REQUEST_COUNT =\n        0x3f8b5616fa9e7f2ce4a868fde15c58b92e77bc1acd6769bf1567629a3dc4c865; //keccak256(\"_REQUEST_COUNT\");\n    bytes32 constant _REQUEST_ID =\n        0x9f47a2659c3d32b749ae717d975e7962959890862423c4318cf86e4ec220291f; //keccak256(\"_REQUEST_ID\");\n    bytes32 constant _REQUEST_Q_POSITION =\n        0xf68d680ab3160f1aa5d9c3a1383c49e3e60bf3c0c031245cbb036f5ce99afaa1; //keccak256(\"_REQUEST_Q_POSITION\");\n    bytes32 constant _SLOT_PROGRESS =\n        0xdfbec46864bc123768f0d134913175d9577a55bb71b9b2595fda21e21f36b082; //keccak256(\"_SLOT_PROGRESS\");\n    bytes32 constant _STAKE_AMOUNT =\n        0x5d9fadfc729fd027e395e5157ef1b53ef9fa4a8f053043c5f159307543e7cc97; //keccak256(\"_STAKE_AMOUNT\");\n    bytes32 constant _STAKE_COUNT =\n        0x10c168823622203e4057b65015ff4d95b4c650b308918e8c92dc32ab5a0a034b; //keccak256(\"_STAKE_COUNT\");\n    bytes32 constant _T_BLOCK =\n        0xf3b93531fa65b3a18680d9ea49df06d96fbd883c4889dc7db866f8b131602dfb; //keccak256(\"_T_BLOCK\");\n    bytes32 constant _TALLY_DATE =\n        0xf9e1ae10923bfc79f52e309baf8c7699edb821f91ef5b5bd07be29545917b3a6; //keccak256(\"_TALLY_DATE\");\n    bytes32 constant _TARGET_MINERS =\n        0x0b8561044b4253c8df1d9ad9f9ce2e0f78e4bd42b2ed8dd2e909e85f750f3bc1; //keccak256(\"_TARGET_MINERS\");\n    bytes32 constant _TELLOR_CONTRACT =\n        0x0f1293c916694ac6af4daa2f866f0448d0c2ce8847074a7896d397c961914a08; //keccak256(\"_TELLOR_CONTRACT\");\n    bytes32 constant _TELLOR_GETTERS =\n        0xabd9bea65759494fe86471c8386762f989e1f2e778949e94efa4a9d1c4b3545a; //keccak256(\"_TELLOR_GETTERS\");\n    bytes32 constant _TIME_OF_LAST_NEW_VALUE =\n        0x2c8b528fbaf48aaf13162a5a0519a7ad5a612da8ff8783465c17e076660a59f1; //keccak256(\"_TIME_OF_LAST_NEW_VALUE\");\n    bytes32 constant _TIME_TARGET =\n        0xd4f87b8d0f3d3b7e665df74631f6100b2695daa0e30e40eeac02172e15a999e1; //keccak256(\"_TIME_TARGET\");\n    bytes32 constant _TIMESTAMP =\n        0x2f9328a9c75282bec25bb04befad06926366736e0030c985108445fa728335e5; //keccak256(\"_TIMESTAMP\");\n    bytes32 constant _TOTAL_SUPPLY =\n        0xe6148e7230ca038d456350e69a91b66968b222bfac9ebfbea6ff0a1fb7380160; //keccak256(\"_TOTAL_SUPPLY\");\n    bytes32 constant _TOTAL_TIP =\n        0x1590276b7f31dd8e2a06f9a92867333eeb3eddbc91e73b9833e3e55d8e34f77d; //keccak256(\"_TOTAL_TIP\");\n    bytes32 constant _VALUE =\n        0x9147231ab14efb72c38117f68521ddef8de64f092c18c69dbfb602ffc4de7f47; //keccak256(\"_VALUE\");\n    bytes32 constant _EIP_SLOT =\n        0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n}\n"},"contracts/TellorMaster.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.7.4;\n\nimport \"./TellorStorage.sol\";\nimport \"./TellorVariables.sol\";\n\n/**\n * @title Tellor Master\n * @dev This is the Master contract with all tellor getter functions and delegate call to Tellor.\n * The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,\n * TellorGettersLibrary, and TellorStake\n */\ncontract TellorMaster is TellorStorage, TellorVariables {\n    event NewTellorAddress(address _newTellor);\n\n    constructor(address _tContract, address _oTellor) {\n        addresses[_OWNER] = msg.sender;\n        addresses[_DEITY] = msg.sender;\n        addresses[_TELLOR_CONTRACT] = _tContract;\n        addresses[_OLD_TELLOR] = _oTellor;\n        bytesVars[_CURRENT_CHALLENGE] = bytes32(\"1\");\n        uints[_DIFFICULTY] = 100;\n        uints[_TIME_TARGET] = 240;\n        uints[_TARGET_MINERS] = 200;\n        uints[_CURRENT_REWARD] = 1e18;\n        uints[_DISPUTE_FEE] = 500e18;\n        uints[_STAKE_AMOUNT] = 500e18;\n        uints[_TIME_OF_LAST_NEW_VALUE] = block.timestamp - 240;\n\n        currentMiners[0].value = 1;\n        currentMiners[1].value = 2;\n        currentMiners[2].value = 3;\n        currentMiners[3].value = 4;\n        currentMiners[4].value = 5;\n\n        // Bootstraping Request Queue\n        for (uint256 index = 1; index < 51; index++) {\n            Request storage req = requestDetails[index];\n            req.apiUintVars[_REQUEST_Q_POSITION] = index;\n            requestIdByRequestQIndex[index] = index;\n        }\n\n        assembly {\n            sstore(_EIP_SLOT, _tContract)\n        }\n\n        emit NewTellorAddress(_tContract);\n    }\n\n    /**\n     * @dev This function allows the Deity to set a new deity\n     * @param _newDeity the new Deity in the contract\n     */\n    function changeDeity(address _newDeity) external {\n        require(msg.sender == addresses[_DEITY]);\n        addresses[_DEITY] = _newDeity;\n    }\n\n    /**\n     * @dev This function allows the owner to set a new _owner\n     * @param _newOwner the new Owner in the contract\n     */\n    function changeOwner(address _newOwner) external {\n        require(msg.sender == addresses[_OWNER]);\n        addresses[_OWNER] = _newOwner;\n    }\n\n    /**\n     * @dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n     * @param _tContract the address of the new Tellor Contract\n     */\n    function changeTellorContract(address _tContract) external {\n        require(msg.sender == addresses[_DEITY]);\n        addresses[_TELLOR_CONTRACT] = _tContract;\n\n        assembly {\n            sstore(_EIP_SLOT, _tContract)\n        }\n    }\n\n    /**\n     * @dev This is the internal function that allows for delegate calls to the Tellor logic\n     * contract address\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(\n                gas(),\n                implementation,\n                0,\n                calldatasize(),\n                0,\n                0\n            )\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n                // delegatecall returns 0 on error.\n                case 0 {\n                    revert(0, returndatasize())\n                }\n                default {\n                    return(0, returndatasize())\n                }\n        }\n    }\n\n    /**\n     * @dev This is the fallback function that allows contracts to call the tellor\n     * contract at the address stored\n     */\n    fallback() external payable {\n        address addr = addresses[_TELLOR_CONTRACT];\n        _delegate(addr);\n    }\n}\n"}},"settings":{"libraries":{},"optimizer":{"enabled":true,"runs":999999},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","abi"]}}}},"ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oTellor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTellor\",\"type\":\"address\"}],\"name\":\"NewTellorAddress\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fromBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bytesVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDeity\",\"type\":\"address\"}],\"name\":\"changeDeity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tContract\",\"type\":\"address\"}],\"name\":\"changeTellorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"disputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputesById\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"tally\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disputeVotePassed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPropFork\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"reportedMiner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reportingParty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposedForkAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minersByChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newValueTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdByQueryHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TellorMaster","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":1,"Runs":999999,"ConstructorArguments":"0x00000000000000000000000004b5129735b5d9b1b54109f2c4c06ea23b506a950000000000000000000000000ba45a8b5d5575935b8158a88c631e9f9c95a2e5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":1,"Implementation":"0xd3b9a1dcabd16c482785fd4265cb4580b84cded7","SwarmSource":""}]}