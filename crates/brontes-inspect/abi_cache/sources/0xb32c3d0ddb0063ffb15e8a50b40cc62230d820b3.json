{"expiry":1699494170,"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/messageService/l1/L1MessageService.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.19;\n\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport { IMessageService } from \"../../interfaces/IMessageService.sol\";\nimport { IGenericErrors } from \"../../interfaces/IGenericErrors.sol\";\nimport { PauseManager } from \"../lib/PauseManager.sol\";\nimport { RateLimiter } from \"../lib/RateLimiter.sol\";\nimport { L1MessageManager } from \"./L1MessageManager.sol\";\n\n/**\n * @title Contract to manage cross-chain messaging on L1.\n * @author ConsenSys Software Inc.\n */\nabstract contract L1MessageService is\n  Initializable,\n  RateLimiter,\n  L1MessageManager,\n  ReentrancyGuardUpgradeable,\n  PauseManager,\n  IMessageService,\n  IGenericErrors\n{\n  // @dev This is initialised to save user cost with existing slot.\n  uint256 public nextMessageNumber;\n\n  address private _messageSender;\n\n  // Keep free storage slots for future implementation updates to avoid storage collision.\n  uint256[50] private __gap;\n\n  // @dev adding these should not affect storage as they are constants and are store in bytecode\n  uint256 private constant REFUND_OVERHEAD_IN_GAS = 42000;\n\n  /**\n   * @notice Initialises underlying message service dependencies.\n   * @dev _messageSender is initialised to a non-zero value for gas efficiency on claiming.\n   * @param _limitManagerAddress The address owning the rate limiting management role.\n   * @param _pauseManagerAddress The address owning the pause management role.\n   * @param _rateLimitPeriod The period to rate limit against.\n   * @param _rateLimitAmount The limit allowed for withdrawing the period.\n   **/\n  function __MessageService_init(\n    address _limitManagerAddress,\n    address _pauseManagerAddress,\n    uint256 _rateLimitPeriod,\n    uint256 _rateLimitAmount\n  ) internal onlyInitializing {\n    if (_limitManagerAddress == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n\n    if (_pauseManagerAddress == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n\n    __ERC165_init();\n    __Context_init();\n    __AccessControl_init();\n    __RateLimiter_init(_rateLimitPeriod, _rateLimitAmount);\n\n    _grantRole(RATE_LIMIT_SETTER_ROLE, _limitManagerAddress);\n    _grantRole(PAUSE_MANAGER_ROLE, _pauseManagerAddress);\n\n    nextMessageNumber = 1;\n    _messageSender = address(123456789);\n  }\n\n  /**\n   * @notice Adds a message for sending cross-chain and emits MessageSent.\n   * @dev The message number is preset (nextMessageNumber) and only incremented at the end if successful for the next caller.\n   * @dev This function should be called with a msg.value = _value + _fee. The fee will be paid on the destination chain.\n   * @param _to The address the message is intended for.\n   * @param _fee The fee being paid for the message delivery.\n   * @param _calldata The calldata to pass to the recipient.\n   **/\n  function sendMessage(\n    address _to,\n    uint256 _fee,\n    bytes calldata _calldata\n  ) external payable whenTypeNotPaused(L1_L2_PAUSE_TYPE) whenTypeNotPaused(GENERAL_PAUSE_TYPE) {\n    if (_to == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n\n    if (_fee > msg.value) {\n      revert ValueSentTooLow();\n    }\n\n    uint256 messageNumber = nextMessageNumber;\n    uint256 valueSent = msg.value - _fee;\n\n    bytes32 messageHash = keccak256(abi.encode(msg.sender, _to, _fee, valueSent, messageNumber, _calldata));\n\n    // @dev Status check and revert is in the message manager\n    _addL1L2MessageHash(messageHash);\n\n    nextMessageNumber++;\n\n    emit MessageSent(msg.sender, _to, _fee, valueSent, messageNumber, _calldata, messageHash);\n  }\n\n  /**\n   * @notice Claims and delivers a cross-chain message.\n   * @dev _feeRecipient can be set to address(0) to receive as msg.sender.\n   * @dev _messageSender is set temporarily when claiming and reset post. Used in sender().\n   * @dev _messageSender is reset to address(123456789) to be more gas efficient.\n   * @param _from The address of the original sender.\n   * @param _to The address the message is intended for.\n   * @param _fee The fee being paid for the message delivery.\n   * @param _value The value to be transferred to the destination address.\n   * @param _feeRecipient The recipient for the fee.\n   * @param _calldata The calldata to pass to the recipient.\n   * @param _nonce The unique auto generated nonce used when sending the message.\n   **/\n  function claimMessage(\n    address _from,\n    address _to,\n    uint256 _fee,\n    uint256 _value,\n    address payable _feeRecipient,\n    bytes calldata _calldata,\n    uint256 _nonce\n  ) external nonReentrant distributeFees(_fee, _to, _calldata, _feeRecipient) {\n    _requireTypeNotPaused(L2_L1_PAUSE_TYPE);\n    _requireTypeNotPaused(GENERAL_PAUSE_TYPE);\n\n    bytes32 messageHash = keccak256(abi.encode(_from, _to, _fee, _value, _nonce, _calldata));\n\n    // @dev Status check and revert is in the message manager.\n    _updateL2L1MessageStatusToClaimed(messageHash);\n\n    _addUsedAmount(_fee + _value);\n\n    _messageSender = _from;\n\n    (bool callSuccess, bytes memory returnData) = _to.call{ value: _value }(_calldata);\n    if (!callSuccess) {\n      if (returnData.length > 0) {\n        assembly {\n          let data_size := mload(returnData)\n          revert(add(32, returnData), data_size)\n        }\n      } else {\n        revert MessageSendingFailed(_to);\n      }\n    }\n\n    _messageSender = address(123456789);\n\n    emit MessageClaimed(messageHash);\n  }\n\n  /**\n   * @notice Claims and delivers a cross-chain message.\n   * @dev _messageSender is set temporarily when claiming.\n   **/\n  function sender() external view returns (address) {\n    return _messageSender;\n  }\n\n  /**\n   * @notice Function to receive funds for liquidity purposes.\n   **/\n  receive() external payable virtual {}\n\n  /**\n   * @notice The unspent fee is refunded if applicable.\n   * @param _feeInWei The fee paid for delivery in Wei.\n   * @param _to The recipient of the message and gas refund.\n   * @param _calldata The calldata of the message.\n   **/\n  modifier distributeFees(\n    uint256 _feeInWei,\n    address _to,\n    bytes calldata _calldata,\n    address _feeRecipient\n  ) {\n    //pre-execution\n    uint256 startingGas = gasleft();\n    _;\n    //post-execution\n\n    // we have a fee\n    if (_feeInWei > 0) {\n      // default postman fee\n      uint256 deliveryFee = _feeInWei;\n\n      // do we have empty calldata?\n      if (_calldata.length == 0) {\n        bool isDestinationEOA;\n\n        assembly {\n          isDestinationEOA := iszero(extcodesize(_to))\n        }\n\n        // are we calling an EOA\n        if (isDestinationEOA) {\n          // initial + cost to call and refund minus gasleft\n          deliveryFee = (startingGas + REFUND_OVERHEAD_IN_GAS - gasleft()) * tx.gasprice;\n\n          if (_feeInWei > deliveryFee) {\n            payable(_to).send(_feeInWei - deliveryFee);\n          } else {\n            deliveryFee = _feeInWei;\n          }\n        }\n      }\n\n      address feeReceiver = _feeRecipient == address(0) ? msg.sender : _feeRecipient;\n\n      bool callSuccess = payable(feeReceiver).send(deliveryFee);\n      if (!callSuccess) {\n        revert FeePaymentFailed(feeReceiver);\n      }\n    }\n  }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/ZkEvmV2.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.19;\n\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { AccessControlUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport { L1MessageService } from \"./messageService/l1/L1MessageService.sol\";\nimport { TransactionDecoder } from \"./messageService/lib/TransactionDecoder.sol\";\nimport { IZkEvmV2 } from \"./interfaces/IZkEvmV2.sol\";\nimport { IPlonkVerifier } from \"./interfaces/IPlonkVerifier.sol\";\nimport { CodecV2 } from \"./messageService/lib/Codec.sol\";\n\n/**\n * @title Contract to manage cross-chain messaging on L1 and rollup proving.\n * @author ConsenSys Software Inc.\n */\ncontract ZkEvmV2 is IZkEvmV2, Initializable, AccessControlUpgradeable, L1MessageService {\n  using TransactionDecoder for *;\n  using CodecV2 for *;\n\n  uint256 private constant MODULO_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n  bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\n\n  uint256 public currentTimestamp;\n  uint256 public currentL2BlockNumber;\n\n  mapping(uint256 => bytes32) public stateRootHashes;\n  mapping(uint256 => address) public verifiers;\n\n  uint256[50] private __gap;\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  /**\n   * @notice Initializes zkEvm and underlying service dependencies.\n   * @dev DEFAULT_ADMIN_ROLE is set for the security council.\n   * @dev OPERATOR_ROLE is set for operators.\n   * @param _initialStateRootHash The initial hash at migration used for proof verification.\n   * @param _initialL2BlockNumber The initial block number at migration.\n   * @param _defaultVerifier The default verifier for rollup proofs.\n   * @param _securityCouncil The address for the security council performing admin operations.\n   * @param _operators The allowed rollup operators at initialization.\n   * @param _rateLimitPeriodInSeconds The period in which withdrawal amounts and fees will be accumulated.\n   * @param _rateLimitAmountInWei The limit allowed for withdrawing in the period.\n   **/\n  function initialize(\n    bytes32 _initialStateRootHash,\n    uint256 _initialL2BlockNumber,\n    address _defaultVerifier,\n    address _securityCouncil,\n    address[] calldata _operators,\n    uint256 _rateLimitPeriodInSeconds,\n    uint256 _rateLimitAmountInWei\n  ) public initializer {\n    if (_defaultVerifier == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n\n    for (uint256 i; i < _operators.length; ) {\n      if (_operators[i] == address(0)) {\n        revert ZeroAddressNotAllowed();\n      }\n      _grantRole(OPERATOR_ROLE, _operators[i]);\n      unchecked {\n        i++;\n      }\n    }\n\n    _grantRole(DEFAULT_ADMIN_ROLE, _securityCouncil);\n\n    __MessageService_init(_securityCouncil, _securityCouncil, _rateLimitPeriodInSeconds, _rateLimitAmountInWei);\n\n    verifiers[0] = _defaultVerifier;\n    currentL2BlockNumber = _initialL2BlockNumber;\n    stateRootHashes[_initialL2BlockNumber] = _initialStateRootHash;\n  }\n\n  /**\n   * @notice Adds or updates the verifier contract address for a proof type.\n   * @dev DEFAULT_ADMIN_ROLE is required to execute.\n   * @param _newVerifierAddress The address for the verifier contract.\n   * @param _proofType The proof type being set/updated.\n   **/\n  function setVerifierAddress(address _newVerifierAddress, uint256 _proofType) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_newVerifierAddress == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n\n    emit VerifierAddressChanged(_newVerifierAddress, _proofType, msg.sender);\n\n    verifiers[_proofType] = _newVerifierAddress;\n  }\n\n  /**\n   * @notice Finalizes blocks without using a proof.\n   * @dev DEFAULT_ADMIN_ROLE is required to execute.\n   * @dev _blocksData[0].fromAddresses is a temporary workaround to pass bytes calldata\n   * @param _blocksData The full BlockData collection - block, transaction and log data.\n   **/\n  function finalizeBlocksWithoutProof(\n    BlockData[] calldata _blocksData\n  ) external whenTypeNotPaused(GENERAL_PAUSE_TYPE) onlyRole(DEFAULT_ADMIN_ROLE) {\n    _finalizeBlocks(_blocksData, _blocksData[0].fromAddresses, 0, bytes32(0), false);\n  }\n\n  /**\n   * @notice Finalizes blocks using a proof.\n   * @dev OPERATOR_ROLE is required to execute.\n   * @dev If the verifier based on proof type is not found, it reverts.\n   * @param _blocksData The full BlockData collection - block, transaction and log data.\n   * @param _proof The proof to be verified with the proof type verifier contract.\n   * @param _proofType The proof type to determine which verifier contract to use.\n   * @param _parentStateRootHash The starting roothash for the last known block.\n   **/\n  function finalizeBlocks(\n    BlockData[] calldata _blocksData,\n    bytes calldata _proof,\n    uint256 _proofType,\n    bytes32 _parentStateRootHash\n  )\n    external\n    whenTypeNotPaused(PROVING_SYSTEM_PAUSE_TYPE)\n    whenTypeNotPaused(GENERAL_PAUSE_TYPE)\n    onlyRole(OPERATOR_ROLE)\n  {\n    if (stateRootHashes[currentL2BlockNumber] != _parentStateRootHash) {\n      revert StartingRootHashDoesNotMatch();\n    }\n\n    _finalizeBlocks(_blocksData, _proof, _proofType, _parentStateRootHash, true);\n  }\n\n  /**\n   * @notice Finalizes blocks with or without using a proof depending on _shouldProve\n   * @dev If the verifier based on proof type is not found, it reverts.\n   * @param _blocksData The full BlockData collection - block, transaction and log data.\n   * @param _proof The proof to be verified with the proof type verifier contract.\n   * @param _proofType The proof type to determine which verifier contract to use.\n   * @param _parentStateRootHash The starting roothash for the last known block.\n   **/\n  function _finalizeBlocks(\n    BlockData[] calldata _blocksData,\n    bytes calldata _proof,\n    uint256 _proofType,\n    bytes32 _parentStateRootHash,\n    bool _shouldProve\n  ) private {\n    if (_blocksData.length == 0) {\n      revert EmptyBlockDataArray();\n    }\n\n    uint256 currentBlockNumberTemp = currentL2BlockNumber;\n\n    uint256 firstBlockNumber;\n    unchecked {\n      firstBlockNumber = currentBlockNumberTemp + 1;\n    }\n\n    uint256[] memory timestamps = new uint256[](_blocksData.length);\n    bytes32[] memory blockHashes = new bytes32[](_blocksData.length);\n    bytes32[] memory hashOfRootHashes;\n\n    unchecked {\n      hashOfRootHashes = new bytes32[](_blocksData.length + 1);\n    }\n\n    hashOfRootHashes[0] = _parentStateRootHash;\n\n    bytes32 hashOfTxHashes;\n    bytes32 hashOfMessageHashes;\n\n    for (uint256 i; i < _blocksData.length; ) {\n      BlockData calldata blockInfo = _blocksData[i];\n\n      if (blockInfo.l2BlockTimestamp >= block.timestamp) {\n        revert BlockTimestampError();\n      }\n\n      hashOfTxHashes = _processBlockTransactions(blockInfo.transactions, blockInfo.batchReceptionIndices);\n      hashOfMessageHashes = _processMessageHashes(blockInfo.l2ToL1MsgHashes);\n\n      unchecked {\n        ++currentBlockNumberTemp;\n      }\n\n      blockHashes[i] = keccak256(\n        abi.encodePacked(\n          hashOfTxHashes,\n          hashOfMessageHashes,\n          keccak256(abi.encodePacked(blockInfo.batchReceptionIndices)),\n          keccak256(blockInfo.fromAddresses)\n        )\n      );\n\n      timestamps[i] = blockInfo.l2BlockTimestamp;\n\n      unchecked {\n        hashOfRootHashes[i + 1] = blockInfo.blockRootHash;\n      }\n\n      emit BlockFinalized(currentBlockNumberTemp, blockInfo.blockRootHash);\n\n      unchecked {\n        i++;\n      }\n    }\n\n    unchecked {\n      uint256 arrayIndex = _blocksData.length - 1;\n      stateRootHashes[currentBlockNumberTemp] = _blocksData[arrayIndex].blockRootHash;\n      currentTimestamp = _blocksData[arrayIndex].l2BlockTimestamp;\n      currentL2BlockNumber = currentBlockNumberTemp;\n    }\n\n    if (_shouldProve) {\n      uint256 publicInput = uint256(\n        keccak256(\n          abi.encode(\n            keccak256(abi.encodePacked(blockHashes)),\n            firstBlockNumber,\n            keccak256(abi.encodePacked(timestamps)),\n            keccak256(abi.encodePacked(hashOfRootHashes))\n          )\n        )\n      );\n\n      assembly {\n        publicInput := mod(publicInput, MODULO_R)\n      }\n\n      _verifyProof(publicInput, _proofType, _proof, _parentStateRootHash);\n    }\n  }\n\n  /**\n   * @notice Hashes all transactions individually and then hashes the packed hash array.\n   * @dev Updates the outbox status on L1 as received.\n   * @param _transactions The transactions in a particular block.\n   * @param _batchReceptionIndices The indexes where the transaction type is the L1->L2 achoring message hashes transaction.\n   **/\n  function _processBlockTransactions(\n    bytes[] calldata _transactions,\n    uint16[] calldata _batchReceptionIndices\n  ) internal returns (bytes32 hashOfTxHashes) {\n    bytes32[] memory transactionHashes = new bytes32[](_transactions.length);\n\n    if (_transactions.length == 0) {\n      revert EmptyBlock();\n    }\n\n    for (uint256 i; i < _batchReceptionIndices.length; ) {\n      _updateL1L2MessageStatusToReceived(\n        TransactionDecoder.decodeTransaction(_transactions[_batchReceptionIndices[i]])._extractXDomainAddHashes()\n      );\n\n      unchecked {\n        i++;\n      }\n    }\n\n    for (uint256 i; i < _transactions.length; ) {\n      transactionHashes[i] = keccak256(_transactions[i]);\n\n      unchecked {\n        i++;\n      }\n    }\n    hashOfTxHashes = keccak256(abi.encodePacked(transactionHashes));\n  }\n\n  /**\n   * @notice Anchors message hashes and hashes the packed hash array.\n   * @dev Also adds L2->L1 sent message hashes for later claiming.\n   * @param _messageHashes The hashes in the message sent event logs.\n   **/\n  function _processMessageHashes(bytes32[] calldata _messageHashes) internal returns (bytes32 hashOfLogHashes) {\n    for (uint256 i; i < _messageHashes.length; ) {\n      _addL2L1MessageHash(_messageHashes[i]);\n\n      unchecked {\n        i++;\n      }\n    }\n    hashOfLogHashes = keccak256(abi.encodePacked(_messageHashes));\n  }\n\n  /**\n   * @notice Verifies the proof with locally computed public inputs.\n   * @dev If the verifier based on proof type is not found, it reverts with InvalidProofType.\n   * @param _publicInputHash The full BlockData collection - block, transaction and log data.\n   * @param _proofType The proof type to determine which verifier contract to use.\n   * @param _proof The proof to be verified with the proof type verifier contract.\n   * @param _parentStateRootHash The beginning roothash to start with.\n   **/\n  function _verifyProof(\n    uint256 _publicInputHash,\n    uint256 _proofType,\n    bytes calldata _proof,\n    bytes32 _parentStateRootHash\n  ) private {\n    uint256[] memory input = new uint256[](1);\n    input[0] = _publicInputHash;\n\n    address verifierToUse = verifiers[_proofType];\n\n    if (verifierToUse == address(0)) {\n      revert InvalidProofType();\n    }\n\n    bool success = IPlonkVerifier(verifierToUse).Verify(_proof, input);\n    if (!success) {\n      revert InvalidProof();\n    }\n\n    emit BlocksVerificationDone(currentL2BlockNumber, _parentStateRootHash, stateRootHashes[currentL2BlockNumber]);\n  }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"contracts/interfaces/IGenericErrors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\ninterface IGenericErrors {\n  /**\n   * @dev Thrown when a parameter is the zero address.\n   */\n  error ZeroAddressNotAllowed();\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"contracts/messageService/lib/RateLimiter.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.19;\n\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { AccessControlUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport { IRateLimiter } from \"../../interfaces/IRateLimiter.sol\";\n\n/**\n * @title Rate Limiter by period and amount using the block timestamp.\n * @author ConsenSys Software Inc.\n * @notice You can use this control numeric limits over a period using timestamp.\n **/\ncontract RateLimiter is Initializable, IRateLimiter, AccessControlUpgradeable {\n  bytes32 public constant RATE_LIMIT_SETTER_ROLE = keccak256(\"RATE_LIMIT_SETTER_ROLE\");\n\n  uint256 public periodInSeconds; // how much time before limit resets.\n  uint256 public limitInWei; // max ether to withdraw per period.\n\n  // @dev Public for ease of consumption.\n  // @notice The time at which the current period ends at.\n  uint256 public currentPeriodEnd;\n\n  // @dev Public for ease of consumption.\n  // @notice Amounts already withdrawn this period.\n  uint256 public currentPeriodAmountInWei;\n\n  uint256[10] private _gap;\n\n  /**\n   * @notice Initialises the limits and period for the rate limiter.\n   * @param _periodInSeconds The length of the period in seconds.\n   * @param _limitInWei The limit allowed in the period in Wei.\n   **/\n  function __RateLimiter_init(uint256 _periodInSeconds, uint256 _limitInWei) internal onlyInitializing {\n    if (_periodInSeconds == 0) {\n      revert PeriodIsZero();\n    }\n\n    if (_limitInWei == 0) {\n      revert LimitIsZero();\n    }\n\n    periodInSeconds = _periodInSeconds;\n    limitInWei = _limitInWei;\n    currentPeriodEnd = block.timestamp + _periodInSeconds;\n  }\n\n  /**\n   * @notice Increments the amount used in the period.\n   * @dev The amount determining logic is external to this (e.g. fees are included when calling here).\n   * @dev Reverts if the limit is breached.\n   * @param _usedAmount The amount used to be added.\n   **/\n  function _addUsedAmount(uint256 _usedAmount) internal {\n    uint256 currentPeriodAmountTemp;\n\n    if (currentPeriodEnd < block.timestamp) {\n      currentPeriodEnd = block.timestamp + periodInSeconds;\n      currentPeriodAmountTemp = _usedAmount;\n    } else {\n      currentPeriodAmountTemp = currentPeriodAmountInWei + _usedAmount;\n    }\n\n    if (currentPeriodAmountTemp > limitInWei) {\n      revert RateLimitExceeded();\n    }\n\n    currentPeriodAmountInWei = currentPeriodAmountTemp;\n  }\n\n  /**\n   * @notice Resets the rate limit amount.\n   * @dev If the used amount is higher, it is set to the limit to avoid confusion/issues.\n   * @dev Only the RATE_LIMIT_SETTER_ROLE is allowed to execute this function.\n   * @dev Emits the LimitAmountChanged event.\n   * @dev usedLimitAmountToSet will use the default value of zero if period has expired\n   * @param _amount The amount to reset the limit to.\n   **/\n  function resetRateLimitAmount(uint256 _amount) external onlyRole(RATE_LIMIT_SETTER_ROLE) {\n    uint256 usedLimitAmountToSet;\n    bool amountUsedLoweredToLimit;\n    bool usedAmountResetToZero;\n\n    if (currentPeriodEnd < block.timestamp) {\n      currentPeriodEnd = block.timestamp + periodInSeconds;\n      usedAmountResetToZero = true;\n    } else {\n      if (_amount < currentPeriodAmountInWei) {\n        usedLimitAmountToSet = _amount;\n        amountUsedLoweredToLimit = true;\n      }\n    }\n\n    limitInWei = _amount;\n\n    if (usedAmountResetToZero || amountUsedLoweredToLimit) {\n      currentPeriodAmountInWei = usedLimitAmountToSet;\n    }\n\n    emit LimitAmountChanged(_msgSender(), _amount, amountUsedLoweredToLimit, usedAmountResetToZero);\n  }\n\n  /**\n   * @notice Resets the amount used to zero.\n   * @dev Only the RATE_LIMIT_SETTER_ROLE is allowed to execute this function.\n   * @dev Emits the AmountUsedInPeriodReset event.\n   **/\n  function resetAmountUsedInPeriod() external onlyRole(RATE_LIMIT_SETTER_ROLE) {\n    currentPeriodAmountInWei = 0;\n\n    emit AmountUsedInPeriodReset(_msgSender());\n  }\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"contracts/interfaces/IRateLimiter.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\ninterface IRateLimiter {\n  /**\n   * @dev Thrown when an amount breaches the limit in the period.\n   */\n  error RateLimitExceeded();\n\n  /**\n   * @dev Thrown when the period is initialised to zero.\n   */\n  error PeriodIsZero();\n\n  /**\n   * @dev Thrown when the limit is initialised to zero.\n   */\n  error LimitIsZero();\n\n  /**\n   * @dev Emitted when the amount in the period is reset to zero.\n   */\n  event AmountUsedInPeriodReset(address indexed resettingAddress);\n\n  /**\n   * @dev Emitted when the limit is changed.\n   * @dev If the current used amount is higher than the new limit, the used amount is lowered to the limit.\n   */\n  event LimitAmountChanged(\n    address indexed amountChangeBy,\n    uint256 amount,\n    bool amountUsedLoweredToLimit,\n    bool usedAmountResetToZero\n  );\n\n  /**\n   * @notice Resets the rate limit amount to the amount specified.\n   * @param _amount New message hashes.\n   */\n  function resetRateLimitAmount(uint256 _amount) external;\n\n  /**\n   * @notice Resets the amount used in the period to zero.\n   */\n  function resetAmountUsedInPeriod() external;\n}\n"},"contracts/interfaces/IMessageService.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\ninterface IMessageService {\n  /**\n   * @dev Emitted when a message is sent.\n   * @dev We include the message hash to save hashing costs on the rollup.\n   */\n  event MessageSent(\n    address indexed _from,\n    address indexed _to,\n    uint256 _fee,\n    uint256 _value,\n    uint256 _nonce,\n    bytes _calldata,\n    bytes32 indexed _messageHash\n  );\n\n  /**\n   * @dev Emitted when a message is claimed.\n   */\n  event MessageClaimed(bytes32 indexed _messageHash);\n\n  /**\n   * @dev Thrown when fees are lower than the minimum fee.\n   */\n  error FeeTooLow();\n\n  /**\n   * @dev Thrown when fees are lower than value.\n   */\n  error ValueShouldBeGreaterThanFee();\n\n  /**\n   * @dev Thrown when the value sent is less than the fee.\n   * @dev Value to forward on is msg.value - _fee.\n   */\n  error ValueSentTooLow();\n\n  /**\n   * @dev Thrown when the destination address reverts.\n   */\n  error MessageSendingFailed(address destination);\n\n  /**\n   * @dev Thrown when the destination address reverts.\n   */\n  error FeePaymentFailed(address recipient);\n\n  /**\n   * @notice Sends a message for transporting from the given chain.\n   * @dev This function should be called with a msg.value = _value + _fee. The fee will be paid on the destination chain.\n   * @param _to The destination address on the destination chain.\n   * @param _fee The message service fee on the origin chain.\n   * @param _calldata The calldata used by the destination message service to call the destination contract.\n   */\n  function sendMessage(address _to, uint256 _fee, bytes calldata _calldata) external payable;\n\n  /**\n   * @notice Deliver a message to the destination chain.\n   * @notice Is called automatically by the Postman, dApp or end user.\n   * @param _from The msg.sender calling the origin message service.\n   * @param _to The destination address on the destination chain.\n   * @param _value The value to be transferred to the destination address.\n   * @param _fee The message service fee on the origin chain.\n   * @param _feeRecipient Address that will receive the fees.\n   * @param _calldata The calldata used by the destination message service to call/forward to the destination contract.\n   * @param _nonce Unique message number.\n   */\n  function claimMessage(\n    address _from,\n    address _to,\n    uint256 _fee,\n    uint256 _value,\n    address payable _feeRecipient,\n    bytes calldata _calldata,\n    uint256 _nonce\n  ) external;\n\n  /**\n   * @notice Returns the original sender of the message on the origin layer.\n   * @return The original sender of the message on the origin layer.\n   */\n  function sender() external view returns (address);\n}\n"},"contracts/messageService/l1/L1MessageManager.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.19;\n\nimport { IL1MessageManager } from \"../../interfaces/IL1MessageManager.sol\";\n\n/**\n * @title Contract to manage cross-chain message hashes storage and status on L1.\n * @author ConsenSys Software Inc.\n */\nabstract contract L1MessageManager is IL1MessageManager {\n  uint8 public constant INBOX_STATUS_UNKNOWN = 0;\n  uint8 public constant INBOX_STATUS_RECEIVED = 1;\n\n  uint8 public constant OUTBOX_STATUS_UNKNOWN = 0;\n  uint8 public constant OUTBOX_STATUS_SENT = 1;\n  uint8 public constant OUTBOX_STATUS_RECEIVED = 2;\n\n  /// @dev There is a uint216 worth of storage layout here.\n\n  /// @dev Mapping to store L1->L2 message hashes status.\n  /// @dev messageHash => messageStatus (0: unknown, 1: sent, 2: received).\n  mapping(bytes32 => uint256) public outboxL1L2MessageStatus;\n\n  /// @dev Mapping to store L2->L1 message hashes status.\n  /// @dev messageHash => messageStatus (0: unknown, 1: received).\n  mapping(bytes32 => uint256) public inboxL2L1MessageStatus;\n\n  /// @dev Keep free storage slots for future implementation updates to avoid storage collision.\n  // *******************************************************************************************\n  // NB: THIS GAP HAS BEEN PUSHED OUT IN FAVOUR OF THE GAP INSIDE THE REENTRANCY CODE\n  //uint256[50] private __gap;\n  // NB: DO NOT USE THIS GAP\n  // *******************************************************************************************\n\n  /**\n   * @notice Add a cross-chain L2->L1 message hash in storage.\n   * @dev Once the event is emitted, it should be ready for claiming (post block finalization).\n   * @param  _messageHash Hash of the message.\n   */\n  function _addL2L1MessageHash(bytes32 _messageHash) internal {\n    if (inboxL2L1MessageStatus[_messageHash] != INBOX_STATUS_UNKNOWN) {\n      revert MessageAlreadyReceived(_messageHash);\n    }\n\n    inboxL2L1MessageStatus[_messageHash] = INBOX_STATUS_RECEIVED;\n\n    emit L2L1MessageHashAddedToInbox(_messageHash);\n  }\n\n  /**\n   * @notice Update the status of L2->L1 message when a user claims a message on L1.\n   * @dev The L2->L1 message is removed from storage.\n   * @dev Due to the nature of the rollup, we should not get a second entry of this.\n   * @param  _messageHash Hash of the message.\n   */\n  function _updateL2L1MessageStatusToClaimed(bytes32 _messageHash) internal {\n    if (inboxL2L1MessageStatus[_messageHash] != INBOX_STATUS_RECEIVED) {\n      revert MessageDoesNotExistOrHasAlreadyBeenClaimed();\n    }\n\n    delete inboxL2L1MessageStatus[_messageHash];\n  }\n\n  /**\n   * @notice Add L1->L2 message hash in storage when a message is sent on L1.\n   * @param  _messageHash Hash of the message.\n   */\n  function _addL1L2MessageHash(bytes32 _messageHash) internal {\n    outboxL1L2MessageStatus[_messageHash] = OUTBOX_STATUS_SENT;\n  }\n\n  /**\n   * @notice Update the status of L1->L2 messages as received when messages has been stored on L2.\n   * @dev The expectation here is that the rollup is limited to 100 hashes being added here - array is not open ended.\n   * @param  _messageHashes List of message hashes.\n   */\n  function _updateL1L2MessageStatusToReceived(bytes32[] memory _messageHashes) internal {\n    uint256 messageHashArrayLength = _messageHashes.length;\n\n    for (uint256 i; i < messageHashArrayLength; ) {\n      bytes32 messageHash = _messageHashes[i];\n      uint256 existingStatus = outboxL1L2MessageStatus[messageHash];\n\n      if (existingStatus == OUTBOX_STATUS_UNKNOWN) {\n        revert L1L2MessageNotSent(messageHash);\n      }\n\n      if (existingStatus != OUTBOX_STATUS_RECEIVED) {\n        outboxL1L2MessageStatus[messageHash] = OUTBOX_STATUS_RECEIVED;\n      }\n\n      unchecked {\n        i++;\n      }\n    }\n\n    emit L1L2MessagesReceivedOnL2(_messageHashes);\n  }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"contracts/interfaces/IPlonkVerifier.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\n/**\n * @title Contract to manage cross-chain messaging on L1 and rollup proving\n * @author ConsenSys Software Inc.\n */\ninterface IPlonkVerifier {\n  /**\n   * @notice Interface for verifier contracts.\n   * @param _proof The proof used to verify.\n   * @param _public_inputs The computed public inputs for the proof verification.\n   */\n  function Verify(bytes calldata _proof, uint256[] calldata _public_inputs) external returns (bool);\n}\n"},"contracts/messageService/lib/PauseManager.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.8.19;\n\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { AccessControlUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport { IPauseManager } from \"../../interfaces/IPauseManager.sol\";\n\n/**\n * @title Contract to manage cross-chain function pausing.\n * @author ConsenSys Software Inc.\n */\nabstract contract PauseManager is Initializable, IPauseManager, AccessControlUpgradeable {\n  bytes32 public constant PAUSE_MANAGER_ROLE = keccak256(\"PAUSE_MANAGER_ROLE\");\n\n  bytes32 public constant GENERAL_PAUSE_TYPE = keccak256(\"GENERAL_PAUSE_TYPE\");\n  bytes32 public constant L1_L2_PAUSE_TYPE = keccak256(\"L1_L2_PAUSE_TYPE\");\n  bytes32 public constant L2_L1_PAUSE_TYPE = keccak256(\"L2_L1_PAUSE_TYPE\");\n  bytes32 public constant PROVING_SYSTEM_PAUSE_TYPE = keccak256(\"PROVING_SYSTEM_PAUSE_TYPE\");\n\n  mapping(bytes32 => bool) public pauseTypeStatuses;\n\n  uint256[10] private _gap;\n\n  /**\n   * @dev Modifier to make a function callable only when the type is not paused.\n   *\n   * Requirements:\n   *\n   * - The type must not be paused.\n   */\n  modifier whenTypeNotPaused(bytes32 _pauseType) {\n    _requireTypeNotPaused(_pauseType);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the type is paused.\n   *\n   * Requirements:\n   *\n   * - The type must not be paused.\n   */\n  modifier whenTypePaused(bytes32 _pauseType) {\n    _requireTypePaused(_pauseType);\n    _;\n  }\n\n  /**\n   * @dev Throws if the type is not paused.\n   * @param _pauseType The keccak256 pause type being checked,\n   */\n  function _requireTypePaused(bytes32 _pauseType) internal view virtual {\n    if (!pauseTypeStatuses[_pauseType]) {\n      revert IsNotPaused(_pauseType);\n    }\n  }\n\n  /**\n   * @dev Throws if the type is paused.\n   * @param _pauseType The keccak256 pause type being checked,\n   */\n  function _requireTypeNotPaused(bytes32 _pauseType) internal view virtual {\n    if (pauseTypeStatuses[_pauseType]) {\n      revert IsPaused(_pauseType);\n    }\n  }\n\n  /**\n   * @notice Pauses functionality by specific type.\n   * @dev Requires PAUSE_MANAGER_ROLE.\n   * @param _pauseType keccak256 pause type.\n   **/\n  function pauseByType(bytes32 _pauseType) external whenTypeNotPaused(_pauseType) onlyRole(PAUSE_MANAGER_ROLE) {\n    pauseTypeStatuses[_pauseType] = true;\n    emit Paused(_msgSender(), _pauseType);\n  }\n\n  /**\n   * @notice Unpauses functionality by specific type.\n   * @dev Requires PAUSE_MANAGER_ROLE.\n   * @param _pauseType keccak256 pause type.\n   **/\n  function unPauseByType(bytes32 _pauseType) external whenTypePaused(_pauseType) onlyRole(PAUSE_MANAGER_ROLE) {\n    pauseTypeStatuses[_pauseType] = false;\n    emit UnPaused(_msgSender(), _pauseType);\n  }\n}\n"},"contracts/messageService/lib/Rlp.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * @notice Please reach out with any questions or concerns.\n */\npragma solidity 0.8.19;\n\nerror NotList();\nerror WrongBytesLength();\nerror NoNext();\nerror MemoryOutOfBounds(uint256 inde);\n\nlibrary RLPReader {\n  uint8 internal constant STRING_SHORT_START = 0x80;\n  uint8 internal constant STRING_LONG_START = 0xb8;\n  uint8 internal constant LIST_SHORT_START = 0xc0;\n  uint8 internal constant LIST_LONG_START = 0xf8;\n  uint8 internal constant LIST_SHORT_START_MAX = 0xf7;\n  uint8 internal constant WORD_SIZE = 32;\n\n  struct RLPItem {\n    uint256 len;\n    uint256 memPtr;\n  }\n\n  struct Iterator {\n    RLPItem item; // Item that's being iterated over.\n    uint256 nextPtr; // Position of the next item in the list.\n  }\n\n  /**\n   * @dev Returns the next element in the iteration. Reverts if it has no next element.\n   * @param _self The iterator.\n   * @return nextItem The next element in the iteration.\n   */\n  function _next(Iterator memory _self) internal pure returns (RLPItem memory nextItem) {\n    if (!_hasNext(_self)) {\n      revert NoNext();\n    }\n\n    uint256 ptr = _self.nextPtr;\n    uint256 itemLength = _itemLength(ptr);\n    _self.nextPtr = ptr + itemLength;\n\n    nextItem.len = itemLength;\n    nextItem.memPtr = ptr;\n  }\n\n  /**\n   * @dev Returns the number 'skiptoNum' element in the iteration.\n   * @param _self The iterator.\n   * @param _skipToNum Element position in the RLP item iterator to return.\n   * @return item The number 'skipToNum' element in the iteration.\n   */\n  function _skipTo(Iterator memory _self, uint256 _skipToNum) internal pure returns (RLPItem memory item) {\n    uint256 lenX;\n    uint256 memPtrStart = _self.item.memPtr;\n    uint256 endPtr;\n    uint256 byte0;\n    uint256 byteLen;\n\n    assembly {\n      // get first byte to know if it is a short/long list\n      byte0 := byte(0, mload(memPtrStart))\n\n      // yul has no if/else so if it a short list ( < long list start )\n      switch lt(byte0, LIST_LONG_START)\n      case 1 {\n        // the length is just the difference in bytes\n        lenX := sub(byte0, 0xc0)\n      }\n      case 0 {\n        // at this point we care only about lists, so this is the default\n        // get how many next bytes indicate the list length\n        byteLen := sub(byte0, 0xf7)\n\n        // move one over to the list length start\n        memPtrStart := add(memPtrStart, 1)\n\n        // shift over grabbing the bytelen elements\n        lenX := div(mload(memPtrStart), exp(256, sub(32, byteLen)))\n      }\n\n      // get the end\n      endPtr := add(memPtrStart, lenX)\n    }\n\n    uint256 ptr = _self.nextPtr;\n    uint256 itemLength = _itemLength(ptr);\n    _self.nextPtr = ptr + itemLength;\n\n    for (uint256 i; i < _skipToNum - 1; ) {\n      ptr = _self.nextPtr;\n      if (ptr > endPtr) revert MemoryOutOfBounds(endPtr);\n      itemLength = _itemLength(ptr);\n      _self.nextPtr = ptr + itemLength;\n\n      unchecked {\n        i++;\n      }\n    }\n\n    item.len = itemLength;\n    item.memPtr = ptr;\n  }\n\n  /**\n   * @dev Returns true if the iteration has more elements.\n   * @param _self The iterator.\n   * @return True if the iteration has more elements.\n   */\n  function _hasNext(Iterator memory _self) internal pure returns (bool) {\n    RLPItem memory item = _self.item;\n    return _self.nextPtr < item.memPtr + item.len;\n  }\n\n  /**\n   * @param item RLP encoded bytes.\n   * @return newItem The RLP item.\n   */\n  function _toRlpItem(bytes memory item) internal pure returns (RLPItem memory newItem) {\n    uint256 memPtr;\n\n    assembly {\n      memPtr := add(item, 0x20)\n    }\n\n    newItem.len = item.length;\n    newItem.memPtr = memPtr;\n  }\n\n  /**\n   * @dev Creates an iterator. Reverts if item is not a list.\n   * @param _self The RLP item.\n   * @return iterator 'Iterator' over the item.\n   */\n  function _iterator(RLPItem memory _self) internal pure returns (Iterator memory iterator) {\n    if (!_isList(_self)) {\n      revert NotList();\n    }\n\n    uint256 ptr = _self.memPtr + _payloadOffset(_self.memPtr);\n    iterator.item = _self;\n    iterator.nextPtr = ptr;\n  }\n\n  /**\n   * @param _item The RLP item.\n   * @return (memPtr, len) Tuple: Location of the item's payload in memory.\n   */\n  function _payloadLocation(RLPItem memory _item) internal pure returns (uint256, uint256) {\n    uint256 offset = _payloadOffset(_item.memPtr);\n    uint256 memPtr = _item.memPtr + offset;\n    uint256 len = _item.len - offset; // data length\n    return (memPtr, len);\n  }\n\n  /**\n   * @param _item The RLP item.\n   * @return Indicator whether encoded payload is a list.\n   */\n  function _isList(RLPItem memory _item) internal pure returns (bool) {\n    if (_item.len == 0) return false;\n\n    uint8 byte0;\n    uint256 memPtr = _item.memPtr;\n    assembly {\n      byte0 := byte(0, mload(memPtr))\n    }\n\n    if (byte0 < LIST_SHORT_START) return false;\n    return true;\n  }\n\n  /**\n   * @param _item The RLP item.\n   * @return result Returns the item as an address.\n   */\n  function _toAddress(RLPItem memory _item) internal pure returns (address) {\n    // 1 byte for the length prefix\n    if (_item.len != 21) {\n      revert WrongBytesLength();\n    }\n\n    return address(uint160(_toUint(_item)));\n  }\n\n  /**\n   * @param _item The RLP item.\n   * @return result Returns the item as a uint256.\n   */\n  function _toUint(RLPItem memory _item) internal pure returns (uint256 result) {\n    if (_item.len == 0 || _item.len > 33) {\n      revert WrongBytesLength();\n    }\n\n    (uint256 memPtr, uint256 len) = _payloadLocation(_item);\n\n    assembly {\n      result := mload(memPtr)\n\n      // Shfit to the correct location if neccesary.\n      if lt(len, 32) {\n        result := div(result, exp(256, sub(32, len)))\n      }\n    }\n  }\n\n  /**\n   * @param _item The RLP item.\n   * @return result Returns the item as bytes.\n   */\n  function _toBytes(RLPItem memory _item) internal pure returns (bytes memory result) {\n    if (_item.len == 0) {\n      revert WrongBytesLength();\n    }\n\n    (uint256 memPtr, uint256 len) = _payloadLocation(_item);\n    result = new bytes(len);\n\n    uint256 destPtr;\n    assembly {\n      destPtr := add(0x20, result)\n    }\n\n    _copy(memPtr, destPtr, len);\n  }\n\n  /*\n   * Private Helpers\n   */\n\n  /**\n   * @param _memPtr Item memory pointer.\n   * @return Entire RLP item byte length.\n   */\n  function _itemLength(uint256 _memPtr) private pure returns (uint256) {\n    uint256 itemLen;\n    uint256 dataLen;\n    uint256 byte0;\n    assembly {\n      byte0 := byte(0, mload(_memPtr))\n    }\n\n    if (byte0 < STRING_SHORT_START) itemLen = 1;\n    else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\n    else if (byte0 < LIST_SHORT_START) {\n      assembly {\n        let byteLen := sub(byte0, 0xb7) // # Of bytes the actual length is.\n        _memPtr := add(_memPtr, 1) // Skip over the first byte.\n\n        /* 32 byte word size */\n        dataLen := div(mload(_memPtr), exp(256, sub(32, byteLen))) // Right shifting to get the len.\n        itemLen := add(dataLen, add(byteLen, 1))\n      }\n    } else if (byte0 < LIST_LONG_START) {\n      itemLen = byte0 - LIST_SHORT_START + 1;\n    } else {\n      assembly {\n        let byteLen := sub(byte0, 0xf7)\n        _memPtr := add(_memPtr, 1)\n\n        dataLen := div(mload(_memPtr), exp(256, sub(32, byteLen))) // Right shifting to the correct length.\n        itemLen := add(dataLen, add(byteLen, 1))\n      }\n    }\n\n    return itemLen;\n  }\n\n  /**\n   * @param _memPtr Item memory pointer.\n   * @return Number of bytes until the data.\n   */\n  function _payloadOffset(uint256 _memPtr) private pure returns (uint256) {\n    uint256 byte0;\n    assembly {\n      byte0 := byte(0, mload(_memPtr))\n    }\n\n    if (byte0 < STRING_SHORT_START) return 0;\n    else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\n    else if (byte0 < LIST_SHORT_START)\n      // being explicit\n      return byte0 - (STRING_LONG_START - 1) + 1;\n    else return byte0 - (LIST_LONG_START - 1) + 1;\n  }\n\n  /**\n   * @param _src Pointer to source.\n   * @param _dest Pointer to destination.\n   * @param _len Amount of memory to copy from the source.\n   */\n  function _copy(uint256 _src, uint256 _dest, uint256 _len) private pure {\n    if (_len == 0) return;\n\n    // copy as many word sizes as possible\n    for (; _len >= WORD_SIZE; _len -= WORD_SIZE) {\n      assembly {\n        mstore(_dest, mload(_src))\n      }\n\n      _src += WORD_SIZE;\n      _dest += WORD_SIZE;\n    }\n\n    if (_len > 0) {\n      // Left over bytes. Mask is used to remove unwanted bytes from the word.\n      uint256 mask = 256 ** (WORD_SIZE - _len) - 1;\n      assembly {\n        let srcpart := and(mload(_src), not(mask)) // Zero out src.\n        let destpart := and(mload(_dest), mask) // Retrieve the bytes.\n        mstore(_dest, or(destpart, srcpart))\n      }\n    }\n  }\n}\n"},"contracts/messageService/lib/TransactionDecoder.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.19;\n\nimport { RLPReader } from \"./Rlp.sol\";\n\nusing RLPReader for RLPReader.RLPItem;\nusing RLPReader for RLPReader.Iterator;\nusing RLPReader for bytes;\n\n/*\n * dev Thrown when the transaction data length is too short.\n */\nerror TransactionShort();\n\n/*\n * dev Thrown when the transaction type is unknown.\n */\nerror UnknownTransactionType();\n\n/**\n * @title Contract to decode RLP formatted transactions.\n * @author ConsenSys Software Inc.\n */\nlibrary TransactionDecoder {\n  /**\n   * @notice Decodes the transaction extracting the calldata.\n   * @param _transaction The RLP transaction.\n   * @return data Returns the transaction calldata as bytes.\n   */\n  function decodeTransaction(bytes calldata _transaction) internal pure returns (bytes memory) {\n    if (_transaction.length < 1) {\n      revert TransactionShort();\n    }\n\n    bytes1 version = _transaction[0];\n\n    if (version == 0x01) {\n      return _decodeEIP2930Transaction(_transaction);\n    }\n\n    if (version == 0x02) {\n      return _decodeEIP1559Transaction(_transaction);\n    }\n\n    if (version >= 0xc0) {\n      return _decodeLegacyTransaction(_transaction);\n    }\n\n    revert UnknownTransactionType();\n  }\n\n  /**\n   * @notice Decodes the EIP1559 transaction extracting the calldata.\n   * @param _transaction The RLP transaction.\n   * @return data Returns the transaction calldata as bytes.\n   */\n  function _decodeEIP1559Transaction(bytes calldata _transaction) private pure returns (bytes memory data) {\n    bytes memory txData = _transaction[1:]; // skip the version byte\n\n    RLPReader.RLPItem memory rlp = txData._toRlpItem();\n    RLPReader.Iterator memory it = rlp._iterator();\n\n    data = it._skipTo(8)._toBytes();\n  }\n\n  /**\n   * @notice Decodes the EIP29230 transaction extracting the calldata.\n   * @param _transaction The RLP transaction.\n   * @return data Returns the transaction calldata as bytes.\n   */\n  function _decodeEIP2930Transaction(bytes calldata _transaction) private pure returns (bytes memory data) {\n    bytes memory txData = _transaction[1:]; // skip the version byte\n\n    RLPReader.RLPItem memory rlp = txData._toRlpItem();\n    RLPReader.Iterator memory it = rlp._iterator();\n\n    data = it._skipTo(7)._toBytes();\n  }\n\n  /**\n   * @notice Decodes the legacy transaction extracting the calldata.\n   * @param _transaction The RLP transaction.\n   * @return data Returns the transaction calldata as bytes.\n   */\n  function _decodeLegacyTransaction(bytes calldata _transaction) private pure returns (bytes memory data) {\n    bytes memory txData = _transaction;\n\n    RLPReader.RLPItem memory rlp = txData._toRlpItem();\n    RLPReader.Iterator memory it = rlp._iterator();\n\n    data = it._skipTo(6)._toBytes();\n  }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/interfaces/IL1MessageManager.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\ninterface IL1MessageManager {\n  /**\n   * @dev Emitted when L2->L1 message hashes have been added to L1 storage.\n   */\n  event L2L1MessageHashAddedToInbox(bytes32 indexed messageHash);\n\n  /**\n   * @dev Emitted when L1->L2 messages have been anchored on L2 and updated on L1.\n   */\n  event L1L2MessagesReceivedOnL2(bytes32[] messageHashes);\n\n  /**\n   * @dev Thrown when the message has been already sent.\n   */\n  error MessageAlreadySent();\n\n  /**\n   * @dev Thrown when the message has already been claimed.\n   */\n  error MessageDoesNotExistOrHasAlreadyBeenClaimed();\n\n  /**\n   * @dev Thrown when the message has already been received.\n   */\n  error MessageAlreadyReceived(bytes32 messageHash);\n\n  /**\n   * @dev Thrown when the L1->L2 message has not been sent.\n   */\n  error L1L2MessageNotSent(bytes32 messageHash);\n}\n"},"contracts/interfaces/IZkEvmV2.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\ninterface IZkEvmV2 {\n  struct BlockData {\n    bytes32 blockRootHash;\n    uint32 l2BlockTimestamp;\n    bytes[] transactions;\n    bytes32[] l2ToL1MsgHashes;\n    bytes fromAddresses;\n    uint16[] batchReceptionIndices;\n  }\n\n  /**\n   * @dev Emitted when a L2 block has been finalized on L1\n   */\n  event BlockFinalized(uint256 indexed blockNumber, bytes32 indexed stateRootHash);\n  /**\n   * @dev Emitted when a L2 blocks have been finalized on L1\n   */\n  event BlocksVerificationDone(uint256 indexed lastBlockFinalized, bytes32 startingRootHash, bytes32 finalRootHash);\n\n  /**\n   * @dev Emitted when a verifier is set for a particular proof type\n   */\n  event VerifierAddressChanged(\n    address indexed verifierAddress,\n    uint256 indexed proofType,\n    address indexed verifierSetBy\n  );\n\n  /**\n   * @dev Thrown when l2 block timestamp is not correct\n   */\n  error BlockTimestampError();\n\n  /**\n   * @dev Thrown when the starting rootHash does not match the existing state\n   */\n  error StartingRootHashDoesNotMatch();\n\n  /**\n   * @dev Thrown when blockData is empty\n   */\n  error EmptyBlockDataArray();\n\n  /**\n   * @dev Thrown when block contains zero transactions\n   */\n  error EmptyBlock();\n\n  /**\n   * @dev Thrown when zk proof is empty bytes\n   */\n  error ProofIsEmpty();\n\n  /**\n   * @dev Thrown when zk proof type is invalid\n   */\n  error InvalidProofType();\n\n  /**\n   * @dev Thrown when zk proof is invalid\n   */\n  error InvalidProof();\n\n  /**\n   * @notice Adds or updated the verifier contract address for a proof type\n   * @dev DEFAULT_ADMIN_ROLE is required to execute\n   * @param _newVerifierAddress The address for the verifier contract\n   * @param _proofType The proof type being set/updated\n   **/\n  function setVerifierAddress(address _newVerifierAddress, uint256 _proofType) external;\n\n  /**\n   * @notice Finalizes blocks without using a proof\n   * @dev DEFAULT_ADMIN_ROLE is required to execute\n   * @param _calldata The full BlockData collection - block, transaction and log data\n   **/\n  function finalizeBlocksWithoutProof(BlockData[] calldata _calldata) external;\n\n  /**\n   * @notice Finalizes blocks without using a proof\n   * @dev OPERATOR_ROLE is required to execute\n   * @dev If the verifier based on proof type is not found, it defaults to the default verifier type\n   * @param _calldata The full BlockData collection - block, transaction and log data\n   * @param _proof The proof to verified with the proof type verifier contract\n   * @param _proofType The proof type to determine which verifier contract to use\n   * @param _parentStateRootHash The beginning roothash to start with\n   **/\n  function finalizeBlocks(\n    BlockData[] calldata _calldata,\n    bytes calldata _proof,\n    uint256 _proofType,\n    bytes32 _parentStateRootHash\n  ) external;\n}\n"},"contracts/interfaces/IPauseManager.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\ninterface IPauseManager {\n  /**\n   * @dev Thrown when a specific pause type is paused.\n   */\n  error IsPaused(bytes32 pauseType);\n\n  /**\n   * @dev Thrown when a specific pause type is not paused and expected to be.\n   */\n  error IsNotPaused(bytes32 pauseType);\n\n  /**\n   * @dev Emitted when a pause type is paused.\n   */\n  event Paused(address messageSender, bytes32 pauseType);\n\n  /**\n   * @dev Emitted when a pause type is unpaused.\n   */\n  event UnPaused(address messageSender, bytes32 pauseType);\n}\n"},"contracts/messageService/lib/Codec.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.19;\n\n/**\n * @title Decoding functions for message service anchoring and bytes slicing.\n * @author ConsenSys Software Inc.\n * @notice You can use this to slice bytes and extract anchoring hashes from calldata.\n **/\nlibrary CodecV2 {\n  /**\n   * @notice Decodes a collection of bytes32 (hashes) from the calldata of a transaction.\n   * @dev Extracts and decodes skipping the function selector (selector is expected in the input).\n   * @dev A check beforehand must be performed to confirm this is the correct type of transaction.\n   * @param _calldataWithSelector The calldata for the transaction.\n   * @return bytes32[] - array of message hashes.\n   **/\n  function _extractXDomainAddHashes(bytes memory _calldataWithSelector) internal pure returns (bytes32[] memory) {\n    assembly {\n      let len := sub(mload(_calldataWithSelector), 4)\n      _calldataWithSelector := add(_calldataWithSelector, 0x4)\n      mstore(_calldataWithSelector, len)\n    }\n\n    return abi.decode(_calldataWithSelector, (bytes32[]));\n  }\n}\n"}},"settings":{"libraries":{},"optimizer":{"enabled":true,"runs":100000},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BlockTimestampError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyBlockDataArray\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"FeePaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProofType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pauseType\",\"type\":\"bytes32\"}],\"name\":\"IsNotPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pauseType\",\"type\":\"bytes32\"}],\"name\":\"IsPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"L1L2MessageNotSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LimitIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inde\",\"type\":\"uint256\"}],\"name\":\"MemoryOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"MessageAlreadyReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageAlreadySent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageDoesNotExistOrHasAlreadyBeenClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"MessageSendingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeriodIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofIsEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StartingRootHashDoesNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownTransactionType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueSentTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueShouldBeGreaterThanFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongBytesLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resettingAddress\",\"type\":\"address\"}],\"name\":\"AmountUsedInPeriodReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"stateRootHash\",\"type\":\"bytes32\"}],\"name\":\"BlockFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lastBlockFinalized\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"startingRootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"finalRootHash\",\"type\":\"bytes32\"}],\"name\":\"BlocksVerificationDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"messageHashes\",\"type\":\"bytes32[]\"}],\"name\":\"L1L2MessagesReceivedOnL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"L2L1MessageHashAddedToInbox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountChangeBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"amountUsedLoweredToLimit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"usedAmountResetToZero\",\"type\":\"bool\"}],\"name\":\"LimitAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"MessageClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pauseType\",\"type\":\"bytes32\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pauseType\",\"type\":\"bytes32\"}],\"name\":\"UnPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proofType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifierSetBy\",\"type\":\"address\"}],\"name\":\"VerifierAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GENERAL_PAUSE_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INBOX_STATUS_RECEIVED\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INBOX_STATUS_UNKNOWN\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L1_L2_PAUSE_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_L1_PAUSE_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUTBOX_STATUS_RECEIVED\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUTBOX_STATUS_SENT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUTBOX_STATUS_UNKNOWN\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVING_SYSTEM_PAUSE_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_LIMIT_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"claimMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentL2BlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriodAmountInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriodEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"blockRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"l2BlockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes[]\",\"name\":\"transactions\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"l2ToL1MsgHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"fromAddresses\",\"type\":\"bytes\"},{\"internalType\":\"uint16[]\",\"name\":\"batchReceptionIndices\",\"type\":\"uint16[]\"}],\"internalType\":\"struct IZkEvmV2.BlockData[]\",\"name\":\"_blocksData\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_proofType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_parentStateRootHash\",\"type\":\"bytes32\"}],\"name\":\"finalizeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"blockRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"l2BlockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes[]\",\"name\":\"transactions\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"l2ToL1MsgHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"fromAddresses\",\"type\":\"bytes\"},{\"internalType\":\"uint16[]\",\"name\":\"batchReceptionIndices\",\"type\":\"uint16[]\"}],\"internalType\":\"struct IZkEvmV2.BlockData[]\",\"name\":\"_blocksData\",\"type\":\"tuple[]\"}],\"name\":\"finalizeBlocksWithoutProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"inboxL2L1MessageStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_initialStateRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_initialL2BlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_defaultVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_securityCouncil\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_rateLimitPeriodInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateLimitAmountInWei\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMessageNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"outboxL1L2MessageStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pauseType\",\"type\":\"bytes32\"}],\"name\":\"pauseByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pauseTypeStatuses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAmountUsedInPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"resetRateLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVerifierAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proofType\",\"type\":\"uint256\"}],\"name\":\"setVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stateRootHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pauseType\",\"type\":\"bytes32\"}],\"name\":\"unPauseByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verifiers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ZkEvmV2","CompilerVersion":"v0.8.19+commit.7dd6d404","OptimizationUsed":1,"Runs":100000,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}