{"expiry":1699484676,"data":[{"SourceCode":{"language":"Solidity","sources":{"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"contracts/interfaces/IFACTORY.sol":{"content":"// SPDX-License-Identifier: None\npragma solidity ^0.8.17;\n\ninterface IFACTORY {\n    function proofRevenueAddress() external view returns (address);\n\n    function proofRewardPoolAddress() external view returns (address);\n}"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/interfaces/IDividendDistributor.sol":{"content":"// SPDX-License-Identifier: None\npragma solidity ^0.8.17;\n\ninterface IDividendDistributor {\n    function setDistributionCriteria(\n        uint256 _minPeriod,\n        uint256 _minDistribution\n    ) external;\n\n    function setShare(address shareholder, uint256 amount) external;\n\n    function deposit() external payable;\n\n    function process(uint256 gas) external;\n\n    function setMinPeriod(uint256 _minPeriod) external;\n\n    function setMinDistribution(uint256 _minDistribution) external;\n\n    function rewardTokenAddress() external view returns(address);\n}"},"contracts/interfaces/IProofNonReflectionTokenCutter.sol":{"content":"// SPDX-License-Identifier: None\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../libraries/ProofNonReflectionTokenFees.sol\";\n\ninterface IProofNonReflectionTokenCutter is IERC20, IERC20Metadata {\n    struct BaseData {\n        string tokenName;\n        string tokenSymbol;\n        uint256 initialSupply;\n        uint256 percentToLP;\n        uint256 whitelistPeriod;\n        address owner;\n        address dev;\n        address main;\n        address routerAddress;\n        address initialProofAdmin;\n        address[] whitelists;\n        address[] nftWhitelist;\n    }\n\n    struct WhitelistAdd_ {\n        address [] whitelists;\n    }\n\n    function setBasicData(\n        BaseData memory _baseData,\n        ProofNonReflectionTokenFees.allFees memory fees\n    ) external;\n\n    function addMoreToWhitelist(\n        WhitelistAdd_ memory _WhitelistAdd\n    ) external;\n\n    function updateWhitelistPeriod(\n        uint256 _whitelistPeriod\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"contracts/interfaces/IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: None\npragma solidity ^0.8.17;\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}"},"contracts/interfaces/IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: None\npragma solidity ^0.8.17;\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n}"},"contracts/libraries/Ownable.sol":{"content":"// SPDX-License-Identifier: None\npragma solidity ^0.8.17;\n\nimport \"./Context.sol\";\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"},"contracts/libraries/ProofNonReflectionTokenFees.sol":{"content":"// SPDX-License-Identifier: None\npragma solidity ^0.8.17;\n\nlibrary ProofNonReflectionTokenFees {\n    struct allFees {\n        uint256 mainFee;\n        uint256 mainFeeOnSell;\n        uint256 lpFee;\n        uint256 lpFeeOnSell;\n        uint256 devFee;\n        uint256 devFeeOnSell;\n    }\n}"},"contracts/tokenCutters/ProofNonReflectionTokenCutter.sol":{"content":"// SPDX-License-Identifier: None\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"../libraries/Ownable.sol\";\nimport \"../libraries/Context.sol\";\nimport \"../libraries/ProofNonReflectionTokenFees.sol\";\nimport \"../interfaces/IFACTORY.sol\";\nimport \"../interfaces/IDividendDistributor.sol\";\nimport \"../interfaces/IUniswapV2Router02.sol\";\nimport \"../interfaces/IUniswapV2Factory.sol\";\nimport \"../interfaces/IProofNonReflectionTokenCutter.sol\";\n\ncontract ProofNonReflectionTokenCutter is\n    Context,\n    IProofNonReflectionTokenCutter\n{\n\n    //This token was created with PROOF, and audited by Solidity Finance — https://proofplatform.io/projects\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\n    address payable public proofBurnerAddress;\n    address public proofAdmin;\n    uint256 public whitelistEndTime;\n    uint256 public whitelistPeriod;\n\n    bool public restrictWhales = true;\n\n    mapping(address => bool) public userWhitelist;\n    address[] public nftWhitelist;\n    bool public whitelistMode = true;\n\n    mapping(address => bool) public isFeeExempt;\n    mapping(address => bool) public isTxLimitExempt;\n    mapping(address => bool) public isDividendExempt;\n\n    uint256 public launchedAt;\n    uint256 public proofFee = 2;\n\n    uint256 public mainFee;\n    uint256 public lpFee;\n    uint256 public devFee;\n\n    uint256 public mainFeeOnSell;\n    uint256 public lpFeeOnSell;\n    uint256 public devFeeOnSell;\n\n    uint256 public totalFee;\n    uint256 public totalFeeIfSelling;\n\n    IUniswapV2Router02 public router;\n    address public pair;\n    address public factory;\n    address public tokenOwner;\n    address payable public devWallet;\n    address payable public mainWallet;\n\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n    bool public tradingStatus = true;\n\n    uint256 public _maxTxAmount;\n    uint256 public _walletMax;\n    uint256 public swapThreshold;\n\n    constructor() {\n        factory = msg.sender;\n    }\n\n    modifier lockTheSwap() {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    modifier onlyProofAdmin() {\n        require(\n            proofAdmin == _msgSender(),\n            \"Ownable: caller is not the proofAdmin\"\n        );\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(tokenOwner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    modifier onlyFactory() {\n        require(factory == _msgSender(), \"Ownable: caller is not the factory\");\n        _;\n    }\n\n    function setBasicData(\n        BaseData memory _baseData,\n        ProofNonReflectionTokenFees.allFees memory fees\n    ) external onlyFactory {\n        _name = _baseData.tokenName;\n        _symbol = _baseData.tokenSymbol;\n        _totalSupply = _baseData.initialSupply;\n\n        //Tx & Wallet Limits\n        require(_baseData.percentToLP >= 70, \"Too low\");\t\n        _maxTxAmount = (_baseData.initialSupply * 5) / 1000;\n        _walletMax = (_baseData.initialSupply * 1) / 100;\n        swapThreshold = (_baseData.initialSupply * 5) / 4000;\n\n        router = IUniswapV2Router02(_baseData.routerAddress);\n        pair = IUniswapV2Factory(router.factory()).createPair(\n            router.WETH(),\n            address(this)\n        );\n\n        _allowances[address(this)][address(router)] = type(uint256).max;\n\n        userWhitelist[address(this)] = true;\n        userWhitelist[factory] = true;\n        userWhitelist[pair] = true;\n        userWhitelist[_baseData.owner] = true;\n        userWhitelist[_baseData.initialProofAdmin] = true;\n        userWhitelist[_baseData.routerAddress] = true;\n        _addWhitelist(_baseData.whitelists);\n        nftWhitelist = _baseData.nftWhitelist;\n\n        isFeeExempt[address(this)] = true;\n        isFeeExempt[factory] = true;\n        isFeeExempt[_baseData.owner] = true;\n\n        isTxLimitExempt[_baseData.owner] = true;\n        isTxLimitExempt[pair] = true;\n        isTxLimitExempt[factory] = true;\n        isTxLimitExempt[DEAD] = true;\n        isTxLimitExempt[ZERO] = true;\n\n        whitelistPeriod = _baseData.whitelistPeriod;\n\n        //Fees\n        lpFee = fees.lpFee;\n        lpFeeOnSell = fees.lpFeeOnSell;\n        devFee = fees.devFee;\n        devFeeOnSell = fees.devFeeOnSell;\n        mainFee = fees.mainFee;\n        mainFeeOnSell = fees.mainFeeOnSell;\n\n        totalFee = devFee + lpFee + mainFee + proofFee;\n        totalFeeIfSelling =\n            devFeeOnSell +\n            lpFeeOnSell +\n            mainFeeOnSell +\n            proofFee;\n\n        require(totalFee <= 12, \"Too high fee\");\n        require(totalFeeIfSelling <= 17, \"Too high sell fee\");\n\n        tokenOwner = _baseData.owner;\n        devWallet = payable(_baseData.dev);\n        mainWallet = payable(_baseData.main);\n        proofAdmin = _baseData.initialProofAdmin;\n\n        //Initial supply\n        uint256 forLP = (_baseData.initialSupply * _baseData.percentToLP) / 100; //95%\n        uint256 forOwner = _baseData.initialSupply - forLP; //5%\n\n        _balances[msg.sender] += forLP;\n        _balances[_baseData.owner] += forOwner;\n\n        emit Transfer(address(0), msg.sender, forLP);\n        emit Transfer(address(0), _baseData.owner, forOwner);\n    }\n\n    //proofAdmin functions\n\n    function updateWhitelistPeriod(\n        uint256 _whitelistPeriod\n    ) external onlyProofAdmin {\n        whitelistPeriod = _whitelistPeriod;\n        whitelistEndTime = launchedAt + (60 * _whitelistPeriod);\n        whitelistMode = true;\n    }\n\n    function updateProofAdmin(\n        address newAdmin\n    ) external virtual onlyProofAdmin {\n        proofAdmin = newAdmin;\n        userWhitelist[newAdmin] = true;\n    }\n\n    function updateProofBurnerAddress(\n        address newproofBurnerAddress\n    ) external onlyProofAdmin {\n        proofBurnerAddress = payable(newproofBurnerAddress);\n    }\n\n    //Factory functions\n    function swapTradingStatus() external onlyFactory {\n        tradingStatus = !tradingStatus;\n    }\n\n    function setLaunchedAt() external onlyFactory {\n        require(launchedAt == 0, \"already launched\");\n        launchedAt = block.timestamp;\n        whitelistEndTime = block.timestamp + (60 * whitelistPeriod);\n        whitelistMode = true;\n    }\n\n    function cancelToken() external onlyFactory {\n        isFeeExempt[address(router)] = true;\n        isTxLimitExempt[address(router)] = true;\n        isTxLimitExempt[tokenOwner] = true;\n        tradingStatus = true;\n        restrictWhales = false;\n        swapAndLiquifyEnabled = false;\n    }\n\n    //Owner functions\n    function changeFees(\n        uint256 initialMainFee,\n        uint256 initialMainFeeOnSell,\n        uint256 initialLpFee,\n        uint256 initialLpFeeOnSell,\n        uint256 initialDevFee,\n        uint256 initialDevFeeOnSell\n    ) external onlyOwner {\n        mainFee = initialMainFee;\n        lpFee = initialLpFee;\n        devFee = initialDevFee;\n\n        mainFeeOnSell = initialMainFeeOnSell;\n        lpFeeOnSell = initialLpFeeOnSell;\n        devFeeOnSell = initialDevFeeOnSell;\n\n        totalFee = devFee + lpFee + proofFee + mainFee;\n        totalFeeIfSelling =\n            devFeeOnSell +\n            lpFeeOnSell +\n            proofFee +\n            mainFeeOnSell;\n\n        require(totalFee <= 12, \"Too high fee\");\n        require(totalFeeIfSelling <= 17, \"Too high fee\");\n    }\n\n    function changeTxLimit(uint256 newLimit) external onlyOwner {\n        require(launchedAt != 0, \"!launched\");\n        require(newLimit >= (_totalSupply * 5) / 1000, \"Min 0.5%\");\t\n        require(newLimit <= (_totalSupply * 3) / 100, \"Max 3%\");\n        _maxTxAmount = newLimit;\n    }\n\n    function changeWalletLimit(uint256 newLimit) external onlyOwner {\n        require(launchedAt != 0, \"!launched\");\n        require(newLimit >= (_totalSupply * 5) / 1000, \"Min 0.5%\");\t\n        require(newLimit <= (_totalSupply * 3) / 100, \"Max 3%\");\n        _walletMax = newLimit;\n    }\n\n    function changeRestrictWhales(bool newValue) external onlyOwner {\n        require(launchedAt != 0, \"!launched\");\n        restrictWhales = newValue;\n    }\n\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\n        isFeeExempt[holder] = exempt;\n    }\n\n    function changeIsTxLimitExempt(\n        address holder,\n        bool exempt\n    ) external onlyOwner {\n        isTxLimitExempt[holder] = exempt;\n    }\n\n    function reduceProofFee() external onlyOwner {\n        require(proofFee == 2, \"!already reduced\");\n        require(launchedAt != 0, \"!launched\");\n        require(block.timestamp >= launchedAt + 72 hours, \"too soon\");\n\n        proofFee = 1;\n        totalFee = devFee + lpFee + proofFee + mainFee;\n        totalFeeIfSelling =\n            devFeeOnSell +\n            lpFeeOnSell +\n            proofFee +\n            mainFeeOnSell;\n    }\n\n    function adjustProofFee(uint256 _proofFee) external onlyProofAdmin {\t\n        require(launchedAt != 0, \"!launched\");\t\n        if (block.timestamp >= launchedAt + 72 hours) {\t\n            require(_proofFee <= 1);\t\n            proofFee = _proofFee;\t\n            totalFee = devFee + lpFee + proofFee + mainFee;\t\n            totalFeeIfSelling =\t\n                devFeeOnSell +\t\n                lpFeeOnSell +\t\n                proofFee +\t\n                mainFeeOnSell;\t\n        } else {\t\n            require(_proofFee <= 2);\t\n            proofFee = _proofFee;\t\n            totalFee = devFee + lpFee + proofFee + mainFee;\t\n            totalFeeIfSelling =\t\n                devFeeOnSell +\t\n                lpFeeOnSell +\t\n                proofFee +\t\n                mainFeeOnSell;\t\n        }\t\n    }\n\n    function setDevWallet(address payable newDevWallet) external onlyOwner {\n        devWallet = payable(newDevWallet);\n    }\n\n    function setMainWallet(address payable newMainWallet) external onlyOwner {\n        mainWallet = newMainWallet;\n    }\n\n    function setOwnerWallet(address payable newOwnerWallet) external onlyOwner {\n        tokenOwner = newOwnerWallet;\n    }\n\n    function changeSwapBackSettings(\n        bool enableSwapBack,\n        uint256 newSwapBackLimit\n    ) external onlyOwner {\n        swapAndLiquifyEnabled = enableSwapBack;\n        swapThreshold = newSwapBackLimit;\n    }\n\n    function isWhitelisted(address user) public view returns (bool) {\n        return userWhitelist[user];\n    }\n    function holdsSupportedNFT(address user) public view returns (bool) {\n        for (uint256 i = 0; i < nftWhitelist.length; i++) {\n            if (IERC721(nftWhitelist[i]).balanceOf(user) > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function getCirculatingSupply() external view returns (uint256) {\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view virtual override returns (uint8) {\n        return 9;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(\n        address account\n    ) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(\n        address to,\n        uint256 amount\n    ) external virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(\n        address spender,\n        uint256 amount\n    ) external virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     *\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) external virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) external virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        require(tradingStatus, \"Trading Closed\");\n        if(whitelistMode) {\n            if (block.timestamp >= whitelistEndTime ) {\n                whitelistMode = false;\n            } else {\n                if (sender == pair) { //buy\n                    require(isWhitelisted(recipient) || holdsSupportedNFT(recipient), \"Not whitelisted\");\n                } else if (recipient == pair) { //sell\n                    require(isWhitelisted(sender) || holdsSupportedNFT(sender), \"Not whitelisted\");\n                } else { //transfer\n                    require((isWhitelisted(sender) || holdsSupportedNFT(sender)) && (isWhitelisted(recipient) || holdsSupportedNFT(recipient)), \"Not Whitelisted\");\n                }\n            }\n        }\n\n        if (inSwapAndLiquify) {\n            return _basicTransfer(sender, recipient, amount);\n        }\n\n        if (recipient == pair && restrictWhales) {\t\n            require(\t\n                amount <= _maxTxAmount ||\t\n                    (isTxLimitExempt[sender] && isTxLimitExempt[recipient]),\t\n                \"Max TX\"\t\n            );\t\n        }\t\n        if (!isTxLimitExempt[recipient] && restrictWhales) {\t\n            require(_balances[recipient] + amount <= _walletMax, \"Max Wallet\");\t\n        }\n\n        if (\n            sender != pair &&\n            !inSwapAndLiquify &&\n            swapAndLiquifyEnabled &&\n            _balances[address(this)] >= swapThreshold\n        ) {\n            swapBack();\n        }\n\n        _balances[sender] = _balances[sender] - amount;\n        uint256 finalAmount = amount;\n\n        if (sender == pair || recipient == pair) {\n            finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient]\n                ? takeFee(sender, recipient, amount)\n                : amount;\n        }\n\n        _balances[recipient] = _balances[recipient] + finalAmount;\n\n        emit Transfer(sender, recipient, finalAmount);\n        return true;\n    }\n\n    function _basicTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        _balances[sender] = _balances[sender] - amount;\n        _balances[recipient] = _balances[recipient] + amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance >= amount,\n                \"ERC20: insufficient allowance\"\n            );\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    function takeFee(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (uint256) {\n        uint256 feeApplicable = pair == recipient\n            ? totalFeeIfSelling\n            : totalFee;\n        uint256 feeAmount = (amount * feeApplicable) / 100;\n\n        _balances[address(this)] = _balances[address(this)] + feeAmount;\n        emit Transfer(sender, address(this), feeAmount);\n\n        return amount - feeAmount;\n    }\n\n    function swapBack() internal lockTheSwap {\n        uint256 tokensToLiquify = _balances[address(this)];\n\n        uint256 amountToLiquify;\n        uint256 devBalance;\n        uint256 proofBalance;\n        uint256 amountEthLiquidity;\n\n        // Use sell ratios if buy tax too low\n        if (totalFee <= 2) {\n            amountToLiquify =\n                (tokensToLiquify * lpFeeOnSell) /\n                totalFeeIfSelling /\n                2;\n        } else {\n            amountToLiquify = (tokensToLiquify * lpFee) / totalFee / 2;\n        }\n\n        uint256 amountToSwap = tokensToLiquify - amountToLiquify;\n        if (amountToSwap == 0) return;\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountToSwap,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 amountETH = address(this).balance;\n\n        // Use sell ratios if buy tax too low\n        if (totalFee <= 2) {\n            amountEthLiquidity =\n                (amountETH * lpFeeOnSell) /\n                totalFeeIfSelling /\n                2;\n        } else {\n            amountEthLiquidity = (amountETH * lpFee) / totalFee / 2;\n        }\n\n        if (amountToLiquify > 0) {\n            router.addLiquidityETH{value: amountEthLiquidity}(\n                address(this),\n                amountToLiquify,\n                0,\n                0,\n                0x000000000000000000000000000000000000dEaD,\n                block.timestamp\n            );\n        }\n\n        uint256 amountETHafterLP = address(this).balance;\n\n        // Use sell ratios if buy tax too low\n        if (totalFee <= 2) {\n            devBalance = (amountETHafterLP * devFeeOnSell) / totalFeeIfSelling;\n            proofBalance = (amountETHafterLP * proofFee) / totalFeeIfSelling;\n        } else {\n            devBalance = (amountETHafterLP * devFee) / totalFee;\n            proofBalance = (amountETHafterLP * proofFee) / totalFee;\n        }\n\n        uint256 amountEthMain = amountETHafterLP - devBalance - proofBalance;\n\n        if (amountETH > 0) {\n            if (proofBalance > 0) {\n                uint256 revenueSplit = proofBalance / 2;\n                (bool sent, ) = payable(IFACTORY(factory).proofRevenueAddress()).call{value: revenueSplit}(\"\");\n                require(sent);\n                (bool sent1, ) = payable(IFACTORY(factory).proofRewardPoolAddress()).call{value: revenueSplit}(\"\");\n                require(sent1);\n            }\n            if (devBalance > 0) {\n                (bool sent, ) = devWallet.call{value: devBalance}(\"\");\n                require(sent);\n            }\n            if (amountEthMain > 0) {\n                (bool sent1, ) = mainWallet.call{value: amountEthMain}(\"\");\n                require(sent1);\n            }\n        }\n    }\n\n    function _addWhitelist(address[] memory _whitelists) internal {\n        uint256 length = _whitelists.length;\n        for (uint256 i = 0; i < length; i++) {\n            userWhitelist[_whitelists[i]] = true;\n        }\n    }\n\n    function addMoreToWhitelist(WhitelistAdd_ memory _WhitelistAdd) external onlyFactory {\n        _addWhitelist(_WhitelistAdd.whitelists);\n    }\n\n    receive() external payable {}\n}\n"},"contracts/libraries/Context.sol":{"content":"// SPDX-License-Identifier: None\npragma solidity ^0.8.17;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"}},"settings":{"libraries":{},"optimizer":{"details":{"yul":true},"enabled":true,"runs":200},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}},"viaIR":true}},"ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"}],\"internalType\":\"struct IProofNonReflectionTokenCutter.WhitelistAdd_\",\"name\":\"_WhitelistAdd\",\"type\":\"tuple\"}],\"name\":\"addMoreToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proofFee\",\"type\":\"uint256\"}],\"name\":\"adjustProofFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialMainFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMainFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDevFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"changeRestrictWhales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableSwapBack\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapBackLimit\",\"type\":\"uint256\"}],\"name\":\"changeSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"changeTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"changeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"holdsSupportedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofBurnerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceProofFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictWhales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentToLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whitelistPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"main\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialProofAdmin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"nftWhitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct IProofNonReflectionTokenCutter.BaseData\",\"name\":\"_baseData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mainFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeOnSell\",\"type\":\"uint256\"}],\"internalType\":\"struct ProofNonReflectionTokenFees.allFees\",\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"setBasicData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLaunchedAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMainWallet\",\"type\":\"address\"}],\"name\":\"setMainWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"setOwnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeIfSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateProofAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newproofBurnerAddress\",\"type\":\"address\"}],\"name\":\"updateProofBurnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whitelistPeriod\",\"type\":\"uint256\"}],\"name\":\"updateWhitelistPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ProofNonReflectionTokenCutter","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":1,"Runs":200,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}