{"expiry":1699484682,"data":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.10;\n\n\n\n\n\nabstract contract IDFSRegistry {\n \n    function getAddr(bytes4 _id) public view virtual returns (address);\n\n    function addNewContract(\n        bytes32 _id,\n        address _contractAddr,\n        uint256 _waitPeriod\n    ) public virtual;\n\n    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\n\n    function approveContractChange(bytes32 _id) public virtual;\n\n    function cancelContractChange(bytes32 _id) public virtual;\n\n    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\n}\n\n\n\n\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint256 digits);\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n\n\nlibrary Address {\n    //insufficient balance\n    error InsufficientBalance(uint256 available, uint256 required);\n    //unable to send value, recipient may have reverted\n    error SendingValueFail();\n    //insufficient balance for call\n    error InsufficientBalanceForCall(uint256 available, uint256 required);\n    //call to non-contract\n    error NonContractCall();\n    \n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        uint256 balance = address(this).balance;\n        if (balance < amount){\n            revert InsufficientBalance(balance, amount);\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!(success)){\n            revert SendingValueFail();\n        }\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        uint256 balance = address(this).balance;\n        if (balance < value){\n            revert InsufficientBalanceForCall(balance, value);\n        }\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        if (!(isContract(target))){\n            revert NonContractCall();\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n\n\n\n\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeERC20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n        );\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\n\n\n\ncontract MainnetAuthAddresses {\n    address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\n    address internal constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n    address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9; // USED IN ADMIN VAULT CONSTRUCTOR\n}\n\n\n\n\n\ncontract AuthHelper is MainnetAuthAddresses {\n}\n\n\n\n\n\ncontract AdminVault is AuthHelper {\n    address public owner;\n    address public admin;\n\n    error SenderNotAdmin();\n\n    constructor() {\n        owner = msg.sender;\n        admin = ADMIN_ADDR;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function changeOwner(address _owner) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        owner = _owner;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function changeAdmin(address _admin) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        admin = _admin;\n    }\n\n}\n\n\n\n\n\n\n\n\ncontract AdminAuth is AuthHelper {\n    using SafeERC20 for IERC20;\n\n    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\n\n    error SenderNotOwner();\n    error SenderNotAdmin();\n\n    modifier onlyOwner() {\n        if (adminVault.owner() != msg.sender){\n            revert SenderNotOwner();\n        }\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (adminVault.admin() != msg.sender){\n            revert SenderNotAdmin();\n        }\n        _;\n    }\n\n    /// @notice withdraw stuck funds\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(_receiver).transfer(_amount);\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    /// @notice Destroy the contract\n    function kill() public onlyAdmin {\n        selfdestruct(payable(msg.sender));\n    }\n}\n\n\n\n\n\ncontract DFSRegistry is AdminAuth {\n    error EntryAlreadyExistsError(bytes4);\n    error EntryNonExistentError(bytes4);\n    error EntryNotInChangeError(bytes4);\n    error ChangeNotReadyError(uint256,uint256);\n    error EmptyPrevAddrError(bytes4);\n    error AlreadyInContractChangeError(bytes4);\n    error AlreadyInWaitPeriodChangeError(bytes4);\n\n    event AddNewContract(address,bytes4,address,uint256);\n    event RevertToPreviousAddress(address,bytes4,address,address);\n    event StartContractChange(address,bytes4,address,address);\n    event ApproveContractChange(address,bytes4,address,address);\n    event CancelContractChange(address,bytes4,address,address);\n    event StartWaitPeriodChange(address,bytes4,uint256);\n    event ApproveWaitPeriodChange(address,bytes4,uint256,uint256);\n    event CancelWaitPeriodChange(address,bytes4,uint256,uint256);\n\n    struct Entry {\n        address contractAddr;\n        uint256 waitPeriod;\n        uint256 changeStartTime;\n        bool inContractChange;\n        bool inWaitPeriodChange;\n        bool exists;\n    }\n\n    mapping(bytes4 => Entry) public entries;\n    mapping(bytes4 => address) public previousAddresses;\n\n    mapping(bytes4 => address) public pendingAddresses;\n    mapping(bytes4 => uint256) public pendingWaitTimes;\n\n    /// @notice Given an contract id returns the registered address\n    /// @dev Id is keccak256 of the contract name\n    /// @param _id Id of contract\n    function getAddr(bytes4 _id) public view returns (address) {\n        return entries[_id].contractAddr;\n    }\n\n    /// @notice Helper function to easily query if id is registered\n    /// @param _id Id of contract\n    function isRegistered(bytes4 _id) public view returns (bool) {\n        return entries[_id].exists;\n    }\n\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\n\n    /// @notice Adds a new contract to the registry\n    /// @param _id Id of contract\n    /// @param _contractAddr Address of the contract\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n    function addNewContract(\n        bytes4 _id,\n        address _contractAddr,\n        uint256 _waitPeriod\n    ) public onlyOwner {\n        if (entries[_id].exists){\n            revert EntryAlreadyExistsError(_id);\n        }\n\n        entries[_id] = Entry({\n            contractAddr: _contractAddr,\n            waitPeriod: _waitPeriod,\n            changeStartTime: 0,\n            inContractChange: false,\n            inWaitPeriodChange: false,\n            exists: true\n        });\n\n        emit AddNewContract(msg.sender, _id, _contractAddr, _waitPeriod);\n    }\n\n    /// @notice Reverts to the previous address immediately\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\n    /// @param _id Id of contract\n    function revertToPreviousAddress(bytes4 _id) public onlyOwner {\n        if (!(entries[_id].exists)){\n            revert EntryNonExistentError(_id);\n        }\n        if (previousAddresses[_id] == address(0)){\n            revert EmptyPrevAddrError(_id);\n        }\n\n        address currentAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = previousAddresses[_id];\n\n        emit RevertToPreviousAddress(msg.sender, _id, currentAddr, previousAddresses[_id]);\n    }\n\n    /// @notice Starts an address change for an existing entry\n    /// @dev Can override a change that is currently in progress\n    /// @param _id Id of contract\n    /// @param _newContractAddr Address of the new contract\n    function startContractChange(bytes4 _id, address _newContractAddr) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inWaitPeriodChange){\n            revert AlreadyInWaitPeriodChangeError(_id);\n        }\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inContractChange = true;\n\n        pendingAddresses[_id] = _newContractAddr;\n\n        emit StartContractChange(msg.sender, _id, entries[_id].contractAddr, _newContractAddr);\n    }\n\n    /// @notice Changes new contract address, correct time must have passed\n    /// @param _id Id of contract\n    function approveContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){// solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        address oldContractAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = pendingAddresses[_id];\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingAddresses[_id] = address(0);\n        previousAddresses[_id] = oldContractAddr;\n\n        emit ApproveContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Cancel pending change\n    /// @param _id Id of contract\n    function cancelContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        address oldContractAddr = pendingAddresses[_id];\n\n        pendingAddresses[_id] = address(0);\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Starts the change for waitPeriod\n    /// @param _id Id of contract\n    /// @param _newWaitPeriod New wait time\n    function startWaitPeriodChange(bytes4 _id, uint256 _newWaitPeriod) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inContractChange){\n            revert AlreadyInContractChangeError(_id);\n        }\n\n        pendingWaitTimes[_id] = _newWaitPeriod;\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inWaitPeriodChange = true;\n\n        emit StartWaitPeriodChange(msg.sender, _id, _newWaitPeriod);\n    }\n\n    /// @notice Changes new wait period, correct time must have passed\n    /// @param _id Id of contract\n    function approveWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){ // solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        uint256 oldWaitTime = entries[_id].waitPeriod;\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\n        \n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingWaitTimes[_id] = 0;\n\n        emit ApproveWaitPeriodChange(msg.sender, _id, oldWaitTime, entries[_id].waitPeriod);\n    }\n\n    /// @notice Cancel wait period change\n    /// @param _id Id of contract\n    function cancelWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\n\n        pendingWaitTimes[_id] = 0;\n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelWaitPeriodChange(msg.sender, _id, oldWaitPeriod, entries[_id].waitPeriod);\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"AlreadyInContractChangeError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"AlreadyInWaitPeriodChangeError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ChangeNotReadyError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"EmptyPrevAddrError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"EntryAlreadyExistsError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"EntryNonExistentError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"EntryNotInChangeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonContractCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AddNewContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ApproveContractChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ApproveWaitPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CancelContractChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CancelWaitPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RevertToPreviousAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"StartContractChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StartWaitPeriodChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_id\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_waitPeriod\",\"type\":\"uint256\"}],\"name\":\"addNewContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_id\",\"type\":\"bytes4\"}],\"name\":\"approveContractChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_id\",\"type\":\"bytes4\"}],\"name\":\"approveWaitPeriodChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_id\",\"type\":\"bytes4\"}],\"name\":\"cancelContractChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_id\",\"type\":\"bytes4\"}],\"name\":\"cancelWaitPeriodChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"entries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"waitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inContractChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inWaitPeriodChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_id\",\"type\":\"bytes4\"}],\"name\":\"getAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_id\",\"type\":\"bytes4\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"pendingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"pendingWaitTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"previousAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_id\",\"type\":\"bytes4\"}],\"name\":\"revertToPreviousAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_id\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_newContractAddr\",\"type\":\"address\"}],\"name\":\"startContractChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_id\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_newWaitPeriod\",\"type\":\"uint256\"}],\"name\":\"startWaitPeriodChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DFSRegistry","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":1,"Runs":10000,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":0,"SwarmSource":""}]}