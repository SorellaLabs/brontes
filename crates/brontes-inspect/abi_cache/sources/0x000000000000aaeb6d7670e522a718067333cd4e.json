{"expiry":1699484676,"data":[{"SourceCode":{"language":"Solidity","sources":{"src/OperatorFilterRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\nimport {Ownable} from \"openzeppelin-contracts/access/Ownable.sol\";\nimport {EnumerableSet} from \"openzeppelin-contracts/utils/structs/EnumerableSet.sol\";\nimport {OperatorFilterRegistryErrorsAndEvents} from \"./OperatorFilterRegistryErrorsAndEvents.sol\";\n\n/**\n * @title  OperatorFilterRegistry\n * @notice Borrows heavily from the QQL BlacklistOperatorFilter contract:\n *         https://github.com/qql-art/contracts/blob/main/contracts/BlacklistOperatorFilter.sol\n * @notice This contracts allows tokens or token owners to register specific addresses or codeHashes that may be\n * *       restricted according to the isOperatorAllowed function.\n */\ncontract OperatorFilterRegistry is IOperatorFilterRegistry, OperatorFilterRegistryErrorsAndEvents {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    /// @dev initialized accounts have a nonzero codehash (see https://eips.ethereum.org/EIPS/eip-1052)\n    /// Note that this will also be a smart contract's codehash when making calls from its constructor.\n    bytes32 constant EOA_CODEHASH = keccak256(\"\");\n\n    mapping(address => EnumerableSet.AddressSet) private _filteredOperators;\n    mapping(address => EnumerableSet.Bytes32Set) private _filteredCodeHashes;\n    mapping(address => address) private _registrations;\n    mapping(address => EnumerableSet.AddressSet) private _subscribers;\n\n    /**\n     * @notice restricts method caller to the address or EIP-173 \"owner()\"\n     */\n    modifier onlyAddressOrOwner(address addr) {\n        if (msg.sender != addr) {\n            try Ownable(addr).owner() returns (address owner) {\n                if (msg.sender != owner) {\n                    revert OnlyAddressOrOwner();\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert NotOwnable();\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n        _;\n    }\n\n    /**\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\n     *         true if supplied registrant address is not registered.\n     */\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool) {\n        address registration = _registrations[registrant];\n        if (registration != address(0)) {\n            EnumerableSet.AddressSet storage filteredOperatorsRef;\n            EnumerableSet.Bytes32Set storage filteredCodeHashesRef;\n\n            filteredOperatorsRef = _filteredOperators[registration];\n            filteredCodeHashesRef = _filteredCodeHashes[registration];\n\n            if (filteredOperatorsRef.contains(operator)) {\n                revert AddressFiltered(operator);\n            }\n            if (operator.code.length > 0) {\n                bytes32 codeHash = operator.codehash;\n                if (filteredCodeHashesRef.contains(codeHash)) {\n                    revert CodeHashFiltered(operator, codeHash);\n                }\n            }\n        }\n        return true;\n    }\n\n    //////////////////\n    // AUTH METHODS //\n    //////////////////\n\n    /**\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\n     */\n    function register(address registrant) external onlyAddressOrOwner(registrant) {\n        if (_registrations[registrant] != address(0)) {\n            revert AlreadyRegistered();\n        }\n        _registrations[registrant] = registrant;\n        emit RegistrationUpdated(registrant, true);\n    }\n\n    /**\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\n     *         Note that this does not remove any filtered addresses or codeHashes.\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\n     */\n    function unregister(address registrant) external onlyAddressOrOwner(registrant) {\n        address registration = _registrations[registrant];\n        if (registration == address(0)) {\n            revert NotRegistered(registrant);\n        }\n        if (registration != registrant) {\n            _subscribers[registration].remove(registrant);\n            emit SubscriptionUpdated(registrant, registration, false);\n        }\n        _registrations[registrant] = address(0);\n        emit RegistrationUpdated(registrant, false);\n    }\n\n    /**\n     * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\n     */\n    function registerAndSubscribe(address registrant, address subscription) external onlyAddressOrOwner(registrant) {\n        address registration = _registrations[registrant];\n        if (registration != address(0)) {\n            revert AlreadyRegistered();\n        }\n        if (registrant == subscription) {\n            revert CannotSubscribeToSelf();\n        }\n        address subscriptionRegistration = _registrations[subscription];\n        if (subscriptionRegistration == address(0)) {\n            revert NotRegistered(subscription);\n        }\n        if (subscriptionRegistration != subscription) {\n            revert CannotSubscribeToRegistrantWithSubscription(subscription);\n        }\n\n        _registrations[registrant] = subscription;\n        _subscribers[subscription].add(registrant);\n        emit RegistrationUpdated(registrant, true);\n        emit SubscriptionUpdated(registrant, subscription, true);\n    }\n\n    /**\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\n     *         address without subscribing.\n     */\n    function registerAndCopyEntries(address registrant, address registrantToCopy)\n        external\n        onlyAddressOrOwner(registrant)\n    {\n        if (registrantToCopy == registrant) {\n            revert CannotCopyFromSelf();\n        }\n        address registration = _registrations[registrant];\n        if (registration != address(0)) {\n            revert AlreadyRegistered();\n        }\n        address registrantRegistration = _registrations[registrantToCopy];\n        if (registrantRegistration == address(0)) {\n            revert NotRegistered(registrantToCopy);\n        }\n        _registrations[registrant] = registrant;\n        emit RegistrationUpdated(registrant, true);\n        _copyEntries(registrant, registrantToCopy);\n    }\n\n    /**\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\n     */\n    function updateOperator(address registrant, address operator, bool filtered)\n        external\n        onlyAddressOrOwner(registrant)\n    {\n        address registration = _registrations[registrant];\n        if (registration == address(0)) {\n            revert NotRegistered(registrant);\n        }\n        if (registration != registrant) {\n            revert CannotUpdateWhileSubscribed(registration);\n        }\n        EnumerableSet.AddressSet storage filteredOperatorsRef = _filteredOperators[registrant];\n\n        if (!filtered) {\n            bool removed = filteredOperatorsRef.remove(operator);\n            if (!removed) {\n                revert AddressNotFiltered(operator);\n            }\n        } else {\n            bool added = filteredOperatorsRef.add(operator);\n            if (!added) {\n                revert AddressAlreadyFiltered(operator);\n            }\n        }\n        emit OperatorUpdated(registrant, operator, filtered);\n    }\n\n    /**\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\n     */\n    function updateCodeHash(address registrant, bytes32 codeHash, bool filtered)\n        external\n        onlyAddressOrOwner(registrant)\n    {\n        if (codeHash == EOA_CODEHASH) {\n            revert CannotFilterEOAs();\n        }\n        address registration = _registrations[registrant];\n        if (registration == address(0)) {\n            revert NotRegistered(registrant);\n        }\n        if (registration != registrant) {\n            revert CannotUpdateWhileSubscribed(registration);\n        }\n        EnumerableSet.Bytes32Set storage filteredCodeHashesRef = _filteredCodeHashes[registrant];\n\n        if (!filtered) {\n            bool removed = filteredCodeHashesRef.remove(codeHash);\n            if (!removed) {\n                revert CodeHashNotFiltered(codeHash);\n            }\n        } else {\n            bool added = filteredCodeHashesRef.add(codeHash);\n            if (!added) {\n                revert CodeHashAlreadyFiltered(codeHash);\n            }\n        }\n        emit CodeHashUpdated(registrant, codeHash, filtered);\n    }\n\n    /**\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\n     */\n    function updateOperators(address registrant, address[] calldata operators, bool filtered)\n        external\n        onlyAddressOrOwner(registrant)\n    {\n        address registration = _registrations[registrant];\n        if (registration == address(0)) {\n            revert NotRegistered(registrant);\n        }\n        if (registration != registrant) {\n            revert CannotUpdateWhileSubscribed(registration);\n        }\n        EnumerableSet.AddressSet storage filteredOperatorsRef = _filteredOperators[registrant];\n        uint256 operatorsLength = operators.length;\n        unchecked {\n            if (!filtered) {\n                for (uint256 i = 0; i < operatorsLength; ++i) {\n                    address operator = operators[i];\n                    bool removed = filteredOperatorsRef.remove(operator);\n                    if (!removed) {\n                        revert AddressNotFiltered(operator);\n                    }\n                }\n            } else {\n                for (uint256 i = 0; i < operatorsLength; ++i) {\n                    address operator = operators[i];\n                    bool added = filteredOperatorsRef.add(operator);\n                    if (!added) {\n                        revert AddressAlreadyFiltered(operator);\n                    }\n                }\n            }\n        }\n        emit OperatorsUpdated(registrant, operators, filtered);\n    }\n\n    /**\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\n     */\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered)\n        external\n        onlyAddressOrOwner(registrant)\n    {\n        address registration = _registrations[registrant];\n        if (registration == address(0)) {\n            revert NotRegistered(registrant);\n        }\n        if (registration != registrant) {\n            revert CannotUpdateWhileSubscribed(registration);\n        }\n        EnumerableSet.Bytes32Set storage filteredCodeHashesRef = _filteredCodeHashes[registrant];\n        uint256 codeHashesLength = codeHashes.length;\n        unchecked {\n            if (!filtered) {\n                for (uint256 i = 0; i < codeHashesLength; ++i) {\n                    bytes32 codeHash = codeHashes[i];\n                    bool removed = filteredCodeHashesRef.remove(codeHash);\n                    if (!removed) {\n                        revert CodeHashNotFiltered(codeHash);\n                    }\n                }\n            } else {\n                for (uint256 i = 0; i < codeHashesLength; ++i) {\n                    bytes32 codeHash = codeHashes[i];\n                    if (codeHash == EOA_CODEHASH) {\n                        revert CannotFilterEOAs();\n                    }\n                    bool added = filteredCodeHashesRef.add(codeHash);\n                    if (!added) {\n                        revert CodeHashAlreadyFiltered(codeHash);\n                    }\n                }\n            }\n        }\n        emit CodeHashesUpdated(registrant, codeHashes, filtered);\n    }\n\n    /**\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\n     *         subscription if present.\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\n     *         used.\n     */\n    function subscribe(address registrant, address newSubscription) external onlyAddressOrOwner(registrant) {\n        if (registrant == newSubscription) {\n            revert CannotSubscribeToSelf();\n        }\n        if (newSubscription == address(0)) {\n            revert CannotSubscribeToZeroAddress();\n        }\n        address registration = _registrations[registrant];\n        if (registration == address(0)) {\n            revert NotRegistered(registrant);\n        }\n        if (registration == newSubscription) {\n            revert AlreadySubscribed(newSubscription);\n        }\n        address newSubscriptionRegistration = _registrations[newSubscription];\n        if (newSubscriptionRegistration == address(0)) {\n            revert NotRegistered(newSubscription);\n        }\n        if (newSubscriptionRegistration != newSubscription) {\n            revert CannotSubscribeToRegistrantWithSubscription(newSubscription);\n        }\n\n        if (registration != registrant) {\n            _subscribers[registration].remove(registrant);\n            emit SubscriptionUpdated(registrant, registration, false);\n        }\n        _registrations[registrant] = newSubscription;\n        _subscribers[newSubscription].add(registrant);\n        emit SubscriptionUpdated(registrant, newSubscription, true);\n    }\n\n    /**\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\n     */\n    function unsubscribe(address registrant, bool copyExistingEntries) external onlyAddressOrOwner(registrant) {\n        address registration = _registrations[registrant];\n        if (registration == address(0)) {\n            revert NotRegistered(registrant);\n        }\n        if (registration == registrant) {\n            revert NotSubscribed();\n        }\n        _subscribers[registration].remove(registrant);\n        _registrations[registrant] = registrant;\n        emit SubscriptionUpdated(registrant, registration, false);\n        if (copyExistingEntries) {\n            _copyEntries(registrant, registration);\n        }\n    }\n\n    /**\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\n     */\n    function copyEntriesOf(address registrant, address registrantToCopy) external onlyAddressOrOwner(registrant) {\n        if (registrant == registrantToCopy) {\n            revert CannotCopyFromSelf();\n        }\n        address registration = _registrations[registrant];\n        if (registration == address(0)) {\n            revert NotRegistered(registrant);\n        }\n        if (registration != registrant) {\n            revert CannotUpdateWhileSubscribed(registration);\n        }\n        address registrantRegistration = _registrations[registrantToCopy];\n        if (registrantRegistration == address(0)) {\n            revert NotRegistered(registrantToCopy);\n        }\n        _copyEntries(registrant, registrantToCopy);\n    }\n\n    /// @dev helper to copy entries from registrantToCopy to registrant and emit events\n    function _copyEntries(address registrant, address registrantToCopy) private {\n        EnumerableSet.AddressSet storage filteredOperatorsRef = _filteredOperators[registrantToCopy];\n        EnumerableSet.Bytes32Set storage filteredCodeHashesRef = _filteredCodeHashes[registrantToCopy];\n        uint256 filteredOperatorsLength = filteredOperatorsRef.length();\n        uint256 filteredCodeHashesLength = filteredCodeHashesRef.length();\n        unchecked {\n            for (uint256 i = 0; i < filteredOperatorsLength; ++i) {\n                address operator = filteredOperatorsRef.at(i);\n                bool added = _filteredOperators[registrant].add(operator);\n                if (added) {\n                    emit OperatorUpdated(registrant, operator, true);\n                }\n            }\n            for (uint256 i = 0; i < filteredCodeHashesLength; ++i) {\n                bytes32 codehash = filteredCodeHashesRef.at(i);\n                bool added = _filteredCodeHashes[registrant].add(codehash);\n                if (added) {\n                    emit CodeHashUpdated(registrant, codehash, true);\n                }\n            }\n        }\n    }\n\n    //////////////////\n    // VIEW METHODS //\n    //////////////////\n\n    /**\n     * @notice Get the subscription address of a given registrant, if any.\n     */\n    function subscriptionOf(address registrant) external view returns (address subscription) {\n        subscription = _registrations[registrant];\n        if (subscription == address(0)) {\n            revert NotRegistered(registrant);\n        } else if (subscription == registrant) {\n            subscription = address(0);\n        }\n    }\n\n    /**\n     * @notice Get the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscribers(address registrant) external view returns (address[] memory) {\n        return _subscribers[registrant].values();\n    }\n\n    /**\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscriberAt(address registrant, uint256 index) external view returns (address) {\n        return _subscribers[registrant].at(index);\n    }\n\n    /**\n     * @notice Returns true if operator is filtered by a given address or its subscription.\n     */\n    function isOperatorFiltered(address registrant, address operator) external view returns (bool) {\n        address registration = _registrations[registrant];\n        if (registration != registrant) {\n            return _filteredOperators[registration].contains(operator);\n        }\n        return _filteredOperators[registrant].contains(operator);\n    }\n\n    /**\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\n     */\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external view returns (bool) {\n        address registration = _registrations[registrant];\n        if (registration != registrant) {\n            return _filteredCodeHashes[registration].contains(codeHash);\n        }\n        return _filteredCodeHashes[registrant].contains(codeHash);\n    }\n\n    /**\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\n     */\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external view returns (bool) {\n        bytes32 codeHash = operatorWithCode.codehash;\n        address registration = _registrations[registrant];\n        if (registration != registrant) {\n            return _filteredCodeHashes[registration].contains(codeHash);\n        }\n        return _filteredCodeHashes[registrant].contains(codeHash);\n    }\n\n    /**\n     * @notice Returns true if an address has registered\n     */\n    function isRegistered(address registrant) external view returns (bool) {\n        return _registrations[registrant] != address(0);\n    }\n\n    /**\n     * @notice Returns a list of filtered operators for a given address or its subscription.\n     */\n    function filteredOperators(address registrant) external view returns (address[] memory) {\n        address registration = _registrations[registrant];\n        if (registration != registrant) {\n            return _filteredOperators[registration].values();\n        }\n        return _filteredOperators[registrant].values();\n    }\n\n    /**\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashes(address registrant) external view returns (bytes32[] memory) {\n        address registration = _registrations[registrant];\n        if (registration != registrant) {\n            return _filteredCodeHashes[registration].values();\n        }\n        return _filteredCodeHashes[registrant].values();\n    }\n\n    /**\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredOperatorAt(address registrant, uint256 index) external view returns (address) {\n        address registration = _registrations[registrant];\n        if (registration != registrant) {\n            return _filteredOperators[registration].at(index);\n        }\n        return _filteredOperators[registrant].at(index);\n    }\n\n    /**\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashAt(address registrant, uint256 index) external view returns (bytes32) {\n        address registration = _registrations[registrant];\n        if (registration != registrant) {\n            return _filteredCodeHashes[registration].at(index);\n        }\n        return _filteredCodeHashes[registrant].at(index);\n    }\n\n    /// @dev Convenience method to compute the code hash of an arbitrary contract\n    function codeHashOf(address a) external view returns (bytes32) {\n        return a.codehash;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"src/IOperatorFilterRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {EnumerableSet} from \"openzeppelin-contracts/utils/structs/EnumerableSet.sol\";\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator) external returns (bool);\n    function register(address registrant) external;\n    function registerAndSubscribe(address registrant, address subscription) external;\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n    function updateOperator(address registrant, address operator, bool filtered) external;\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n    function subscribe(address registrant, address registrantToSubscribe) external;\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n    function subscriptionOf(address addr) external returns (address registrant);\n    function subscribers(address registrant) external returns (address[] memory);\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n    function filteredOperators(address addr) external returns (address[] memory);\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n    function isRegistered(address addr) external returns (bool);\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"src/OperatorFilterRegistryErrorsAndEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract OperatorFilterRegistryErrorsAndEvents {\n    error CannotFilterEOAs();\n    error AddressAlreadyFiltered(address operator);\n    error AddressNotFiltered(address operator);\n    error CodeHashAlreadyFiltered(bytes32 codeHash);\n    error CodeHashNotFiltered(bytes32 codeHash);\n    error OnlyAddressOrOwner();\n    error NotRegistered(address registrant);\n    error AlreadyRegistered();\n    error AlreadySubscribed(address subscription);\n    error NotSubscribed();\n    error CannotUpdateWhileSubscribed(address subscription);\n    error CannotSubscribeToSelf();\n    error CannotSubscribeToZeroAddress();\n    error NotOwnable();\n    error AddressFiltered(address filtered);\n    error CodeHashFiltered(address account, bytes32 codeHash);\n    error CannotSubscribeToRegistrantWithSubscription(address registrant);\n    error CannotCopyFromSelf();\n\n    event RegistrationUpdated(address indexed registrant, bool indexed registered);\n    event OperatorUpdated(address indexed registrant, address indexed operator, bool indexed filtered);\n    event OperatorsUpdated(address indexed registrant, address[] operators, bool indexed filtered);\n    event CodeHashUpdated(address indexed registrant, bytes32 indexed codeHash, bool indexed filtered);\n    event CodeHashesUpdated(address indexed registrant, bytes32[] codeHashes, bool indexed filtered);\n    event SubscriptionUpdated(address indexed registrant, address indexed subscription, bool indexed subscribed);\n}\n"}},"settings":{"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":1000000},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}},"remappings":["ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","solmate/=lib/solmate/src/"]}},"ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"AddressAlreadyFiltered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filtered\",\"type\":\"address\"}],\"name\":\"AddressFiltered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"AddressNotFiltered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscription\",\"type\":\"address\"}],\"name\":\"AlreadySubscribed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotCopyFromSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotFilterEOAs\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"CannotSubscribeToRegistrantWithSubscription\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSubscribeToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSubscribeToZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscription\",\"type\":\"address\"}],\"name\":\"CannotUpdateWhileSubscribed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"}],\"name\":\"CodeHashAlreadyFiltered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"}],\"name\":\"CodeHashFiltered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"}],\"name\":\"CodeHashNotFiltered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"NotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSubscribed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAddressOrOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"filtered\",\"type\":\"bool\"}],\"name\":\"CodeHashUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"codeHashes\",\"type\":\"bytes32[]\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"filtered\",\"type\":\"bool\"}],\"name\":\"CodeHashesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"filtered\",\"type\":\"bool\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"filtered\",\"type\":\"bool\"}],\"name\":\"OperatorsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"name\":\"RegistrationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscription\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"subscribed\",\"type\":\"bool\"}],\"name\":\"SubscriptionUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"codeHashOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrantToCopy\",\"type\":\"address\"}],\"name\":\"copyEntriesOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"filteredCodeHashAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"filteredCodeHashes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"filteredOperatorAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"filteredOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"}],\"name\":\"isCodeHashFiltered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operatorWithCode\",\"type\":\"address\"}],\"name\":\"isCodeHashOfFiltered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperatorAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperatorFiltered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrantToCopy\",\"type\":\"address\"}],\"name\":\"registerAndCopyEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subscription\",\"type\":\"address\"}],\"name\":\"registerAndSubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newSubscription\",\"type\":\"address\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"subscriberAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"subscribers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"subscriptionOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"subscription\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"unregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"copyExistingEntries\",\"type\":\"bool\"}],\"name\":\"unsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"filtered\",\"type\":\"bool\"}],\"name\":\"updateCodeHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"codeHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"filtered\",\"type\":\"bool\"}],\"name\":\"updateCodeHashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"filtered\",\"type\":\"bool\"}],\"name\":\"updateOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"filtered\",\"type\":\"bool\"}],\"name\":\"updateOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OperatorFilterRegistry","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":1,"Runs":1000000,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}