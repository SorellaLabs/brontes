{"expiry":1699494228,"data":[{"SourceCode":{"language":"Solidity","sources":{"/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"},"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/features/IFeature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n"},"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/features/IUniswapFeature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev VIP uniswap fill functions.\ninterface IUniswapFeature {\n\n    /// @dev Efficiently sell directly to uniswap/sushiswap.\n    /// @param tokens Sell path.\n    /// @param sellAmount of `tokens[0]` Amount to sell.\n    /// @param minBuyAmount Minimum amount of `tokens[-1]` to buy.\n    /// @param isSushi Use sushiswap if true.\n    /// @return buyAmount Amount of `tokens[-1]` bought.\n    function sellToUniswap(\n        IERC20TokenV06[] calldata tokens,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        bool isSushi\n    )\n        external\n        payable\n        returns (uint256 buyAmount);\n}\n"},"/home/cluracan/code/0x-protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"},"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/errors/LibCommonRichErrors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n"},"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/features/ISimpleFunctionRegistryFeature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n"},"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/external/IAllowanceTarget.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol\";\n\n\n/// @dev The allowance target for the TokenSpender feature.\ninterface IAllowanceTarget is\n    IAuthorizableV06\n{\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        returns (bytes memory resultData);\n}\n"},"/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n"},"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/features/IOwnableFeature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n"},"/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IOwnableV06.sol\";\n\n\ninterface IAuthorizableV06 is\n    IOwnableV06\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return authorizedAddresses Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory authorizedAddresses);\n\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @param addr Address to query.\n    /// @return isAuthorized Whether the address is authorized.\n    function authorized(address addr) external view returns (bool isAuthorized);\n\n    /// @dev All addresseses authorized to call privileged functions.\n    /// @param idx Index of authorized address.\n    /// @return addr Authorized address.\n    function authorities(uint256 idx) external view returns (address addr);\n\n}\n"},"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/features/UniswapFeature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../migrations/LibMigrate.sol\";\nimport \"../external/IAllowanceTarget.sol\";\nimport \"../fixins/FixinCommon.sol\";\nimport \"./IFeature.sol\";\nimport \"./IUniswapFeature.sol\";\n\n\n/// @dev VIP uniswap fill functions.\ncontract UniswapFeature is\n    IFeature,\n    IUniswapFeature,\n    FixinCommon\n{\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"UniswapFeature\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 1, 1);\n    /// @dev A bloom filter for tokens that consume all gas when `transferFrom()` fails.\n    bytes32 public immutable GREEDY_TOKENS_BLOOM_FILTER;\n    /// @dev WETH contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev AllowanceTarget instance.\n    IAllowanceTarget private immutable ALLOWANCE_TARGET;\n\n    // 0xFF + address of the UniswapV2Factory contract.\n    uint256 constant private FF_UNISWAP_FACTORY = 0xFF5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f0000000000000000000000;\n    // 0xFF + address of the (Sushiswap) UniswapV2Factory contract.\n    uint256 constant private FF_SUSHISWAP_FACTORY = 0xFFC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac0000000000000000000000;\n    // Init code hash of the UniswapV2Pair contract.\n    uint256 constant private UNISWAP_PAIR_INIT_CODE_HASH = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\n    // Init code hash of the (Sushiswap) UniswapV2Pair contract.\n    uint256 constant private SUSHISWAP_PAIR_INIT_CODE_HASH = 0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303;\n    // Mask of the lower 20 bytes of a bytes32.\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n    // ETH pseudo-token address.\n    uint256 constant private ETH_TOKEN_ADDRESS_32 = 0x000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee;\n    // Maximum token quantity that can be swapped against the UniswapV2Pair contract.\n    uint256 constant private MAX_SWAP_AMOUNT = 2**112;\n\n    // bytes4(keccak256(\"executeCall(address,bytes)\"))\n    uint256 constant private ALLOWANCE_TARGET_EXECUTE_CALL_SELECTOR_32 = 0xbca8c7b500000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"getReserves()\"))\n    uint256 constant private UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32 = 0x0902f1ac00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"swap(uint256,uint256,address,bytes)\"))\n    uint256 constant private UNISWAP_PAIR_SWAP_CALL_SELECTOR_32 = 0x022c0d9f00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"transferFrom(address,address,uint256)\"))\n    uint256 constant private TRANSFER_FROM_CALL_SELECTOR_32 = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"allowance(address,address)\"))\n    uint256 constant private ALLOWANCE_CALL_SELECTOR_32 = 0xdd62ed3e00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"withdraw(uint256)\"))\n    uint256 constant private WETH_WITHDRAW_CALL_SELECTOR_32 = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"deposit()\"))\n    uint256 constant private WETH_DEPOSIT_CALL_SELECTOR_32 = 0xd0e30db000000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"transfer(address,uint256)\"))\n    uint256 constant private ERC20_TRANSFER_CALL_SELECTOR_32 = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n\n    /// @dev Construct this contract.\n    /// @param weth The WETH contract.\n    /// @param allowanceTarget The AllowanceTarget contract.\n    /// @param greedyTokensBloomFilter The bloom filter for greedy tokens.\n    constructor(\n        IEtherTokenV06 weth,\n        IAllowanceTarget allowanceTarget,\n        bytes32 greedyTokensBloomFilter\n    ) public {\n        WETH = weth;\n        ALLOWANCE_TARGET = allowanceTarget;\n        GREEDY_TOKENS_BLOOM_FILTER = greedyTokensBloomFilter;\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.sellToUniswap.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Efficiently sell directly to uniswap/sushiswap.\n    /// @param tokens Sell path.\n    /// @param sellAmount of `tokens[0]` Amount to sell.\n    /// @param minBuyAmount Minimum amount of `tokens[-1]` to buy.\n    /// @param isSushi Use sushiswap if true.\n    /// @return buyAmount Amount of `tokens[-1]` bought.\n    function sellToUniswap(\n        IERC20TokenV06[] calldata tokens,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        bool isSushi\n    )\n        external\n        payable\n        override\n        returns (uint256 buyAmount)\n    {\n        require(tokens.length > 1, \"UniswapFeature/InvalidTokensLength\");\n        {\n            // Load immutables onto the stack.\n            IEtherTokenV06 weth = WETH;\n            IAllowanceTarget allowanceTarget = ALLOWANCE_TARGET;\n            bytes32 greedyTokensBloomFilter = GREEDY_TOKENS_BLOOM_FILTER;\n\n            // Store some vars in memory to get around stack limits.\n            assembly {\n                // calldataload(mload(0xA00)) == first element of `tokens` array\n                mstore(0xA00, add(calldataload(0x04), 0x24))\n                // mload(0xA20) == isSushi\n                mstore(0xA20, isSushi)\n                // mload(0xA40) == WETH\n                mstore(0xA40, weth)\n                // mload(0xA60) == ALLOWANCE_TARGET\n                mstore(0xA60, allowanceTarget)\n                // mload(0xA80) == GREEDY_TOKENS_BLOOM_FILTER\n                mstore(0xA80, greedyTokensBloomFilter)\n            }\n        }\n\n        assembly {\n            // numPairs == tokens.length - 1\n            let numPairs := sub(calldataload(add(calldataload(0x04), 0x4)), 1)\n            // We use the previous buy amount as the sell amount for the next\n            // pair in a path. So for the first swap we want to set it to `sellAmount`.\n            buyAmount := sellAmount\n            let buyToken\n            let nextPair := 0\n\n            for {let i := 0} lt(i, numPairs) {i := add(i, 1)} {\n                // sellToken = tokens[i]\n                let sellToken := loadTokenAddress(i)\n                // buyToken = tokens[i+1]\n                buyToken := loadTokenAddress(add(i, 1))\n                // The canonical ordering of this token pair.\n                let pairOrder := lt(normalizeToken(sellToken), normalizeToken(buyToken))\n\n                // Compute the pair address if it hasn't already been computed\n                // from the last iteration.\n                let pair := nextPair\n                if iszero(pair) {\n                    pair := computePairAddress(sellToken, buyToken)\n                    nextPair := 0\n                }\n\n                if iszero(i) {\n                    // This is the first token in the path.\n                    switch eq(sellToken, ETH_TOKEN_ADDRESS_32)\n                        case 0 { // Not selling ETH. Selling an ERC20 instead.\n                            // Make sure ETH was not attached to the call.\n                            if gt(callvalue(), 0) {\n                                revert(0, 0)\n                            }\n                            // For the first pair we need to transfer sellTokens into the\n                            // pair contract.\n                            moveTakerTokensTo(sellToken, pair, sellAmount)\n                        }\n                        default {\n                            // If selling ETH, we need to wrap it to WETH and transfer to the\n                            // pair contract.\n                            if iszero(eq(callvalue(), sellAmount)) {\n                                revert(0, 0)\n                            }\n                            sellToken := mload(0xA40)// Re-assign to WETH\n                            // Call `WETH.deposit{value: sellAmount}()`\n                            mstore(0xB00, WETH_DEPOSIT_CALL_SELECTOR_32)\n                            if iszero(call(gas(), sellToken, sellAmount, 0xB00, 0x4, 0x00, 0x0)) {\n                                bubbleRevert()\n                            }\n                            // Call `WETH.transfer(pair, sellAmount)`\n                            mstore(0xB00, ERC20_TRANSFER_CALL_SELECTOR_32)\n                            mstore(0xB04, pair)\n                            mstore(0xB24, sellAmount)\n                            if iszero(call(gas(), sellToken, 0, 0xB00, 0x44, 0x00, 0x0)) {\n                                bubbleRevert()\n                            }\n                        }\n                    // No need to check results, if deposit/transfers failed the UniswapV2Pair will\n                    // reject our trade (or it may succeed if somehow the reserve was out of sync)\n                    // this is fine for the taker.\n                }\n\n                // Call pair.getReserves(), store the results at `0xC00`\n                mstore(0xB00, UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32)\n                if iszero(staticcall(gas(), pair, 0xB00, 0x4, 0xC00, 0x40)) {\n                    bubbleRevert()\n                }\n                // Revert if the pair contract does not return at least two words.\n                if lt(returndatasize(), 0x40) {\n                    revert(0,0)\n                }\n\n                // Sell amount for this hop is the previous buy amount.\n                let pairSellAmount := buyAmount\n                // Compute the buy amount based on the pair reserves.\n                {\n                    let sellReserve\n                    let buyReserve\n                    switch iszero(pairOrder)\n                        case 0 {\n                            // Transpose if pair order is different.\n                            sellReserve := mload(0xC00)\n                            buyReserve := mload(0xC20)\n                        }\n                        default {\n                            sellReserve := mload(0xC20)\n                            buyReserve := mload(0xC00)\n                        }\n                    // Ensure that the sellAmount is < 2B9B9B2.\n                    if gt(pairSellAmount, MAX_SWAP_AMOUNT) {\n                        revert(0, 0)\n                    }\n                    // Pairs are in the range (0, 2B9B9B2) so this shouldn't overflow.\n                    // buyAmount = (pairSellAmount * 997 * buyReserve) /\n                    //     (pairSellAmount * 997 + sellReserve * 1000);\n                    let sellAmountWithFee := mul(pairSellAmount, 997)\n                    buyAmount := div(\n                        mul(sellAmountWithFee, buyReserve),\n                        add(sellAmountWithFee, mul(sellReserve, 1000))\n                    )\n                }\n\n                let receiver\n                // Is this the last pair contract?\n                switch eq(add(i, 1), numPairs)\n                    case 0 {\n                        // Not the last pair contract, so forward bought tokens to\n                        // the next pair contract.\n                        nextPair := computePairAddress(\n                            buyToken,\n                            loadTokenAddress(add(i, 2))\n                        )\n                        receiver := nextPair\n                    }\n                    default {\n                        // The last pair contract.\n                        // Forward directly to taker UNLESS they want ETH back.\n                        switch eq(buyToken, ETH_TOKEN_ADDRESS_32)\n                            case 0 {\n                                receiver := caller()\n                            }\n                            default {\n                                receiver := address()\n                            }\n                    }\n\n                // Call pair.swap()\n                mstore(0xB00, UNISWAP_PAIR_SWAP_CALL_SELECTOR_32)\n                switch pairOrder\n                    case 0 {\n                        mstore(0xB04, buyAmount)\n                        mstore(0xB24, 0)\n                    }\n                    default {\n                        mstore(0xB04, 0)\n                        mstore(0xB24, buyAmount)\n                    }\n                mstore(0xB44, receiver)\n                mstore(0xB64, 0x80)\n                mstore(0xB84, 0)\n                if iszero(call(gas(), pair, 0, 0xB00, 0xA4, 0, 0)) {\n                    bubbleRevert()\n                }\n            } // End for-loop.\n\n            // If buying ETH, unwrap the WETH first\n            if eq(buyToken, ETH_TOKEN_ADDRESS_32) {\n                // Call `WETH.withdraw(buyAmount)`\n                mstore(0xB00, WETH_WITHDRAW_CALL_SELECTOR_32)\n                mstore(0xB04, buyAmount)\n                if iszero(call(gas(), mload(0xA40), 0, 0xB00, 0x24, 0x00, 0x0)) {\n                    bubbleRevert()\n                }\n                // Transfer ETH to the caller.\n                if iszero(call(gas(), caller(), buyAmount, 0xB00, 0x0, 0x00, 0x0)) {\n                    bubbleRevert()\n                }\n            }\n\n            // Functions ///////////////////////////////////////////////////////\n\n            // Load a token address from the `tokens` calldata argument.\n            function loadTokenAddress(idx) -> addr {\n                addr := and(ADDRESS_MASK, calldataload(add(mload(0xA00), mul(idx, 0x20))))\n            }\n\n            // Convert ETH pseudo-token addresses to WETH.\n            function normalizeToken(token) -> normalized {\n                normalized := token\n                // Translate ETH pseudo-tokens to WETH.\n                if eq(token, ETH_TOKEN_ADDRESS_32) {\n                    normalized := mload(0xA40)\n                }\n            }\n\n            // Compute the address of the UniswapV2Pair contract given two\n            // tokens.\n            function computePairAddress(tokenA, tokenB) -> pair {\n                // Convert ETH pseudo-token addresses to WETH.\n                tokenA := normalizeToken(tokenA)\n                tokenB := normalizeToken(tokenB)\n                // There is one contract for every combination of tokens,\n                // which is deployed using CREATE2.\n                // The derivation of this address is given by:\n                //   address(keccak256(abi.encodePacked(\n                //       bytes(0xFF),\n                //       address(UNISWAP_FACTORY_ADDRESS),\n                //       keccak256(abi.encodePacked(\n                //           tokenA < tokenB ? tokenA : tokenB,\n                //           tokenA < tokenB ? tokenB : tokenA,\n                //       )),\n                //       bytes32(UNISWAP_PAIR_INIT_CODE_HASH),\n                //   )));\n\n                // Compute the salt (the hash of the sorted tokens).\n                // Tokens are written in reverse memory order to packed encode\n                // them as two 20-byte values in a 40-byte chunk of memory\n                // starting at 0xB0C.\n                switch lt(tokenA, tokenB)\n                    case 0 {\n                        mstore(0xB14, tokenA)\n                        mstore(0xB00, tokenB)\n                    }\n                    default {\n                        mstore(0xB14, tokenB)\n                        mstore(0xB00, tokenA)\n                    }\n                let salt := keccak256(0xB0C, 0x28)\n                // Compute the pair address by hashing all the components together.\n                switch mload(0xA20) // isSushi\n                    case 0 {\n                        mstore(0xB00, FF_UNISWAP_FACTORY)\n                        mstore(0xB15, salt)\n                        mstore(0xB35, UNISWAP_PAIR_INIT_CODE_HASH)\n                    }\n                    default {\n                        mstore(0xB00, FF_SUSHISWAP_FACTORY)\n                        mstore(0xB15, salt)\n                        mstore(0xB35, SUSHISWAP_PAIR_INIT_CODE_HASH)\n                    }\n                pair := and(ADDRESS_MASK, keccak256(0xB00, 0x55))\n            }\n\n            // Revert with the return data from the most recent call.\n            function bubbleRevert() {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n\n            // Move `amount` tokens from the taker/caller to `to`.\n            function moveTakerTokensTo(token, to, amount) {\n\n                // If the token is possibly greedy, we check the allowance rather\n                // than relying on letting the transferFrom() call fail and\n                // falling through to legacy allowance target because the token\n                // will eat all our gas.\n                if isTokenPossiblyGreedy(token) {\n                    // Check if we have enough direct allowance by calling\n                    // `token.allowance()``\n                    mstore(0xB00, ALLOWANCE_CALL_SELECTOR_32)\n                    mstore(0xB04, caller())\n                    mstore(0xB24, address())\n                    let success := staticcall(gas(), token, 0xB00, 0x44, 0xC00, 0x20)\n                    if iszero(success) {\n                        // Call to allowance() failed.\n                        bubbleRevert()\n                    }\n                    // Make sure the allowance call returned at least a word.\n                    if lt(returndatasize(), 0x20) {\n                        revert(0, 0)\n                    }\n                    // Call succeeded.\n                    // Result is stored in 0xC00-0xC20.\n                    if lt(mload(0xC00), amount) {\n                        // We don't have enough direct allowance, so try\n                        // going through the legacy allowance taregt.\n                        moveTakerTokensToWithLegacyAllowanceTarget(token, to, amount)\n                        leave\n                    }\n                }\n\n                // Otherwise we will optimistically try to perform a `transferFrom()`\n                // directly then if it fails we will go through the legacy allowance target.\n                mstore(0xB00, TRANSFER_FROM_CALL_SELECTOR_32)\n                mstore(0xB04, caller())\n                mstore(0xB24, to)\n                mstore(0xB44, amount)\n\n                let success := call(\n                    gas(),\n                    token,\n                    0,\n                    0xB00,\n                    0x64,\n                    0xC00,\n                    // Copy only the first 32 bytes of return data. We\n                    // only care about reading a boolean in the success\n                    // case, and we discard the return data in the\n                    // failure case.\n                    0x20\n                )\n\n                let rdsize := returndatasize()\n\n                // Check for ERC20 success. ERC20 tokens should\n                // return a boolean, but some return nothing or\n                // extra data. We accept 0-length return data as\n                // success, or at least 32 bytes that starts with\n                // a 32-byte boolean true.\n                success := and(\n                    success,                         // call itself succeeded\n                    or(\n                        iszero(rdsize),              // no return data, or\n                        and(\n                            iszero(lt(rdsize, 32)),  // at least 32 bytes\n                            eq(mload(0xC00), 1)      // starts with uint256(1)\n                        )\n                    )\n                )\n\n                if iszero(success) {\n                    // Try to fall back to the allowance target.\n                    moveTakerTokensToWithLegacyAllowanceTarget(token, to, amount)\n                }\n            }\n\n            // Move tokens by going through the legacy allowance target contract.\n            function moveTakerTokensToWithLegacyAllowanceTarget(token, to, amount) {\n                mstore(0xB00, ALLOWANCE_TARGET_EXECUTE_CALL_SELECTOR_32)\n                mstore(0xB04, token)\n                mstore(0xB24, 0x40)\n                mstore(0xB44, 0x64)\n                mstore(0xB64, TRANSFER_FROM_CALL_SELECTOR_32)\n                mstore(0xB68, caller())\n                mstore(0xB88, to)\n                mstore(0xBA8, amount)\n                if iszero(call(gas(), mload(0xA60), 0, 0xB00, 0xC8, 0x00, 0x0)) {\n                    bubbleRevert()\n                }\n                // If this fall back failed, the swap will most likely fail\n                // so there's no need to validate the result.\n            }\n\n            // Checks if a token possibly belongs to the GREEDY_TOKENS_BLOOM_FILTER\n            // bloom filter.\n            function isTokenPossiblyGreedy(token) -> isPossiblyGreedy {\n                // The hash is given by:\n                // (1 << (keccak256(token) % 256)) | (1 << (token % 256))\n                mstore(0, token)\n                let h := or(shl(mod(keccak256(0, 32), 256), 1), shl(mod(token, 256), 1))\n                isPossiblyGreedy := eq(and(h, mload(0xA80)), h)\n            }\n        }\n\n        // Revert if we bought too little.\n        // TODO: replace with rich revert?\n        require(buyAmount >= minBuyAmount, \"UniswapFeature/UnderBought\");\n    }\n}\n"},"/home/cluracan/code/0x-protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"},"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/migrations/LibMigrate.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n"},"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/errors/LibOwnableRichErrors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n"},"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/fixins/FixinCommon.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/IOwnableFeature.sol\";\nimport \"../features/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n"}},"settings":{"evmVersion":"istanbul","optimizer":{"details":{"constantOptimizer":true,"cse":true,"deduplicate":true,"yul":true},"enabled":true,"runs":1000000},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","abi"]}},"remappings":["@0x/contracts-utils=/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils","@0x/contracts-erc20=/home/cluracan/code/0x-protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20"]}},"ABI":"[{\"inputs\":[{\"internalType\":\"contract IEtherTokenV06\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"contract IAllowanceTarget\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"greedyTokensBloomFilter\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEATURE_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GREEDY_TOKENS_BLOOM_FILTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"success\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20TokenV06[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSushi\",\"type\":\"bool\"}],\"name\":\"sellToUniswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"UniswapFeature","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":1,"Runs":1000000,"ConstructorArguments":"0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000f740b67da229f2f10bcbd38a7979992fcc71b8eb0000100800000480002c00401000000820000000000000020000001010800001","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":0,"SwarmSource":""}]}