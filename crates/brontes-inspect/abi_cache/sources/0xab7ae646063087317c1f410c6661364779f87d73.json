{"expiry":1699491250,"data":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: solidity/contracts/converter/ConverterVersion.sol\n\n\npragma solidity 0.6.12;\n\ncontract ConverterVersion {\n    uint16 public constant version = 46;\n}\n\n// File: solidity/contracts/utility/interfaces/IOwned.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Owned contract interface\n*/\ninterface IOwned {\n    // this function isn't since the compiler emits automatically generated getter functions as external\n    function owner() external view returns (address);\n\n    function transferOwnership(address _newOwner) external;\n\n    function acceptOwnership() external;\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterAnchor.sol\n\n\npragma solidity 0.6.12;\n\n\n/*\n    Converter Anchor interface\n*/\ninterface IConverterAnchor is IOwned {\n\n}\n\n// File: solidity/contracts/converter/interfaces/IConverter.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/*\n    Converter interface\n*/\ninterface IConverter is IOwned {\n    function converterType() external pure returns (uint16);\n\n    function anchor() external view returns (IConverterAnchor);\n\n    function isActive() external view returns (bool);\n\n    function targetAmountAndFee(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount\n    ) external view returns (uint256, uint256);\n\n    function convert(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount,\n        address _trader,\n        address payable _beneficiary\n    ) external payable returns (uint256);\n\n    function conversionFee() external view returns (uint32);\n\n    function maxConversionFee() external view returns (uint32);\n\n    function reserveBalance(IERC20 _reserveToken) external view returns (uint256);\n\n    receive() external payable;\n\n    function transferAnchorOwnership(address _newOwner) external;\n\n    function acceptAnchorOwnership() external;\n\n    function setConversionFee(uint32 _conversionFee) external;\n\n    function addReserve(IERC20 _token, uint32 _weight) external;\n\n    function transferReservesOnUpgrade(address _newConverter) external;\n\n    function onUpgradeComplete() external;\n\n    // deprecated, backward compatibility\n    function token() external view returns (IConverterAnchor);\n\n    function transferTokenOwnership(address _newOwner) external;\n\n    function acceptTokenOwnership() external;\n\n    function connectors(IERC20 _address)\n        external\n        view\n        returns (\n            uint256,\n            uint32,\n            bool,\n            bool,\n            bool\n        );\n\n    function getConnectorBalance(IERC20 _connectorToken) external view returns (uint256);\n\n    function connectorTokens(uint256 _index) external view returns (IERC20);\n\n    function connectorTokenCount() external view returns (uint16);\n\n    /**\n     * @dev triggered when the converter is activated\n     *\n     * @param _type        converter type\n     * @param _anchor      converter anchor\n     * @param _activated   true if the converter was activated, false if it was deactivated\n     */\n    event Activation(uint16 indexed _type, IConverterAnchor indexed _anchor, bool indexed _activated);\n\n    /**\n     * @dev triggered when a conversion between two tokens occurs\n     *\n     * @param _fromToken       source ERC20 token\n     * @param _toToken         target ERC20 token\n     * @param _trader          wallet that initiated the trade\n     * @param _amount          input amount in units of the source token\n     * @param _return          output amount minus conversion fee in units of the target token\n     * @param _conversionFee   conversion fee in units of the target token\n     */\n    event Conversion(\n        IERC20 indexed _fromToken,\n        IERC20 indexed _toToken,\n        address indexed _trader,\n        uint256 _amount,\n        uint256 _return,\n        int256 _conversionFee\n    );\n\n    /**\n     * @dev triggered when the rate between two tokens in the converter changes\n     * note that the event might be dispatched for rate updates between any two tokens in the converter\n     *\n     * @param  _token1 address of the first token\n     * @param  _token2 address of the second token\n     * @param  _rateN  rate of 1 unit of `_token1` in `_token2` (numerator)\n     * @param  _rateD  rate of 1 unit of `_token1` in `_token2` (denominator)\n     */\n    event TokenRateUpdate(IERC20 indexed _token1, IERC20 indexed _token2, uint256 _rateN, uint256 _rateD);\n\n    /**\n     * @dev triggered when the conversion fee is updated\n     *\n     * @param  _prevFee    previous fee percentage, represented in ppm\n     * @param  _newFee     new fee percentage, represented in ppm\n     */\n    event ConversionFeeUpdate(uint32 _prevFee, uint32 _newFee);\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterUpgrader.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Converter Upgrader interface\n*/\ninterface IConverterUpgrader {\n    function upgrade(bytes32 _version) external;\n\n    function upgrade(uint16 _version) external;\n}\n\n// File: solidity/contracts/utility/interfaces/ITokenHolder.sol\n\n\npragma solidity 0.6.12;\n\n\n\n/*\n    Token Holder interface\n*/\ninterface ITokenHolder is IOwned {\n    receive() external payable;\n\n    function withdrawTokens(\n        IERC20 token,\n        address payable to,\n        uint256 amount\n    ) external;\n\n    function withdrawTokensMultiple(\n        IERC20[] calldata tokens,\n        address payable to,\n        uint256[] calldata amounts\n    ) external;\n}\n\n// File: solidity/contracts/INetworkSettings.sol\n\n\npragma solidity 0.6.12;\n\n\ninterface INetworkSettings {\n    function networkFeeParams() external view returns (ITokenHolder, uint32);\n\n    function networkFeeWallet() external view returns (ITokenHolder);\n\n    function networkFee() external view returns (uint32);\n}\n\n// File: solidity/contracts/token/interfaces/IDSToken.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/*\n    DSToken interface\n*/\ninterface IDSToken is IConverterAnchor, IERC20 {\n    function issue(address _to, uint256 _amount) external;\n\n    function destroy(address _from, uint256 _amount) external;\n}\n\n// File: solidity/contracts/utility/MathEx.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev This library provides a set of complex math operations.\n */\nlibrary MathEx {\n    uint256 private constant MAX_EXP_BIT_LEN = 4;\n    uint256 private constant MAX_EXP = 2**MAX_EXP_BIT_LEN - 1;\n    uint256 private constant MAX_UINT128 = 2**128 - 1;\n\n    /**\n     * @dev returns the largest integer smaller than or equal to the square root of a positive integer\n     *\n     * @param _num a positive integer\n     *\n     * @return the largest integer smaller than or equal to the square root of the positive integer\n     */\n    function floorSqrt(uint256 _num) internal pure returns (uint256) {\n        uint256 x = _num / 2 + 1;\n        uint256 y = (x + _num / x) / 2;\n        while (x > y) {\n            x = y;\n            y = (x + _num / x) / 2;\n        }\n        return x;\n    }\n\n    /**\n     * @dev returns the smallest integer larger than or equal to the square root of a positive integer\n     *\n     * @param _num a positive integer\n     *\n     * @return the smallest integer larger than or equal to the square root of the positive integer\n     */\n    function ceilSqrt(uint256 _num) internal pure returns (uint256) {\n        uint256 x = floorSqrt(_num);\n        return x * x == _num ? x : x + 1;\n    }\n\n    /**\n     * @dev computes a powered ratio\n     *\n     * @param _n   ratio numerator\n     * @param _d   ratio denominator\n     * @param _exp ratio exponent\n     *\n     * @return powered ratio's numerator and denominator\n     */\n    function poweredRatio(\n        uint256 _n,\n        uint256 _d,\n        uint256 _exp\n    ) internal pure returns (uint256, uint256) {\n        require(_exp <= MAX_EXP, \"ERR_EXP_TOO_LARGE\");\n\n        uint256[MAX_EXP_BIT_LEN] memory ns;\n        uint256[MAX_EXP_BIT_LEN] memory ds;\n\n        (ns[0], ds[0]) = reducedRatio(_n, _d, MAX_UINT128);\n        for (uint256 i = 0; (_exp >> i) > 1; i++) {\n            (ns[i + 1], ds[i + 1]) = reducedRatio(ns[i] ** 2, ds[i] ** 2, MAX_UINT128);\n        }\n\n        uint256 n = 1;\n        uint256 d = 1;\n\n        for (uint256 i = 0; (_exp >> i) > 0; i++) {\n            if (((_exp >> i) & 1) > 0) {\n                (n, d) = reducedRatio(n * ns[i], d * ds[i], MAX_UINT128);\n            }\n        }\n\n        return (n, d);\n    }\n\n    /**\n     * @dev computes a reduced-scalar ratio\n     *\n     * @param _n   ratio numerator\n     * @param _d   ratio denominator\n     * @param _max maximum desired scalar\n     *\n     * @return ratio's numerator and denominator\n     */\n    function reducedRatio(\n        uint256 _n,\n        uint256 _d,\n        uint256 _max\n    ) internal pure returns (uint256, uint256) {\n        (uint256 n, uint256 d) = (_n, _d);\n        if (n > _max || d > _max) {\n            (n, d) = normalizedRatio(n, d, _max);\n        }\n        if (n != d) {\n            return (n, d);\n        }\n        return (1, 1);\n    }\n\n    /**\n     * @dev computes \"scale * a / (a + b)\" and \"scale * b / (a + b)\".\n     */\n    function normalizedRatio(\n        uint256 _a,\n        uint256 _b,\n        uint256 _scale\n    ) internal pure returns (uint256, uint256) {\n        if (_a <= _b) {\n            return accurateRatio(_a, _b, _scale);\n        }\n        (uint256 y, uint256 x) = accurateRatio(_b, _a, _scale);\n        return (x, y);\n    }\n\n    /**\n     * @dev computes \"scale * a / (a + b)\" and \"scale * b / (a + b)\", assuming that \"a <= b\".\n     */\n    function accurateRatio(\n        uint256 _a,\n        uint256 _b,\n        uint256 _scale\n    ) internal pure returns (uint256, uint256) {\n        uint256 maxVal = uint256(-1) / _scale;\n        if (_a > maxVal) {\n            uint256 c = _a / (maxVal + 1) + 1;\n            _a /= c; // we can now safely compute `_a * _scale`\n            _b /= c;\n        }\n        if (_a != _b) {\n            uint256 n = _a * _scale;\n            uint256 d = _a + _b; // can overflow\n            if (d >= _a) {\n                // no overflow in `_a + _b`\n                uint256 x = roundDiv(n, d); // we can now safely compute `_scale - x`\n                uint256 y = _scale - x;\n                return (x, y);\n            }\n            if (n < _b - (_b - _a) / 2) {\n                return (0, _scale); // `_a * _scale < (_a + _b) / 2 < MAX_UINT256 < _a + _b`\n            }\n            return (1, _scale - 1); // `(_a + _b) / 2 < _a * _scale < MAX_UINT256 < _a + _b`\n        }\n        return (_scale / 2, _scale / 2); // allow reduction to `(1, 1)` in the calling function\n    }\n\n    /**\n     * @dev computes the nearest integer to a given quotient without overflowing or underflowing.\n     */\n    function roundDiv(uint256 _n, uint256 _d) internal pure returns (uint256) {\n        return _n / _d + (_n % _d) / (_d - _d / 2);\n    }\n\n    /**\n     * @dev returns the average number of decimal digits in a given list of positive integers\n     *\n     * @param _values  list of positive integers\n     *\n     * @return the average number of decimal digits in the given list of positive integers\n     */\n    function geometricMean(uint256[] memory _values) internal pure returns (uint256) {\n        uint256 numOfDigits = 0;\n        uint256 length = _values.length;\n        for (uint256 i = 0; i < length; i++) {\n            numOfDigits += decimalLength(_values[i]);\n        }\n        return uint256(10)**(roundDivUnsafe(numOfDigits, length) - 1);\n    }\n\n    /**\n     * @dev returns the number of decimal digits in a given positive integer\n     *\n     * @param _x   positive integer\n     *\n     * @return the number of decimal digits in the given positive integer\n     */\n    function decimalLength(uint256 _x) internal pure returns (uint256) {\n        uint256 y = 0;\n        for (uint256 x = _x; x > 0; x /= 10) {\n            y++;\n        }\n        return y;\n    }\n\n    /**\n     * @dev returns the nearest integer to a given quotient\n     * the computation is overflow-safe assuming that the input is sufficiently small\n     *\n     * @param _n   quotient numerator\n     * @param _d   quotient denominator\n     *\n     * @return the nearest integer to the given quotient\n     */\n    function roundDivUnsafe(uint256 _n, uint256 _d) internal pure returns (uint256) {\n        return (_n + _d / 2) / _d;\n    }\n\n    /**\n     * @dev returns the larger of two values\n     *\n     * @param _val1 the first value\n     * @param _val2 the second value\n     */\n    function max(uint256 _val1, uint256 _val2) internal pure returns (uint256) {\n        return _val1 > _val2 ? _val1 : _val2;\n    }\n}\n\n// File: solidity/contracts/utility/Owned.sol\n\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev This contract provides support and utilities for contract ownership.\n */\ncontract Owned is IOwned {\n    address public override owner;\n    address public newOwner;\n\n    /**\n     * @dev triggered when the owner is updated\n     *\n     * @param _prevOwner previous owner\n     * @param _newOwner  new owner\n     */\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n     * @dev initializes a new Owned instance\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        _ownerOnly();\n        _;\n    }\n\n    // error message binary size optimization\n    function _ownerOnly() internal view {\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\n    }\n\n    /**\n     * @dev allows transferring the contract ownership\n     * the new owner still needs to accept the transfer\n     * can only be called by the contract owner\n     *\n     * @param _newOwner    new contract owner\n     */\n    function transferOwnership(address _newOwner) public override ownerOnly {\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\n        newOwner = _newOwner;\n    }\n\n    /**\n     * @dev used by a new owner to accept an ownership transfer\n     */\n    function acceptOwnership() public override {\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// File: solidity/contracts/utility/Utils.sol\n\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev Utilities & Common Modifiers\n */\ncontract Utils {\n    uint32 internal constant PPM_RESOLUTION = 1000000;\n    IERC20 internal constant NATIVE_TOKEN_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    // verifies that a value is greater than zero\n    modifier greaterThanZero(uint256 _value) {\n        _greaterThanZero(_value);\n        _;\n    }\n\n    // error message binary size optimization\n    function _greaterThanZero(uint256 _value) internal pure {\n        require(_value > 0, \"ERR_ZERO_VALUE\");\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        _validAddress(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validAddress(address _address) internal pure {\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\n    }\n\n    // ensures that the portion is valid\n    modifier validPortion(uint32 _portion) {\n        _validPortion(_portion);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validPortion(uint32 _portion) internal pure {\n        require(_portion > 0 && _portion <= PPM_RESOLUTION, \"ERR_INVALID_PORTION\");\n    }\n\n    // validates an external address - currently only checks that it isn't null or this\n    modifier validExternalAddress(address _address) {\n        _validExternalAddress(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validExternalAddress(address _address) internal view {\n        require(_address != address(0) && _address != address(this), \"ERR_INVALID_EXTERNAL_ADDRESS\");\n    }\n\n    // ensures that the fee is valid\n    modifier validFee(uint32 fee) {\n        _validFee(fee);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validFee(uint32 fee) internal pure {\n        require(fee <= PPM_RESOLUTION, \"ERR_INVALID_FEE\");\n    }\n}\n\n// File: solidity/contracts/utility/interfaces/IContractRegistry.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Contract Registry interface\n*/\ninterface IContractRegistry {\n    function addressOf(bytes32 _contractName) external view returns (address);\n}\n\n// File: solidity/contracts/utility/ContractRegistryClient.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/**\n * @dev This is the base contract for ContractRegistry clients.\n */\ncontract ContractRegistryClient is Owned, Utils {\n    bytes32 internal constant CONTRACT_REGISTRY = \"ContractRegistry\";\n    bytes32 internal constant BANCOR_NETWORK = \"BancorNetwork\";\n    bytes32 internal constant BANCOR_FORMULA = \"BancorFormula\";\n    bytes32 internal constant CONVERTER_FACTORY = \"ConverterFactory\";\n    bytes32 internal constant CONVERSION_PATH_FINDER = \"ConversionPathFinder\";\n    bytes32 internal constant CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\n    bytes32 internal constant CONVERTER_REGISTRY = \"BancorConverterRegistry\";\n    bytes32 internal constant CONVERTER_REGISTRY_DATA = \"BancorConverterRegistryData\";\n    bytes32 internal constant BNT_TOKEN = \"BNTToken\";\n    bytes32 internal constant BANCOR_X = \"BancorX\";\n    bytes32 internal constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\n    bytes32 internal constant LIQUIDITY_PROTECTION = \"LiquidityProtection\";\n    bytes32 internal constant NETWORK_SETTINGS = \"NetworkSettings\";\n\n    IContractRegistry public registry; // address of the current contract-registry\n    IContractRegistry public prevRegistry; // address of the previous contract-registry\n    bool public onlyOwnerCanUpdateRegistry; // only an owner can update the contract-registry\n\n    /**\n     * @dev verifies that the caller is mapped to the given contract name\n     *\n     * @param _contractName    contract name\n     */\n    modifier only(bytes32 _contractName) {\n        _only(_contractName);\n        _;\n    }\n\n    // error message binary size optimization\n    function _only(bytes32 _contractName) internal view {\n        require(msg.sender == addressOf(_contractName), \"ERR_ACCESS_DENIED\");\n    }\n\n    /**\n     * @dev initializes a new ContractRegistryClient instance\n     *\n     * @param  _registry   address of a contract-registry contract\n     */\n    constructor(IContractRegistry _registry) internal validAddress(address(_registry)) {\n        registry = IContractRegistry(_registry);\n        prevRegistry = IContractRegistry(_registry);\n    }\n\n    /**\n     * @dev updates to the new contract-registry\n     */\n    function updateRegistry() public {\n        // verify that this function is permitted\n        require(msg.sender == owner || !onlyOwnerCanUpdateRegistry, \"ERR_ACCESS_DENIED\");\n\n        // get the new contract-registry\n        IContractRegistry newRegistry = IContractRegistry(addressOf(CONTRACT_REGISTRY));\n\n        // verify that the new contract-registry is different and not zero\n        require(newRegistry != registry && address(newRegistry) != address(0), \"ERR_INVALID_REGISTRY\");\n\n        // verify that the new contract-registry is pointing to a non-zero contract-registry\n        require(newRegistry.addressOf(CONTRACT_REGISTRY) != address(0), \"ERR_INVALID_REGISTRY\");\n\n        // save a backup of the current contract-registry before replacing it\n        prevRegistry = registry;\n\n        // replace the current contract-registry with the new contract-registry\n        registry = newRegistry;\n    }\n\n    /**\n     * @dev restores the previous contract-registry\n     */\n    function restoreRegistry() public ownerOnly {\n        // restore the previous contract-registry\n        registry = prevRegistry;\n    }\n\n    /**\n     * @dev restricts the permission to update the contract-registry\n     *\n     * @param _onlyOwnerCanUpdateRegistry  indicates whether or not permission is restricted to owner only\n     */\n    function restrictRegistryUpdate(bool _onlyOwnerCanUpdateRegistry) public ownerOnly {\n        // change the permission to update the contract-registry\n        onlyOwnerCanUpdateRegistry = _onlyOwnerCanUpdateRegistry;\n    }\n\n    /**\n     * @dev returns the address associated with the given contract name\n     *\n     * @param _contractName    contract name\n     *\n     * @return contract address\n     */\n    function addressOf(bytes32 _contractName) internal view returns (address) {\n        return registry.addressOf(_contractName);\n    }\n}\n\n// File: solidity/contracts/utility/ReentrancyGuard.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev This contract provides protection against calling a function\n * (directly or indirectly) from within itself.\n */\ncontract ReentrancyGuard {\n    uint256 private constant UNLOCKED = 1;\n    uint256 private constant LOCKED = 2;\n\n    // LOCKED while protected code is being executed, UNLOCKED otherwise\n    uint256 private state = UNLOCKED;\n\n    /**\n     * @dev ensures instantiation only by sub-contracts\n     */\n    constructor() internal {}\n\n    // protects a function against reentrancy attacks\n    modifier protected() {\n        _protected();\n        state = LOCKED;\n        _;\n        state = UNLOCKED;\n    }\n\n    // error message binary size optimization\n    function _protected() internal view {\n        require(state == UNLOCKED, \"ERR_REENTRANCY\");\n    }\n}\n\n// File: solidity/contracts/utility/Time.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Time implementing contract\n*/\ncontract Time {\n    /**\n     * @dev returns the current time\n     */\n    function time() internal view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n\n// File: solidity/contracts/converter/types/standard-pool/StandardPoolConverter.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @dev This contract is a specialized version of the converter, which is\n * optimized for a liquidity pool that has 2 reserves with 50%/50% weights.\n */\ncontract StandardPoolConverter is ConverterVersion, IConverter, ContractRegistryClient, ReentrancyGuard, Time {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using MathEx for *;\n\n    uint256 private constant MAX_UINT128 = 2**128 - 1;\n    uint256 private constant MAX_UINT112 = 2**112 - 1;\n    uint256 private constant MAX_UINT32 = 2**32 - 1;\n    uint256 private constant AVERAGE_RATE_PERIOD = 10 minutes;\n\n    uint256 private __reserveBalances;\n    uint256 private _reserveBalancesProduct;\n    IERC20[] private __reserveTokens;\n    mapping(IERC20 => uint256) private __reserveIds;\n\n    IConverterAnchor public override anchor; // converter anchor contract\n    uint32 public override maxConversionFee; // maximum conversion fee, represented in ppm, 0...1000000\n    uint32 public override conversionFee; // current conversion fee, represented in ppm, 0...maxConversionFee\n\n    // average rate details:\n    // bits 0...111 represent the numerator of the rate between reserve token 0 and reserve token 1\n    // bits 111...223 represent the denominator of the rate between reserve token 0 and reserve token 1\n    // bits 224...255 represent the update-time of the rate between reserve token 0 and reserve token 1\n    // where `numerator / denominator` gives the worth of one reserve token 0 in units of reserve token 1\n    uint256 public averageRateInfo;\n\n    /**\n     * @dev triggered after liquidity is added\n     *\n     * @param  _provider       liquidity provider\n     * @param  _reserveToken   reserve token address\n     * @param  _amount         reserve token amount\n     * @param  _newBalance     reserve token new balance\n     * @param  _newSupply      pool token new supply\n     */\n    event LiquidityAdded(\n        address indexed _provider,\n        IERC20 indexed _reserveToken,\n        uint256 _amount,\n        uint256 _newBalance,\n        uint256 _newSupply\n    );\n\n    /**\n     * @dev triggered after liquidity is removed\n     *\n     * @param  _provider       liquidity provider\n     * @param  _reserveToken   reserve token address\n     * @param  _amount         reserve token amount\n     * @param  _newBalance     reserve token new balance\n     * @param  _newSupply      pool token new supply\n     */\n    event LiquidityRemoved(\n        address indexed _provider,\n        IERC20 indexed _reserveToken,\n        uint256 _amount,\n        uint256 _newBalance,\n        uint256 _newSupply\n    );\n\n    /**\n     * @dev initializes a new StandardPoolConverter instance\n     *\n     * @param  _anchor             anchor governed by the converter\n     * @param  _registry           address of a contract registry contract\n     * @param  _maxConversionFee   maximum conversion fee, represented in ppm\n     */\n    constructor(\n        IConverterAnchor _anchor,\n        IContractRegistry _registry,\n        uint32 _maxConversionFee\n    ) public ContractRegistryClient(_registry) validAddress(address(_anchor)) validConversionFee(_maxConversionFee) {\n        anchor = _anchor;\n        maxConversionFee = _maxConversionFee;\n    }\n\n    // ensures that the converter is active\n    modifier active() {\n        _active();\n        _;\n    }\n\n    // error message binary size optimization\n    function _active() internal view {\n        require(isActive(), \"ERR_INACTIVE\");\n    }\n\n    // ensures that the converter is not active\n    modifier inactive() {\n        _inactive();\n        _;\n    }\n\n    // error message binary size optimization\n    function _inactive() internal view {\n        require(!isActive(), \"ERR_ACTIVE\");\n    }\n\n    // validates a reserve token address - verifies that the address belongs to one of the reserve tokens\n    modifier validReserve(IERC20 _address) {\n        _validReserve(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validReserve(IERC20 _address) internal view {\n        require(__reserveIds[_address] != 0, \"ERR_INVALID_RESERVE\");\n    }\n\n    // validates conversion fee\n    modifier validConversionFee(uint32 _conversionFee) {\n        _validConversionFee(_conversionFee);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validConversionFee(uint32 _conversionFee) internal pure {\n        require(_conversionFee <= PPM_RESOLUTION, \"ERR_INVALID_CONVERSION_FEE\");\n    }\n\n    // validates reserve weight\n    modifier validReserveWeight(uint32 _weight) {\n        _validReserveWeight(_weight);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validReserveWeight(uint32 _weight) internal pure {\n        require(_weight == PPM_RESOLUTION / 2, \"ERR_INVALID_RESERVE_WEIGHT\");\n    }\n\n    /**\n     * @dev returns the converter type\n     *\n     * @return see the converter types in the the main contract doc\n     */\n    function converterType() public pure virtual override returns (uint16) {\n        return 3;\n    }\n\n    /**\n     * @dev deposits ether\n     * can only be called if the converter has an ETH reserve\n     */\n    receive() external payable override(IConverter) validReserve(NATIVE_TOKEN_ADDRESS) {}\n\n    /**\n     * @dev checks whether or not the converter version is 28 or higher\n     *\n     * @return true, since the converter version is 28 or higher\n     */\n    function isV28OrHigher() public pure returns (bool) {\n        return true;\n    }\n\n    /**\n     * @dev returns true if the converter is active, false otherwise\n     *\n     * @return true if the converter is active, false otherwise\n     */\n    function isActive() public view virtual override returns (bool) {\n        return anchor.owner() == address(this);\n    }\n\n    /**\n     * @dev transfers the anchor ownership\n     * the new owner needs to accept the transfer\n     * can only be called by the converter upgrader while the upgrader is the owner\n     * note that prior to version 28, you should use 'transferAnchorOwnership' instead\n     *\n     * @param _newOwner    new token owner\n     */\n    function transferAnchorOwnership(address _newOwner) public override ownerOnly only(CONVERTER_UPGRADER) {\n        anchor.transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev accepts ownership of the anchor after an ownership transfer\n     * most converters are also activated as soon as they accept the anchor ownership\n     * can only be called by the contract owner\n     * note that prior to version 28, you should use 'acceptTokenOwnership' instead\n     */\n    function acceptAnchorOwnership() public virtual override ownerOnly {\n        // verify the the converter has exactly two reserves\n        require(reserveTokenCount() == 2, \"ERR_INVALID_RESERVE_COUNT\");\n        anchor.acceptOwnership();\n        syncReserveBalances(0);\n        emit Activation(converterType(), anchor, true);\n    }\n\n    /**\n     * @dev updates the current conversion fee\n     * can only be called by the contract owner\n     *\n     * @param _conversionFee new conversion fee, represented in ppm\n     */\n    function setConversionFee(uint32 _conversionFee) public override ownerOnly {\n        require(_conversionFee <= maxConversionFee, \"ERR_INVALID_CONVERSION_FEE\");\n        emit ConversionFeeUpdate(conversionFee, _conversionFee);\n        conversionFee = _conversionFee;\n    }\n\n    /**\n     * @dev transfers reserve balances to a new converter during an upgrade\n     * can only be called by the converter upgraded which should be set at its owner\n     *\n     * @param _newConverter address of the converter to receive the new amount\n     */\n    function transferReservesOnUpgrade(address _newConverter)\n        external\n        override\n        protected\n        ownerOnly\n        only(CONVERTER_UPGRADER)\n    {\n        uint256 reserveCount = __reserveTokens.length;\n        for (uint256 i = 0; i < reserveCount; ++i) {\n            IERC20 reserveToken = __reserveTokens[i];\n\n            uint256 amount;\n            if (reserveToken == NATIVE_TOKEN_ADDRESS) {\n                amount = address(this).balance;\n            } else {\n                amount = reserveToken.balanceOf(address(this));\n            }\n\n            safeTransfer(reserveToken, _newConverter, amount);\n\n            syncReserveBalance(reserveToken);\n        }\n    }\n\n    /**\n     * @dev upgrades the converter to the latest version\n     * can only be called by the owner\n     * note that the owner needs to call acceptOwnership on the new converter after the upgrade\n     */\n    function upgrade() public ownerOnly {\n        IConverterUpgrader converterUpgrader = IConverterUpgrader(addressOf(CONVERTER_UPGRADER));\n\n        // trigger de-activation event\n        emit Activation(converterType(), anchor, false);\n\n        transferOwnership(address(converterUpgrader));\n        converterUpgrader.upgrade(version);\n        acceptOwnership();\n    }\n\n    /**\n     * @dev executed by the upgrader at the end of the upgrade process to handle custom pool logic\n     */\n    function onUpgradeComplete()\n        external\n        override\n        protected\n        ownerOnly\n        only(CONVERTER_UPGRADER)\n    {\n        (uint256 reserveBalance0, uint256 reserveBalance1) = reserveBalances(1, 2);\n        _reserveBalancesProduct = reserveBalance0 * reserveBalance1;\n    }\n\n    /**\n     * @dev returns the number of reserve tokens\n     * note that prior to version 17, you should use 'connectorTokenCount' instead\n     *\n     * @return number of reserve tokens\n     */\n    function reserveTokenCount() public view returns (uint16) {\n        return uint16(__reserveTokens.length);\n    }\n\n    /**\n     * @dev returns the array of reserve tokens\n     *\n     * @return array of reserve tokens\n     */\n    function reserveTokens() public view returns (IERC20[] memory) {\n        return __reserveTokens;\n    }\n\n    /**\n     * @dev defines a new reserve token for the converter\n     * can only be called by the owner while the converter is inactive\n     *\n     * @param _token   address of the reserve token\n     * @param _weight  reserve weight, represented in ppm, 1-1000000\n     */\n    function addReserve(IERC20 _token, uint32 _weight)\n        public\n        virtual\n        override\n        ownerOnly\n        inactive\n        validExternalAddress(address(_token))\n        validReserveWeight(_weight)\n    {\n        // validate input\n        require(address(_token) != address(anchor) && __reserveIds[_token] == 0, \"ERR_INVALID_RESERVE\");\n        require(reserveTokenCount() < 2, \"ERR_INVALID_RESERVE_COUNT\");\n\n        __reserveTokens.push(_token);\n        __reserveIds[_token] = __reserveTokens.length;\n    }\n\n    /**\n     * @dev returns the reserve's weight\n     * added in version 28\n     *\n     * @param _reserveToken    reserve token contract address\n     *\n     * @return reserve weight\n     */\n    function reserveWeight(IERC20 _reserveToken) public view validReserve(_reserveToken) returns (uint32) {\n        return PPM_RESOLUTION / 2;\n    }\n\n    /**\n     * @dev returns the balance of a given reserve token\n     *\n     * @param _reserveToken    reserve token contract address\n     *\n     * @return the balance of the given reserve token\n     */\n    function reserveBalance(IERC20 _reserveToken) public view override returns (uint256) {\n        uint256 reserveId = __reserveIds[_reserveToken];\n        require(reserveId != 0, \"ERR_INVALID_RESERVE\");\n        return reserveBalance(reserveId);\n    }\n\n    /**\n     * @dev returns the balances of both reserve tokens\n     *\n     * @return the balances of both reserve tokens\n     */\n    function reserveBalances() public view returns (uint256, uint256) {\n        return reserveBalances(1, 2);\n    }\n\n    /**\n     * @dev syncs all stored reserve balances\n     */\n    function syncReserveBalances() external {\n        syncReserveBalances(0);\n    }\n\n    /**\n     * @dev calculates the accumulated network fee and transfers it to the network fee wallet\n     */\n    function processNetworkFees() external protected {\n        (uint256 reserveBalance0, uint256 reserveBalance1) = processNetworkFees(0);\n        _reserveBalancesProduct = reserveBalance0 * reserveBalance1;\n    }\n\n    /**\n     * @dev calculates the accumulated network fee and transfers it to the network fee wallet\n     *\n     * @param _value amount of ether to exclude from the ether reserve balance (if relevant)\n     *\n     * @return new reserve balances\n     */\n    function processNetworkFees(uint256 _value) internal returns (uint256, uint256) {\n        syncReserveBalances(_value);\n        (uint256 reserveBalance0, uint256 reserveBalance1) = reserveBalances(1, 2);\n        (ITokenHolder wallet, uint256 fee0, uint256 fee1) = networkWalletAndFees(reserveBalance0, reserveBalance1);\n        reserveBalance0 -= fee0;\n        reserveBalance1 -= fee1;\n        setReserveBalances(1, 2, reserveBalance0, reserveBalance1);\n        safeTransfer(__reserveTokens[0], address(wallet), fee0);\n        safeTransfer(__reserveTokens[1], address(wallet), fee1);\n        return (reserveBalance0, reserveBalance1);\n    }\n\n    /**\n     * @dev returns the reserve balances of the given reserve tokens minus their corresponding fees\n     *\n     * @param _reserveTokens reserve tokens\n     *\n     * @return reserve balances minus their corresponding fees\n     */\n    function baseReserveBalances(IERC20[] memory _reserveTokens) internal view returns (uint256[2] memory) {\n        uint256 reserveId0 = __reserveIds[_reserveTokens[0]];\n        uint256 reserveId1 = __reserveIds[_reserveTokens[1]];\n        (uint256 reserveBalance0, uint256 reserveBalance1) = reserveBalances(reserveId0, reserveId1);\n        (, uint256 fee0, uint256 fee1) = networkWalletAndFees(reserveBalance0, reserveBalance1);\n        return [reserveBalance0 - fee0, reserveBalance1 - fee1];\n    }\n\n    /**\n     * @dev converts a specific amount of source tokens to target tokens\n     * can only be called by the bancor network contract\n     *\n     * @param _sourceToken source ERC20 token\n     * @param _targetToken target ERC20 token\n     * @param _amount      amount of tokens to convert (in units of the source token)\n     * @param _trader      address of the caller who executed the conversion\n     * @param _beneficiary wallet to receive the conversion result\n     *\n     * @return amount of tokens received (in units of the target token)\n     */\n    function convert(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount,\n        address _trader,\n        address payable _beneficiary\n    ) public payable override protected only(BANCOR_NETWORK) returns (uint256) {\n        // validate input\n        require(_sourceToken != _targetToken, \"ERR_SAME_SOURCE_TARGET\");\n\n        return doConvert(_sourceToken, _targetToken, _amount, _trader, _beneficiary);\n    }\n\n    /**\n     * @dev returns the conversion fee for a given target amount\n     *\n     * @param _targetAmount  target amount\n     *\n     * @return conversion fee\n     */\n    function calculateFee(uint256 _targetAmount) internal view returns (uint256) {\n        return _targetAmount.mul(conversionFee) / PPM_RESOLUTION;\n    }\n\n    /**\n     * @dev returns the conversion fee taken from a given target amount\n     *\n     * @param _targetAmount  target amount\n     *\n     * @return conversion fee\n     */\n    function calculateFeeInv(uint256 _targetAmount) internal view returns (uint256) {\n        return _targetAmount.mul(conversionFee).div(PPM_RESOLUTION - conversionFee);\n    }\n\n    /**\n     * @dev loads the stored reserve balance for a given reserve id\n     *\n     * @param _reserveId   reserve id\n     */\n    function reserveBalance(uint256 _reserveId) internal view returns (uint256) {\n        return decodeReserveBalance(__reserveBalances, _reserveId);\n    }\n\n    /**\n     * @dev loads the stored reserve balances\n     *\n     * @param _sourceId    source reserve id\n     * @param _targetId    target reserve id\n     */\n    function reserveBalances(uint256 _sourceId, uint256 _targetId) internal view returns (uint256, uint256) {\n        require((_sourceId == 1 && _targetId == 2) || (_sourceId == 2 && _targetId == 1), \"ERR_INVALID_RESERVES\");\n        return decodeReserveBalances(__reserveBalances, _sourceId, _targetId);\n    }\n\n    /**\n     * @dev stores the stored reserve balance for a given reserve id\n     *\n     * @param _reserveId       reserve id\n     * @param _reserveBalance  reserve balance\n     */\n    function setReserveBalance(uint256 _reserveId, uint256 _reserveBalance) internal {\n        require(_reserveBalance <= MAX_UINT128, \"ERR_RESERVE_BALANCE_OVERFLOW\");\n        uint256 otherBalance = decodeReserveBalance(__reserveBalances, 3 - _reserveId);\n        __reserveBalances = encodeReserveBalances(_reserveBalance, _reserveId, otherBalance, 3 - _reserveId);\n    }\n\n    /**\n     * @dev stores the stored reserve balances\n     *\n     * @param _sourceId        source reserve id\n     * @param _targetId        target reserve id\n     * @param _sourceBalance   source reserve balance\n     * @param _targetBalance   target reserve balance\n     */\n    function setReserveBalances(\n        uint256 _sourceId,\n        uint256 _targetId,\n        uint256 _sourceBalance,\n        uint256 _targetBalance\n    ) internal {\n        require(_sourceBalance <= MAX_UINT128 && _targetBalance <= MAX_UINT128, \"ERR_RESERVE_BALANCE_OVERFLOW\");\n        __reserveBalances = encodeReserveBalances(_sourceBalance, _sourceId, _targetBalance, _targetId);\n    }\n\n    /**\n     * @dev syncs the stored reserve balance for a given reserve with the real reserve balance\n     *\n     * @param _reserveToken    address of the reserve token\n     */\n    function syncReserveBalance(IERC20 _reserveToken) internal {\n        uint256 reserveId = __reserveIds[_reserveToken];\n        uint256 balance =\n            _reserveToken == NATIVE_TOKEN_ADDRESS ? address(this).balance : _reserveToken.balanceOf(address(this));\n        setReserveBalance(reserveId, balance);\n    }\n\n    /**\n     * @dev syncs all stored reserve balances, excluding a given amount of ether from the ether reserve balance (if relevant)\n     *\n     * @param _value   amount of ether to exclude from the ether reserve balance (if relevant)\n     */\n    function syncReserveBalances(uint256 _value) internal {\n        IERC20 _reserveToken0 = __reserveTokens[0];\n        IERC20 _reserveToken1 = __reserveTokens[1];\n        uint256 balance0 =\n            _reserveToken0 == NATIVE_TOKEN_ADDRESS\n                ? address(this).balance - _value\n                : _reserveToken0.balanceOf(address(this));\n        uint256 balance1 =\n            _reserveToken1 == NATIVE_TOKEN_ADDRESS\n                ? address(this).balance - _value\n                : _reserveToken1.balanceOf(address(this));\n        setReserveBalances(1, 2, balance0, balance1);\n    }\n\n    /**\n     * @dev helper, dispatches the Conversion event\n     *\n     * @param _sourceToken     source ERC20 token\n     * @param _targetToken     target ERC20 token\n     * @param _trader          address of the caller who executed the conversion\n     * @param _amount          amount purchased/sold (in the source token)\n     * @param _returnAmount    amount returned (in the target token)\n     */\n    function dispatchConversionEvent(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        address _trader,\n        uint256 _amount,\n        uint256 _returnAmount,\n        uint256 _feeAmount\n    ) internal {\n        emit Conversion(_sourceToken, _targetToken, _trader, _amount, _returnAmount, int256(_feeAmount));\n    }\n\n    /**\n     * @dev returns the expected amount and expected fee for converting one reserve to another\n     *\n     * @param _sourceToken address of the source reserve token contract\n     * @param _targetToken address of the target reserve token contract\n     * @param _amount      amount of source reserve tokens converted\n     *\n     * @return expected amount in units of the target reserve token\n     * @return expected fee in units of the target reserve token\n     */\n    function targetAmountAndFee(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount\n    ) public view virtual override active returns (uint256, uint256) {\n        uint256 sourceId = __reserveIds[_sourceToken];\n        uint256 targetId = __reserveIds[_targetToken];\n\n        (uint256 sourceBalance, uint256 targetBalance) = reserveBalances(sourceId, targetId);\n\n        return targetAmountAndFee(_sourceToken, _targetToken, sourceBalance, targetBalance, _amount);\n    }\n\n    /**\n     * @dev returns the expected amount and expected fee for converting one reserve to another\n     *\n     * @param _sourceBalance    balance in the source reserve token contract\n     * @param _targetBalance    balance in the target reserve token contract\n     * @param _amount           amount of source reserve tokens converted\n     *\n     * @return expected amount in units of the target reserve token\n     * @return expected fee in units of the target reserve token\n     */\n    function targetAmountAndFee(\n        IERC20, /* _sourceToken */\n        IERC20, /* _targetToken */\n        uint256 _sourceBalance,\n        uint256 _targetBalance,\n        uint256 _amount\n    ) internal view virtual returns (uint256, uint256) {\n        uint256 amount = crossReserveTargetAmount(_sourceBalance, _targetBalance, _amount);\n\n        uint256 fee = calculateFee(amount);\n\n        return (amount - fee, fee);\n    }\n\n    /**\n     * @dev returns the required amount and expected fee for converting one reserve to another\n     *\n     * @param _sourceToken address of the source reserve token contract\n     * @param _targetToken address of the target reserve token contract\n     * @param _amount      amount of target reserve tokens desired\n     *\n     * @return required amount in units of the source reserve token\n     * @return expected fee in units of the target reserve token\n     */\n    function sourceAmountAndFee(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount\n    ) public view virtual active returns (uint256, uint256) {\n        uint256 sourceId = __reserveIds[_sourceToken];\n        uint256 targetId = __reserveIds[_targetToken];\n\n        (uint256 sourceBalance, uint256 targetBalance) = reserveBalances(sourceId, targetId);\n\n        uint256 fee = calculateFeeInv(_amount);\n\n        uint256 amount = crossReserveSourceAmount(sourceBalance, targetBalance, _amount.add(fee));\n\n        return (amount, fee);\n    }\n\n    /**\n     * @dev converts a specific amount of source tokens to target tokens\n     *\n     * @param _sourceToken source ERC20 token\n     * @param _targetToken target ERC20 token\n     * @param _amount      amount of tokens to convert (in units of the source token)\n     * @param _trader      address of the caller who executed the conversion\n     * @param _beneficiary wallet to receive the conversion result\n     *\n     * @return amount of tokens received (in units of the target token)\n     */\n    function doConvert(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount,\n        address _trader,\n        address payable _beneficiary\n    ) internal returns (uint256) {\n        // update the recent average rate\n        updateRecentAverageRate();\n\n        uint256 sourceId = __reserveIds[_sourceToken];\n        uint256 targetId = __reserveIds[_targetToken];\n\n        (uint256 sourceBalance, uint256 targetBalance) = reserveBalances(sourceId, targetId);\n\n        // get the target amount minus the conversion fee and the conversion fee\n        (uint256 amount, uint256 fee) =\n            targetAmountAndFee(_sourceToken, _targetToken, sourceBalance, targetBalance, _amount);\n\n        // ensure that the trade gives something in return\n        require(amount != 0, \"ERR_ZERO_TARGET_AMOUNT\");\n\n        // ensure that the trade won't deplete the reserve balance\n        assert(amount < targetBalance);\n\n        // ensure that the input amount was already deposited\n        uint256 actualSourceBalance;\n        if (_sourceToken == NATIVE_TOKEN_ADDRESS) {\n            actualSourceBalance = address(this).balance;\n            require(msg.value == _amount, \"ERR_ETH_AMOUNT_MISMATCH\");\n        } else {\n            actualSourceBalance = _sourceToken.balanceOf(address(this));\n            require(msg.value == 0 && actualSourceBalance.sub(sourceBalance) >= _amount, \"ERR_INVALID_AMOUNT\");\n        }\n\n        // sync the reserve balances\n        setReserveBalances(sourceId, targetId, actualSourceBalance, targetBalance - amount);\n\n        // transfer funds to the beneficiary in the to reserve token\n        safeTransfer(_targetToken, _beneficiary, amount);\n\n        // dispatch the conversion event\n        dispatchConversionEvent(_sourceToken, _targetToken, _trader, _amount, amount, fee);\n\n        // dispatch rate updates\n        dispatchTokenRateUpdateEvents(_sourceToken, _targetToken, actualSourceBalance, targetBalance - amount);\n\n        return amount;\n    }\n\n    /**\n     * @dev returns the recent average rate of 1 `_token` in the other reserve token units\n     *\n     * @param _token   token to get the rate for\n     *\n     * @return recent average rate between the reserves (numerator)\n     * @return recent average rate between the reserves (denominator)\n     */\n    function recentAverageRate(IERC20 _token) external view validReserve(_token) returns (uint256, uint256) {\n        // get the recent average rate of reserve 0\n        uint256 rate = calcRecentAverageRate(averageRateInfo);\n\n        uint256 rateN = decodeAverageRateN(rate);\n        uint256 rateD = decodeAverageRateD(rate);\n\n        if (_token == __reserveTokens[0]) {\n            return (rateN, rateD);\n        }\n\n        return (rateD, rateN);\n    }\n\n    /**\n     * @dev updates the recent average rate if needed\n     */\n    function updateRecentAverageRate() internal {\n        uint256 averageRateInfo1 = averageRateInfo;\n        uint256 averageRateInfo2 = calcRecentAverageRate(averageRateInfo1);\n        if (averageRateInfo1 != averageRateInfo2) {\n            averageRateInfo = averageRateInfo2;\n        }\n    }\n\n    /**\n     * @dev returns the recent average rate of 1 reserve token 0 in reserve token 1 units\n     *\n     * @param _averageRateInfo a local copy of the `averageRateInfo` state-variable\n     *\n     * @return recent average rate between the reserves\n     */\n    function calcRecentAverageRate(uint256 _averageRateInfo) internal view returns (uint256) {\n        // get the previous average rate and its update-time\n        uint256 prevAverageRateT = decodeAverageRateT(_averageRateInfo);\n        uint256 prevAverageRateN = decodeAverageRateN(_averageRateInfo);\n        uint256 prevAverageRateD = decodeAverageRateD(_averageRateInfo);\n\n        // get the elapsed time since the previous average rate was calculated\n        uint256 currentTime = time();\n        uint256 timeElapsed = currentTime - prevAverageRateT;\n\n        // if the previous average rate was calculated in the current block, the average rate remains unchanged\n        if (timeElapsed == 0) {\n            return _averageRateInfo;\n        }\n\n        // get the current rate between the reserves\n        (uint256 currentRateD, uint256 currentRateN) = reserveBalances();\n\n        // if the previous average rate was calculated a while ago or never, the average rate is equal to the current rate\n        if (timeElapsed >= AVERAGE_RATE_PERIOD || prevAverageRateT == 0) {\n            (currentRateN, currentRateD) = MathEx.reducedRatio(currentRateN, currentRateD, MAX_UINT112);\n            return encodeAverageRateInfo(currentTime, currentRateN, currentRateD);\n        }\n\n        uint256 x = prevAverageRateD.mul(currentRateN);\n        uint256 y = prevAverageRateN.mul(currentRateD);\n\n        // since we know that timeElapsed < AVERAGE_RATE_PERIOD, we can avoid using SafeMath:\n        uint256 newRateN = y.mul(AVERAGE_RATE_PERIOD - timeElapsed).add(x.mul(timeElapsed));\n        uint256 newRateD = prevAverageRateD.mul(currentRateD).mul(AVERAGE_RATE_PERIOD);\n\n        (newRateN, newRateD) = MathEx.reducedRatio(newRateN, newRateD, MAX_UINT112);\n        return encodeAverageRateInfo(currentTime, newRateN, newRateD);\n    }\n\n    /**\n     * @dev increases the pool's liquidity and mints new shares in the pool to the caller\n     *\n     * @param _reserveTokens   address of each reserve token\n     * @param _reserveAmounts  amount of each reserve token\n     * @param _minReturn       token minimum return-amount\n     *\n     * @return amount of pool tokens issued\n     */\n    function addLiquidity(\n        IERC20[] memory _reserveTokens,\n        uint256[] memory _reserveAmounts,\n        uint256 _minReturn\n    ) public payable protected active returns (uint256) {\n        // verify the user input\n        verifyLiquidityInput(_reserveTokens, _reserveAmounts, _minReturn);\n\n        // if one of the reserves is ETH, then verify that the input amount of ETH is equal to the input value of ETH\n        for (uint256 i = 0; i < 2; i++) {\n            if (_reserveTokens[i] == NATIVE_TOKEN_ADDRESS) {\n                require(_reserveAmounts[i] == msg.value, \"ERR_ETH_AMOUNT_MISMATCH\");\n            }\n        }\n\n        // if the input value of ETH is larger than zero, then verify that one of the reserves is ETH\n        if (msg.value > 0) {\n            require(__reserveIds[NATIVE_TOKEN_ADDRESS] != 0, \"ERR_NO_ETH_RESERVE\");\n        }\n\n        // save a local copy of the pool token\n        IDSToken poolToken = IDSToken(address(anchor));\n\n        // get the total supply\n        uint256 totalSupply = poolToken.totalSupply();\n\n        uint256[2] memory prevReserveBalances;\n        uint256[2] memory newReserveBalances;\n\n        // process the network fees and get the reserve balances\n        (prevReserveBalances[0], prevReserveBalances[1]) = processNetworkFees(msg.value);\n\n        uint256 amount;\n        uint256[2] memory reserveAmounts;\n\n        // calculate the amount of pool tokens to mint for the caller\n        // and the amount of reserve tokens to transfer from the caller\n        if (totalSupply == 0) {\n            amount = MathEx.geometricMean(_reserveAmounts);\n            reserveAmounts[0] = _reserveAmounts[0];\n            reserveAmounts[1] = _reserveAmounts[1];\n        } else {\n            (amount, reserveAmounts) = addLiquidityAmounts(\n                _reserveTokens,\n                _reserveAmounts,\n                prevReserveBalances,\n                totalSupply\n            );\n        }\n\n        uint256 newPoolTokenSupply = totalSupply.add(amount);\n        for (uint256 i = 0; i < 2; i++) {\n            IERC20 reserveToken = _reserveTokens[i];\n            uint256 reserveAmount = reserveAmounts[i];\n            require(reserveAmount > 0, \"ERR_ZERO_TARGET_AMOUNT\");\n            assert(reserveAmount <= _reserveAmounts[i]);\n\n            // transfer each one of the reserve amounts from the user to the pool\n            if (reserveToken != NATIVE_TOKEN_ADDRESS) {\n                // ETH has already been transferred as part of the transaction\n                reserveToken.safeTransferFrom(msg.sender, address(this), reserveAmount);\n            } else if (_reserveAmounts[i] > reserveAmount) {\n                // transfer the extra amount of ETH back to the user\n                msg.sender.transfer(_reserveAmounts[i] - reserveAmount);\n            }\n\n            // save the new reserve balance\n            newReserveBalances[i] = prevReserveBalances[i].add(reserveAmount);\n\n            emit LiquidityAdded(msg.sender, reserveToken, reserveAmount, newReserveBalances[i], newPoolTokenSupply);\n\n            // dispatch the `TokenRateUpdate` event for the pool token\n            emit TokenRateUpdate(poolToken, reserveToken, newReserveBalances[i], newPoolTokenSupply);\n        }\n\n        // set the reserve balances\n        setReserveBalances(1, 2, newReserveBalances[0], newReserveBalances[1]);\n\n        // set the reserve balances product\n        _reserveBalancesProduct = newReserveBalances[0] * newReserveBalances[1];\n\n        // verify that the equivalent amount of tokens is equal to or larger than the user's expectation\n        require(amount >= _minReturn, \"ERR_RETURN_TOO_LOW\");\n\n        // issue the tokens to the user\n        poolToken.issue(msg.sender, amount);\n\n        // return the amount of pool tokens issued\n        return amount;\n    }\n\n    /**\n     * @dev get the amount of pool tokens to mint for the caller\n     * and the amount of reserve tokens to transfer from the caller\n     *\n     * @param _reserveAmounts   amount of each reserve token\n     * @param _reserveBalances  balance of each reserve token\n     * @param _totalSupply      total supply of pool tokens\n     *\n     * @return amount of pool tokens to mint for the caller\n     * @return amount of reserve tokens to transfer from the caller\n     */\n    function addLiquidityAmounts(\n        IERC20[] memory, /* _reserveTokens */\n        uint256[] memory _reserveAmounts,\n        uint256[2] memory _reserveBalances,\n        uint256 _totalSupply\n    ) internal view virtual returns (uint256, uint256[2] memory) {\n        this;\n\n        uint256 index =\n            _reserveAmounts[0].mul(_reserveBalances[1]) < _reserveAmounts[1].mul(_reserveBalances[0]) ? 0 : 1;\n        uint256 amount = fundSupplyAmount(_totalSupply, _reserveBalances[index], _reserveAmounts[index]);\n\n        uint256[2] memory reserveAmounts =\n            [fundCost(_totalSupply, _reserveBalances[0], amount), fundCost(_totalSupply, _reserveBalances[1], amount)];\n\n        return (amount, reserveAmounts);\n    }\n\n    /**\n     * @dev decreases the pool's liquidity and burns the caller's shares in the pool\n     *\n     * @param _amount                  token amount\n     * @param _reserveTokens           address of each reserve token\n     * @param _reserveMinReturnAmounts minimum return-amount of each reserve token\n     *\n     * @return the amount of each reserve token granted for the given amount of pool tokens\n     */\n    function removeLiquidity(\n        uint256 _amount,\n        IERC20[] memory _reserveTokens,\n        uint256[] memory _reserveMinReturnAmounts\n    ) public protected active returns (uint256[] memory) {\n        // verify the user input\n        bool inputRearranged = verifyLiquidityInput(_reserveTokens, _reserveMinReturnAmounts, _amount);\n\n        // save a local copy of the pool token\n        IDSToken poolToken = IDSToken(address(anchor));\n\n        // get the total supply BEFORE destroying the user tokens\n        uint256 totalSupply = poolToken.totalSupply();\n\n        // destroy the user tokens\n        poolToken.destroy(msg.sender, _amount);\n\n        uint256 newPoolTokenSupply = totalSupply.sub(_amount);\n\n        uint256[2] memory prevReserveBalances;\n        uint256[2] memory newReserveBalances;\n\n        // process the network fees and get the reserve balances\n        (prevReserveBalances[0], prevReserveBalances[1]) = processNetworkFees(0);\n\n        uint256[] memory reserveAmounts = removeLiquidityReserveAmounts(_amount, totalSupply, prevReserveBalances);\n\n        for (uint256 i = 0; i < 2; i++) {\n            IERC20 reserveToken = _reserveTokens[i];\n            uint256 reserveAmount = reserveAmounts[i];\n            require(reserveAmount >= _reserveMinReturnAmounts[i], \"ERR_ZERO_TARGET_AMOUNT\");\n\n            // save the new reserve balance\n            newReserveBalances[i] = prevReserveBalances[i].sub(reserveAmount);\n\n            // transfer each one of the reserve amounts from the pool to the user\n            safeTransfer(reserveToken, msg.sender, reserveAmount);\n\n            emit LiquidityRemoved(msg.sender, reserveToken, reserveAmount, newReserveBalances[i], newPoolTokenSupply);\n\n            // dispatch the `TokenRateUpdate` event for the pool token\n            emit TokenRateUpdate(poolToken, reserveToken, newReserveBalances[i], newPoolTokenSupply);\n        }\n\n        // set the reserve balances\n        setReserveBalances(1, 2, newReserveBalances[0], newReserveBalances[1]);\n\n        // set the reserve balances product\n        _reserveBalancesProduct = newReserveBalances[0] * newReserveBalances[1];\n\n        if (inputRearranged) {\n            uint256 tempReserveAmount = reserveAmounts[0];\n            reserveAmounts[0] = reserveAmounts[1];\n            reserveAmounts[1] = tempReserveAmount;\n        }\n\n        // return the amount of each reserve token granted for the given amount of pool tokens\n        return reserveAmounts;\n    }\n\n    /**\n     * @dev given the amount of one of the reserve tokens to add liquidity of,\n     * returns the required amount of each one of the other reserve tokens\n     * since an empty pool can be funded with any list of non-zero input amounts,\n     * this function assumes that the pool is not empty (has already been funded)\n     *\n     * @param _reserveTokens       address of each reserve token\n     * @param _reserveTokenIndex   index of the relevant reserve token\n     * @param _reserveAmount       amount of the relevant reserve token\n     *\n     * @return the required amount of each one of the reserve tokens\n     */\n    function addLiquidityCost(\n        IERC20[] memory _reserveTokens,\n        uint256 _reserveTokenIndex,\n        uint256 _reserveAmount\n    ) public view returns (uint256[] memory) {\n        uint256 totalSupply = IDSToken(address(anchor)).totalSupply();\n        uint256[2] memory baseBalances = baseReserveBalances(_reserveTokens);\n        uint256 amount = fundSupplyAmount(totalSupply, baseBalances[_reserveTokenIndex], _reserveAmount);\n\n        uint256[] memory reserveAmounts = new uint256[](2);\n        reserveAmounts[0] = fundCost(totalSupply, baseBalances[0], amount);\n        reserveAmounts[1] = fundCost(totalSupply, baseBalances[1], amount);\n        return reserveAmounts;\n    }\n\n    /**\n     * @dev returns the amount of pool tokens entitled for given amounts of reserve tokens\n     * since an empty pool can be funded with any list of non-zero input amounts,\n     * this function assumes that the pool is not empty (has already been funded)\n     *\n     * @param _reserveTokens   address of each reserve token\n     * @param _reserveAmounts  amount of each reserve token\n     *\n     * @return the amount of pool tokens entitled for the given amounts of reserve tokens\n     */\n    function addLiquidityReturn(IERC20[] memory _reserveTokens, uint256[] memory _reserveAmounts)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 totalSupply = IDSToken(address(anchor)).totalSupply();\n        uint256[2] memory baseBalances = baseReserveBalances(_reserveTokens);\n        (uint256 amount, ) = addLiquidityAmounts(_reserveTokens, _reserveAmounts, baseBalances, totalSupply);\n        return amount;\n    }\n\n    /**\n     * @dev returns the amount of each reserve token entitled for a given amount of pool tokens\n     *\n     * @param _amount          amount of pool tokens\n     * @param _reserveTokens   address of each reserve token\n     *\n     * @return the amount of each reserve token entitled for the given amount of pool tokens\n     */\n    function removeLiquidityReturn(uint256 _amount, IERC20[] memory _reserveTokens)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256 totalSupply = IDSToken(address(anchor)).totalSupply();\n        uint256[2] memory baseBalances = baseReserveBalances(_reserveTokens);\n        return removeLiquidityReserveAmounts(_amount, totalSupply, baseBalances);\n    }\n\n    /**\n     * @dev verifies that a given array of tokens is identical to the converter's array of reserve tokens\n     * we take this input in order to allow specifying the corresponding reserve amounts in any order\n     * this function rearranges the input arrays according to the converter's array of reserve tokens\n     *\n     * @param _reserveTokens   array of reserve tokens\n     * @param _reserveAmounts  array of reserve amounts\n     * @param _amount          token amount\n     *\n     * @return true if the function has rearranged the input arrays; false otherwise\n     */\n    function verifyLiquidityInput(\n        IERC20[] memory _reserveTokens,\n        uint256[] memory _reserveAmounts,\n        uint256 _amount\n    ) private view returns (bool) {\n        require(validReserveAmounts(_reserveAmounts) && _amount > 0, \"ERR_ZERO_AMOUNT\");\n\n        uint256 reserve0Id = __reserveIds[_reserveTokens[0]];\n        uint256 reserve1Id = __reserveIds[_reserveTokens[1]];\n\n        if (reserve0Id == 2 && reserve1Id == 1) {\n            IERC20 tempReserveToken = _reserveTokens[0];\n            _reserveTokens[0] = _reserveTokens[1];\n            _reserveTokens[1] = tempReserveToken;\n            uint256 tempReserveAmount = _reserveAmounts[0];\n            _reserveAmounts[0] = _reserveAmounts[1];\n            _reserveAmounts[1] = tempReserveAmount;\n            return true;\n        }\n\n        require(reserve0Id == 1 && reserve1Id == 2, \"ERR_INVALID_RESERVE\");\n        return false;\n    }\n\n    /**\n     * @dev checks whether or not both reserve amounts are larger than zero\n     *\n     * @param _reserveAmounts  array of reserve amounts\n     *\n     * @return true if both reserve amounts are larger than zero; false otherwise\n     */\n    function validReserveAmounts(uint256[] memory _reserveAmounts) internal pure virtual returns (bool) {\n        return _reserveAmounts[0] > 0 && _reserveAmounts[1] > 0;\n    }\n\n    /**\n     * @dev returns the amount of each reserve token entitled for a given amount of pool tokens\n     *\n     * @param _amount          amount of pool tokens\n     * @param _totalSupply     total supply of pool tokens\n     * @param _reserveBalances balance of each reserve token\n     *\n     * @return the amount of each reserve token entitled for the given amount of pool tokens\n     */\n    function removeLiquidityReserveAmounts(\n        uint256 _amount,\n        uint256 _totalSupply,\n        uint256[2] memory _reserveBalances\n    ) private pure returns (uint256[] memory) {\n        uint256[] memory reserveAmounts = new uint256[](2);\n        reserveAmounts[0] = liquidateReserveAmount(_totalSupply, _reserveBalances[0], _amount);\n        reserveAmounts[1] = liquidateReserveAmount(_totalSupply, _reserveBalances[1], _amount);\n        return reserveAmounts;\n    }\n\n    /**\n     * @dev dispatches token rate update events for the reserve tokens and the pool token\n     *\n     * @param _sourceToken     address of the source reserve token\n     * @param _targetToken     address of the target reserve token\n     * @param _sourceBalance   balance of the source reserve token\n     * @param _targetBalance   balance of the target reserve token\n     */\n    function dispatchTokenRateUpdateEvents(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _sourceBalance,\n        uint256 _targetBalance\n    ) private {\n        // save a local copy of the pool token\n        IDSToken poolToken = IDSToken(address(anchor));\n\n        // get the total supply of pool tokens\n        uint256 poolTokenSupply = poolToken.totalSupply();\n\n        // dispatch token rate update event for the reserve tokens\n        emit TokenRateUpdate(_sourceToken, _targetToken, _targetBalance, _sourceBalance);\n\n        // dispatch token rate update events for the pool token\n        emit TokenRateUpdate(poolToken, _sourceToken, _sourceBalance, poolTokenSupply);\n        emit TokenRateUpdate(poolToken, _targetToken, _targetBalance, poolTokenSupply);\n    }\n\n    function encodeReserveBalance(uint256 _balance, uint256 _id) private pure returns (uint256) {\n        assert(_balance <= MAX_UINT128 && (_id == 1 || _id == 2));\n        return _balance << ((_id - 1) * 128);\n    }\n\n    function decodeReserveBalance(uint256 _balances, uint256 _id) private pure returns (uint256) {\n        assert(_id == 1 || _id == 2);\n        return (_balances >> ((_id - 1) * 128)) & MAX_UINT128;\n    }\n\n    function encodeReserveBalances(\n        uint256 _balance0,\n        uint256 _id0,\n        uint256 _balance1,\n        uint256 _id1\n    ) private pure returns (uint256) {\n        return encodeReserveBalance(_balance0, _id0) | encodeReserveBalance(_balance1, _id1);\n    }\n\n    function decodeReserveBalances(\n        uint256 _balances,\n        uint256 _id0,\n        uint256 _id1\n    ) private pure returns (uint256, uint256) {\n        return (decodeReserveBalance(_balances, _id0), decodeReserveBalance(_balances, _id1));\n    }\n\n    function encodeAverageRateInfo(\n        uint256 _averageRateT,\n        uint256 _averageRateN,\n        uint256 _averageRateD\n    ) private pure returns (uint256) {\n        assert(_averageRateT <= MAX_UINT32 && _averageRateN <= MAX_UINT112 && _averageRateD <= MAX_UINT112);\n        return (_averageRateT << 224) | (_averageRateN << 112) | _averageRateD;\n    }\n\n    function decodeAverageRateT(uint256 _averageRateInfo) private pure returns (uint256) {\n        return _averageRateInfo >> 224;\n    }\n\n    function decodeAverageRateN(uint256 _averageRateInfo) private pure returns (uint256) {\n        return (_averageRateInfo >> 112) & MAX_UINT112;\n    }\n\n    function decodeAverageRateD(uint256 _averageRateInfo) private pure returns (uint256) {\n        return _averageRateInfo & MAX_UINT112;\n    }\n\n    /**\n     * @dev returns the largest integer smaller than or equal to the square root of a given value\n     *\n     * @param x the given value\n     *\n     * @return the largest integer smaller than or equal to the square root of the given value\n     */\n    function floorSqrt(uint256 x) private pure returns (uint256) {\n        return x > 0 ? MathEx.floorSqrt(x) : 0;\n    }\n\n    function crossReserveTargetAmount(\n        uint256 _sourceReserveBalance,\n        uint256 _targetReserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_sourceReserveBalance > 0 && _targetReserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n\n        return _targetReserveBalance.mul(_amount) / _sourceReserveBalance.add(_amount);\n    }\n\n    function crossReserveSourceAmount(\n        uint256 _sourceReserveBalance,\n        uint256 _targetReserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_sourceReserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n        require(_amount < _targetReserveBalance, \"ERR_INVALID_AMOUNT\");\n\n        if (_amount == 0) {\n            return 0;\n        }\n\n        return (_sourceReserveBalance.mul(_amount) - 1) / (_targetReserveBalance - _amount) + 1;\n    }\n\n    function fundCost(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n\n        // special case for 0 amount\n        if (_amount == 0) {\n            return 0;\n        }\n\n        return (_amount.mul(_reserveBalance) - 1) / _supply + 1;\n    }\n\n    function fundSupplyAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n\n        // special case for 0 amount\n        if (_amount == 0) {\n            return 0;\n        }\n\n        return _amount.mul(_supply) / _reserveBalance;\n    }\n\n    function liquidateReserveAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n        require(_amount <= _supply, \"ERR_INVALID_AMOUNT\");\n\n        // special case for 0 amount\n        if (_amount == 0) {\n            return 0;\n        }\n\n        // special case for liquidating the entire supply\n        if (_amount == _supply) {\n            return _reserveBalance;\n        }\n\n        return _amount.mul(_reserveBalance) / _supply;\n    }\n\n    /**\n     * @dev returns the network wallet and fees\n     *\n     * @param reserveBalance0 1st reserve balance\n     * @param reserveBalance1 2nd reserve balance\n     *\n     * @return the network wallet\n     * @return the network fee on the 1st reserve\n     * @return the network fee on the 2nd reserve\n     */\n    function networkWalletAndFees(uint256 reserveBalance0, uint256 reserveBalance1)\n        private\n        view\n        returns (\n            ITokenHolder,\n            uint256,\n            uint256\n        )\n    {\n        uint256 prevPoint = floorSqrt(_reserveBalancesProduct);\n        uint256 currPoint = floorSqrt(reserveBalance0 * reserveBalance1);\n\n        if (prevPoint >= currPoint) {\n            return (ITokenHolder(address(0)), 0, 0);\n        }\n\n        (ITokenHolder networkFeeWallet, uint32 networkFee) =\n            INetworkSettings(addressOf(NETWORK_SETTINGS)).networkFeeParams();\n        uint256 n = (currPoint - prevPoint) * networkFee;\n        uint256 d = currPoint * PPM_RESOLUTION;\n        return (networkFeeWallet, reserveBalance0.mul(n).div(d), reserveBalance1.mul(n).div(d));\n    }\n\n    /**\n     * @dev transfers funds held by the contract and sends them to an account\n     *\n     * @param token ERC20 token contract address\n     * @param to account to receive the new amount\n     * @param amount amount to withdraw\n     */\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) private {\n        if (amount == 0) {\n            return;\n        }\n\n        if (token == NATIVE_TOKEN_ADDRESS) {\n            payable(to).transfer(amount);\n        } else {\n            token.safeTransfer(to, amount);\n        }\n    }\n\n    /**\n     * @dev deprecated since version 28, backward compatibility - use only for earlier versions\n     */\n    function token() public view override returns (IConverterAnchor) {\n        return anchor;\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function transferTokenOwnership(address _newOwner) public override ownerOnly {\n        transferAnchorOwnership(_newOwner);\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function acceptTokenOwnership() public override ownerOnly {\n        acceptAnchorOwnership();\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function connectors(IERC20 _address)\n        public\n        view\n        override\n        returns (\n            uint256,\n            uint32,\n            bool,\n            bool,\n            bool\n        )\n    {\n        uint256 reserveId = __reserveIds[_address];\n        if (reserveId != 0) {\n            return (reserveBalance(reserveId), PPM_RESOLUTION / 2, false, false, true);\n        }\n        return (0, 0, false, false, false);\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function connectorTokens(uint256 _index) public view override returns (IERC20) {\n        return __reserveTokens[_index];\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function connectorTokenCount() public view override returns (uint16) {\n        return reserveTokenCount();\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function getConnectorBalance(IERC20 _connectorToken) public view override returns (uint256) {\n        return reserveBalance(_connectorToken);\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function getReturn(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount\n    ) public view returns (uint256, uint256) {\n        return targetAmountAndFee(_sourceToken, _targetToken, _amount);\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_anchor\",\"type\":\"address\"},{\"internalType\":\"contract IContractRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_maxConversionFee\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"contract IConverterAnchor\",\"name\":\"_anchor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_activated\",\"type\":\"bool\"}],\"name\":\"Activation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_return\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_conversionFee\",\"type\":\"int256\"}],\"name\":\"Conversion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_prevFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newFee\",\"type\":\"uint32\"}],\"name\":\"ConversionFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSupply\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSupply\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_token2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rateN\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rateD\",\"type\":\"uint256\"}],\"name\":\"TokenRateUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAnchorOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reserveAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_reserveTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityCost\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reserveAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addLiquidityReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_weight\",\"type\":\"uint32\"}],\"name\":\"addReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchor\",\"outputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averageRateInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorTokenCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"connectorTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conversionFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converterType\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_connectorToken\",\"type\":\"address\"}],\"name\":\"getConnectorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isV28OrHigher\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxConversionFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onUpgradeComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyOwnerCanUpdateRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processNetworkFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recentAverageRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reserveMinReturnAmounts\",\"type\":\"uint256[]\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"}],\"name\":\"removeLiquidityReturn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_reserveToken\",\"type\":\"address\"}],\"name\":\"reserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveTokenCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_reserveToken\",\"type\":\"address\"}],\"name\":\"reserveWeight\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyOwnerCanUpdateRegistry\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_conversionFee\",\"type\":\"uint32\"}],\"name\":\"setConversionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sourceAmountAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncReserveBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"targetAmountAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferAnchorOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newConverter\",\"type\":\"address\"}],\"name\":\"transferReservesOnUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"StandardPoolConverter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":1,"Runs":200,"ConstructorArguments":"0x000000000000000000000000dbd62d3c1405d28c57f51c823d9d14f3f4a54e2000000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd400000000000000000000000000000000000000000000000000000000000003e8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}