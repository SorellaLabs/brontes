{"expiry":1699494172,"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/Lock.sol":{"content":"//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"./Pool.sol\";\n\ncontract Stakify is IERC20, Ownable {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\n    event RepellentFeeActivated(uint256 activatedAmount);\n    event RepellentFeeDisabled(uint256 disabledAmount);\n\n    IUniswapV2Pair public pairContract;\n    mapping(address => bool) _isFeeExempt;\n    mapping(address => bool) isAuthorized;\n\n    modifier validRecipient(address to) {\n        require(to != address(0x0));\n        _;\n    }\n\n    string constant _name = \"Stakify\";\n    string constant _symbol = \"SIFY\";\n    uint8 constant _decimals = 18;\n\n    uint256 public constant DECIMALS = 18;\n    uint256 public constant MAX_UINT256 = ~uint256(0);\n    uint8 public constant RATE_DECIMALS = 11;\n\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY =\n        100 * 10 ** 6 * 10 ** DECIMALS;\n\n    uint256 public autoBurnFee = 1;\n    uint256 public liquidityFee = 3;\n    uint256 public treasuryFee = 1;\n    uint256 public totalFee = 5;\n\n    uint256 public repellentSellAutoBurnFee = 15;\n    uint256 public repellentSellLiquidityFee = 5;\n    uint256 public repellentSellTreasuryFee = 10;\n    uint256 public repellentSellTotalFee = 30;\n\n    uint256 public repellentBuyAutoBurnFee = 1;\n    uint256 public repellentBuyLiquidityFee = 1;\n    uint256 public repellentBuyTreasuryFee = 1;\n    uint256 public repellentBuyTotalFee = 3;\n\n    uint256 public swapThershold = INITIAL_FRAGMENTS_SUPPLY / 10000;\n\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n    address ZERO = 0x0000000000000000000000000000000000000000;\n\n    address BUSD = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n    address public treasuryFeeWallet =\n        0xdAb6280d5a87c10250F454EE3AD3b3b0C1A274C0;\n\n    bool public swapEnabled = true;\n    IUniswapV2Router02 public router;\n\n    enum LPLevels {\n        Level1,\n        Level2,\n        Level3,\n        Level4,\n        Level5\n    }\n\n    LPLevels public currentLpLevel;\n\n    ReferalPool public referalPool;\n\n    uint256 public lastLPCheckedAt;\n    uint256 public lastLPAmount;\n    uint256 public lpCheckFrequency = 1 hours;\n\n    struct LPRange {\n        uint256 minLimit;\n        uint256 maxLimit;\n        uint256 dropLimit;\n        uint256 recoverLimit;\n    }\n\n    mapping(LPLevels => LPRange) public lpRanges;\n\n    address public pair;\n    bool inSwap = false;\n    modifier swapping() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    uint256 private constant TOTAL_GONS =\n        MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n\n    uint256 public swapThreshold;\n    bool public tradingOpen = false;\n\n    bool public isRepellentFee;\n\n    uint256 public repellentFeeActivatedAt;\n    uint256 public repellentFeeActivatedAmount;\n    uint256 public repellentFeeRecoverAmount;\n\n    uint256 public lastRepellentFeeActivatedAt;\n    uint256 public lastRepellentFeeRecoveredAt;\n\n    bool public _autoRebase;\n    bool public _autoAddLiquidity;\n    uint256 public _initRebaseStartTime;\n    uint256 public _lastRebasedTime;\n    uint256 public _lastAddLiquidityTime;\n    uint256 public _totalSupply;\n    uint256 private _gonsPerFragment;\n\n    uint256 public initialRebaseRate = 19904549;\n\n    mapping(address => uint256) private _gonBalances;\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\n\n    constructor() {\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        pair = IUniswapV2Factory(router.factory()).createPair(\n            router.WETH(),\n            address(this)\n        );\n\n        address _newOwner = 0x64Ab7F64187AF212007A3EE9fdF990101DE4Bc16;\n\n        _allowedFragments[address(this)][address(router)] = type(uint256).max;\n        pairContract = IUniswapV2Pair(pair);\n\n        isAuthorized[_newOwner] = true;\n\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n        _gonBalances[_newOwner] = TOTAL_GONS;\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n        _initRebaseStartTime = block.timestamp;\n        _lastRebasedTime = block.timestamp;\n        _autoRebase = true;\n        _autoAddLiquidity = true;\n        _isFeeExempt[_newOwner] = true;\n        _isFeeExempt[address(this)] = true;\n\n        lpRanges[LPLevels.Level1].minLimit = 0;\n        lpRanges[LPLevels.Level1].maxLimit = 100000 ether;\n        lpRanges[LPLevels.Level1].dropLimit = 1000;\n        lpRanges[LPLevels.Level1].recoverLimit = 2000;\n\n        lpRanges[LPLevels.Level2].minLimit = 100000 ether;\n        lpRanges[LPLevels.Level2].maxLimit = 200000 ether;\n        lpRanges[LPLevels.Level2].dropLimit = 750;\n        lpRanges[LPLevels.Level2].recoverLimit = 1500;\n\n        lpRanges[LPLevels.Level3].minLimit = 200000 ether;\n        lpRanges[LPLevels.Level3].maxLimit = 500000 ether;\n        lpRanges[LPLevels.Level3].dropLimit = 500;\n        lpRanges[LPLevels.Level3].recoverLimit = 1000;\n\n        lpRanges[LPLevels.Level4].minLimit = 500000 ether;\n        lpRanges[LPLevels.Level4].maxLimit = 1000000 ether;\n        lpRanges[LPLevels.Level4].dropLimit = 250;\n        lpRanges[LPLevels.Level4].recoverLimit = 500;\n\n        lpRanges[LPLevels.Level5].minLimit = 1000000 ether;\n        lpRanges[LPLevels.Level5].maxLimit = 600000 ether;\n        lpRanges[LPLevels.Level5].dropLimit = 100;\n        lpRanges[LPLevels.Level5].recoverLimit = 200;\n\n        referalPool = new ReferalPool(_newOwner, address(this));\n\n        _transferOwnership(_newOwner);\n        emit Transfer(address(0x0), _newOwner, _totalSupply);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function rebase() internal {\n        if (inSwap) return;\n        uint256 rebaseRate;\n        uint256 deltaTimeFromInit = block.timestamp - _initRebaseStartTime;\n        uint256 deltaTime = block.timestamp - _lastRebasedTime;\n        uint256 times = deltaTime.div(3600);\n        uint256 epoch = times.mul(60);\n\n        if (deltaTimeFromInit <= 10) {\n            rebaseRate = initialRebaseRate;\n        } else if (deltaTimeFromInit < 100) {\n            uint256 numberOf10Days = deltaTimeFromInit / 10;\n            rebaseRate = initialRebaseRate - (100000 * numberOf10Days);\n        } else {\n            rebaseRate = 272039;\n        }\n\n        for (uint256 i = 0; i < times; i++) {\n            _totalSupply = _totalSupply\n                .mul((10 ** RATE_DECIMALS).add(rebaseRate))\n                .div(10 ** RATE_DECIMALS);\n        }\n\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n        _lastRebasedTime = _lastRebasedTime.add(times.mul(60));\n\n        pairContract.sync();\n\n        emit LogRebase(epoch, _totalSupply);\n    }\n\n    function transfer(\n        address to,\n        uint256 value\n    ) external override validRecipient(to) returns (bool) {\n        _transferFrom(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external override validRecipient(to) returns (bool) {\n        if (_allowedFragments[from][msg.sender] != type(uint256).max) {\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\n                msg.sender\n            ].sub(value, \"Insufficient Allowance\");\n        }\n        _transferFrom(from, to, value);\n        return true;\n    }\n\n    function _basicTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal returns (bool) {\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\n        return true;\n    }\n\n    function _transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        if (!isAuthorized[sender]) {\n            require(tradingOpen, \"Trading not open yet\");\n        }\n        if (inSwap || sender == address(referalPool)) {\n            return _basicTransfer(sender, recipient, amount);\n        }\n\n        if (\n            (lastLPCheckedAt + lpCheckFrequency) < block.timestamp &&\n            !isRepellentFee &&\n            tradingOpen\n        ) {\n            uint256 lpBnbBalance = IERC20(router.WETH()).balanceOf(\n                address(pair)\n            );\n            lastLPAmount = getBnbPrice(lpBnbBalance);\n            lastLPCheckedAt = block.timestamp;\n        }\n\n        if (sender == pair) {\n            if (referalPool.userReferal(recipient) != ZERO) {\n                referalPool.setReferalBonus(recipient, amount);\n            }\n        }\n        if (tradingOpen) {\n            calculateLPStatus();\n        }\n\n        if (shouldRebase()) {\n            rebase();\n        }\n\n        if (shouldSwapBack()) {\n            swapBack();\n        }\n\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient)\n            ? takeFee(sender, recipient, gonAmount)\n            : gonAmount;\n        _gonBalances[recipient] = _gonBalances[recipient].add(\n            gonAmountReceived\n        );\n\n        emit Transfer(\n            sender,\n            recipient,\n            gonAmountReceived.div(_gonsPerFragment)\n        );\n        return true;\n    }\n\n    function takeFee(\n        address sender,\n        address recipient,\n        uint256 gonAmount\n    ) internal returns (uint256) {\n        uint256 feeAmount = 0;\n        uint256 tokensToTreasury = 0;\n        uint256 tokensToBurn = 0;\n\n        if (!isRepellentFee) {\n            feeAmount = gonAmount.div(100).mul(totalFee);\n            tokensToTreasury = feeAmount.mul(treasuryFee).div(totalFee);\n            tokensToBurn = feeAmount.mul(autoBurnFee).div(totalFee);\n        } else {\n            if (recipient == pair) {\n                feeAmount = gonAmount.div(100).mul(repellentSellTotalFee);\n                tokensToTreasury = feeAmount.mul(repellentSellTreasuryFee).div(\n                    repellentSellTotalFee\n                );\n                tokensToBurn = feeAmount.mul(repellentSellAutoBurnFee).div(\n                    repellentSellTotalFee\n                );\n            } else {\n                feeAmount = gonAmount.div(100).mul(repellentBuyTotalFee);\n                tokensToTreasury = feeAmount.mul(repellentBuyTreasuryFee).div(\n                    repellentBuyTotalFee\n                );\n                tokensToBurn = feeAmount.mul(repellentBuyAutoBurnFee).div(\n                    repellentBuyTotalFee\n                );\n            }\n        }\n\n        feeAmount = feeAmount.sub(tokensToTreasury).sub(tokensToBurn);\n\n        _gonBalances[treasuryFeeWallet] = _gonBalances[treasuryFeeWallet].add(\n            tokensToTreasury\n        );\n\n        emit Transfer(\n            sender,\n            address(treasuryFeeWallet),\n            tokensToTreasury.div(_gonsPerFragment)\n        );\n        _gonBalances[DEAD] = _gonBalances[DEAD].add(tokensToBurn);\n\n        emit Transfer(sender, DEAD, tokensToBurn.div(_gonsPerFragment));\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\n            feeAmount\n        );\n\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\n        return gonAmount.sub(feeAmount + tokensToTreasury + tokensToBurn);\n    }\n\n    function swapAndLiquify(uint256 tokens) private {\n        // split the contract balance into halves\n        uint256 half = tokens.div(2);\n        uint256 otherHalf = tokens.sub(half);\n\n        // capture the contract's current ETH balance.\n        // this is so that we can capture exactly the amount of ETH that the\n        // swap creates, and not make the liquidity event include any ETH that\n        // has been manually sent to the contract\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for ETH\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\n\n        // how much ETH did we just swap into?\n        uint256 newBalance = address(this).balance.sub(initialBalance);\n\n        // add liquidity to uniswap\n        addLiquidity(otherHalf, newBalance);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n        // make the swap\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\n        // add the liquidity\n        router.addLiquidityETH{value: bnbAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(DEAD),\n            block.timestamp\n        );\n    }\n\n    function swapBack() internal swapping {\n        uint256 contractTokenBalance = _gonBalances[address(this)].div(\n            _gonsPerFragment\n        );\n\n        if (contractTokenBalance == 0 && totalFee == 0) return;\n\n        swapAndLiquify(contractTokenBalance);\n    }\n\n    function shouldTakeFee(\n        address from,\n        address to\n    ) internal view returns (bool) {\n        return (pair == from || pair == to) && !_isFeeExempt[from];\n    }\n\n    function shouldRebase() internal view returns (bool) {\n        return\n            _autoRebase &&\n            msg.sender != pair &&\n            !inSwap &&\n            tradingOpen &&\n            block.timestamp >= (_lastRebasedTime + 15 minutes);\n    }\n\n    function shouldSwapBack() internal view returns (bool) {\n        return\n            !inSwap &&\n            msg.sender != pair &&\n            swapEnabled &&\n            _gonBalances[address(this)] >= swapThershold;\n    }\n\n    function enableSwap(bool status) external onlyOwner {\n        swapEnabled = status;\n    }\n\n    function setAutoRebase(bool _flag) external onlyOwner {\n        if (_flag) {\n            _autoRebase = _flag;\n            _lastRebasedTime = block.timestamp;\n        } else {\n            _autoRebase = _flag;\n        }\n    }\n\n    function setAutoAddLiquidity(bool _flag) external onlyOwner {\n        if (_flag) {\n            _autoAddLiquidity = _flag;\n            _lastAddLiquidityTime = block.timestamp;\n        } else {\n            _autoAddLiquidity = _flag;\n        }\n    }\n\n    function allowance(\n        address owner_,\n        address spender\n    ) external view override returns (uint256) {\n        return _allowedFragments[owner_][spender];\n    }\n\n    function enableTrading() public onlyOwner {\n        tradingOpen = true;\n    }\n\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) external returns (bool) {\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\n        if (subtractedValue >= oldValue) {\n            _allowedFragments[msg.sender][spender] = 0;\n        } else {\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\n                subtractedValue\n            );\n        }\n        emit Approval(\n            msg.sender,\n            spender,\n            _allowedFragments[msg.sender][spender]\n        );\n        return true;\n    }\n\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) external returns (bool) {\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\n            spender\n        ].add(addedValue);\n        emit Approval(\n            msg.sender,\n            spender,\n            _allowedFragments[msg.sender][spender]\n        );\n        return true;\n    }\n\n    function approve(\n        address spender,\n        uint256 value\n    ) external override returns (bool) {\n        _allowedFragments[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function checkFeeExempt(address _addr) external view returns (bool) {\n        return _isFeeExempt[_addr];\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return\n            (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\n                _gonsPerFragment\n            );\n    }\n\n    function isNotInSwap() external view returns (bool) {\n        return !inSwap;\n    }\n\n    function manualSync() external {\n        IUniswapV2Pair(pair).sync();\n    }\n\n    function setFeeReceivers(address _treasuryFeeWallet) external onlyOwner {\n        treasuryFeeWallet = _treasuryFeeWallet;\n    }\n\n    function getLiquidityBacking(\n        uint256 accuracy\n    ) public view returns (uint256) {\n        uint256 liquidityBalance = _gonBalances[pair].div(_gonsPerFragment);\n        return\n            accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply());\n    }\n\n    function setWhitelist(address _addr) external onlyOwner {\n        _isFeeExempt[_addr] = true;\n    }\n\n    function setLP(address _address) external onlyOwner {\n        pairContract = IUniswapV2Pair(_address);\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _gonBalances[account].div(_gonsPerFragment);\n    }\n\n    function isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size > 0;\n    }\n\n    function _transferBNBToWallet(\n        address payable recipient,\n        uint256 amount\n    ) private {\n        recipient.transfer(amount);\n    }\n\n    function calculateLPStatus() internal {\n        uint256 lpBnbBalance = IERC20(router.WETH()).balanceOf(address(pair));\n        uint256 lpBalance = getBnbPrice(lpBnbBalance);\n\n        if (\n            lpBalance >= lpRanges[LPLevels.Level1].minLimit &&\n            lpBalance <= lpRanges[LPLevels.Level1].maxLimit\n        ) currentLpLevel = LPLevels.Level1;\n\n        if (\n            lpBalance >= lpRanges[LPLevels.Level2].minLimit &&\n            lpBalance <= lpRanges[LPLevels.Level2].maxLimit\n        ) currentLpLevel = LPLevels.Level2;\n\n        if (\n            lpBalance >= lpRanges[LPLevels.Level3].minLimit &&\n            lpBalance <= lpRanges[LPLevels.Level3].maxLimit\n        ) currentLpLevel = LPLevels.Level3;\n\n        if (\n            lpBalance >= lpRanges[LPLevels.Level4].minLimit &&\n            lpBalance <= lpRanges[LPLevels.Level4].maxLimit\n        ) currentLpLevel = LPLevels.Level4;\n\n        if (lpBalance >= lpRanges[LPLevels.Level5].minLimit)\n            currentLpLevel = LPLevels.Level5;\n\n        if (lastLPAmount > lpBalance && !isRepellentFee) {\n            uint256 lpDifference = lastLPAmount - lpBalance;\n\n            uint256 differencePercentage = ((lpDifference * 10000) /\n                lastLPAmount);\n\n            if (differencePercentage > lpRanges[currentLpLevel].dropLimit) {\n                isRepellentFee = true;\n                repellentFeeActivatedAt = block.timestamp;\n                lastRepellentFeeActivatedAt = block.timestamp;\n                repellentFeeActivatedAmount = lpBalance;\n                repellentFeeRecoverAmount =\n                    lpBalance +\n                    ((lpBalance * lpRanges[currentLpLevel].recoverLimit) /\n                        10000);\n\n                emit RepellentFeeActivated(lpBalance);\n            }\n        }\n        if (isRepellentFee && lpBalance > repellentFeeRecoverAmount) {\n            isRepellentFee = false;\n            repellentFeeActivatedAt = 0;\n            repellentFeeActivatedAmount = 0;\n            repellentFeeRecoverAmount = 0;\n\n            lastRepellentFeeRecoveredAt = block.timestamp;\n\n            lastLPAmount = lpBalance;\n\n            emit RepellentFeeDisabled(lpBalance);\n        }\n    }\n\n    function getBnbPrice(uint256 _amount) public view returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = router.WETH();\n        path[1] = BUSD;\n\n        uint256[] memory amounts = router.getAmountsOut(_amount, path);\n\n        return amounts[1];\n    }\n\n    function setLpRange(\n        LPLevels _level,\n        uint256 _min,\n        uint256 _max,\n        uint256 _drop,\n        uint256 _recover\n    ) external onlyOwner {\n        LPRange storage currentRange = lpRanges[_level];\n\n        currentRange.minLimit = _min;\n        currentRange.maxLimit = _max;\n        currentRange.dropLimit = _drop;\n        currentRange.recoverLimit = _recover;\n    }\n\n    function changeSwapPoint(uint256 _amount) external onlyOwner {\n        swapThershold = _amount;\n    }\n\n    function changeRebaseRate(uint256 _amount) external onlyOwner {\n        initialRebaseRate = _amount;\n    }\n\n    function changeNormalFees(\n        uint256 _autoBurnFee,\n        uint256 _liquidityFee,\n        uint256 _treasuryFee\n    ) external onlyOwner {\n        autoBurnFee = _autoBurnFee;\n        liquidityFee = _liquidityFee;\n        treasuryFee = _treasuryFee;\n\n        totalFee = _autoBurnFee + _liquidityFee + _treasuryFee;\n\n        require(totalFee <= 20, \"Fees can not be grater than 20%\");\n    }\n\n    function changeRepellentSellFees(\n        uint256 _autoBurnFee,\n        uint256 _liquidityFee,\n        uint256 _treasuryFee\n    ) external onlyOwner {\n        repellentSellAutoBurnFee = _autoBurnFee;\n        repellentSellLiquidityFee = _liquidityFee;\n        repellentSellTreasuryFee = _treasuryFee;\n\n        repellentSellTotalFee = _autoBurnFee + _liquidityFee + _treasuryFee;\n\n        require(repellentSellTotalFee <= 30, \"Fees can not be grater than 30%\");\n    }\n\n    function changeRepellentBuyFees(\n        uint256 _autoBurnFee,\n        uint256 _liquidityFee,\n        uint256 _treasuryFee\n    ) external onlyOwner {\n        repellentBuyAutoBurnFee = _autoBurnFee;\n        repellentBuyLiquidityFee = _liquidityFee;\n        repellentBuyTreasuryFee = _treasuryFee;\n\n        repellentBuyTotalFee = _autoBurnFee + _liquidityFee + _treasuryFee;\n\n        require(repellentSellTotalFee <= 20, \"Fees can not be grater than 20%\");\n    }\n\n    function setAuthorizedWallet(\n        address _wallet,\n        bool _status\n    ) external onlyOwner {\n        isAuthorized[_wallet] = _status;\n    }\n\n    receive() external payable {}\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"contracts/Pool.sol":{"content":"//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract ReferalPool is Ownable {\n    enum ReferalLevels {\n        Basic,\n        Advanced,\n        Pro\n    }\n    struct Referals {\n        ReferalLevels level;\n        uint256 totalRewards;\n        uint256 claimedRewards;\n        uint256 lastClaimedAt;\n        uint256 lastRewardsAt;\n        address lastRewardFrom;\n        bool isAtMaxLevel;\n        uint256 referalCount;\n    }\n\n    struct TierStructure {\n        uint256 minReferals;\n        uint256 rewardPercentage;\n    }\n\n    uint256 constant DEVIDE_FACTOR = 10000;\n\n    address public superAdmin;\n    IERC20 public Token;\n\n    uint256 public totalRewardsSent;\n\n    mapping(ReferalLevels => TierStructure) public levelDetails;\n\n    mapping(address => Referals) public referalDetails;\n\n    mapping(address => address) public userReferal;\n\n    event NewReferalAdded(address referee, address referal);\n    event NewReferalBonusAdded(address from, address to, uint256 amount);\n\n    modifier onlySuper() {\n        require(\n            msg.sender == superAdmin,\n            \"Ownable: caller is not the Super admin\"\n        );\n        _;\n    }\n\n    constructor(address _superAdmin, address _token) {\n        TierStructure storage _level1 = levelDetails[ReferalLevels.Basic];\n        TierStructure storage _level2 = levelDetails[ReferalLevels.Advanced];\n        TierStructure storage _level3 = levelDetails[ReferalLevels.Pro];\n\n        _level1.minReferals = 1;\n        _level1.rewardPercentage = 100;\n\n        _level2.minReferals = 4;\n        _level2.rewardPercentage = 200;\n\n        _level3.minReferals = 7;\n        _level3.rewardPercentage = 300;\n\n        superAdmin = _superAdmin;\n        Token = IERC20(_token);\n    }\n\n    function setReferal(address _referal) external {\n        require(\n            userReferal[msg.sender] == address(0),\n            \"Referal address already set\"\n        );\n\n        require(msg.sender != _referal, \"Can not set own address\");\n\n        userReferal[msg.sender] = _referal;\n\n        Referals storage referal = referalDetails[_referal];\n\n        referal.referalCount++;\n\n        if (!referal.isAtMaxLevel) {\n            updateReferalLevel(_referal);\n        }\n\n        emit NewReferalAdded(msg.sender, _referal);\n    }\n\n    function setReferalBonus(\n        address from,\n        uint256 buyAmount\n    ) external onlyOwner {\n        if (userReferal[from] == address(0)) return;\n        Referals storage referal = referalDetails[userReferal[from]];\n        TierStructure memory tier = levelDetails[referal.level];\n\n        uint256 _bonus = (buyAmount * tier.rewardPercentage) / DEVIDE_FACTOR;\n\n        referal.lastRewardFrom = from;\n        referal.lastRewardsAt = block.timestamp;\n        referal.totalRewards += _bonus;\n\n        Token.transfer(userReferal[from], _bonus);\n\n        emit NewReferalBonusAdded(from, userReferal[from], _bonus);\n    }\n\n    function changeTiers(\n        ReferalLevels level,\n        uint256 newMinReferals,\n        uint256 newRewardPercentage\n    ) external onlySuper {\n        TierStructure storage tier = levelDetails[level];\n\n        // Check that the provided values are valid\n        require(newMinReferals > 0, \"Minimum referrals must be greater than 0\");\n        require(\n            newRewardPercentage > 0,\n            \"Reward percentage must be greater than 0\"\n        );\n\n        // Update the tier structure with the new values\n        tier.minReferals = newMinReferals;\n        tier.rewardPercentage = newRewardPercentage;\n    }\n\n    function updateReferalLevel(address _user) internal {\n        Referals storage referal = referalDetails[_user];\n\n        uint256 referalCount = referal.referalCount;\n        ReferalLevels newLevel;\n\n        if (referalCount >= levelDetails[ReferalLevels.Pro].minReferals) {\n            newLevel = ReferalLevels.Pro;\n        } else if (\n            referalCount >= levelDetails[ReferalLevels.Advanced].minReferals\n        ) {\n            newLevel = ReferalLevels.Advanced;\n        } else {\n            newLevel = ReferalLevels.Basic;\n        }\n\n        // Update the referral's level if it has changed\n        if (referal.level != newLevel) {\n            referal.level = newLevel;\n            if (newLevel == ReferalLevels.Pro) referal.isAtMaxLevel = true;\n        }\n    }\n\n    function claimRewards() external {\n        Referals storage referal = referalDetails[msg.sender];\n\n        require(referal.totalRewards > 0, \"you didn't start earning yet\");\n\n        uint256 claimabaleRewards = referal.totalRewards -\n            referal.claimedRewards;\n\n        require(claimabaleRewards > 0, \"you don't have any claiamble rewards\");\n\n        referal.claimedRewards += claimabaleRewards;\n\n        referal.lastClaimedAt = block.timestamp;\n        Token.transfer(msg.sender, claimabaleRewards);\n\n        totalRewardsSent += claimabaleRewards;\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedSafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SignedSafeMath {\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        return a + b;\n    }\n}\n"}},"settings":{"libraries":{},"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activatedAmount\",\"type\":\"uint256\"}],\"name\":\"RepellentFeeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disabledAmount\",\"type\":\"uint256\"}],\"name\":\"RepellentFeeDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initRebaseStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastAddLiquidityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_autoBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"changeNormalFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeRebaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_autoBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"changeRepellentBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_autoBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"changeRepellentSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeSwapPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLpLevel\",\"outputs\":[{\"internalType\":\"enum Stakify.LPLevels\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"enableSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBnbPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRepellentFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPCheckedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRepellentFeeActivatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRepellentFeeRecoveredAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpCheckFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Stakify.LPLevels\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lpRanges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recoverLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referalPool\",\"outputs\":[{\"internalType\":\"contract ReferalPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentBuyAutoBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentBuyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentBuyTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentBuyTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentFeeActivatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentFeeActivatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentFeeRecoverAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentSellAutoBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentSellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentSellTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentSellTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAuthorizedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryFeeWallet\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Stakify.LPLevels\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_drop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_recover\",\"type\":\"uint256\"}],\"name\":\"setLpRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThershold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Stakify","CompilerVersion":"v0.8.19+commit.7dd6d404","OptimizationUsed":1,"Runs":200,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}