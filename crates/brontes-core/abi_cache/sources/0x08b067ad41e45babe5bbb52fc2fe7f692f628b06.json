{"expiry":1699526945,"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/helpers/WethUnwrapper.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\npragma abicoder v1;\n\nimport \"@1inch/solidity-utils/contracts/OnlyWethReceiver.sol\";\nimport \"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\";\n\nimport \"../interfaces/IPostInteractionNotificationReceiver.sol\";\nimport \"../libraries/Errors.sol\";\n\ncontract WethUnwrapper is OnlyWethReceiver, IPostInteractionNotificationReceiver {\n    IWETH private immutable _WETH;  // solhint-disable-line var-name-mixedcase\n\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\n\n    constructor(IWETH weth) OnlyWethReceiver(address(weth)) {\n        _WETH = weth;\n    }\n\n    function fillOrderPostInteraction(\n        bytes32 /* orderHash */,\n        address maker,\n        address /* taker */,\n        uint256 /* makingAmount */,\n        uint256 takingAmount,\n        uint256 /* remainingMakerAmount */,\n        bytes calldata interactiveData\n    ) external override {\n        _WETH.withdraw(takingAmount);\n        address receiver = maker;\n        if (interactiveData.length == 20) {\n            receiver = address(bytes20(interactiveData));\n        }\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = receiver.call{value: takingAmount, gas: _RAW_CALL_GAS_LIMIT}(\"\");\n        if (!success) revert Errors.ETHTransferFailed();\n    }\n}\n"},"@1inch/solidity-utils/contracts/OnlyWethReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma abicoder v1;\n\nimport \"./EthReceiver.sol\";\n\nabstract contract OnlyWethReceiver is EthReceiver {\n    address private immutable _WETH; // solhint-disable-line var-name-mixedcase\n\n    constructor(address weth) {\n        _WETH = address(weth);\n    }\n\n    function _receive() internal virtual override {\n        if (msg.sender != _WETH) revert EthDepositRejected();\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@1inch/solidity-utils/contracts/EthReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma abicoder v1;\n\nabstract contract EthReceiver {\n    error EthDepositRejected();\n\n    receive() external payable {\n        _receive();\n    }\n\n    function _receive() internal virtual {\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin) revert EthDepositRejected();\n    }\n}\n"},"@1inch/solidity-utils/contracts/interfaces/IWETH.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}\n"},"contracts/interfaces/IPostInteractionNotificationReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\npragma abicoder v1;\n\n/**\n * @title Interface for interactor which acts after `taker -> maker` transfers.\n * @notice The order filling steps are `preInteraction` =>` Transfer \"maker -> taker\"` => `Interaction` => `Transfer \"taker -> maker\"` => **`postInteraction`**\n */\ninterface IPostInteractionNotificationReceiver {\n    /**\n     * @notice Callback method that gets called after all funds transfers\n     * @param orderHash Hash of the order being processed\n     * @param maker Maker address\n     * @param taker Taker address\n     * @param makingAmount Actual making amount\n     * @param takingAmount Actual taking amount\n     * @param remainingAmount Limit order remaining maker amount after the swap\n     * @param interactionData Interaction calldata\n     */\n    function fillOrderPostInteraction(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        uint256 remainingAmount,\n        bytes memory interactionData\n    ) external;\n}\n"},"contracts/libraries/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary Errors {\n    error InvalidMsgValue();\n    error ETHTransferFailed();\n}\n"}},"settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":1000000},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthDepositRejected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactiveData\",\"type\":\"bytes\"}],\"name\":\"fillOrderPostInteraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WethUnwrapper","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":1,"Runs":1000000,"ConstructorArguments":"0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}