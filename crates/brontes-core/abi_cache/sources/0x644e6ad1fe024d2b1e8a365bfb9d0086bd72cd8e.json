{"expiry":1699526807,"data":[{"SourceCode":{"language":"Solidity","sources":{"/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"},"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/multiplex/MultiplexRfq.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinEIP712.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"../interfaces/INativeOrdersFeature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\nabstract contract MultiplexRfq is\n    FixinEIP712\n{\n    using LibSafeMathV06 for uint256;\n\n    event ExpiredRfqOrder(\n        bytes32 orderHash,\n        address maker,\n        uint64 expiry\n    );\n\n    function _batchSellRfqOrder(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        // Decode the RFQ order and signature.\n        (\n            LibNativeOrder.RfqOrder memory order,\n            LibSignature.Signature memory signature\n        ) = abi.decode(\n            wrappedCallData,\n            (LibNativeOrder.RfqOrder, LibSignature.Signature)\n        );\n        // Pre-emptively check if the order is expired.\n        if (order.expiry <= uint64(block.timestamp)) {\n            bytes32 orderHash = _getEIP712Hash(\n                LibNativeOrder.getRfqOrderStructHash(order)\n            );\n            emit ExpiredRfqOrder(\n                orderHash,\n                order.maker,\n                order.expiry\n            );\n            return;\n        }\n        // Validate tokens.\n        require(\n            order.takerToken == params.inputToken &&\n            order.makerToken == params.outputToken,\n            \"MultiplexRfq::_batchSellRfqOrder/RFQ_ORDER_INVALID_TOKENS\"\n        );\n        // Try filling the RFQ order. Swallows reverts.\n        try\n            INativeOrdersFeature(address(this))._fillRfqOrder\n                (\n                    order,\n                    signature,\n                    sellAmount.safeDowncastToUint128(),\n                    msg.sender,\n                    params.useSelfBalance,\n                    params.recipient\n                )\n            returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n        {\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(takerTokenFilledAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(makerTokenFilledAmount);\n        } catch {}\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/external/ILiquidityProviderSandbox.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../vendor/ILiquidityProvider.sol\";\n\n\ninterface ILiquidityProviderSandbox {\n\n    /// @dev Calls `sellTokenForToken` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellTokenForToken(\n        ILiquidityProvider provider,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n\n    /// @dev Calls `sellEthForToken` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellEthForToken(\n        ILiquidityProvider provider,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n\n    /// @dev Calls `sellTokenForEth` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellTokenForEth(\n        ILiquidityProvider provider,\n        IERC20TokenV06 inputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibCommonRichErrors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n"},"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/fixins/FixinEIP712.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\n/// @dev EIP712 helpers for features.\nabstract contract FixinEIP712 {\n\n    /// @dev The domain hash separator for the entire exchange proxy.\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\n\n    constructor(address zeroExAddress) internal {\n        // Compute `EIP712_DOMAIN_SEPARATOR`\n        {\n            uint256 chainId;\n            assembly { chainId := chainid() }\n            EIP712_DOMAIN_SEPARATOR = keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(\"\n                            \"string name,\"\n                            \"string version,\"\n                            \"uint256 chainId,\"\n                            \"address verifyingContract\"\n                        \")\"\n                    ),\n                    keccak256(\"ZeroEx\"),\n                    keccak256(\"1.0.0\"),\n                    chainId,\n                    zeroExAddress\n                )\n            );\n        }\n    }\n\n    function _getEIP712Hash(bytes32 structHash)\n        internal\n        view\n        returns (bytes32 eip712Hash)\n    {\n        return keccak256(abi.encodePacked(\n            hex\"1901\",\n            EIP712_DOMAIN_SEPARATOR,\n            structHash\n        ));\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/interfaces/IMultiplexFeature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IMultiplexFeature {\n    // Identifies the type of subcall.\n    enum MultiplexSubcall {\n        Invalid,\n        RFQ,\n        OTC,\n        UniswapV2,\n        UniswapV3,\n        LiquidityProvider,\n        TransformERC20,\n        BatchSell,\n        MultiHopSell\n    }\n\n    // Parameters for a batch sell.\n    struct BatchSellParams {\n        // The token being sold.\n        IERC20TokenV06 inputToken;\n        // The token being bought.\n        IERC20TokenV06 outputToken;\n        // The amount of `inputToken` to sell.\n        uint256 sellAmount;\n        // The nested calls to perform.\n        BatchSellSubcall[] calls;\n        // Whether to use the Exchange Proxy's balance\n        // of input tokens.\n        bool useSelfBalance;\n        // The recipient of the bought output tokens.\n        address recipient;\n    }\n\n    // Represents a constituent call of a batch sell.\n    struct BatchSellSubcall {\n        // The function to call.\n        MultiplexSubcall id;\n        // Amount of input token to sell. If the highest bit is 1,\n        // this value represents a proportion of the total\n        // `sellAmount` of the batch sell. See `_normalizeSellAmount`\n        // for details.\n        uint256 sellAmount;\n        // ABI-encoded parameters needed to perform the call.\n        bytes data;\n    }\n\n    // Parameters for a multi-hop sell.\n    struct MultiHopSellParams {\n        // The sell path, i.e.\n        // tokens = [inputToken, hopToken1, ..., hopTokenN, outputToken]\n        address[] tokens;\n        // The amount of `tokens[0]` to sell.\n        uint256 sellAmount;\n        // The nested calls to perform.\n        MultiHopSellSubcall[] calls;\n        // Whether to use the Exchange Proxy's balance\n        // of input tokens.\n        bool useSelfBalance;\n        // The recipient of the bought output tokens.\n        address recipient;\n    }\n\n    // Represents a constituent call of a multi-hop sell.\n    struct MultiHopSellSubcall {\n        // The function to call.\n        MultiplexSubcall id;\n        // ABI-encoded parameters needed to perform the call.\n        bytes data;\n    }\n\n    struct BatchSellState {\n        // Tracks the amount of input token sold.\n        uint256 soldAmount;\n        // Tracks the amount of output token bought.\n        uint256 boughtAmount;\n    }\n\n    struct MultiHopSellState {\n        // This variable is used for the input and output amounts of\n        // each hop. After the final hop, this will contain the output\n        // amount of the multi-hop sell.\n        uint256 outputTokenAmount;\n        // For each hop in a multi-hop sell, `from` is the\n        // address that holds the input tokens of the hop,\n        // `to` is the address that receives the output tokens\n        // of the hop.\n        // See `_computeHopTarget` for details.\n        address from;\n        address to;\n        // The index of the current hop in the multi-hop chain.\n        uint256 hopIndex;\n    }\n\n    /// @dev Sells attached ETH for `outputToken` using the provided\n    ///      calls.\n    /// @param outputToken The token to buy.\n    /// @param calls The calls to use to sell the attached ETH.\n    /// @param minBuyAmount The minimum amount of `outputToken` that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function multiplexBatchSellEthForToken(\n        IERC20TokenV06 outputToken,\n        BatchSellSubcall[] calldata calls,\n        uint256 minBuyAmount\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellAmount` of the given `inputToken` for ETH\n    ///      using the provided calls.\n    /// @param inputToken The token to sell.\n    /// @param calls The calls to use to sell the input tokens.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of ETH that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of ETH bought.\n    function multiplexBatchSellTokenForEth(\n        IERC20TokenV06 inputToken,\n        BatchSellSubcall[] calldata calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellAmount` of the given `inputToken` for\n    ///      `outputToken` using the provided calls.\n    /// @param inputToken The token to sell.\n    /// @param outputToken The token to buy.\n    /// @param calls The calls to use to sell the input tokens.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of `outputToken`\n    ///        that must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function multiplexBatchSellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        BatchSellSubcall[] calldata calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells attached ETH via the given sequence of tokens\n    ///      and calls. `tokens[0]` must be WETH.\n    ///      The last token in `tokens` is the output token that\n    ///      will ultimately be sent to `msg.sender`\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function multiplexMultiHopSellEthForToken(\n        address[] calldata tokens,\n        MultiHopSellSubcall[] calldata calls,\n        uint256 minBuyAmount\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellAmount` of the input token (`tokens[0]`)\n    ///      for ETH via the given sequence of tokens and calls.\n    ///      The last token in `tokens` must be WETH.\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param minBuyAmount The minimum amount of ETH that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of ETH bought.\n    function multiplexMultiHopSellTokenForEth(\n        address[] calldata tokens,\n        MultiHopSellSubcall[] calldata calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellAmount` of the input token (`tokens[0]`)\n    ///      via the given sequence of tokens and calls.\n    ///      The last token in `tokens` is the output token that\n    ///      will ultimately be sent to `msg.sender`\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function multiplexMultiHopSellTokenForToken(\n        address[] calldata tokens,\n        MultiHopSellSubcall[] calldata calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        // Revert if the call reverted.\n        if (!didSucceed) {\n            LibRichErrorsV06.rrevert(resultData);\n        }\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\n        // does not return a boolean. Check that it at least contains code.\n        if (resultData.length == 0) {\n            uint256 size;\n            assembly { size := extcodesize(target) }\n            require(size > 0, \"invalid token address, contains no code\");\n            return;\n        }\n        // If we get back at least 32 bytes, we know the target address\n        // contains code, and we assume it is a token that returned a boolean\n        // success value, which must be true.\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return;\n            } else {\n                LibRichErrorsV06.rrevert(resultData);\n            }\n        }\n        // If 0 < returndatasize < 32, the target is a contract, but not a\n        // valid token.\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/libs/LibSignature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibSignatureRichErrors.sol\";\n\n\n/// @dev A library for validating signatures.\nlibrary LibSignature {\n    using LibRichErrorsV06 for bytes;\n\n    // '\\x19Ethereum Signed Message:\\n32\\x00\\x00\\x00\\x00' in a word.\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\n    ///      The valid range is given by fig (282) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\n    ///      The valid range is given by fig (283) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Retrieve the signer of a signature.\n    ///      Throws if the signature can't be validated.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    /// @return recovered The recovered signer address.\n    function getSignerOfHash(\n        bytes32 hash,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address recovered)\n    {\n        // Ensure this is a signature type that can be validated against a hash.\n        _validateHashCompatibleSignature(hash, signature);\n\n        if (signature.signatureType == SignatureType.EIP712) {\n            // Signed using EIP712\n            recovered = ecrecover(\n                hash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n            // Signed using `eth_sign`\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n            // in packed encoding.\n            bytes32 ethSignHash;\n            assembly {\n                // Use scratch space\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n                mstore(28, hash) // length of 32 bytes\n                ethSignHash := keccak256(0, 60)\n            }\n            recovered = ecrecover(\n                ethSignHash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        }\n        // `recovered` can be null if the signature values are out of range.\n        if (recovered == address(0)) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n    }\n\n    /// @dev Validates that a signature is compatible with a hash signee.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    function _validateHashCompatibleSignature(\n        bytes32 hash,\n        Signature memory signature\n    )\n        private\n        pure\n    {\n        // Ensure the r and s are within malleability limits.\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\n        {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n\n        // Always illegal signature.\n        if (signature.signatureType == SignatureType.ILLEGAL) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n                hash\n            ).rrevert();\n        }\n\n        // Always invalid.\n        if (signature.signatureType == SignatureType.INVALID) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n                hash\n            ).rrevert();\n        }\n\n        // Solidity should check that the signature type is within enum range for us\n        // when abi-decoding.\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/multiplex/MultiplexTransformERC20.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"../interfaces/ITransformERC20Feature.sol\";\n\n\nabstract contract MultiplexTransformERC20 {\n\n    using LibSafeMathV06 for uint256;\n\n    function _batchSellTransformERC20(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        ITransformERC20Feature.TransformERC20Args memory args;\n        // We want the TransformedERC20 event to have\n        // `msg.sender` as the taker.\n        args.taker = msg.sender;\n        args.inputToken = params.inputToken;\n        args.outputToken = params.outputToken;\n        args.inputTokenAmount = sellAmount;\n        args.minOutputTokenAmount = 0;\n        args.useSelfBalance = params.useSelfBalance;\n        args.recipient = payable(params.recipient);\n        (args.transformations) = abi.decode(\n            wrappedCallData,\n            (ITransformERC20Feature.Transformation[])\n        );\n        // Execute the transformations and swallow reverts.\n        try ITransformERC20Feature(address(this))._transformERC20\n            (args)\n            returns (uint256 outputTokenAmount)\n        {\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(outputTokenAmount);\n        } catch {}\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/interfaces/IOwnableFeature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n"},"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/interfaces/IOtcOrdersFeature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibNativeOrder.sol\";\nimport \"../libs/LibSignature.sol\";\n\n\n/// @dev Feature for interacting with OTC orders.\ninterface IOtcOrdersFeature {\n\n    /// @dev Emitted whenever an `OtcOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    event OtcOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFilledAmount\n    );\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Unwraps bought WETH into ETH before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderForEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an OTC order whose taker token is WETH for up\n    ///      to `msg.value`.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderWithEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        LibSignature.Signature calldata takerSignature\n    )\n        external;\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    ///      Unwraps bought WETH into ETH before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrderForEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        LibSignature.Signature calldata takerSignature\n    )\n        external;\n\n    /// @dev Fills multiple taker-signed OTC orders.\n    /// @param orders Array of OTC orders.\n    /// @param makerSignatures Array of maker signatures for each order.\n    /// @param takerSignatures Array of taker signatures for each order.\n    /// @param unwrapWeth Array of booleans representing whether or not \n    ///        to unwrap bought WETH into ETH for each order. Should be set \n    ///        to false if the maker token is not WETH.\n    /// @return successes Array of booleans representing whether or not\n    ///         each order in `orders` was filled successfully.\n    function batchFillTakerSignedOtcOrders(\n        LibNativeOrder.OtcOrder[] calldata orders,\n        LibSignature.Signature[] calldata makerSignatures,\n        LibSignature.Signature[] calldata takerSignatures,\n        bool[] calldata unwrapWeth\n    )\n        external\n        returns (bool[] memory successes);\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Internal variant.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @param taker The address to fill the order in the context of.\n    /// @param useSelfBalance Whether to use the Exchange Proxy's balance\n    ///        of input tokens.\n    /// @param recipient The recipient of the bought maker tokens.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Get the order info for an OTC order.\n    /// @param order The OTC order.\n    /// @return orderInfo Info about the order.\n    function getOtcOrderInfo(LibNativeOrder.OtcOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OtcOrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return orderHash The order hash.\n    function getOtcOrderHash(LibNativeOrder.OtcOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the last nonce used for a particular\n    ///      tx.origin address and nonce bucket.\n    /// @param txOrigin The address.\n    /// @param nonceBucket The nonce bucket index.\n    /// @return lastNonce The last nonce value used.\n    function lastOtcTxOriginNonce(address txOrigin, uint64 nonceBucket)\n        external\n        view\n        returns (uint128 lastNonce);\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/external/IFlashWallet.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n/// @dev A contract that can execute arbitrary calls from its owner.\ninterface IFlashWallet {\n\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @param value Ether to attach to the call.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData,\n        uint256 value\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\n    ///      Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeDelegateCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Allows the puppet to receive ETH.\n    receive() external payable;\n\n    /// @dev Fetch the immutable owner/deployer of this contract.\n    /// @return owner_ The immutable owner/deployer/\n    function owner() external view returns (address owner_);\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/interfaces/IUniswapV3Feature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev VIP uniswap v3 fill functions.\ninterface IUniswapV3Feature {\n\n    /// @dev Sell attached ETH directly against uniswap v3.\n    /// @param encodedPath Uniswap-encoded path, where the first token is WETH.\n    /// @param minBuyAmount Minimum amount of the last token in the path to buy.\n    /// @param recipient The recipient of the bought tokens. Can be zero for sender.\n    /// @return buyAmount Amount of the last token in the path bought.\n    function sellEthForTokenToUniswapV3(\n        bytes memory encodedPath,\n        uint256 minBuyAmount,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 buyAmount);\n\n    /// @dev Sell a token for ETH directly against uniswap v3.\n    /// @param encodedPath Uniswap-encoded path, where the last token is WETH.\n    /// @param sellAmount amount of the first token in the path to sell.\n    /// @param minBuyAmount Minimum amount of ETH to buy.\n    /// @param recipient The recipient of the bought tokens. Can be zero for sender.\n    /// @return buyAmount Amount of ETH bought.\n    function sellTokenForEthToUniswapV3(\n        bytes memory encodedPath,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        address payable recipient\n    )\n        external\n        returns (uint256 buyAmount);\n\n    /// @dev Sell a token for another token directly against uniswap v3.\n    /// @param encodedPath Uniswap-encoded path.\n    /// @param sellAmount amount of the first token in the path to sell.\n    /// @param minBuyAmount Minimum amount of the last token in the path to buy.\n    /// @param recipient The recipient of the bought tokens. Can be zero for sender.\n    /// @return buyAmount Amount of the last token in the path bought.\n    function sellTokenForTokenToUniswapV3(\n        bytes memory encodedPath,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        address recipient\n    )\n        external\n        returns (uint256 buyAmount);\n\n    /// @dev Sell a token for another token directly against uniswap v3.\n    ///      Private variant, uses tokens held by `address(this)`.\n    /// @param encodedPath Uniswap-encoded path.\n    /// @param sellAmount amount of the first token in the path to sell.\n    /// @param minBuyAmount Minimum amount of the last token in the path to buy.\n    /// @param recipient The recipient of the bought tokens. Can be zero for sender.\n    /// @return buyAmount Amount of the last token in the path bought.\n    function _sellHeldTokenForTokenToUniswapV3(\n        bytes memory encodedPath,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        address recipient\n    )\n        external\n        returns (uint256 buyAmount);\n\n    /// @dev The UniswapV3 pool swap callback which pays the funds requested\n    ///      by the caller/pool to the pool. Can only be called by a valid\n    ///      UniswapV3 pool.\n    /// @param amount0Delta Token0 amount owed.\n    /// @param amount1Delta Token1 amount owed.\n    /// @param data Arbitrary data forwarded from swap() caller. An ABI-encoded\n    ///        struct of: inputToken, outputToken, fee, payer\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    )\n        external;\n}\n"},"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/migrations/LibMigrate.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/fixins/FixinTokenSpender.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\n/// @dev Helpers for moving tokens around.\nabstract contract FixinTokenSpender {\n\n    // Mask of the lower 20 bytes of a bytes32.\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20TokensFrom(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transferFrom(address,address,uint256)\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x44), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x64,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Transfers ERC20 tokens from ourselves to `to`.\n    /// @param token The token to spend.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20Tokens(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transfer(address,uint256)\n            mstore(ptr, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x44,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner` by this address.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function _getSpendableERC20BalanceOf(\n        IERC20TokenV06 token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return LibSafeMathV06.min256(\n            token.allowance(owner, address(this)),\n            token.balanceOf(owner)\n        );\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/libs/LibNativeOrder.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\n\n\n/// @dev A library for common native order operations.\nlibrary LibNativeOrder {\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An OTC limit order.\n    struct OtcOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        uint256 expiryAndNonce; // [uint64 expiry, uint64 nonceBucket, uint128 nonce]\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Info on an OTC order.\n    struct OtcOrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n    }\n\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\n\n    // The type hash for limit orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"LimitOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"uint128 takerTokenFeeAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address sender,\",\n    //       \"address feeRecipient,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\n\n    // The type hash for RFQ orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"RfqOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\n\n    // The type hash for OTC orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"OtcOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"uint256 expiryAndNonce\"\n    //     \")\"\n    // ))\n    uint256 private constant _OTC_ORDER_TYPEHASH =\n        0x2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c8;\n\n    /// @dev Get the struct hash of a limit order.\n    /// @param order The limit order.\n    /// @return structHash The struct hash of the order.\n    function getLimitOrderStructHash(LimitOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.takerTokenFeeAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.sender,\n        //   order.feeRecipient,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.takerTokenFeeAmount;\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\n            // order.maker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.taker;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.sender;\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\n            // order.feeRecipient;\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\n            // order.pool;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            // order.expiry;\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\n            // order.salt;\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\n            structHash := keccak256(mem, 0x1A0)\n        }\n    }\n\n    /// @dev Get the struct hash of a RFQ order.\n    /// @param order The RFQ order.\n    /// @return structHash The struct hash of the order.\n    function getRfqOrderStructHash(RfqOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.pool;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            // order.expiry;\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\n            // order.salt;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            structHash := keccak256(mem, 0x160)\n        }\n    }\n\n    /// @dev Get the struct hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return structHash The struct hash of the order.\n    function getOtcOrderStructHash(OtcOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.expiryAndNonce,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _OTC_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.expiryAndNonce;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            structHash := keccak256(mem, 0x120)\n        }\n    }\n\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\n        internal\n    {\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\n            (bool success,) = msg\n                .sender\n                .call{value: refundAmount}(\"\");\n            if (!success) {\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\n                    msg.sender,\n                    refundAmount\n                ).rrevert();\n            }\n        }\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/interfaces/ITransformERC20Feature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../../transformers/IERC20Transformer.sol\";\nimport \"../../external/IFlashWallet.sol\";\n\n\n/// @dev Feature to composably transform between ERC20 tokens.\ninterface ITransformERC20Feature {\n\n    /// @dev Defines a transformation to run in `transformERC20()`.\n    struct Transformation {\n        // The deployment nonce for the transformer.\n        // The address of the transformer contract will be derived from this\n        // value.\n        uint32 deploymentNonce;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Arguments for `_transformERC20()`.\n    struct TransformERC20Args {\n        // The taker address.\n        address payable taker;\n        // The token being provided by the taker.\n        // If `0xeee...`, ETH is implied and should be provided with the call.`\n        IERC20TokenV06 inputToken;\n        // The token to be acquired by the taker.\n        // `0xeee...` implies ETH.\n        IERC20TokenV06 outputToken;\n        // The amount of `inputToken` to take from the taker.\n        // If set to `uint256(-1)`, the entire spendable balance of the taker\n        // will be solt.\n        uint256 inputTokenAmount;\n        // The minimum amount of `outputToken` the taker\n        // must receive for the entire transformation to succeed. If set to zero,\n        // the minimum output token transfer will not be asserted.\n        uint256 minOutputTokenAmount;\n        // The transformations to execute on the token balance(s)\n        // in sequence.\n        Transformation[] transformations;\n        // Whether to use the Exchange Proxy's balance of `inputToken`.\n        bool useSelfBalance;\n        // The recipient of the bought `outputToken`.\n        address payable recipient;\n    }\n\n    /// @dev Raised upon a successful `transformERC20`.\n    /// @param taker The taker (caller) address.\n    /// @param inputToken The token being provided by the taker.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the taker.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\n    /// @param outputTokenAmount The amount of `outputToken` received by the taker.\n    event TransformedERC20(\n        address indexed taker,\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    /// @dev Raised when `setTransformerDeployer()` is called.\n    /// @param transformerDeployer The new deployer address.\n    event TransformerDeployerUpdated(address transformerDeployer);\n\n    /// @dev Raised when `setQuoteSigner()` is called.\n    /// @param quoteSigner The new quote signer.\n    event QuoteSignerUpdated(address quoteSigner);\n\n    /// @dev Replace the allowed deployer for transformers.\n    ///      Only callable by the owner.\n    /// @param transformerDeployer The address of the new trusted deployer\n    ///        for transformers.\n    function setTransformerDeployer(address transformerDeployer)\n        external;\n\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\n    ///      Only callable by the owner.\n    /// @param quoteSigner The address of the new calldata signer.\n    function setQuoteSigner(address quoteSigner)\n        external;\n\n    /// @dev Deploy a new flash wallet instance and replace the current one with it.\n    ///      Useful if we somehow break the current wallet instance.\n    ///       Only callable by the owner.\n    /// @return wallet The new wallet instance.\n    function createTransformWallet()\n        external\n        returns (IFlashWallet wallet);\n\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\n    ///      to an ERC20 `outputToken`.\n    /// @param inputToken The token being provided by the sender.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the sender.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\n    ///        must receive for the entire transformation to succeed.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\n    function transformERC20(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] calldata transformations\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\n    /// @param args A `TransformERC20Args` struct.\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\n    function _transformERC20(TransformERC20Args calldata args)\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Return the current wallet instance that will serve as the execution\n    ///      context for transformations.\n    /// @return wallet The wallet instance.\n    function getTransformWallet()\n        external\n        view\n        returns (IFlashWallet wallet);\n\n    /// @dev Return the allowed deployer for transformers.\n    /// @return deployer The transform deployer address.\n    function getTransformerDeployer()\n        external\n        view\n        returns (address deployer);\n\n    /// @dev Return the optional signer for `transformERC20()` calldata.\n    /// @return signer The transform deployer address.\n    function getQuoteSigner()\n        external\n        view\n        returns (address signer);\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/multiplex/MultiplexUniswapV2.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinCommon.sol\";\nimport \"../../fixins/FixinTokenSpender.sol\";\nimport \"../../vendor/IUniswapV2Pair.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\n\n\nabstract contract MultiplexUniswapV2 is\n    FixinCommon,\n    FixinTokenSpender\n{\n    using LibSafeMathV06 for uint256;\n\n    // address of the UniswapV2Factory contract.\n    address private immutable UNISWAP_FACTORY;\n    // address of the (Sushiswap) UniswapV2Factory contract.\n    address private immutable SUSHISWAP_FACTORY;\n    // Init code hash of the UniswapV2Pair contract.\n    bytes32 private immutable UNISWAP_PAIR_INIT_CODE_HASH;\n    // Init code hash of the (Sushiswap) UniswapV2Pair contract.\n    bytes32 private immutable SUSHISWAP_PAIR_INIT_CODE_HASH;\n\n    constructor(\n        address uniswapFactory,\n        address sushiswapFactory,\n        bytes32 uniswapPairInitCodeHash,\n        bytes32 sushiswapPairInitCodeHash\n    )\n        internal\n    {\n        UNISWAP_FACTORY = uniswapFactory;\n        SUSHISWAP_FACTORY = sushiswapFactory;\n        UNISWAP_PAIR_INIT_CODE_HASH = uniswapPairInitCodeHash;\n        SUSHISWAP_PAIR_INIT_CODE_HASH = sushiswapPairInitCodeHash;\n    }\n\n    // A payable external function that we can delegatecall to\n    // swallow reverts and roll back the input token transfer.\n    function _batchSellUniswapV2External(\n        IMultiplexFeature.BatchSellParams calldata params,\n        bytes calldata wrappedCallData,\n        uint256 sellAmount\n    )\n        external\n        payable\n        returns (uint256 boughtAmount)\n    {\n        // Revert is not a delegatecall.\n        require(\n            address(this) != _implementation,\n            \"MultiplexLiquidityProvider::_batchSellUniswapV2External/ONLY_DELEGATECALL\"\n        );\n\n        (address[] memory tokens, bool isSushi) = abi.decode(\n            wrappedCallData,\n            (address[], bool)\n        );\n        // Validate tokens\n        require(\n            tokens.length >= 2 &&\n            tokens[0] == address(params.inputToken) &&\n            tokens[tokens.length - 1] == address(params.outputToken),\n            \"MultiplexUniswapV2::_batchSellUniswapV2/INVALID_TOKENS\"\n        );\n        // Compute the address of the first Uniswap pair\n        // contract that will execute a swap.\n        address firstPairAddress = _computeUniswapPairAddress(\n            tokens[0],\n            tokens[1],\n            isSushi\n        );\n        // `_sellToUniswapV2` assumes the input tokens have been\n        // transferred into the pair contract before it is called,\n        // so we transfer the tokens in now (either from `msg.sender`\n        // or using the Exchange Proxy's balance).\n        if (params.useSelfBalance) {\n            _transferERC20Tokens(\n                IERC20TokenV06(tokens[0]),\n                firstPairAddress,\n                sellAmount\n            );\n        } else {\n            _transferERC20TokensFrom(\n                IERC20TokenV06(tokens[0]),\n                msg.sender,\n                firstPairAddress,\n                sellAmount\n            );\n        }\n        // Execute the Uniswap/Sushiswap trade.\n        return _sellToUniswapV2(\n            tokens,\n            sellAmount,\n            isSushi,\n            firstPairAddress,\n            params.recipient\n        );\n    }\n\n    function _batchSellUniswapV2(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        // Swallow reverts\n        (bool success, bytes memory resultData) = _implementation.delegatecall(\n            abi.encodeWithSelector(\n                this._batchSellUniswapV2External.selector,\n                params,\n                wrappedCallData,\n                sellAmount\n            )\n        );\n        if (success) {\n            // Decode the output token amount on success.\n            uint256 boughtAmount = abi.decode(resultData, (uint256));\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(boughtAmount);\n        }\n    }\n\n    function _multiHopSellUniswapV2(\n        IMultiplexFeature.MultiHopSellState memory state,\n        IMultiplexFeature.MultiHopSellParams memory params,\n        bytes memory wrappedCallData\n    )\n        internal\n    {\n        (address[] memory tokens, bool isSushi) = abi.decode(\n            wrappedCallData,\n            (address[], bool)\n        );\n        // Validate the tokens\n        require(\n            tokens.length >= 2 &&\n            tokens[0] == params.tokens[state.hopIndex] &&\n            tokens[tokens.length - 1] == params.tokens[state.hopIndex + 1],\n            \"MultiplexUniswapV2::_multiHopSellUniswapV2/INVALID_TOKENS\"\n        );\n        // Execute the Uniswap/Sushiswap trade.\n        state.outputTokenAmount = _sellToUniswapV2(\n            tokens,\n            state.outputTokenAmount,\n            isSushi,\n            state.from,\n            state.to\n        );\n    }\n\n    function _sellToUniswapV2(\n        address[] memory tokens,\n        uint256 sellAmount,\n        bool isSushi,\n        address pairAddress,\n        address recipient\n    )\n        private\n        returns (uint256 outputTokenAmount)\n    {\n        // Iterate through `tokens` perform a swap against the Uniswap\n        // pair contract for each `(tokens[i], tokens[i+1])`.\n        for (uint256 i = 0; i < tokens.length - 1; i++) {\n            (address inputToken, address outputToken) = (tokens[i], tokens[i + 1]);\n            // Compute the output token amount\n            outputTokenAmount = _computeUniswapOutputAmount(\n                pairAddress,\n                inputToken,\n                outputToken,\n                sellAmount\n            );\n            (uint256 amount0Out, uint256 amount1Out) = inputToken < outputToken\n                ? (uint256(0), outputTokenAmount)\n                : (outputTokenAmount, uint256(0));\n            // The Uniswap pair contract will transfer the output tokens to\n            // the next pair contract if there is one, otherwise transfer to\n            // `recipient`.\n            address to = i < tokens.length - 2\n                ? _computeUniswapPairAddress(outputToken, tokens[i + 2], isSushi)\n                : recipient;\n            // Execute the swap.\n            IUniswapV2Pair(pairAddress).swap(\n                amount0Out,\n                amount1Out,\n                to,\n                new bytes(0)\n            );\n            // To avoid recomputing the pair address of the next pair, store\n            // `to` in `pairAddress`.\n            pairAddress = to;\n            // The outputTokenAmount\n            sellAmount = outputTokenAmount;\n        }\n    }\n\n    // Computes the Uniswap/Sushiswap pair contract address for the\n    // given tokens.\n    function _computeUniswapPairAddress(\n        address tokenA,\n        address tokenB,\n        bool isSushi\n    )\n        internal\n        view\n        returns (address pairAddress)\n    {\n        // Tokens are lexicographically sorted in the Uniswap contract.\n        (address token0, address token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        if (isSushi) {\n            // Use the Sushiswap factory address and codehash\n            return address(uint256(keccak256(abi.encodePacked(\n                hex'ff',\n                SUSHISWAP_FACTORY,\n                keccak256(abi.encodePacked(token0, token1)),\n                SUSHISWAP_PAIR_INIT_CODE_HASH\n            ))));\n        } else {\n            // Use the Uniswap factory address and codehash\n            return address(uint256(keccak256(abi.encodePacked(\n                hex'ff',\n                UNISWAP_FACTORY,\n                keccak256(abi.encodePacked(token0, token1)),\n                UNISWAP_PAIR_INIT_CODE_HASH\n            ))));\n        }\n    }\n\n    // Computes the the amount of output token that would be bought\n    // from Uniswap/Sushiswap given the input amount.\n    function _computeUniswapOutputAmount(\n        address pairAddress,\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount)\n    {\n        // Input amount should be non-zero.\n        require(\n            inputAmount > 0,\n            \"MultiplexUniswapV2::_computeUniswapOutputAmount/INSUFFICIENT_INPUT_AMOUNT\"\n        );\n        // Query the reserves of the pair contract.\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pairAddress).getReserves();\n        // Reserves must be non-zero.\n        require(\n            reserve0 > 0 && reserve1 > 0,\n            'MultiplexUniswapV2::_computeUniswapOutputAmount/INSUFFICIENT_LIQUIDITY'\n        );\n        // Tokens are lexicographically sorted in the Uniswap contract.\n        (uint256 inputReserve, uint256 outputReserve) = inputToken < outputToken\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        // Compute the output amount.\n        uint256 inputAmountWithFee = inputAmount.safeMul(997);\n        uint256 numerator = inputAmountWithFee.safeMul(outputReserve);\n        uint256 denominator = inputReserve.safeMul(1000).safeAdd(inputAmountWithFee);\n        return numerator / denominator;\n    }\n}\n"},"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/vendor/IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.12;\n\n\ninterface IUniswapV2Pair {\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n\n    function swap(\n        uint amount0Out,\n        uint amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/transformers/IERC20Transformer.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\ninterface IERC20Transformer {\n\n    /// @dev Context information to pass into `transform()` by `TransformERC20.transformERC20()`.\n    struct TransformContext {\n        // The caller of `TransformERC20.transformERC20()`.\n        address payable sender;\n        // The recipient address, which may be distinct from `sender` e.g. in\n        // meta-transactions.\n        address payable recipient;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\n    ///      delegatecalled in the context of the FlashWallet instance being used.\n    /// @param context Context information.\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(TransformContext calldata context)\n        external\n        returns (bytes4 success);\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/interfaces/ISimpleFunctionRegistryFeature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/multiplex/MultiplexOtc.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinEIP712.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"../interfaces/IOtcOrdersFeature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\nabstract contract MultiplexOtc is\n    FixinEIP712\n{\n    using LibSafeMathV06 for uint256;\n\n    event ExpiredOtcOrder(\n        bytes32 orderHash,\n        address maker,\n        uint64 expiry\n    );\n\n    function _batchSellOtcOrder(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        // Decode the Otc order and signature.\n        (\n            LibNativeOrder.OtcOrder memory order,\n            LibSignature.Signature memory signature\n        ) = abi.decode(\n            wrappedCallData,\n            (LibNativeOrder.OtcOrder, LibSignature.Signature)\n        );\n        // Validate tokens.\n        require(\n            order.takerToken == params.inputToken &&\n            order.makerToken == params.outputToken,\n            \"MultiplexOtc::_batchSellOtcOrder/OTC_ORDER_INVALID_TOKENS\"\n        );\n        // Pre-emptively check if the order is expired.\n        uint64 expiry = uint64(order.expiryAndNonce >> 192);\n        if (expiry <= uint64(block.timestamp)) {\n            bytes32 orderHash = _getEIP712Hash(\n                LibNativeOrder.getOtcOrderStructHash(order)\n            );\n            emit ExpiredOtcOrder(\n                orderHash,\n                order.maker,\n                expiry\n            );\n            return;\n        }\n        // Try filling the Otc order. Swallows reverts.\n        try\n            IOtcOrdersFeature(address(this))._fillOtcOrder\n                (\n                    order,\n                    signature,\n                    sellAmount.safeDowncastToUint128(),\n                    msg.sender,\n                    params.useSelfBalance,\n                    params.recipient\n                )\n            returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n        {\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(takerTokenFilledAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(makerTokenFilledAmount);\n        } catch {}\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/multiplex/MultiplexFeature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../external/ILiquidityProviderSandbox.sol\";\nimport \"../../fixins/FixinCommon.sol\";\nimport \"../../fixins/FixinEIP712.sol\";\nimport \"../../migrations/LibMigrate.sol\";\nimport \"../interfaces/IFeature.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"./MultiplexLiquidityProvider.sol\";\nimport \"./MultiplexOtc.sol\";\nimport \"./MultiplexRfq.sol\";\nimport \"./MultiplexTransformERC20.sol\";\nimport \"./MultiplexUniswapV2.sol\";\nimport \"./MultiplexUniswapV3.sol\";\n\n\n/// @dev This feature enables efficient batch and multi-hop trades\n///      using different liquidity sources.\ncontract MultiplexFeature is\n    IFeature,\n    IMultiplexFeature,\n    FixinCommon,\n    MultiplexLiquidityProvider,\n    MultiplexOtc,\n    MultiplexRfq,\n    MultiplexTransformERC20,\n    MultiplexUniswapV2,\n    MultiplexUniswapV3\n{\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"MultiplexFeature\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(2, 0, 0);\n    /// @dev The highest bit of a uint256 value.\n    uint256 private constant HIGH_BIT = 2 ** 255;\n    /// @dev Mask of the lower 255 bits of a uint256 value.\n    uint256 private constant LOWER_255_BITS = HIGH_BIT - 1;\n\n    /// @dev The WETH token contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(\n        address zeroExAddress,\n        IEtherTokenV06 weth,\n        ILiquidityProviderSandbox sandbox,\n        address uniswapFactory,\n        address sushiswapFactory,\n        bytes32 uniswapPairInitCodeHash,\n        bytes32 sushiswapPairInitCodeHash\n    )\n        public\n        FixinEIP712(zeroExAddress)\n        MultiplexLiquidityProvider(sandbox)\n        MultiplexUniswapV2(\n            uniswapFactory,\n            sushiswapFactory,\n            uniswapPairInitCodeHash,\n            sushiswapPairInitCodeHash\n        )\n    {\n        WETH = weth;\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.multiplexBatchSellEthForToken.selector);\n        _registerFeatureFunction(this.multiplexBatchSellTokenForEth.selector);\n        _registerFeatureFunction(this.multiplexBatchSellTokenForToken.selector);\n        _registerFeatureFunction(this.multiplexMultiHopSellEthForToken.selector);\n        _registerFeatureFunction(this.multiplexMultiHopSellTokenForEth.selector);\n        _registerFeatureFunction(this.multiplexMultiHopSellTokenForToken.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Sells attached ETH for `outputToken` using the provided\n    ///      calls.\n    /// @param outputToken The token to buy.\n    /// @param calls The calls to use to sell the attached ETH.\n    /// @param minBuyAmount The minimum amount of `outputToken` that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function multiplexBatchSellEthForToken(\n        IERC20TokenV06 outputToken,\n        BatchSellSubcall[] memory calls,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        payable\n        returns (uint256 boughtAmount)\n    {\n        // Wrap ETH.\n        WETH.deposit{value: msg.value}();\n        // WETH is now held by this contract,\n        // so `useSelfBalance` is true.\n        return _multiplexBatchSell(\n            BatchSellParams({\n                inputToken: WETH,\n                outputToken: outputToken,\n                sellAmount: msg.value,\n                calls: calls,\n                useSelfBalance: true,\n                recipient: msg.sender\n            }),\n            minBuyAmount\n        );\n    }\n\n    /// @dev Sells `sellAmount` of the given `inputToken` for ETH\n    ///      using the provided calls.\n    /// @param inputToken The token to sell.\n    /// @param calls The calls to use to sell the input tokens.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of ETH that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of ETH bought.\n    function multiplexBatchSellTokenForEth(\n        IERC20TokenV06 inputToken,\n        BatchSellSubcall[] memory calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        returns (uint256 boughtAmount)\n    {\n        // The outputToken is implicitly WETH. The `recipient`\n        // of the WETH is set to  this contract, since we\n        // must unwrap the WETH and transfer the resulting ETH.\n        boughtAmount = _multiplexBatchSell(\n            BatchSellParams({\n                inputToken: inputToken,\n                outputToken: WETH,\n                sellAmount: sellAmount,\n                calls: calls,\n                useSelfBalance: false,\n                recipient: address(this)\n            }),\n            minBuyAmount\n        );\n        // Unwrap WETH.\n        WETH.withdraw(boughtAmount);\n        // Transfer ETH to `msg.sender`.\n        _transferEth(msg.sender, boughtAmount);\n    }\n\n    /// @dev Sells `sellAmount` of the given `inputToken` for\n    ///      `outputToken` using the provided calls.\n    /// @param inputToken The token to sell.\n    /// @param outputToken The token to buy.\n    /// @param calls The calls to use to sell the input tokens.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of `outputToken`\n    ///        that must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function multiplexBatchSellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        BatchSellSubcall[] memory calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        returns (uint256 boughtAmount)\n    {\n        return _multiplexBatchSell(\n            BatchSellParams({\n                inputToken: inputToken,\n                outputToken: outputToken,\n                sellAmount: sellAmount,\n                calls: calls,\n                useSelfBalance: false,\n                recipient: msg.sender\n            }),\n            minBuyAmount\n        );\n    }\n\n    /// @dev Executes a batch sell and checks that at least\n    ///      `minBuyAmount` of `outputToken` was bought.\n    /// @param params Batch sell parameters.\n    /// @param minBuyAmount The minimum amount of `outputToken` that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function _multiplexBatchSell(\n        BatchSellParams memory params,\n        uint256 minBuyAmount\n    )\n        private\n        returns (uint256 boughtAmount)\n    {\n        // Cache the recipient's initial balance of the output token.\n        uint256 balanceBefore = params.outputToken.balanceOf(params.recipient);\n        // Execute the batch sell.\n        BatchSellState memory state = _executeBatchSell(params);\n        // Compute the change in balance of the output token.\n        uint256 balanceDelta = params.outputToken.balanceOf(params.recipient)\n            .safeSub(balanceBefore);\n        // Use the minimum of the balanceDelta and the returned bought\n        // amount in case of weird tokens and whatnot.\n        boughtAmount = LibSafeMathV06.min256(balanceDelta, state.boughtAmount);\n        // Enforce `minBuyAmount`.\n        require(\n            boughtAmount >= minBuyAmount,\n            \"MultiplexFeature::_multiplexBatchSell/UNDERBOUGHT\"\n        );\n    }\n\n    /// @dev Sells attached ETH via the given sequence of tokens\n    ///      and calls. `tokens[0]` must be WETH.\n    ///      The last token in `tokens` is the output token that\n    ///      will ultimately be sent to `msg.sender`\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function multiplexMultiHopSellEthForToken(\n        address[] memory tokens,\n        MultiHopSellSubcall[] memory calls,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        payable\n        returns (uint256 boughtAmount)\n    {\n        // First token must be WETH.\n        require(\n            tokens[0] == address(WETH),\n            \"MultiplexFeature::multiplexMultiHopSellEthForToken/NOT_WETH\"\n        );\n        // Wrap ETH.\n        WETH.deposit{value: msg.value}();\n        // WETH is now held by this contract,\n        // so `useSelfBalance` is true.\n        return _multiplexMultiHopSell(\n            MultiHopSellParams({\n                tokens: tokens,\n                sellAmount: msg.value,\n                calls: calls,\n                useSelfBalance: true,\n                recipient: msg.sender\n            }),\n            minBuyAmount\n        );\n    }\n\n    /// @dev Sells `sellAmount` of the input token (`tokens[0]`)\n    ///      for ETH via the given sequence of tokens and calls.\n    ///      The last token in `tokens` must be WETH.\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of ETH that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of ETH bought.\n    function multiplexMultiHopSellTokenForEth(\n        address[] memory tokens,\n        MultiHopSellSubcall[] memory calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        returns (uint256 boughtAmount)\n    {\n        // Last token must be WETH.\n        require(\n            tokens[tokens.length - 1] == address(WETH),\n            \"MultiplexFeature::multiplexMultiHopSellTokenForEth/NOT_WETH\"\n        );\n        // The `recipient of the WETH is set to  this contract, since\n        // we must unwrap the WETH and transfer the resulting ETH.\n        boughtAmount = _multiplexMultiHopSell(\n            MultiHopSellParams({\n                tokens: tokens,\n                sellAmount: sellAmount,\n                calls: calls,\n                useSelfBalance: false,\n                recipient: address(this)\n            }),\n            minBuyAmount\n        );\n        // Unwrap WETH.\n        WETH.withdraw(boughtAmount);\n        // Transfer ETH to `msg.sender`.\n        _transferEth(msg.sender, boughtAmount);\n    }\n\n    /// @dev Sells `sellAmount` of the input token (`tokens[0]`)\n    ///      via the given sequence of tokens and calls.\n    ///      The last token in `tokens` is the output token that\n    ///      will ultimately be sent to `msg.sender`\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function multiplexMultiHopSellTokenForToken(\n        address[] memory tokens,\n        MultiHopSellSubcall[] memory calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        returns (uint256 boughtAmount)\n    {\n        return _multiplexMultiHopSell(\n            MultiHopSellParams({\n                tokens: tokens,\n                sellAmount: sellAmount,\n                calls: calls,\n                useSelfBalance: false,\n                recipient: msg.sender\n            }),\n            minBuyAmount\n        );\n    }\n\n    /// @dev Executes a multi-hop sell and checks that at least\n    ///      `minBuyAmount` of output tokens were bought.\n    /// @param params Multi-hop sell parameters.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function _multiplexMultiHopSell(\n        MultiHopSellParams memory params,\n        uint256 minBuyAmount\n    )\n        private\n        returns (uint256 boughtAmount)\n    {\n        // There should be one call/hop between every two tokens\n        // in the path.\n        // tokens[0]b\u0000\u0013b\u0000\u0013calls[0]b\u0000\u0013b\u0000\u0013>tokens[1]b\u0000\u0013b\u0000\u0013...b\u0000\u0013b\u0000\u0013calls[n-1]b\u0000\u0013b\u0000\u0013>tokens[n]\n        require(\n            params.tokens.length == params.calls.length + 1,\n            \"MultiplexFeature::_multiplexMultiHopSell/MISMATCHED_ARRAY_LENGTHS\"\n        );\n        // The output token is the last token in the path.\n        IERC20TokenV06 outputToken = IERC20TokenV06(\n            params.tokens[params.tokens.length - 1]\n        );\n        // Cache the recipient's balance of the output token.\n        uint256 balanceBefore = outputToken.balanceOf(params.recipient);\n        // Execute the multi-hop sell.\n        MultiHopSellState memory state = _executeMultiHopSell(params);\n        // Compute the change in balance of the output token.\n        uint256 balanceDelta = outputToken.balanceOf(params.recipient)\n            .safeSub(balanceBefore);\n        // Use the minimum of the balanceDelta and the returned bought\n        // amount in case of weird tokens and whatnot.\n        boughtAmount = LibSafeMathV06.min256(balanceDelta, state.outputTokenAmount);\n        // Enforce `minBuyAmount`.\n        require(\n            boughtAmount >= minBuyAmount,\n            \"MultiplexFeature::_multiplexMultiHopSell/UNDERBOUGHT\"\n        );\n    }\n\n    /// @dev Iterates through the constituent calls of a batch\n    ///      sell and executes each one, until the full amount\n    //       has been sold.\n    /// @param params Batch sell parameters.\n    /// @return state A struct containing the amounts of `inputToken`\n    ///         sold and `outputToken` bought.\n    function _executeBatchSell(BatchSellParams memory params)\n        private\n        returns (BatchSellState memory state)\n    {\n        // Iterate through the calls and execute each one\n        // until the full amount has been sold.\n        for (uint256 i = 0; i != params.calls.length; i++) {\n            // Check if we've hit our target.\n            if (state.soldAmount >= params.sellAmount) { break; }\n            BatchSellSubcall memory subcall = params.calls[i];\n            // Compute the input token amount.\n            uint256 inputTokenAmount = _normalizeSellAmount(\n                subcall.sellAmount,\n                params.sellAmount,\n                state.soldAmount\n            );\n            if (subcall.id == MultiplexSubcall.RFQ) {\n                _batchSellRfqOrder(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.OTC) {\n                _batchSellOtcOrder(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.UniswapV2) {\n                _batchSellUniswapV2(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.UniswapV3) {\n                _batchSellUniswapV3(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.LiquidityProvider) {\n                _batchSellLiquidityProvider(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.TransformERC20) {\n                _batchSellTransformERC20(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.MultiHopSell) {\n                _nestedMultiHopSell(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else {\n                revert(\"MultiplexFeature::_executeBatchSell/INVALID_SUBCALL\");\n            }\n        }\n        require(\n            state.soldAmount == params.sellAmount,\n            \"MultiplexFeature::_executeBatchSell/INCORRECT_AMOUNT_SOLD\"\n        );\n    }\n\n    // This function executes a sequence of fills \"hopping\" through the\n    // path of tokens given by `params.tokens`.\n    function _executeMultiHopSell(MultiHopSellParams memory params)\n        private\n        returns (MultiHopSellState memory state)\n    {\n        // This variable is used for the input and output amounts of\n        // each hop. After the final hop, this will contain the output\n        // amount of the multi-hop fill.\n        state.outputTokenAmount = params.sellAmount;\n        // The first call may expect the input tokens to be held by\n        // `msg.sender`, `address(this)`, or some other address.\n        // Compute the expected address and transfer the input tokens\n        // there if necessary.\n        state.from = _computeHopTarget(params, 0);\n        // If the input tokens are currently held by `msg.sender` but\n        // the first hop expects them elsewhere, perform a `transferFrom`.\n        if (!params.useSelfBalance && state.from != msg.sender) {\n            _transferERC20TokensFrom(\n                IERC20TokenV06(params.tokens[0]),\n                msg.sender,\n                state.from,\n                params.sellAmount\n            );\n        }\n        // If the input tokens are currently held by `address(this)` but\n        // the first hop expects them elsewhere, perform a `transfer`.\n        if (params.useSelfBalance && state.from != address(this)) {\n            _transferERC20Tokens(\n                IERC20TokenV06(params.tokens[0]),\n                state.from,\n                params.sellAmount\n            );\n        }\n        // Iterate through the calls and execute each one.\n        for (state.hopIndex = 0; state.hopIndex != params.calls.length; state.hopIndex++) {\n            MultiHopSellSubcall memory subcall = params.calls[state.hopIndex];\n            // Compute the recipient of the tokens that will be\n            // bought by the current hop.\n            state.to = _computeHopTarget(params, state.hopIndex + 1);\n\n            if (subcall.id == MultiplexSubcall.UniswapV2) {\n                _multiHopSellUniswapV2(\n                    state,\n                    params,\n                    subcall.data\n                );\n            } else if (subcall.id == MultiplexSubcall.UniswapV3) {\n                _multiHopSellUniswapV3(state, subcall.data);\n            } else if (subcall.id == MultiplexSubcall.LiquidityProvider) {\n                _multiHopSellLiquidityProvider(\n                    state,\n                    params,\n                    subcall.data\n                );\n            } else if (subcall.id == MultiplexSubcall.BatchSell) {\n                _nestedBatchSell(\n                    state,\n                    params,\n                    subcall.data\n                );\n            } else {\n                revert(\"MultiplexFeature::_executeMultiHopSell/INVALID_SUBCALL\");\n            }\n            // The recipient of the current hop will be the source\n            // of tokens for the next hop.\n            state.from = state.to;\n        }\n    }\n\n    function _nestedMultiHopSell(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory data,\n        uint256 sellAmount\n    )\n        private\n    {\n        MultiHopSellParams memory multiHopParams;\n        // Decode the tokens and calls for the nested\n        // multi-hop sell.\n        (\n            multiHopParams.tokens,\n            multiHopParams.calls\n        ) = abi.decode(\n            data,\n            (address[], MultiHopSellSubcall[])\n        );\n        multiHopParams.sellAmount = sellAmount;\n        // If the batch sell is using input tokens held by\n        // `address(this)`, then so should the nested\n        // multi-hop sell.\n        multiHopParams.useSelfBalance = params.useSelfBalance;\n        // Likewise, the recipient of the multi-hop sell is\n        // equal to the recipient of its containing batch sell.\n        multiHopParams.recipient = params.recipient;\n        // Execute the nested multi-hop sell.\n        uint256 outputTokenAmount =\n            _executeMultiHopSell(multiHopParams).outputTokenAmount;\n        // Increment the sold and bought amounts.\n        state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n        state.boughtAmount = state.boughtAmount.safeAdd(outputTokenAmount);\n    }\n\n    function _nestedBatchSell(\n        IMultiplexFeature.MultiHopSellState memory state,\n        IMultiplexFeature.MultiHopSellParams memory params,\n        bytes memory data\n    )\n        private\n    {\n        BatchSellParams memory batchSellParams;\n        // Decode the calls for the nested batch sell.\n        batchSellParams.calls = abi.decode(\n            data,\n            (BatchSellSubcall[])\n        );\n        // The input and output tokens of the batch\n        // sell are the current and next tokens in\n        // `params.tokens`, respectively.\n        batchSellParams.inputToken = IERC20TokenV06(\n            params.tokens[state.hopIndex]\n        );\n        batchSellParams.outputToken = IERC20TokenV06(\n            params.tokens[state.hopIndex + 1]\n        );\n        // The `sellAmount` for the batch sell is the\n        // `outputTokenAmount` from the previous hop.\n        batchSellParams.sellAmount = state.outputTokenAmount;\n        // If the nested batch sell is the first hop\n        // and `useSelfBalance` for the containing multi-\n        // hop sell is false, the nested batch sell should\n        // pull tokens from `msg.sender` (so  `batchSellParams.useSelfBalance`\n        // should be false). Otherwise `batchSellParams.useSelfBalance`\n        // should be true.\n        batchSellParams.useSelfBalance = state.hopIndex > 0 || params.useSelfBalance;\n        // `state.to` has been populated with the address\n        // that should receive the output tokens of the\n        // batch sell.\n        batchSellParams.recipient = state.to;\n        // Execute the nested batch sell.\n        state.outputTokenAmount =\n            _executeBatchSell(batchSellParams).boughtAmount;\n    }\n\n    // Transfers some amount of ETH to the given recipient and\n    // reverts if the transfer fails.\n    function _transferEth(address payable recipient, uint256 amount)\n        private\n    {\n        (bool success,) = recipient.call{value: amount}(\"\");\n        require(success, \"MultiplexFeature::_transferEth/TRANSFER_FAILED\");\n    }\n\n    // This function computes the \"target\" address of hop index `i` within\n    // a multi-hop sell.\n    // If `i == 0`, the target is the address which should hold the input\n    // tokens prior to executing `calls[0]`. Otherwise, it is the address\n    // that should receive `tokens[i]` upon executing `calls[i-1]`.\n    function _computeHopTarget(\n        MultiHopSellParams memory params,\n        uint256 i\n    )\n        private\n        view\n        returns (address target)\n    {\n        if (i == params.calls.length) {\n            // The last call should send the output tokens to the\n            // multi-hop sell recipient.\n            target = params.recipient;\n        } else {\n            MultiHopSellSubcall memory subcall = params.calls[i];\n            if (subcall.id == MultiplexSubcall.UniswapV2) {\n                // UniswapV2 (and Sushiswap) allow tokens to be\n                // transferred into the pair contract before `swap`\n                // is called, so we compute the pair contract's address.\n                (address[] memory tokens, bool isSushi) = abi.decode(\n                    subcall.data,\n                    (address[], bool)\n                );\n                target = _computeUniswapPairAddress(\n                    tokens[0],\n                    tokens[1],\n                    isSushi\n                );\n            } else if (subcall.id == MultiplexSubcall.LiquidityProvider) {\n                // Similar to UniswapV2, LiquidityProvider contracts\n                // allow tokens to be transferred in before the swap\n                // is executed, so we the target is the address encoded\n                // in the subcall data.\n                (target,) = abi.decode(\n                    subcall.data,\n                    (address, bytes)\n                );\n            } else if (\n                subcall.id == MultiplexSubcall.UniswapV3 ||\n                subcall.id == MultiplexSubcall.BatchSell\n            ) {\n                // UniswapV3 uses a callback to pull in the tokens being\n                // sold to it. The callback implemented in `UniswapV3Feature`\n                // can either:\n                // - call `transferFrom` to move tokens from `msg.sender` to the\n                //   UniswapV3 pool, or\n                // - call `transfer` to move tokens from `address(this)` to the\n                //   UniswapV3 pool.\n                // A nested batch sell is similar, in that it can either:\n                // - use tokens from `msg.sender`, or\n                // - use tokens held by `address(this)`.\n\n                // Suppose UniswapV3/BatchSell is the first call in the multi-hop\n                // path. The input tokens are either held by `msg.sender`,\n                // or in the case of `multiplexMultiHopSellEthForToken` WETH is\n                // held by `address(this)`. The target is set accordingly.\n\n                // If this is _not_ the first call in the multi-hop path, we\n                // are dealing with an \"intermediate\" token in the multi-hop path,\n                // which `msg.sender` may not have an allowance set for. Thus\n                // target must be set to `address(this)` for `i > 0`.\n                if (i == 0 && !params.useSelfBalance) {\n                    target = msg.sender;\n                } else {\n                    target = address(this);\n                }\n            } else {\n                revert(\"MultiplexFeature::_computeHopTarget/INVALID_SUBCALL\");\n            }\n        }\n        require(\n            target != address(0),\n            \"MultiplexFeature::_computeHopTarget/TARGET_IS_NULL\"\n        );\n    }\n\n    // If `rawAmount` encodes a proportion of `totalSellAmount`, this function\n    // converts it to an absolute quantity. Caps the normalized amount to\n    // the remaining sell amount (`totalSellAmount - soldAmount`).\n    function _normalizeSellAmount(\n        uint256 rawAmount,\n        uint256 totalSellAmount,\n        uint256 soldAmount\n    )\n        private\n        pure\n        returns (uint256 normalized)\n    {\n        if ((rawAmount & HIGH_BIT) == HIGH_BIT) {\n            // If the high bit of `rawAmount` is set then the lower 255 bits\n            // specify a fraction of `totalSellAmount`.\n            return LibSafeMathV06.min256(\n                totalSellAmount\n                    * LibSafeMathV06.min256(rawAmount & LOWER_255_BITS, 1e18)\n                    / 1e18,\n                totalSellAmount.safeSub(soldAmount)\n            );\n        } else {\n            return LibSafeMathV06.min256(\n                rawAmount,\n                totalSellAmount.safeSub(soldAmount)\n            );\n        }\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/interfaces/INativeOrdersEvents.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\n/// @dev Events emitted by NativeOrdersFeature.\ninterface INativeOrdersEvents {\n\n    /// @dev Emitted whenever a `LimitOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param feeRecipient Fee recipient of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param protocolFeePaid How much protocol fee was paid.\n    /// @param pool The fee pool associated with this order.\n    event LimitOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address feeRecipient,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFeeFilledAmount,\n        uint256 protocolFeePaid,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever an `RfqOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param pool The fee pool associated with this order.\n    event RfqOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The order maker.\n    event OrderCancelled(\n        bytes32 orderHash,\n        address maker\n    );\n\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledLimitOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledRfqOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\n    ///      orders with a given txOrigin.\n    /// @param origin The address doing the allowing.\n    /// @param addrs The address being allowed/disallowed.\n    /// @param allowed Indicates whether the address should be allowed.\n    event RfqOrderOriginsAllowed(\n        address origin,\n        address[] addrs,\n        bool allowed\n    );\n\n    /// @dev Emitted when new order signers are registered\n    /// @param maker The maker address that is registering a designated signer.\n    /// @param signer The address that will sign on behalf of maker.\n    /// @param allowed Indicates whether the address should be allowed.\n    event OrderSignerRegistered(\n        address maker,\n        address signer,\n        bool allowed\n    );\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/multiplex/MultiplexUniswapV3.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinTokenSpender.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"../interfaces/IUniswapV3Feature.sol\";\n\n\nabstract contract MultiplexUniswapV3 is\n    FixinTokenSpender\n{\n    using LibSafeMathV06 for uint256;\n\n    function _batchSellUniswapV3(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        bool success;\n        bytes memory resultData;\n        if (params.useSelfBalance) {\n            // If the tokens are held by `address(this)`, we call\n            // the `onlySelf` variant `_sellHeldTokenForTokenToUniswapV3`,\n            // which uses the Exchange Proxy's balance of input token.\n            (success, resultData) = address(this).call(\n                abi.encodeWithSelector(\n                    IUniswapV3Feature._sellHeldTokenForTokenToUniswapV3.selector,\n                    wrappedCallData,\n                    sellAmount,\n                    0,\n                    params.recipient\n                )\n            );\n        } else {\n            // Otherwise, we self-delegatecall the normal variant\n            // `sellTokenForTokenToUniswapV3`, which pulls the input token\n            // from `msg.sender`.\n            (success, resultData) = address(this).delegatecall(\n                abi.encodeWithSelector(\n                    IUniswapV3Feature.sellTokenForTokenToUniswapV3.selector,\n                    wrappedCallData,\n                    sellAmount,\n                    0,\n                    params.recipient\n                )\n            );\n        }\n        if (success) {\n            // Decode the output token amount on success.\n            uint256 outputTokenAmount = abi.decode(resultData, (uint256));\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(outputTokenAmount);\n        }\n    }\n\n    function _multiHopSellUniswapV3(\n        IMultiplexFeature.MultiHopSellState memory state,\n        bytes memory wrappedCallData\n    )\n        internal\n    {\n        bool success;\n        bytes memory resultData;\n        if (state.from == address(this)) {\n            // If the tokens are held by `address(this)`, we call\n            // the `onlySelf` variant `_sellHeldTokenForTokenToUniswapV3`,\n            // which uses the Exchange Proxy's balance of input token.\n            (success, resultData) = address(this).call(\n                abi.encodeWithSelector(\n                    IUniswapV3Feature._sellHeldTokenForTokenToUniswapV3.selector,\n                    wrappedCallData,\n                    state.outputTokenAmount,\n                    0,\n                    state.to\n                )\n            );\n        } else {\n            // Otherwise, we self-delegatecall the normal variant\n            // `sellTokenForTokenToUniswapV3`, which pulls the input token\n            // from `msg.sender`.\n            (success, resultData) = address(this).delegatecall(\n                abi.encodeWithSelector(\n                    IUniswapV3Feature.sellTokenForTokenToUniswapV3.selector,\n                    wrappedCallData,\n                    state.outputTokenAmount,\n                    0,\n                    state.to\n                )\n            );\n        }\n        if (success) {\n            // Decode the output token amount on success.\n            state.outputTokenAmount = abi.decode(resultData, (uint256));\n        } else {\n            revert(\"MultiplexUniswapV3::_multiHopSellUniswapV3/SWAP_FAILED\");\n        }\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibSignatureRichErrors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSignatureRichErrors {\n\n    enum SignatureValidationErrorCodes {\n        ALWAYS_INVALID,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        WRONG_SIGNER,\n        BAD_SIGNATURE_DATA\n    }\n\n    // solhint-disable func-name-mixedcase\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n            code,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n            code,\n            hash\n        );\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/fixins/FixinCommon.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/interfaces/IOwnableFeature.sol\";\nimport \"../features/interfaces/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/multiplex/MultiplexLiquidityProvider.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../external/ILiquidityProviderSandbox.sol\";\nimport \"../../fixins/FixinCommon.sol\";\nimport \"../../fixins/FixinTokenSpender.sol\";\nimport \"../../vendor/ILiquidityProvider.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\n\n\nabstract contract MultiplexLiquidityProvider is\n    FixinCommon,\n    FixinTokenSpender\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    // Same event fired by LiquidityProviderFeature\n    event LiquidityProviderSwap(\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        address provider,\n        address recipient\n    );\n\n    /// @dev The sandbox contract address.\n    ILiquidityProviderSandbox private immutable SANDBOX;\n\n    constructor(ILiquidityProviderSandbox sandbox)\n        internal\n    {\n        SANDBOX = sandbox;\n    }\n\n    // A payable external function that we can delegatecall to\n    // swallow reverts and roll back the input token transfer.\n    function _batchSellLiquidityProviderExternal(\n        IMultiplexFeature.BatchSellParams calldata params,\n        bytes calldata wrappedCallData,\n        uint256 sellAmount\n    )\n        external\n        payable\n        returns (uint256 boughtAmount)\n    {\n        // Revert if not a delegatecall.\n        require(\n            address(this) != _implementation,\n            \"MultiplexLiquidityProvider::_batchSellLiquidityProviderExternal/ONLY_DELEGATECALL\"\n        );\n\n        // Decode the provider address and auxiliary data.\n        (address provider, bytes memory auxiliaryData) = abi.decode(\n            wrappedCallData,\n            (address, bytes)\n        );\n\n        if (params.useSelfBalance) {\n            // If `useSelfBalance` is true, use the input tokens\n            // held by `address(this)`.\n            _transferERC20Tokens(\n                params.inputToken,\n                provider,\n                sellAmount\n            );\n        } else {\n            // Otherwise, transfer the input tokens from `msg.sender`.\n            _transferERC20TokensFrom(\n                params.inputToken,\n                msg.sender,\n                provider,\n                sellAmount\n            );\n        }\n        // Cache the recipient's balance of the output token.\n        uint256 balanceBefore = params.outputToken\n            .balanceOf(params.recipient);\n        // Execute the swap.\n        SANDBOX.executeSellTokenForToken(\n            ILiquidityProvider(provider),\n            params.inputToken,\n            params.outputToken,\n            params.recipient,\n            0,\n            auxiliaryData\n        );\n        // Compute amount of output token received by the\n        // recipient.\n        boughtAmount = params.outputToken\n            .balanceOf(params.recipient)\n            .safeSub(balanceBefore);\n\n        emit LiquidityProviderSwap(\n            address(params.inputToken),\n            address(params.outputToken),\n            sellAmount,\n            boughtAmount,\n            provider,\n            params.recipient\n        );\n    }\n\n    function _batchSellLiquidityProvider(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        // Swallow reverts\n        (bool success, bytes memory resultData) = _implementation.delegatecall(\n            abi.encodeWithSelector(\n                this._batchSellLiquidityProviderExternal.selector,\n                params,\n                wrappedCallData,\n                sellAmount\n            )\n        );\n        if (success) {\n            // Decode the output token amount on success.\n            uint256 boughtAmount = abi.decode(resultData, (uint256));\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(boughtAmount);\n        }\n    }\n\n    // This function is called after tokens have already been transferred\n    // into the liquidity provider contract (in the previous hop).\n    function _multiHopSellLiquidityProvider(\n        IMultiplexFeature.MultiHopSellState memory state,\n        IMultiplexFeature.MultiHopSellParams memory params,\n        bytes memory wrappedCallData\n    )\n        internal\n    {\n        IERC20TokenV06 inputToken = IERC20TokenV06(params.tokens[state.hopIndex]);\n        IERC20TokenV06 outputToken = IERC20TokenV06(params.tokens[state.hopIndex + 1]);\n        // Decode the provider address and auxiliary data.\n        (address provider, bytes memory auxiliaryData) = abi.decode(\n            wrappedCallData,\n            (address, bytes)\n        );\n        // Cache the recipient's balance of the output token.\n        uint256 balanceBefore = outputToken\n            .balanceOf(state.to);\n        // Execute the swap.\n        SANDBOX.executeSellTokenForToken(\n            ILiquidityProvider(provider),\n            inputToken,\n            outputToken,\n            state.to,\n            0,\n            auxiliaryData\n        );\n        // The previous `ouputTokenAmount` was effectively the\n        // input amount for this call. Cache the value before\n        // overwriting it with the new output token amount so\n        // that both the input and ouput amounts can be in the\n        // `LiquidityProviderSwap` event.\n        uint256 sellAmount = state.outputTokenAmount;\n        // Compute amount of output token received by the\n        // recipient.\n        state.outputTokenAmount = outputToken\n            .balanceOf(state.to)\n            .safeSub(balanceBefore);\n\n        emit LiquidityProviderSwap(\n            address(inputToken),\n            address(outputToken),\n            sellAmount,\n            state.outputTokenAmount,\n            provider,\n            state.to\n        );\n    }\n}\n"},"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibOwnableRichErrors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/interfaces/INativeOrdersFeature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./INativeOrdersEvents.sol\";\n\n\n/// @dev Feature for interacting with limit orders.\ninterface INativeOrdersFeature is\n    INativeOrdersEvents\n{\n\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\n    ///      the staking contract.\n    /// @param poolIds Staking pool IDs\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\n        external;\n\n    /// @dev Fill a limit order. The taker and sender will be the caller.\n    /// @param order The limit order. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      `msg.sender` (not `sender`).\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param sender The order sender.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        address sender\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order. Internal variant.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param useSelfBalance Whether to use the ExchangeProxy's transient\n    ///        balance of taker tokens to fill the order.\n    /// @param recipient The recipient of the maker tokens.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Cancel a single limit order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The limit order.\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\n        external;\n\n    /// @dev Cancel a single RFQ order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The RFQ order.\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\n        external;\n\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\n    ///      specifies the message sender as its txOrigin.\n    /// @param origins An array of origin addresses to update.\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\n        external;\n\n    /// @dev Cancel multiple limit orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The limit orders.\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The RFQ orders.\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        external;\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the order info for an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderInfo Info about the order.\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of a limit order.\n    /// @param order The limit order.\n    /// @return orderHash The order hash.\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the canonical hash of an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderHash The order hash.\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\n    ///      gas price to arrive at the required protocol fee to fill a native order.\n    /// @return multiplier The protocol fee multiplier.\n    function getProtocolFeeMultiplier()\n        external\n        view\n        returns (uint32 multiplier);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getRfqOrderRelevantState(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The limit orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetLimitOrderRelevantStates(\n        LibNativeOrder.LimitOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The RFQ orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetRfqOrderRelevantStates(\n        LibNativeOrder.RfqOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Register a signer who can sign on behalf of msg.sender\n    ///      This allows one to sign on behalf of a contract that calls this function\n    /// @param signer The address from which you plan to generate signatures\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedOrderSigner(\n        address signer,\n        bool allowed\n    )\n        external;\n\n    /// @dev checks if a given address is registered to sign on behalf of a maker address\n    /// @param maker The maker address encoded in an order (can be a contract)\n    /// @param signer The address that is providing a signature\n    function isValidOrderSigner(\n        address maker,\n        address signer\n    )\n        external\n        view\n        returns (bool isAllowed);\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibNativeOrdersRichErrors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibNativeOrdersRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function ProtocolFeeRefundFailed(\n        address receiver,\n        uint256 refundAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"ProtocolFeeRefundFailed(address,uint256)\")),\n            receiver,\n            refundAmount\n        );\n    }\n\n    function OrderNotFillableByOriginError(\n        bytes32 orderHash,\n        address txOrigin,\n        address orderTxOrigin\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByOriginError(bytes32,address,address)\")),\n            orderHash,\n            txOrigin,\n            orderTxOrigin\n        );\n    }\n\n    function OrderNotFillableError(\n        bytes32 orderHash,\n        uint8 orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableError(bytes32,uint8)\")),\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function OrderNotSignedByMakerError(\n        bytes32 orderHash,\n        address signer,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotSignedByMakerError(bytes32,address,address)\")),\n            orderHash,\n            signer,\n            maker\n        );\n    }\n\n    function InvalidSignerError(\n        address maker,\n        address signer\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidSignerError(address,address)\")),\n            maker,\n            signer\n        );\n    }\n\n    function OrderNotFillableBySenderError(\n        bytes32 orderHash,\n        address sender,\n        address orderSender\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableBySenderError(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            orderSender\n        );\n    }\n\n    function OrderNotFillableByTakerError(\n        bytes32 orderHash,\n        address taker,\n        address orderTaker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByTakerError(bytes32,address,address)\")),\n            orderHash,\n            taker,\n            orderTaker\n        );\n    }\n\n    function CancelSaltTooLowError(\n        uint256 minValidSalt,\n        uint256 oldMinValidSalt\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"CancelSaltTooLowError(uint256,uint256)\")),\n            minValidSalt,\n            oldMinValidSalt\n        );\n    }\n\n    function FillOrKillFailedError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"FillOrKillFailedError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n\n    function OnlyOrderMakerAllowed(\n        bytes32 orderHash,\n        address sender,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOrderMakerAllowed(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            maker\n        );\n    }\n\n    function BatchFillIncompleteError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"BatchFillIncompleteError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/vendor/ILiquidityProvider.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n"},"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/interfaces/IFeature.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n"}},"settings":{"evmVersion":"istanbul","optimizer":{"details":{"constantOptimizer":true,"cse":true,"deduplicate":true,"yul":true},"enabled":true,"runs":1000000},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","abi"]}},"remappings":["@0x/contracts-utils=/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils","@0x/contracts-erc20=/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20"]}},"ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zeroExAddress\",\"type\":\"address\"},{\"internalType\":\"contract IEtherTokenV06\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidityProviderSandbox\",\"name\":\"sandbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sushiswapFactory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"uniswapPairInitCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sushiswapPairInitCodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"ExpiredOtcOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"ExpiredRfqOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LiquidityProviderSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum IMultiplexFeature.MultiplexSubcall\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IMultiplexFeature.BatchSellSubcall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"useSelfBalance\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IMultiplexFeature.BatchSellParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"wrappedCallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"name\":\"_batchSellLiquidityProviderExternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum IMultiplexFeature.MultiplexSubcall\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IMultiplexFeature.BatchSellSubcall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"useSelfBalance\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IMultiplexFeature.BatchSellParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"wrappedCallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"name\":\"_batchSellUniswapV2External\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"success\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"outputToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum IMultiplexFeature.MultiplexSubcall\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IMultiplexFeature.BatchSellSubcall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"}],\"name\":\"multiplexBatchSellEthForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"inputToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum IMultiplexFeature.MultiplexSubcall\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IMultiplexFeature.BatchSellSubcall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"}],\"name\":\"multiplexBatchSellTokenForEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"outputToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum IMultiplexFeature.MultiplexSubcall\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IMultiplexFeature.BatchSellSubcall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"}],\"name\":\"multiplexBatchSellTokenForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum IMultiplexFeature.MultiplexSubcall\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IMultiplexFeature.MultiHopSellSubcall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"}],\"name\":\"multiplexMultiHopSellEthForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum IMultiplexFeature.MultiplexSubcall\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IMultiplexFeature.MultiHopSellSubcall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"}],\"name\":\"multiplexMultiHopSellTokenForEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum IMultiplexFeature.MultiplexSubcall\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IMultiplexFeature.MultiHopSellSubcall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"}],\"name\":\"multiplexMultiHopSellTokenForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MultiplexFeature","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":1,"Runs":1000000,"ConstructorArguments":"0x000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000407b4128e9ecad8769b2332312a9f655cb9f5f3a0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f000000000000000000000000c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303","EVMVersion":"istanbul","Library":"","LicenseType":"Apache-2.0","Proxy":0,"SwarmSource":"ipfs://f666c7803076634490a6a69352daa6f68cfd88d9c7ae26dd4e79f19290ebe8b3"}]}