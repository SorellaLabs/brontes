/*
 * Relay API
 *
 * API specification for MEV-Boost PBS relays.
 *
 * The version of the OpenAPI document: dev
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method [`get_delivered_payloads`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDeliveredPayloadsError {
    Status400(crate::models::GetDeliveredPayloads400Response),
    Status500(crate::models::SubmitBlock400ResponseAllOf),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_received_bids`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetReceivedBidsError {
    Status400(crate::models::GetReceivedBids400Response),
    Status500(crate::models::SubmitBlock400ResponseAllOf),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_validator_registration`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetValidatorRegistrationError {
    Status400(crate::models::GetValidatorRegistration400Response),
    Status500(crate::models::SubmitBlock400ResponseAllOf),
    UnknownValue(serde_json::Value),
}

/// * Payloads become available after the relay responds to a `getPayload`
///   request from the proposer.  * Query arguments are used as filters.
pub async fn get_delivered_payloads(
    configuration: &configuration::Configuration,
    slot: Option<&str>,
    cursor: Option<&str>,
    limit: Option<&str>,
    block_hash: Option<&str>,
    block_number: Option<&str>,
    proposer_pubkey: Option<&str>,
    builder_pubkey: Option<&str>,
    order_by: Option<&str>,
) -> Result<
    Vec<crate::models::GetDeliveredPayloads200ResponseInner>,
    Error<GetDeliveredPayloadsError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/relay/v1/data/bidtraces/proposer_payload_delivered",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = slot {
        local_var_req_builder =
            local_var_req_builder.query(&[("slot", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder =
            local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = block_hash {
        local_var_req_builder =
            local_var_req_builder.query(&[("block_hash", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = block_number {
        local_var_req_builder =
            local_var_req_builder.query(&[("block_number", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = proposer_pubkey {
        local_var_req_builder =
            local_var_req_builder.query(&[("proposer_pubkey", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = builder_pubkey {
        local_var_req_builder =
            local_var_req_builder.query(&[("builder_pubkey", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order_by {
        local_var_req_builder =
            local_var_req_builder.query(&[("order_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetDeliveredPayloadsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// * Returns a list of builder bids without execution payloads.  * Only
///   submissions that were successfully verified.
pub async fn get_received_bids(
    configuration: &configuration::Configuration,
    slot: Option<&str>,
    block_hash: Option<&str>,
    block_number: Option<&str>,
    builder_pubkey: Option<&str>,
    limit: Option<&str>,
) -> Result<Vec<crate::models::GetReceivedBids200ResponseInner>, Error<GetReceivedBidsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/relay/v1/data/bidtraces/builder_blocks_received",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = slot {
        local_var_req_builder =
            local_var_req_builder.query(&[("slot", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = block_hash {
        local_var_req_builder =
            local_var_req_builder.query(&[("block_hash", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = block_number {
        local_var_req_builder =
            local_var_req_builder.query(&[("block_number", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = builder_pubkey {
        local_var_req_builder =
            local_var_req_builder.query(&[("builder_pubkey", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetReceivedBidsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// * Returns the latest validator registration for a given pubkey.  * Useful to
///   check whether your own registration was successful.
pub async fn get_validator_registration(
    configuration: &configuration::Configuration,
    pubkey: &str,
) -> Result<crate::models::GetValidators200ResponseInnerEntry, Error<GetValidatorRegistrationError>>
{
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str =
        format!("{}/relay/v1/data/validator_registration", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("pubkey", &pubkey.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetValidatorRegistrationError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
