{"expiry":1699509697,"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/bridges/L1_ETH_Bridge.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./L1_Bridge.sol\";\n\n/**\n * @dev A L1_Bridge that uses an ETH as the canonical token\n */\n\ncontract L1_ETH_Bridge is L1_Bridge {\n    constructor (address[] memory bonders, address _governance) public L1_Bridge(bonders, _governance) {}\n\n    /* ========== Override Functions ========== */\n\n    function _transferFromBridge(address recipient, uint256 amount) internal override {\n        (bool success, ) = recipient.call{value: amount}(new bytes(0));\n        require(success, 'L1_ETH_BRG: ETH transfer failed');\n    }\n\n    function _transferToBridge(address /*from*/, uint256 amount) internal override {\n        require(msg.value == amount, \"L1_ETH_BRG: Value does not match amount\");\n    }\n}\n"},"contracts/interfaces/IMessengerWrapper.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12 <0.8.0;\npragma experimental ABIEncoderV2;\n\ninterface IMessengerWrapper {\n    function sendCrossDomainMessage(bytes memory _calldata) external;\n    function verifySender(address l1BridgeCaller, bytes memory _data) external;\n}\n"},"@openzeppelin/contracts/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"contracts/bridges/L1_Bridge.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./Bridge.sol\";\nimport \"../interfaces/IMessengerWrapper.sol\";\n\n/**\n * @dev L1_Bridge is responsible for the bonding and challenging of TransferRoots. All TransferRoots\n * originate in the L1_Bridge through `bondTransferRoot` and are propagated up to destination L2s.\n */\n\nabstract contract L1_Bridge is Bridge {\n\n    struct TransferBond {\n        address bonder;\n        uint256 createdAt;\n        uint256 totalAmount;\n        uint256 challengeStartTime;\n        address challenger;\n        bool challengeResolved;\n    }\n\n    /* ========== State ========== */\n\n    mapping(uint256 => mapping(bytes32 => uint256)) public transferRootCommittedAt;\n    mapping(bytes32 => TransferBond) public transferBonds;\n    mapping(uint256 => mapping(address => uint256)) public timeSlotToAmountBonded;\n    mapping(uint256 => uint256) public chainBalance;\n\n    /* ========== Config State ========== */\n\n    address public governance;\n    mapping(uint256 => IMessengerWrapper) public crossDomainMessengerWrappers;\n    mapping(uint256 => bool) public isChainIdPaused;\n    uint256 public challengePeriod = 1 days;\n    uint256 public challengeResolutionPeriod = 10 days;\n    uint256 public minTransferRootBondDelay = 15 minutes;\n    \n    uint256 public constant CHALLENGE_AMOUNT_DIVISOR = 10;\n    uint256 public constant TIME_SLOT_SIZE = 4 hours;\n\n    /* ========== Events ========== */\n\n    event TransferSentToL2(\n        uint256 indexed chainId,\n        address indexed recipient,\n        uint256 amount,\n        uint256 amountOutMin,\n        uint256 deadline,\n        address indexed relayer,\n        uint256 relayerFee\n    );\n\n    event TransferRootBonded (\n        bytes32 indexed root,\n        uint256 amount\n    );\n\n    event TransferRootConfirmed(\n        uint256 indexed originChainId,\n        uint256 indexed destinationChainId,\n        bytes32 indexed rootHash,\n        uint256 totalAmount\n    );\n\n    event TransferBondChallenged(\n        bytes32 indexed transferRootId,\n        bytes32 indexed rootHash,\n        uint256 originalAmount\n    );\n\n    event ChallengeResolved(\n        bytes32 indexed transferRootId,\n        bytes32 indexed rootHash,\n        uint256 originalAmount\n    );\n\n    /* ========== Modifiers ========== */\n\n    modifier onlyL2Bridge(uint256 chainId) {\n        IMessengerWrapper messengerWrapper = crossDomainMessengerWrappers[chainId];\n        messengerWrapper.verifySender(msg.sender, msg.data);\n        _;\n    }\n\n    constructor (address[] memory bonders, address _governance) public Bridge(bonders) {\n        governance = _governance;\n    }\n\n    /* ========== Send Functions ========== */\n\n    /**\n     * @notice `amountOutMin` and `deadline` should be 0 when no swap is intended at the destination.\n     * @notice `amount` is the total amount the user wants to send including the relayer fee\n     * @dev Send tokens to a supported layer-2 to mint hToken and optionally swap the hToken in the\n     * AMM at the destination.\n     * @param chainId The chainId of the destination chain\n     * @param recipient The address receiving funds at the destination\n     * @param amount The amount being sent\n     * @param amountOutMin The minimum amount received after attempting to swap in the destination\n     * AMM market. 0 if no swap is intended.\n     * @param deadline The deadline for swapping in the destination AMM market. 0 if no\n     * swap is intended.\n     * @param relayer The address of the relayer at the destination.\n     * @param relayerFee The amount distributed to the relayer at the destination. This is subtracted from the `amount`.\n     */\n    function sendToL2(\n        uint256 chainId,\n        address recipient,\n        uint256 amount,\n        uint256 amountOutMin,\n        uint256 deadline,\n        address relayer,\n        uint256 relayerFee\n    )\n        external\n        payable\n    {\n        IMessengerWrapper messengerWrapper = crossDomainMessengerWrappers[chainId];\n        require(messengerWrapper != IMessengerWrapper(0), \"L1_BRG: chainId not supported\");\n        require(isChainIdPaused[chainId] == false, \"L1_BRG: Sends to this chainId are paused\");\n        require(amount > 0, \"L1_BRG: Must transfer a non-zero amount\");\n        require(amount >= relayerFee, \"L1_BRG: Relayer fee cannot exceed amount\");\n\n        _transferToBridge(msg.sender, amount);\n\n        bytes memory message = abi.encodeWithSignature(\n            \"distribute(address,uint256,uint256,uint256,address,uint256)\",\n            recipient,\n            amount,\n            amountOutMin,\n            deadline,\n            relayer,\n            relayerFee\n        );\n\n        chainBalance[chainId] = chainBalance[chainId].add(amount);\n        messengerWrapper.sendCrossDomainMessage(message);\n\n        emit TransferSentToL2(\n            chainId,\n            recipient,\n            amount,\n            amountOutMin,\n            deadline,\n            relayer,\n            relayerFee\n        );\n    }\n\n    /* ========== TransferRoot Functions ========== */\n\n    /**\n     * @dev Setting a TransferRoot is a two step process.\n     * @dev   1. The TransferRoot is bonded with `bondTransferRoot`. Withdrawals can now begin on L1\n     * @dev      and recipient L2's\n     * @dev   2. The TransferRoot is confirmed after `confirmTransferRoot` is called by the l2 bridge\n     * @dev      where the TransferRoot originated.\n     */\n\n    /**\n     * @dev Used by the Bonder to bond a TransferRoot and propagate it up to destination L2s\n     * @param rootHash The Merkle root of the TransferRoot Merkle tree\n     * @param destinationChainId The id of the destination chain\n     * @param totalAmount The amount destined for the destination chain\n     */\n    function bondTransferRoot(\n        bytes32 rootHash,\n        uint256 destinationChainId,\n        uint256 totalAmount\n    )\n        external\n        onlyBonder\n        requirePositiveBalance\n    {\n        bytes32 transferRootId = getTransferRootId(rootHash, totalAmount);\n        require(transferRootCommittedAt[destinationChainId][transferRootId] == 0, \"L1_BRG: TransferRoot has already been confirmed\");\n        require(transferBonds[transferRootId].createdAt == 0, \"L1_BRG: TransferRoot has already been bonded\");\n\n        uint256 currentTimeSlot = getTimeSlot(block.timestamp);\n        uint256 bondAmount = getBondForTransferAmount(totalAmount);\n        timeSlotToAmountBonded[currentTimeSlot][msg.sender] = timeSlotToAmountBonded[currentTimeSlot][msg.sender].add(bondAmount);\n\n        transferBonds[transferRootId] = TransferBond(\n            msg.sender,\n            block.timestamp,\n            totalAmount,\n            uint256(0),\n            address(0),\n            false\n        );\n\n        _distributeTransferRoot(rootHash, destinationChainId, totalAmount);\n\n        emit TransferRootBonded(rootHash, totalAmount);\n    }\n\n    /**\n     * @dev Used by an L2 bridge to confirm a TransferRoot via cross-domain message. Once a TransferRoot\n     * has been confirmed, any challenge against that TransferRoot can be resolved as unsuccessful.\n     * @param originChainId The id of the origin chain\n     * @param rootHash The Merkle root of the TransferRoot Merkle tree\n     * @param destinationChainId The id of the destination chain\n     * @param totalAmount The amount destined for each destination chain\n     * @param rootCommittedAt The block timestamp when the TransferRoot was committed on its origin chain\n     */\n    function confirmTransferRoot(\n        uint256 originChainId,\n        bytes32 rootHash,\n        uint256 destinationChainId,\n        uint256 totalAmount,\n        uint256 rootCommittedAt\n    )\n        external\n        onlyL2Bridge(originChainId)\n    {\n        bytes32 transferRootId = getTransferRootId(rootHash, totalAmount);\n        require(transferRootCommittedAt[destinationChainId][transferRootId] == 0, \"L1_BRG: TransferRoot already confirmed\");\n        require(rootCommittedAt > 0, \"L1_BRG: rootCommittedAt must be greater than 0\");\n        transferRootCommittedAt[destinationChainId][transferRootId] = rootCommittedAt;\n        chainBalance[originChainId] = chainBalance[originChainId].sub(totalAmount, \"L1_BRG: Amount exceeds chainBalance. This indicates a layer-2 failure.\");\n\n        // If the TransferRoot was never bonded, distribute the TransferRoot.\n        TransferBond storage transferBond = transferBonds[transferRootId];\n        if (transferBond.createdAt == 0) {\n            _distributeTransferRoot(rootHash, destinationChainId, totalAmount);\n        }\n\n        emit TransferRootConfirmed(originChainId, destinationChainId, rootHash, totalAmount);\n    }\n\n    function _distributeTransferRoot(\n        bytes32 rootHash,\n        uint256 chainId,\n        uint256 totalAmount\n    )\n        internal\n    {\n        // Set TransferRoot on recipient Bridge\n        if (chainId == getChainId()) {\n            // Set L1 TransferRoot\n            _setTransferRoot(rootHash, totalAmount);\n        } else {\n            chainBalance[chainId] = chainBalance[chainId].add(totalAmount);\n\n            IMessengerWrapper messengerWrapper = crossDomainMessengerWrappers[chainId];\n            require(messengerWrapper != IMessengerWrapper(0), \"L1_BRG: chainId not supported\");\n\n            // Set L2 TransferRoot\n            bytes memory setTransferRootMessage = abi.encodeWithSignature(\n                \"setTransferRoot(bytes32,uint256)\",\n                rootHash,\n                totalAmount\n            );\n            messengerWrapper.sendCrossDomainMessage(setTransferRootMessage);\n        }\n    }\n\n    /* ========== External TransferRoot Challenges ========== */\n\n    /**\n     * @dev Challenge a TransferRoot believed to be fraudulent\n     * @param rootHash The Merkle root of the TransferRoot Merkle tree\n     * @param originalAmount The total amount bonded for this TransferRoot\n     * @param destinationChainId The id of the destination chain\n     */\n    function challengeTransferBond(bytes32 rootHash, uint256 originalAmount, uint256 destinationChainId) external payable {\n        bytes32 transferRootId = getTransferRootId(rootHash, originalAmount);\n        TransferBond storage transferBond = transferBonds[transferRootId];\n\n        require(transferRootCommittedAt[destinationChainId][transferRootId] == 0, \"L1_BRG: TransferRoot has already been confirmed\");\n        require(transferBond.createdAt != 0, \"L1_BRG: TransferRoot has not been bonded\");\n        uint256 challengePeriodEnd = transferBond.createdAt.add(challengePeriod);\n        require(challengePeriodEnd >= block.timestamp, \"L1_BRG: TransferRoot cannot be challenged after challenge period\");\n        require(transferBond.challengeStartTime == 0, \"L1_BRG: TransferRoot already challenged\");\n\n        transferBond.challengeStartTime = block.timestamp;\n        transferBond.challenger = msg.sender;\n\n        // Move amount from timeSlotToAmountBonded to debit\n        uint256 timeSlot = getTimeSlot(transferBond.createdAt);\n        uint256 bondAmount = getBondForTransferAmount(originalAmount);\n        address bonder = transferBond.bonder;\n        timeSlotToAmountBonded[timeSlot][bonder] = timeSlotToAmountBonded[timeSlot][bonder].sub(bondAmount);\n\n        _addDebit(transferBond.bonder, bondAmount);\n\n        // Get stake for challenge\n        uint256 challengeStakeAmount = getChallengeAmountForTransferAmount(originalAmount);\n        _transferToBridge(msg.sender, challengeStakeAmount);\n\n        emit TransferBondChallenged(transferRootId, rootHash, originalAmount);\n    }\n\n    /**\n     * @dev Resolve a challenge after the `challengeResolutionPeriod` has passed\n     * @param rootHash The Merkle root of the TransferRoot Merkle tree\n     * @param originalAmount The total amount originally bonded for this TransferRoot\n     * @param destinationChainId The id of the destination chain\n     */\n    function resolveChallenge(bytes32 rootHash, uint256 originalAmount, uint256 destinationChainId) external {\n        bytes32 transferRootId = getTransferRootId(rootHash, originalAmount);\n        TransferBond storage transferBond = transferBonds[transferRootId];\n\n        require(transferBond.challengeStartTime != 0, \"L1_BRG: TransferRoot has not been challenged\");\n        require(block.timestamp > transferBond.challengeStartTime.add(challengeResolutionPeriod), \"L1_BRG: Challenge period has not ended\");\n        require(transferBond.challengeResolved == false, \"L1_BRG: TransferRoot already resolved\");\n        transferBond.challengeResolved = true;\n\n        uint256 challengeStakeAmount = getChallengeAmountForTransferAmount(originalAmount);\n\n        if (transferRootCommittedAt[destinationChainId][transferRootId] > 0) {\n            // Invalid challenge\n\n            if (transferBond.createdAt > transferRootCommittedAt[destinationChainId][transferRootId].add(minTransferRootBondDelay)) {\n                // Credit the bonder back with the bond amount plus the challenger's stake\n                _addCredit(transferBond.bonder, getBondForTransferAmount(originalAmount).add(challengeStakeAmount));\n            } else {\n                // If the TransferRoot was bonded before it was committed, the challenger and Bonder\n                // get their stake back. This discourages Bonders from tricking challengers into\n                // challenging a valid TransferRoots that haven't yet been committed. It also ensures\n                // that Bonders are not punished if a TransferRoot is bonded too soon in error.\n\n                // Return the challenger's stake\n                _addCredit(transferBond.challenger, challengeStakeAmount);\n                // Credit the bonder back with the bond amount\n                _addCredit(transferBond.bonder, getBondForTransferAmount(originalAmount));\n            }\n        } else {\n            // Valid challenge\n            // Burn 25% of the challengers stake\n            _transferFromBridge(address(0xdead), challengeStakeAmount.mul(1).div(4));\n            // Reward challenger with the remaining 75% of their stake plus 100% of the Bonder's stake\n            _addCredit(transferBond.challenger, challengeStakeAmount.mul(7).div(4));\n        }\n\n        emit ChallengeResolved(transferRootId, rootHash, originalAmount);\n    }\n\n    /* ========== Override Functions ========== */\n\n    function _additionalDebit(address bonder) internal view override returns (uint256) {\n        uint256 currentTimeSlot = getTimeSlot(block.timestamp);\n        uint256 bonded = 0;\n\n        uint256 numTimeSlots = challengePeriod / TIME_SLOT_SIZE;\n        for (uint256 i = 0; i < numTimeSlots; i++) {\n            bonded = bonded.add(timeSlotToAmountBonded[currentTimeSlot - i][bonder]);\n        }\n\n        return bonded;\n    }\n\n    function _requireIsGovernance() internal override {\n        require(governance == msg.sender, \"L1_BRG: Caller is not the owner\");\n    }\n\n    /* ========== External Config Management Setters ========== */\n\n    function setGovernance(address _newGovernance) external onlyGovernance {\n        require(_newGovernance != address(0), \"L1_BRG: _newGovernance cannot be address(0)\");\n        governance = _newGovernance;\n    }\n\n    function setCrossDomainMessengerWrapper(uint256 chainId, IMessengerWrapper _crossDomainMessengerWrapper) external onlyGovernance {\n        crossDomainMessengerWrappers[chainId] = _crossDomainMessengerWrapper;\n    }\n\n    function setChainIdDepositsPaused(uint256 chainId, bool isPaused) external onlyGovernance {\n        isChainIdPaused[chainId] = isPaused;\n    }\n\n    function setChallengePeriod(uint256 _challengePeriod) external onlyGovernance {\n        require(_challengePeriod % TIME_SLOT_SIZE == 0, \"L1_BRG: challengePeriod must be divisible by TIME_SLOT_SIZE\");\n\n        challengePeriod = _challengePeriod;\n    }\n\n    function setChallengeResolutionPeriod(uint256 _challengeResolutionPeriod) external onlyGovernance {\n        challengeResolutionPeriod = _challengeResolutionPeriod;\n    }\n\n    function setMinTransferRootBondDelay(uint256 _minTransferRootBondDelay) external onlyGovernance {\n        minTransferRootBondDelay = _minTransferRootBondDelay;\n    }\n\n    /* ========== Public Getters ========== */\n\n    function getBondForTransferAmount(uint256 amount) public pure returns (uint256) {\n        // Bond covers amount plus a bounty to pay a potential challenger\n        return amount.add(getChallengeAmountForTransferAmount(amount));\n    }\n\n    function getChallengeAmountForTransferAmount(uint256 amount) public pure returns (uint256) {\n        // Bond covers amount plus a bounty to pay a potential challenger\n        return amount.div(CHALLENGE_AMOUNT_DIVISOR);\n    }\n\n    function getTimeSlot(uint256 time) public pure returns (uint256) {\n        return time / TIME_SLOT_SIZE;\n    }\n}\n"},"contracts/bridges/Bridge.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./Accounting.sol\";\nimport \"../libraries/Lib_MerkleTree.sol\";\n\n/**\n * @dev Bridge extends the accounting system and encapsulates the logic that is shared by both the\n * L1 and L2 Bridges. It allows to TransferRoots to be set by parent contracts and for those\n * TransferRoots to be withdrawn against. It also allows the bonder to bond and withdraw Transfers\n * directly through `bondWithdrawal` and then settle those bonds against their TransferRoot once it\n * has been set.\n */\n\nabstract contract Bridge is Accounting {\n    using Lib_MerkleTree for bytes32;\n\n    struct TransferRoot {\n        uint256 total;\n        uint256 amountWithdrawn;\n        uint256 createdAt;\n    }\n\n    /* ========== Events ========== */\n\n    event Withdrew(\n        bytes32 indexed transferId,\n        address indexed recipient,\n        uint256 amount,\n        bytes32 transferNonce\n    );\n\n    event WithdrawalBonded(\n        bytes32 indexed transferId,\n        uint256 amount\n    );\n\n    event WithdrawalBondSettled(\n        address indexed bonder,\n        bytes32 indexed transferId,\n        bytes32 indexed rootHash\n    );\n\n    event MultipleWithdrawalsSettled(\n        address indexed bonder,\n        bytes32 indexed rootHash,\n        uint256 totalBondsSettled\n    );\n\n    event TransferRootSet(\n        bytes32 indexed rootHash,\n        uint256 totalAmount\n    );\n\n    /* ========== State ========== */\n\n    mapping(bytes32 => TransferRoot) private _transferRoots;\n    mapping(bytes32 => bool) private _spentTransferIds;\n    mapping(address => mapping(bytes32 => uint256)) private _bondedWithdrawalAmounts;\n\n    uint256 constant RESCUE_DELAY = 8 weeks;\n\n    constructor(address[] memory bonders) public Accounting(bonders) {}\n\n    /* ========== Public Getters ========== */\n\n    /**\n     * @dev Get the hash that represents an individual Transfer.\n     * @param chainId The id of the destination chain\n     * @param recipient The address receiving the Transfer\n     * @param amount The amount being transferred including the `_bonderFee`\n     * @param transferNonce Used to avoid transferId collisions\n     * @param bonderFee The amount paid to the address that withdraws the Transfer\n     * @param amountOutMin The minimum amount received after attempting to swap in the destination\n     * AMM market. 0 if no swap is intended.\n     * @param deadline The deadline for swapping in the destination AMM market. 0 if no\n     * swap is intended.\n     */\n    function getTransferId(\n        uint256 chainId,\n        address recipient,\n        uint256 amount,\n        bytes32 transferNonce,\n        uint256 bonderFee,\n        uint256 amountOutMin,\n        uint256 deadline\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encode(\n            chainId,\n            recipient,\n            amount,\n            transferNonce,\n            bonderFee,\n            amountOutMin,\n            deadline\n        ));\n    }\n\n    /**\n     * @notice getChainId can be overridden by subclasses if needed for compatibility or testing purposes.\n     * @dev Get the current chainId\n     * @return chainId The current chainId\n     */\n    function getChainId() public virtual view returns (uint256 chainId) {\n        this; // Silence state mutability warning without generating any additional byte code\n        assembly {\n            chainId := chainid()\n        }\n    }\n\n    /**\n     * @dev Get the TransferRoot id for a given rootHash and totalAmount\n     * @param rootHash The Merkle root of the TransferRoot\n     * @param totalAmount The total of all Transfers in the TransferRoot\n     * @return The calculated transferRootId\n     */\n    function getTransferRootId(bytes32 rootHash, uint256 totalAmount) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(rootHash, totalAmount));\n    }\n\n    /**\n     * @dev Get the TransferRoot for a given rootHash and totalAmount\n     * @param rootHash The Merkle root of the TransferRoot\n     * @param totalAmount The total of all Transfers in the TransferRoot\n     * @return The TransferRoot with the calculated transferRootId\n     */\n    function getTransferRoot(bytes32 rootHash, uint256 totalAmount) public view returns (TransferRoot memory) {\n        return _transferRoots[getTransferRootId(rootHash, totalAmount)];\n    }\n\n    /**\n     * @dev Get the amount bonded for the withdrawal of a transfer\n     * @param bonder The Bonder of the withdrawal\n     * @param transferId The Transfer's unique identifier\n     * @return The amount bonded for a Transfer withdrawal\n     */\n    function getBondedWithdrawalAmount(address bonder, bytes32 transferId) external view returns (uint256) {\n        return _bondedWithdrawalAmounts[bonder][transferId];\n    }\n\n    /**\n     * @dev Get the spent status of a transfer ID\n     * @param transferId The transfer's unique identifier\n     * @return True if the transferId has been spent\n     */\n    function isTransferIdSpent(bytes32 transferId) external view returns (bool) {\n        return _spentTransferIds[transferId];\n    }\n\n    /* ========== User/Relayer External Functions ========== */\n\n    /**\n     * @notice Can be called by anyone (recipient or relayer)\n     * @dev Withdraw a Transfer from its destination bridge\n     * @param recipient The address receiving the Transfer\n     * @param amount The amount being transferred including the `_bonderFee`\n     * @param transferNonce Used to avoid transferId collisions\n     * @param bonderFee The amount paid to the address that withdraws the Transfer\n     * @param amountOutMin The minimum amount received after attempting to swap in the destination\n     * AMM market. 0 if no swap is intended. (only used to calculate `transferId` in this function)\n     * @param deadline The deadline for swapping in the destination AMM market. 0 if no\n     * swap is intended. (only used to calculate `transferId` in this function)\n     * @param rootHash The Merkle root of the TransferRoot\n     * @param transferRootTotalAmount The total amount being transferred in a TransferRoot\n     * @param transferIdTreeIndex The index of the transferId in the Merkle tree\n     * @param siblings The siblings of the transferId in the Merkle tree\n     * @param totalLeaves The total number of leaves in the Merkle tree\n     */\n    function withdraw(\n        address recipient,\n        uint256 amount,\n        bytes32 transferNonce,\n        uint256 bonderFee,\n        uint256 amountOutMin,\n        uint256 deadline,\n        bytes32 rootHash,\n        uint256 transferRootTotalAmount,\n        uint256 transferIdTreeIndex,\n        bytes32[] calldata siblings,\n        uint256 totalLeaves\n    )\n        external\n        nonReentrant\n    {\n        bytes32 transferId = getTransferId(\n            getChainId(),\n            recipient,\n            amount,\n            transferNonce,\n            bonderFee,\n            amountOutMin,\n            deadline\n        );\n\n        require(\n            rootHash.verify(\n                transferId,\n                transferIdTreeIndex,\n                siblings,\n                totalLeaves\n            )\n        , \"BRG: Invalid transfer proof\");\n        bytes32 transferRootId = getTransferRootId(rootHash, transferRootTotalAmount);\n        _addToAmountWithdrawn(transferRootId, amount);\n        _fulfillWithdraw(transferId, recipient, amount, uint256(0));\n\n        emit Withdrew(transferId, recipient, amount, transferNonce);\n    }\n\n    /**\n     * @dev Allows the bonder to bond individual withdrawals before their TransferRoot has been committed.\n     * @param recipient The address receiving the Transfer\n     * @param amount The amount being transferred including the `_bonderFee`\n     * @param transferNonce Used to avoid transferId collisions\n     * @param bonderFee The amount paid to the address that withdraws the Transfer\n     */\n    function bondWithdrawal(\n        address recipient,\n        uint256 amount,\n        bytes32 transferNonce,\n        uint256 bonderFee\n    )\n        external\n        onlyBonder\n        requirePositiveBalance\n        nonReentrant\n    {\n        bytes32 transferId = getTransferId(\n            getChainId(),\n            recipient,\n            amount,\n            transferNonce,\n            bonderFee,\n            0,\n            0\n        );\n\n        _bondWithdrawal(transferId, amount);\n        _fulfillWithdraw(transferId, recipient, amount, bonderFee);\n    }\n\n    /**\n     * @dev Refunds the Bonder's stake from a bonded withdrawal and counts that withdrawal against\n     * its TransferRoot.\n     * @param bonder The Bonder of the withdrawal\n     * @param transferId The Transfer's unique identifier\n     * @param rootHash The Merkle root of the TransferRoot\n     * @param transferRootTotalAmount The total amount being transferred in a TransferRoot\n     * @param transferIdTreeIndex The index of the transferId in the Merkle tree\n     * @param siblings The siblings of the transferId in the Merkle tree\n     * @param totalLeaves The total number of leaves in the Merkle tree\n     */\n    function settleBondedWithdrawal(\n        address bonder,\n        bytes32 transferId,\n        bytes32 rootHash,\n        uint256 transferRootTotalAmount,\n        uint256 transferIdTreeIndex,\n        bytes32[] calldata siblings,\n        uint256 totalLeaves\n    )\n        external\n    {\n        require(\n            rootHash.verify(\n                transferId,\n                transferIdTreeIndex,\n                siblings,\n                totalLeaves\n            )\n        , \"BRG: Invalid transfer proof\");\n        bytes32 transferRootId = getTransferRootId(rootHash, transferRootTotalAmount);\n\n        uint256 amount = _bondedWithdrawalAmounts[bonder][transferId];\n        require(amount > 0, \"L2_BRG: transferId has no bond\");\n\n        _bondedWithdrawalAmounts[bonder][transferId] = 0;\n        _addToAmountWithdrawn(transferRootId, amount);\n        _addCredit(bonder, amount);\n\n        emit WithdrawalBondSettled(bonder, transferId, rootHash);\n    }\n\n    /**\n     * @dev Refunds the Bonder for all withdrawals that they bonded in a TransferRoot.\n     * @param bonder The address of the Bonder being refunded\n     * @param transferIds All transferIds in the TransferRoot in order\n     * @param totalAmount The totalAmount of the TransferRoot\n     */\n    function settleBondedWithdrawals(\n        address bonder,\n        // transferIds _must_ be calldata or it will be mutated by Lib_MerkleTree.getMerkleRoot\n        bytes32[] calldata transferIds,\n        uint256 totalAmount\n    )\n        external\n    {\n        bytes32 rootHash = Lib_MerkleTree.getMerkleRoot(transferIds);\n        bytes32 transferRootId = getTransferRootId(rootHash, totalAmount);\n\n        uint256 totalBondsSettled = 0;\n        for(uint256 i = 0; i < transferIds.length; i++) {\n            uint256 transferBondAmount = _bondedWithdrawalAmounts[bonder][transferIds[i]];\n            if (transferBondAmount > 0) {\n                totalBondsSettled = totalBondsSettled.add(transferBondAmount);\n                _bondedWithdrawalAmounts[bonder][transferIds[i]] = 0;\n            }\n        }\n\n        _addToAmountWithdrawn(transferRootId, totalBondsSettled);\n        _addCredit(bonder, totalBondsSettled);\n\n        emit MultipleWithdrawalsSettled(bonder, rootHash, totalBondsSettled);\n    }\n\n    /* ========== External TransferRoot Rescue ========== */\n\n    /**\n     * @dev Allows governance to withdraw the remaining amount from a TransferRoot after the rescue delay has passed.\n     * @param rootHash the Merkle root of the TransferRoot\n     * @param originalAmount The TransferRoot's recorded total\n     * @param recipient The address receiving the remaining balance\n     */\n    function rescueTransferRoot(bytes32 rootHash, uint256 originalAmount, address recipient) external onlyGovernance {\n        bytes32 transferRootId = getTransferRootId(rootHash, originalAmount);\n        TransferRoot memory transferRoot = getTransferRoot(rootHash, originalAmount);\n\n        require(transferRoot.createdAt != 0, \"BRG: TransferRoot not found\");\n        assert(transferRoot.total == originalAmount);\n        uint256 rescueDelayEnd = transferRoot.createdAt.add(RESCUE_DELAY);\n        require(block.timestamp >= rescueDelayEnd, \"BRG: TransferRoot cannot be rescued before the Rescue Delay\");\n\n        uint256 remainingAmount = transferRoot.total.sub(transferRoot.amountWithdrawn);\n        _addToAmountWithdrawn(transferRootId, remainingAmount);\n        _transferFromBridge(recipient, remainingAmount);\n    }\n\n    /* ========== Internal Functions ========== */\n\n    function _markTransferSpent(bytes32 transferId) internal {\n        require(!_spentTransferIds[transferId], \"BRG: The transfer has already been withdrawn\");\n        _spentTransferIds[transferId] = true;\n    }\n\n    function _addToAmountWithdrawn(bytes32 transferRootId, uint256 amount) internal {\n        TransferRoot storage transferRoot = _transferRoots[transferRootId];\n        require(transferRoot.total > 0, \"BRG: Transfer root not found\");\n\n        uint256 newAmountWithdrawn = transferRoot.amountWithdrawn.add(amount);\n        require(newAmountWithdrawn <= transferRoot.total, \"BRG: Withdrawal exceeds TransferRoot total\");\n\n        transferRoot.amountWithdrawn = newAmountWithdrawn;\n    }\n\n    function _setTransferRoot(bytes32 rootHash, uint256 totalAmount) internal {\n        bytes32 transferRootId = getTransferRootId(rootHash, totalAmount);\n        require(_transferRoots[transferRootId].total == 0, \"BRG: Transfer root already set\");\n        require(totalAmount > 0, \"BRG: Cannot set TransferRoot totalAmount of 0\");\n\n        _transferRoots[transferRootId] = TransferRoot(totalAmount, 0, block.timestamp);\n\n        emit TransferRootSet(rootHash, totalAmount);\n    }\n\n    function _bondWithdrawal(bytes32 transferId, uint256 amount) internal {\n        require(_bondedWithdrawalAmounts[msg.sender][transferId] == 0, \"BRG: Withdrawal has already been bonded\");\n        _addDebit(msg.sender, amount);\n        _bondedWithdrawalAmounts[msg.sender][transferId] = amount;\n\n        emit WithdrawalBonded(transferId, amount);\n    }\n\n    /* ========== Private Functions ========== */\n\n    /// @dev Completes the Transfer, distributes the Bonder fee and marks the Transfer as spent.\n    function _fulfillWithdraw(\n        bytes32 transferId,\n        address recipient,\n        uint256 amount,\n        uint256 bonderFee\n    ) private {\n        _markTransferSpent(transferId);\n        _transferFromBridge(recipient, amount.sub(bonderFee));\n        if (bonderFee > 0) {\n            _transferFromBridge(msg.sender, bonderFee);\n        }\n    }\n}\n"},"contracts/bridges/Accounting.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @dev Accounting is an abstract contract that encapsulates the most critical logic in the Hop contracts.\n * The accounting system works by using two balances that can only increase `_credit` and `_debit`.\n * A bonder's available balance is the total credit minus the total debit. The contract exposes\n * two external functions that allows a bonder to stake and unstake and exposes two internal\n * functions to its child contracts that allow the child contract to add to the credit \n * and debit balance. In addition, child contracts can override `_additionalDebit` to account\n * for any additional debit balance in an alternative way. Lastly, it exposes a modifier,\n * `requirePositiveBalance`, that can be used by child contracts to ensure the bonder does not\n * use more than its available stake.\n */\n\nabstract contract Accounting is ReentrancyGuard {\n    using SafeMath for uint256;\n\n    mapping(address => bool) private _isBonder;\n\n    mapping(address => uint256) private _credit;\n    mapping(address => uint256) private _debit;\n\n    event Stake (\n        address indexed account,\n        uint256 amount\n    );\n\n    event Unstake (\n        address indexed account,\n        uint256 amount\n    );\n\n    event BonderAdded (\n        address indexed newBonder\n    );\n\n    event BonderRemoved (\n        address indexed previousBonder\n    );\n\n    /* ========== Modifiers ========== */\n\n    modifier onlyBonder {\n        require(_isBonder[msg.sender], \"ACT: Caller is not bonder\");\n        _;\n    }\n\n    modifier onlyGovernance {\n        _requireIsGovernance();\n        _;\n    }\n\n    /// @dev Used by parent contract to ensure that the Bonder is solvent at the end of the transaction.\n    modifier requirePositiveBalance {\n        _;\n        require(getCredit(msg.sender) >= getDebitAndAdditionalDebit(msg.sender), \"ACT: Not enough available credit\");\n    }\n\n    /// @dev Sets the Bonder addresses\n    constructor(address[] memory bonders) public {\n        for (uint256 i = 0; i < bonders.length; i++) {\n            require(_isBonder[bonders[i]] == false, \"ACT: Cannot add duplicate bonder\");\n            _isBonder[bonders[i]] = true;\n            emit BonderAdded(bonders[i]);\n        }\n    }\n\n    /* ========== Virtual functions ========== */\n    /**\n     * @dev The following functions are overridden in L1_Bridge and L2_Bridge\n     */\n    function _transferFromBridge(address recipient, uint256 amount) internal virtual;\n    function _transferToBridge(address from, uint256 amount) internal virtual;\n    function _requireIsGovernance() internal virtual;\n\n    /**\n     * @dev This function can be optionally overridden by a parent contract to track any additional\n     * debit balance in an alternative way.\n     */\n    function _additionalDebit(address /*bonder*/) internal view virtual returns (uint256) {\n        this; // Silence state mutability warning without generating any additional byte code\n        return 0;\n    }\n\n    /* ========== Public/external getters ========== */\n\n    /**\n     * @dev Check if address is a Bonder\n     * @param maybeBonder The address being checked\n     * @return true if address is a Bonder\n     */\n    function getIsBonder(address maybeBonder) public view returns (bool) {\n        return _isBonder[maybeBonder];\n    }\n\n    /**\n     * @dev Get the Bonder's credit balance\n     * @param bonder The owner of the credit balance being checked\n     * @return The credit balance for the Bonder\n     */\n    function getCredit(address bonder) public view returns (uint256) {\n        return _credit[bonder];\n    }\n\n    /**\n     * @dev Gets the debit balance tracked by `_debit` and does not include `_additionalDebit()`\n     * @param bonder The owner of the debit balance being checked\n     * @return The debit amount for the Bonder\n     */\n    function getRawDebit(address bonder) external view returns (uint256) {\n        return _debit[bonder];\n    }\n\n    /**\n     * @dev Get the Bonder's total debit\n     * @param bonder The owner of the debit balance being checked\n     * @return The Bonder's total debit balance\n     */\n    function getDebitAndAdditionalDebit(address bonder) public view returns (uint256) {\n        return _debit[bonder].add(_additionalDebit(bonder));\n    }\n\n    /* ========== Bonder external functions ========== */\n\n    /** \n     * @dev Allows the Bonder to deposit tokens and increase its credit balance\n     * @param bonder The address being staked on\n     * @param amount The amount being staked\n     */\n    function stake(address bonder, uint256 amount) external payable nonReentrant {\n        require(_isBonder[bonder] == true, \"ACT: Address is not bonder\");\n        _transferToBridge(msg.sender, amount);\n        _addCredit(bonder, amount);\n\n        emit Stake(bonder, amount);\n    }\n\n    /**\n     * @dev Allows the caller to withdraw any available balance and add to their debit balance\n     * @param amount The amount being unstaked\n     */\n    function unstake(uint256 amount) external requirePositiveBalance nonReentrant {\n        _addDebit(msg.sender, amount);\n        _transferFromBridge(msg.sender, amount);\n\n        emit Unstake(msg.sender, amount);\n    }\n\n    /**\n     * @dev Add Bonder to allowlist\n     * @param bonder The address being added as a Bonder\n     */\n    function addBonder(address bonder) external onlyGovernance {\n        require(_isBonder[bonder] == false, \"ACT: Address is already bonder\");\n        _isBonder[bonder] = true;\n\n        emit BonderAdded(bonder);\n    }\n\n    /**\n     * @dev Remove Bonder from allowlist\n     * @param bonder The address being removed as a Bonder\n     */\n    function removeBonder(address bonder) external onlyGovernance {\n        require(_isBonder[bonder] == true, \"ACT: Address is not bonder\");\n        _isBonder[bonder] = false;\n\n        emit BonderRemoved(bonder);\n    }\n\n    /* ========== Internal functions ========== */\n\n    function _addCredit(address bonder, uint256 amount) internal {\n        _credit[bonder] = _credit[bonder].add(amount);\n    }\n\n    function _addDebit(address bonder, uint256 amount) internal {\n        _debit[bonder] = _debit[bonder].add(amount);\n    }\n}\n"},"contracts/libraries/Lib_MerkleTree.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.8.0;\n\n/**\n * @title Lib_MerkleTree\n * @author River Keefer\n */\nlibrary Lib_MerkleTree {\n\n    /**********************\n     * Internal Functions *\n     **********************/\n\n    /**\n     * Calculates a merkle root for a list of 32-byte leaf hashes.  WARNING: If the number\n     * of leaves passed in is not a power of two, it pads out the tree with zero hashes.\n     * If you do not know the original length of elements for the tree you are verifying,\n     * then this may allow empty leaves past _elements.length to pass a verification check down the line.\n     * Note that the _elements argument is modified, therefore it must not be used again afterwards\n     * @param _elements Array of hashes from which to generate a merkle root.\n     * @return Merkle root of the leaves, with zero hashes for non-powers-of-two (see above).\n     */\n    function getMerkleRoot(\n        bytes32[] memory _elements\n    )\n        internal\n        pure\n        returns (\n            bytes32\n        )\n    {\n        require(\n            _elements.length > 0,\n            \"Lib_MerkleTree: Must provide at least one leaf hash.\"\n        );\n\n        if (_elements.length == 1) {\n            return _elements[0];\n        }\n\n        uint256[16] memory defaults = [\n            0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563,\n            0x633dc4d7da7256660a892f8f1604a44b5432649cc8ec5cb3ced4c4e6ac94dd1d,\n            0x890740a8eb06ce9be422cb8da5cdafc2b58c0a5e24036c578de2a433c828ff7d,\n            0x3b8ec09e026fdc305365dfc94e189a81b38c7597b3d941c279f042e8206e0bd8,\n            0xecd50eee38e386bd62be9bedb990706951b65fe053bd9d8a521af753d139e2da,\n            0xdefff6d330bb5403f63b14f33b578274160de3a50df4efecf0e0db73bcdd3da5,\n            0x617bdd11f7c0a11f49db22f629387a12da7596f9d1704d7465177c63d88ec7d7,\n            0x292c23a9aa1d8bea7e2435e555a4a60e379a5a35f3f452bae60121073fb6eead,\n            0xe1cea92ed99acdcb045a6726b2f87107e8a61620a232cf4d7d5b5766b3952e10,\n            0x7ad66c0a68c72cb89e4fb4303841966e4062a76ab97451e3b9fb526a5ceb7f82,\n            0xe026cc5a4aed3c22a58cbd3d2ac754c9352c5436f638042dca99034e83636516,\n            0x3d04cffd8b46a874edf5cfae63077de85f849a660426697b06a829c70dd1409c,\n            0xad676aa337a485e4728a0b240d92b3ef7b3c372d06d189322bfd5f61f1e7203e,\n            0xa2fca4a49658f9fab7aa63289c91b7c7b6c832a6d0e69334ff5b0a3483d09dab,\n            0x4ebfd9cd7bca2505f7bef59cc1c12ecc708fff26ae4af19abe852afe9e20c862,\n            0x2def10d13dd169f550f578bda343d9717a138562e0093b380a1120789d53cf10\n        ];\n\n        // Reserve memory space for our hashes.\n        bytes memory buf = new bytes(64);\n\n        // We'll need to keep track of left and right siblings.\n        bytes32 leftSibling;\n        bytes32 rightSibling;\n\n        // Number of non-empty nodes at the current depth.\n        uint256 rowSize = _elements.length;\n\n        // Current depth, counting from 0 at the leaves\n        uint256 depth = 0;\n\n        // Common sub-expressions\n        uint256 halfRowSize;         // rowSize / 2\n        bool rowSizeIsOdd;           // rowSize % 2 == 1\n\n        while (rowSize > 1) {\n            halfRowSize = rowSize / 2;\n            rowSizeIsOdd = rowSize % 2 == 1;\n\n            for (uint256 i = 0; i < halfRowSize; i++) {\n                leftSibling  = _elements[(2 * i)    ];\n                rightSibling = _elements[(2 * i) + 1];\n                assembly {\n                    mstore(add(buf, 32), leftSibling )\n                    mstore(add(buf, 64), rightSibling)\n                }\n\n                _elements[i] = keccak256(buf);\n            }\n\n            if (rowSizeIsOdd) {\n                leftSibling  = _elements[rowSize - 1];\n                rightSibling = bytes32(defaults[depth]);\n                assembly {\n                    mstore(add(buf, 32), leftSibling)\n                    mstore(add(buf, 64), rightSibling)\n                }\n\n                _elements[halfRowSize] = keccak256(buf);\n            }\n\n            rowSize = halfRowSize + (rowSizeIsOdd ? 1 : 0);\n            depth++;\n        }\n\n        return _elements[0];\n    }\n\n    /**\n     * Verifies a merkle branch for the given leaf hash.  Assumes the original length\n     * of leaves generated is a known, correct input, and does not return true for indices\n     * extending past that index (even if _siblings would be otherwise valid.)\n     * @param _root The Merkle root to verify against.\n     * @param _leaf The leaf hash to verify inclusion of.\n     * @param _index The index in the tree of this leaf.\n     * @param _siblings Array of sibline nodes in the inclusion proof, starting from depth 0 (bottom of the tree).\n     * @param _totalLeaves The total number of leaves originally passed into.\n     * @return Whether or not the merkle branch and leaf passes verification.\n     */\n    function verify(\n        bytes32 _root,\n        bytes32 _leaf,\n        uint256 _index,\n        bytes32[] memory _siblings,\n        uint256 _totalLeaves\n    )\n        internal\n        pure\n        returns (\n            bool\n        )\n    {\n        require(\n            _totalLeaves > 0,\n            \"Lib_MerkleTree: Total leaves must be greater than zero.\"\n        );\n\n        require(\n            _index < _totalLeaves,\n            \"Lib_MerkleTree: Index out of bounds.\"\n        );\n\n        require(\n            _siblings.length == _ceilLog2(_totalLeaves),\n            \"Lib_MerkleTree: Total siblings does not correctly correspond to total leaves.\"\n        );\n\n        bytes32 computedRoot = _leaf;\n\n        for (uint256 i = 0; i < _siblings.length; i++) {\n            if ((_index & 1) == 1) {\n                computedRoot = keccak256(\n                    abi.encodePacked(\n                        _siblings[i],\n                        computedRoot\n                    )\n                );\n            } else {\n                computedRoot = keccak256(\n                    abi.encodePacked(\n                        computedRoot,\n                        _siblings[i]\n                    )\n                );\n            }\n\n            _index >>= 1;\n        }\n\n        return _root == computedRoot;\n    }\n\n\n    /*********************\n     * Private Functions *\n     *********************/\n\n    /**\n     * Calculates the integer ceiling of the log base 2 of an input.\n     * @param _in Unsigned input to calculate the log.\n     * @return ceil(log_base_2(_in))\n     */\n    function _ceilLog2(\n        uint256 _in\n    )\n        private\n        pure\n        returns (\n            uint256\n        )\n    {\n        require(\n            _in > 0,\n            \"Lib_MerkleTree: Cannot compute ceil(log_2) of 0.\"\n        );\n\n        if (_in == 1) {\n            return 0;\n        }\n\n        // Find the highest set bit (will be floor(log_2)).\n        // Borrowed with <3 from https://github.com/ethereum/solidity-examples\n        uint256 val = _in;\n        uint256 highest = 0;\n        for (uint256 i = 128; i >= 1; i >>= 1) {\n            if (val & (uint(1) << i) - 1 << i != 0) {\n                highest += i;\n                val >>= i;\n            }\n        }\n\n        // Increment by one if this is not a perfect logarithm.\n        if ((uint(1) << highest) != _in) {\n            highest += 1;\n        }\n\n        return highest;\n    }\n}"}},"settings":{"libraries":{},"optimizer":{"enabled":true,"runs":50000},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}},"ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bonders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBonder\",\"type\":\"address\"}],\"name\":\"BonderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousBonder\",\"type\":\"address\"}],\"name\":\"BonderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferRootId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"}],\"name\":\"ChallengeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBondsSettled\",\"type\":\"uint256\"}],\"name\":\"MultipleWithdrawalsSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferRootId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"}],\"name\":\"TransferBondChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferRootBonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"TransferRootConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"TransferRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"}],\"name\":\"TransferSentToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalBondSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalBonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGE_AMOUNT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_SLOT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"addBonder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"bondTransferRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bonderFee\",\"type\":\"uint256\"}],\"name\":\"bondWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeResolutionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"challengeTransferBond\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rootCommittedAt\",\"type\":\"uint256\"}],\"name\":\"confirmTransferRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crossDomainMessengerWrappers\",\"outputs\":[{\"internalType\":\"contract IMessengerWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBondForTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"name\":\"getBondedWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getChallengeAmountForTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"getCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"getDebitAndAdditionalDebit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeBonder\",\"type\":\"address\"}],\"name\":\"getIsBonder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"getRawDebit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getTimeSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bonderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"getTransferId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"getTransferRoot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.TransferRoot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"getTransferRootId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isChainIdPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"name\":\"isTransferIdSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTransferRootBondDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"removeBonder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueTransferRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"}],\"name\":\"sendToL2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"setChainIdDepositsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"}],\"name\":\"setChallengePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeResolutionPeriod\",\"type\":\"uint256\"}],\"name\":\"setChallengeResolutionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IMessengerWrapper\",\"name\":\"_crossDomainMessengerWrapper\",\"type\":\"address\"}],\"name\":\"setCrossDomainMessengerWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTransferRootBondDelay\",\"type\":\"uint256\"}],\"name\":\"setMinTransferRootBondDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"transferRootTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferIdTreeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"totalLeaves\",\"type\":\"uint256\"}],\"name\":\"settleBondedWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"transferIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"settleBondedWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeSlotToAmountBonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transferBonds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"challengeResolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transferRootCommittedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bonderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"transferRootTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferIdTreeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"totalLeaves\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"L1_ETH_Bridge","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":1,"Runs":50000,"ConstructorArguments":"0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000f56e305024b195383245a075737d16dbdb8487fb00000000000000000000000000000000000000000000000000000000000000020000000000000000000000002a6303e6b99d451df3566068ebb110708335658f0000000000000000000000009137a628546e2b1bc26f60a5d1262fb6d58ea44a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""}]}