use alloy_sol_types::sol;

sol!(Curve_TriCrypto_Factory_V2, "./abis/Curve_TriCrypto_Factory_V2.json");
sol!(Curve_Factory1_V1, "./abis/Curve_Factory1_V1.json");
sol!(Curve_Meta_Factory1_V1, "./abis/Curve_Meta_Factory1_V1.json");
sol!(Curve_Factory2_V1, "./abis/Curve_Factory2_V1.json");
sol!(Uniswap_V3, "./abis/Uniswap_V3.json");
sol!(Curve_Meta_V1, "./abis/Curve_Meta_V1.json");
sol!(Curve_Crypto_V2, "./abis/Curve_Crypto_V2.json");
sol!(SushiSwap_V2, "./abis/SushiSwap_V2.json");
sol!(Curve_Crypto_Factory_V2, "./abis/Curve_Crypto_Factory_V2.json");

#[allow(non_camel_case_types)]
pub enum StaticBindings {
    Curve_TriCrypto_Factory_V2(Curve_TriCrypto_Factory_V2_Enum),
    Curve_Factory1_V1(Curve_Factory1_V1_Enum),
    Curve_Meta_Factory1_V1(Curve_Meta_Factory1_V1_Enum),
    Curve_Factory2_V1(Curve_Factory2_V1_Enum),
    Uniswap_V3(Uniswap_V3_Enum),
    Curve_Meta_V1(Curve_Meta_V1_Enum),
    Curve_Crypto_V2(Curve_Crypto_V2_Enum),
    SushiSwap_V2(SushiSwap_V2_Enum),
    Curve_Crypto_Factory_V2(Curve_Crypto_Factory_V2_Enum),
}

#[allow(non_camel_case_types)]
pub enum Curve_TriCrypto_Factory_V2_Enum {
    A(Curve_TriCrypto_Factory_V2::ACall),
    ADMIN_FEE(Curve_TriCrypto_Factory_V2::ADMIN_FEECall),
    D(Curve_TriCrypto_Factory_V2::DCall),
    DOMAIN_SEPARATOR(Curve_TriCrypto_Factory_V2::DOMAIN_SEPARATORCall),
    MATH(Curve_TriCrypto_Factory_V2::MATHCall),
    WETH20(Curve_TriCrypto_Factory_V2::WETH20Call),
    add_liquidity(Curve_TriCrypto_Factory_V2::add_liquidity_0Call),
    add_liquidity(Curve_TriCrypto_Factory_V2::add_liquidity_1Call),
    add_liquidity(Curve_TriCrypto_Factory_V2::add_liquidity_2Call),
    adjustment_step(Curve_TriCrypto_Factory_V2::adjustment_stepCall),
    admin_actions_deadline(Curve_TriCrypto_Factory_V2::admin_actions_deadlineCall),
    allowance(Curve_TriCrypto_Factory_V2::allowanceCall),
    allowed_extra_profit(Curve_TriCrypto_Factory_V2::allowed_extra_profitCall),
    apply_new_parameters(Curve_TriCrypto_Factory_V2::apply_new_parametersCall),
    approve(Curve_TriCrypto_Factory_V2::approveCall),
    balanceOf(Curve_TriCrypto_Factory_V2::balanceOfCall),
    balances(Curve_TriCrypto_Factory_V2::balancesCall),
    calc_token_amount(Curve_TriCrypto_Factory_V2::calc_token_amountCall),
    calc_token_fee(Curve_TriCrypto_Factory_V2::calc_token_feeCall),
    calc_withdraw_one_coin(Curve_TriCrypto_Factory_V2::calc_withdraw_one_coinCall),
    claim_admin_fees(Curve_TriCrypto_Factory_V2::claim_admin_feesCall),
    coins(Curve_TriCrypto_Factory_V2::coinsCall),
    commit_new_parameters(Curve_TriCrypto_Factory_V2::commit_new_parametersCall),
    decimals(Curve_TriCrypto_Factory_V2::decimalsCall),
    decreaseAllowance(Curve_TriCrypto_Factory_V2::decreaseAllowanceCall),
    exchange(Curve_TriCrypto_Factory_V2::exchange_0Call),
    exchange(Curve_TriCrypto_Factory_V2::exchange_1Call),
    exchange(Curve_TriCrypto_Factory_V2::exchange_2Call),
    exchange_extended(Curve_TriCrypto_Factory_V2::exchange_extendedCall),
    exchange_underlying(Curve_TriCrypto_Factory_V2::exchange_underlying_0Call),
    exchange_underlying(Curve_TriCrypto_Factory_V2::exchange_underlying_1Call),
    factory(Curve_TriCrypto_Factory_V2::factoryCall),
    fee(Curve_TriCrypto_Factory_V2::feeCall),
    fee_calc(Curve_TriCrypto_Factory_V2::fee_calcCall),
    fee_gamma(Curve_TriCrypto_Factory_V2::fee_gammaCall),
    fee_receiver(Curve_TriCrypto_Factory_V2::fee_receiverCall),
    future_A_gamma(Curve_TriCrypto_Factory_V2::future_A_gammaCall),
    future_A_gamma_time(Curve_TriCrypto_Factory_V2::future_A_gamma_timeCall),
    gamma(Curve_TriCrypto_Factory_V2::gammaCall),
    get_dx(Curve_TriCrypto_Factory_V2::get_dxCall),
    get_dy(Curve_TriCrypto_Factory_V2::get_dyCall),
    get_virtual_price(Curve_TriCrypto_Factory_V2::get_virtual_priceCall),
    increaseAllowance(Curve_TriCrypto_Factory_V2::increaseAllowanceCall),
    initial_A_gamma(Curve_TriCrypto_Factory_V2::initial_A_gammaCall),
    initial_A_gamma_time(Curve_TriCrypto_Factory_V2::initial_A_gamma_timeCall),
    last_prices(Curve_TriCrypto_Factory_V2::last_pricesCall),
    last_prices_timestamp(Curve_TriCrypto_Factory_V2::last_prices_timestampCall),
    lp_price(Curve_TriCrypto_Factory_V2::lp_priceCall),
    ma_time(Curve_TriCrypto_Factory_V2::ma_timeCall),
    mid_fee(Curve_TriCrypto_Factory_V2::mid_feeCall),
    name(Curve_TriCrypto_Factory_V2::nameCall),
    nonces(Curve_TriCrypto_Factory_V2::noncesCall),
    out_fee(Curve_TriCrypto_Factory_V2::out_feeCall),
    packed_fee_params(Curve_TriCrypto_Factory_V2::packed_fee_paramsCall),
    packed_rebalancing_params(Curve_TriCrypto_Factory_V2::packed_rebalancing_paramsCall),
    permit(Curve_TriCrypto_Factory_V2::permitCall),
    precisions(Curve_TriCrypto_Factory_V2::precisionsCall),
    price_oracle(Curve_TriCrypto_Factory_V2::price_oracleCall),
    price_scale(Curve_TriCrypto_Factory_V2::price_scaleCall),
    ramp_A_gamma(Curve_TriCrypto_Factory_V2::ramp_A_gammaCall),
    remove_liquidity(Curve_TriCrypto_Factory_V2::remove_liquidity_0Call),
    remove_liquidity(Curve_TriCrypto_Factory_V2::remove_liquidity_1Call),
    remove_liquidity(Curve_TriCrypto_Factory_V2::remove_liquidity_2Call),
    remove_liquidity(Curve_TriCrypto_Factory_V2::remove_liquidity_3Call),
    remove_liquidity_one_coin(Curve_TriCrypto_Factory_V2::remove_liquidity_one_coin_0Call),
    remove_liquidity_one_coin(Curve_TriCrypto_Factory_V2::remove_liquidity_one_coin_1Call),
    remove_liquidity_one_coin(Curve_TriCrypto_Factory_V2::remove_liquidity_one_coin_2Call),
    revert_new_parameters(Curve_TriCrypto_Factory_V2::revert_new_parametersCall),
    salt(Curve_TriCrypto_Factory_V2::saltCall),
    stop_ramp_A_gamma(Curve_TriCrypto_Factory_V2::stop_ramp_A_gammaCall),
    symbol(Curve_TriCrypto_Factory_V2::symbolCall),
    totalSupply(Curve_TriCrypto_Factory_V2::totalSupplyCall),
    transfer(Curve_TriCrypto_Factory_V2::transferCall),
    transferFrom(Curve_TriCrypto_Factory_V2::transferFromCall),
    version(Curve_TriCrypto_Factory_V2::versionCall),
    virtual_price(Curve_TriCrypto_Factory_V2::virtual_priceCall),
    xcp_profit(Curve_TriCrypto_Factory_V2::xcp_profitCall),
    xcp_profit_a(Curve_TriCrypto_Factory_V2::xcp_profit_aCall),
}

#[allow(non_camel_case_types)]
pub enum Curve_Factory1_V1_Enum {
    A(Curve_Factory1_V1::ACall),
    A_precise(Curve_Factory1_V1::A_preciseCall),
    add_liquidity(Curve_Factory1_V1::add_liquidity_0Call),
    add_liquidity(Curve_Factory1_V1::add_liquidity_1Call),
    admin_balances(Curve_Factory1_V1::admin_balancesCall),
    admin_fee(Curve_Factory1_V1::admin_feeCall),
    allowance(Curve_Factory1_V1::allowanceCall),
    approve(Curve_Factory1_V1::approveCall),
    balanceOf(Curve_Factory1_V1::balanceOfCall),
    balances(Curve_Factory1_V1::balancesCall),
    calc_token_amount(Curve_Factory1_V1::calc_token_amountCall),
    calc_withdraw_one_coin(Curve_Factory1_V1::calc_withdraw_one_coin_0Call),
    calc_withdraw_one_coin(Curve_Factory1_V1::calc_withdraw_one_coin_1Call),
    coins(Curve_Factory1_V1::coinsCall),
    decimals(Curve_Factory1_V1::decimalsCall),
    exchange(Curve_Factory1_V1::exchange_0Call),
    exchange(Curve_Factory1_V1::exchange_1Call),
    fee(Curve_Factory1_V1::feeCall),
    future_A(Curve_Factory1_V1::future_ACall),
    future_A_time(Curve_Factory1_V1::future_A_timeCall),
    get_balances(Curve_Factory1_V1::get_balancesCall),
    get_dy(Curve_Factory1_V1::get_dyCall),
    get_virtual_price(Curve_Factory1_V1::get_virtual_priceCall),
    initial_A(Curve_Factory1_V1::initial_ACall),
    initial_A_time(Curve_Factory1_V1::initial_A_timeCall),
    initialize(Curve_Factory1_V1::initializeCall),
    name(Curve_Factory1_V1::nameCall),
    ramp_A(Curve_Factory1_V1::ramp_ACall),
    remove_liquidity(Curve_Factory1_V1::remove_liquidity_0Call),
    remove_liquidity(Curve_Factory1_V1::remove_liquidity_1Call),
    remove_liquidity_imbalance(Curve_Factory1_V1::remove_liquidity_imbalance_0Call),
    remove_liquidity_imbalance(Curve_Factory1_V1::remove_liquidity_imbalance_1Call),
    remove_liquidity_one_coin(Curve_Factory1_V1::remove_liquidity_one_coin_0Call),
    remove_liquidity_one_coin(Curve_Factory1_V1::remove_liquidity_one_coin_1Call),
    stop_ramp_A(Curve_Factory1_V1::stop_ramp_ACall),
    symbol(Curve_Factory1_V1::symbolCall),
    totalSupply(Curve_Factory1_V1::totalSupplyCall),
    transfer(Curve_Factory1_V1::transferCall),
    transferFrom(Curve_Factory1_V1::transferFromCall),
    withdraw_admin_fees(Curve_Factory1_V1::withdraw_admin_feesCall),
}

#[allow(non_camel_case_types)]
pub enum Curve_Meta_Factory1_V1_Enum {
    A(Curve_Meta_Factory1_V1::ACall),
    A_precise(Curve_Meta_Factory1_V1::A_preciseCall),
    add_liquidity(Curve_Meta_Factory1_V1::add_liquidity_0Call),
    add_liquidity(Curve_Meta_Factory1_V1::add_liquidity_1Call),
    admin_balances(Curve_Meta_Factory1_V1::admin_balancesCall),
    admin_fee(Curve_Meta_Factory1_V1::admin_feeCall),
    allowance(Curve_Meta_Factory1_V1::allowanceCall),
    approve(Curve_Meta_Factory1_V1::approveCall),
    balanceOf(Curve_Meta_Factory1_V1::balanceOfCall),
    balances(Curve_Meta_Factory1_V1::balancesCall),
    calc_token_amount(Curve_Meta_Factory1_V1::calc_token_amountCall),
    calc_withdraw_one_coin(Curve_Meta_Factory1_V1::calc_withdraw_one_coinCall),
    coins(Curve_Meta_Factory1_V1::coinsCall),
    decimals(Curve_Meta_Factory1_V1::decimalsCall),
    exchange(Curve_Meta_Factory1_V1::exchange_0Call),
    exchange(Curve_Meta_Factory1_V1::exchange_1Call),
    exchange_underlying(Curve_Meta_Factory1_V1::exchange_underlying_0Call),
    exchange_underlying(Curve_Meta_Factory1_V1::exchange_underlying_1Call),
    fee(Curve_Meta_Factory1_V1::feeCall),
    future_A(Curve_Meta_Factory1_V1::future_ACall),
    future_A_time(Curve_Meta_Factory1_V1::future_A_timeCall),
    get_dy(Curve_Meta_Factory1_V1::get_dyCall),
    get_dy_underlying(Curve_Meta_Factory1_V1::get_dy_underlyingCall),
    get_virtual_price(Curve_Meta_Factory1_V1::get_virtual_priceCall),
    initial_A(Curve_Meta_Factory1_V1::initial_ACall),
    initial_A_time(Curve_Meta_Factory1_V1::initial_A_timeCall),
    initialize(Curve_Meta_Factory1_V1::initializeCall),
    name(Curve_Meta_Factory1_V1::nameCall),
    ramp_A(Curve_Meta_Factory1_V1::ramp_ACall),
    remove_liquidity(Curve_Meta_Factory1_V1::remove_liquidity_0Call),
    remove_liquidity(Curve_Meta_Factory1_V1::remove_liquidity_1Call),
    remove_liquidity_imbalance(Curve_Meta_Factory1_V1::remove_liquidity_imbalance_0Call),
    remove_liquidity_imbalance(Curve_Meta_Factory1_V1::remove_liquidity_imbalance_1Call),
    remove_liquidity_one_coin(Curve_Meta_Factory1_V1::remove_liquidity_one_coin_0Call),
    remove_liquidity_one_coin(Curve_Meta_Factory1_V1::remove_liquidity_one_coin_1Call),
    stop_ramp_A(Curve_Meta_Factory1_V1::stop_ramp_ACall),
    symbol(Curve_Meta_Factory1_V1::symbolCall),
    totalSupply(Curve_Meta_Factory1_V1::totalSupplyCall),
    transfer(Curve_Meta_Factory1_V1::transferCall),
    transferFrom(Curve_Meta_Factory1_V1::transferFromCall),
    withdraw_admin_fees(Curve_Meta_Factory1_V1::withdraw_admin_feesCall),
}

#[allow(non_camel_case_types)]
pub enum Curve_Factory2_V1_Enum {
    A(Curve_Factory2_V1::ACall),
    A_precise(Curve_Factory2_V1::A_preciseCall),
    DOMAIN_SEPARATOR(Curve_Factory2_V1::DOMAIN_SEPARATORCall),
    add_liquidity(Curve_Factory2_V1::add_liquidity_0Call),
    add_liquidity(Curve_Factory2_V1::add_liquidity_1Call),
    admin_action_deadline(Curve_Factory2_V1::admin_action_deadlineCall),
    admin_balances(Curve_Factory2_V1::admin_balancesCall),
    admin_fee(Curve_Factory2_V1::admin_feeCall),
    allowance(Curve_Factory2_V1::allowanceCall),
    apply_new_fee(Curve_Factory2_V1::apply_new_feeCall),
    approve(Curve_Factory2_V1::approveCall),
    balanceOf(Curve_Factory2_V1::balanceOfCall),
    balances(Curve_Factory2_V1::balancesCall),
    calc_token_amount(Curve_Factory2_V1::calc_token_amountCall),
    calc_withdraw_one_coin(Curve_Factory2_V1::calc_withdraw_one_coinCall),
    coins(Curve_Factory2_V1::coinsCall),
    commit_new_fee(Curve_Factory2_V1::commit_new_feeCall),
    decimals(Curve_Factory2_V1::decimalsCall),
    ema_price(Curve_Factory2_V1::ema_priceCall),
    exchange(Curve_Factory2_V1::exchange_0Call),
    exchange(Curve_Factory2_V1::exchange_1Call),
    factory(Curve_Factory2_V1::factoryCall),
    fee(Curve_Factory2_V1::feeCall),
    future_A(Curve_Factory2_V1::future_ACall),
    future_A_time(Curve_Factory2_V1::future_A_timeCall),
    future_fee(Curve_Factory2_V1::future_feeCall),
    get_balances(Curve_Factory2_V1::get_balancesCall),
    get_dx(Curve_Factory2_V1::get_dxCall),
    get_dy(Curve_Factory2_V1::get_dyCall),
    get_p(Curve_Factory2_V1::get_pCall),
    get_virtual_price(Curve_Factory2_V1::get_virtual_priceCall),
    initial_A(Curve_Factory2_V1::initial_ACall),
    initial_A_time(Curve_Factory2_V1::initial_A_timeCall),
    initialize(Curve_Factory2_V1::initializeCall),
    last_price(Curve_Factory2_V1::last_priceCall),
    ma_exp_time(Curve_Factory2_V1::ma_exp_timeCall),
    ma_last_time(Curve_Factory2_V1::ma_last_timeCall),
    name(Curve_Factory2_V1::nameCall),
    nonces(Curve_Factory2_V1::noncesCall),
    permit(Curve_Factory2_V1::permitCall),
    price_oracle(Curve_Factory2_V1::price_oracleCall),
    ramp_A(Curve_Factory2_V1::ramp_ACall),
    remove_liquidity(Curve_Factory2_V1::remove_liquidity_0Call),
    remove_liquidity(Curve_Factory2_V1::remove_liquidity_1Call),
    remove_liquidity_imbalance(Curve_Factory2_V1::remove_liquidity_imbalance_0Call),
    remove_liquidity_imbalance(Curve_Factory2_V1::remove_liquidity_imbalance_1Call),
    remove_liquidity_one_coin(Curve_Factory2_V1::remove_liquidity_one_coin_0Call),
    remove_liquidity_one_coin(Curve_Factory2_V1::remove_liquidity_one_coin_1Call),
    set_ma_exp_time(Curve_Factory2_V1::set_ma_exp_timeCall),
    stop_ramp_A(Curve_Factory2_V1::stop_ramp_ACall),
    symbol(Curve_Factory2_V1::symbolCall),
    totalSupply(Curve_Factory2_V1::totalSupplyCall),
    transfer(Curve_Factory2_V1::transferCall),
    transferFrom(Curve_Factory2_V1::transferFromCall),
    version(Curve_Factory2_V1::versionCall),
    withdraw_admin_fees(Curve_Factory2_V1::withdraw_admin_feesCall),
}

#[allow(non_camel_case_types)]
pub enum Uniswap_V3_Enum {
    burn(Uniswap_V3::burnCall),
    collect(Uniswap_V3::collectCall),
    collectProtocol(Uniswap_V3::collectProtocolCall),
    factory(Uniswap_V3::factoryCall),
    fee(Uniswap_V3::feeCall),
    feeGrowthGlobal0X128(Uniswap_V3::feeGrowthGlobal0X128Call),
    feeGrowthGlobal1X128(Uniswap_V3::feeGrowthGlobal1X128Call),
    flash(Uniswap_V3::flashCall),
    increaseObservationCardinalityNext(Uniswap_V3::increaseObservationCardinalityNextCall),
    initialize(Uniswap_V3::initializeCall),
    liquidity(Uniswap_V3::liquidityCall),
    maxLiquidityPerTick(Uniswap_V3::maxLiquidityPerTickCall),
    mint(Uniswap_V3::mintCall),
    observations(Uniswap_V3::observationsCall),
    observe(Uniswap_V3::observeCall),
    positions(Uniswap_V3::positionsCall),
    protocolFees(Uniswap_V3::protocolFeesCall),
    setFeeProtocol(Uniswap_V3::setFeeProtocolCall),
    slot0(Uniswap_V3::slot0Call),
    snapshotCumulativesInside(Uniswap_V3::snapshotCumulativesInsideCall),
    swap(Uniswap_V3::swapCall),
    tickBitmap(Uniswap_V3::tickBitmapCall),
    tickSpacing(Uniswap_V3::tickSpacingCall),
    ticks(Uniswap_V3::ticksCall),
    token0(Uniswap_V3::token0Call),
    token1(Uniswap_V3::token1Call),
}

#[allow(non_camel_case_types)]
pub enum Curve_Meta_V1_Enum {
    A(Curve_Meta_V1::ACall),
    A_precise(Curve_Meta_V1::A_preciseCall),
    add_liquidity(Curve_Meta_V1::add_liquidityCall),
    admin_actions_deadline(Curve_Meta_V1::admin_actions_deadlineCall),
    admin_balances(Curve_Meta_V1::admin_balancesCall),
    admin_fee(Curve_Meta_V1::admin_feeCall),
    apply_new_fee(Curve_Meta_V1::apply_new_feeCall),
    apply_transfer_ownership(Curve_Meta_V1::apply_transfer_ownershipCall),
    balances(Curve_Meta_V1::balancesCall),
    base_cache_updated(Curve_Meta_V1::base_cache_updatedCall),
    base_coins(Curve_Meta_V1::base_coinsCall),
    base_pool(Curve_Meta_V1::base_poolCall),
    base_virtual_price(Curve_Meta_V1::base_virtual_priceCall),
    calc_token_amount(Curve_Meta_V1::calc_token_amountCall),
    calc_withdraw_one_coin(Curve_Meta_V1::calc_withdraw_one_coinCall),
    coins(Curve_Meta_V1::coinsCall),
    commit_new_fee(Curve_Meta_V1::commit_new_feeCall),
    commit_transfer_ownership(Curve_Meta_V1::commit_transfer_ownershipCall),
    donate_admin_fees(Curve_Meta_V1::donate_admin_feesCall),
    exchange(Curve_Meta_V1::exchangeCall),
    exchange_underlying(Curve_Meta_V1::exchange_underlyingCall),
    fee(Curve_Meta_V1::feeCall),
    future_A(Curve_Meta_V1::future_ACall),
    future_A_time(Curve_Meta_V1::future_A_timeCall),
    future_admin_fee(Curve_Meta_V1::future_admin_feeCall),
    future_fee(Curve_Meta_V1::future_feeCall),
    future_owner(Curve_Meta_V1::future_ownerCall),
    get_dy(Curve_Meta_V1::get_dyCall),
    get_dy_underlying(Curve_Meta_V1::get_dy_underlyingCall),
    get_virtual_price(Curve_Meta_V1::get_virtual_priceCall),
    initial_A(Curve_Meta_V1::initial_ACall),
    initial_A_time(Curve_Meta_V1::initial_A_timeCall),
    kill_me(Curve_Meta_V1::kill_meCall),
    owner(Curve_Meta_V1::ownerCall),
    ramp_A(Curve_Meta_V1::ramp_ACall),
    remove_liquidity(Curve_Meta_V1::remove_liquidityCall),
    remove_liquidity_imbalance(Curve_Meta_V1::remove_liquidity_imbalanceCall),
    remove_liquidity_one_coin(Curve_Meta_V1::remove_liquidity_one_coinCall),
    revert_new_parameters(Curve_Meta_V1::revert_new_parametersCall),
    revert_transfer_ownership(Curve_Meta_V1::revert_transfer_ownershipCall),
    stop_ramp_A(Curve_Meta_V1::stop_ramp_ACall),
    token(Curve_Meta_V1::tokenCall),
    transfer_ownership_deadline(Curve_Meta_V1::transfer_ownership_deadlineCall),
    unkill_me(Curve_Meta_V1::unkill_meCall),
    withdraw_admin_fees(Curve_Meta_V1::withdraw_admin_feesCall),
}

#[allow(non_camel_case_types)]
pub enum Curve_Crypto_V2_Enum {
    A(Curve_Crypto_V2::ACall),
    D(Curve_Crypto_V2::DCall),
    add_liquidity(Curve_Crypto_V2::add_liquidity_0Call),
    add_liquidity(Curve_Crypto_V2::add_liquidity_1Call),
    add_liquidity(Curve_Crypto_V2::add_liquidity_2Call),
    adjustment_step(Curve_Crypto_V2::adjustment_stepCall),
    admin_actions_deadline(Curve_Crypto_V2::admin_actions_deadlineCall),
    admin_fee(Curve_Crypto_V2::admin_feeCall),
    admin_fee_receiver(Curve_Crypto_V2::admin_fee_receiverCall),
    allowed_extra_profit(Curve_Crypto_V2::allowed_extra_profitCall),
    apply_new_parameters(Curve_Crypto_V2::apply_new_parametersCall),
    apply_transfer_ownership(Curve_Crypto_V2::apply_transfer_ownershipCall),
    balances(Curve_Crypto_V2::balancesCall),
    calc_token_amount(Curve_Crypto_V2::calc_token_amountCall),
    calc_withdraw_one_coin(Curve_Crypto_V2::calc_withdraw_one_coinCall),
    claim_admin_fees(Curve_Crypto_V2::claim_admin_feesCall),
    coins(Curve_Crypto_V2::coinsCall),
    commit_new_parameters(Curve_Crypto_V2::commit_new_parametersCall),
    commit_transfer_ownership(Curve_Crypto_V2::commit_transfer_ownershipCall),
    exchange(Curve_Crypto_V2::exchange_0Call),
    exchange(Curve_Crypto_V2::exchange_1Call),
    exchange(Curve_Crypto_V2::exchange_2Call),
    exchange_extended(Curve_Crypto_V2::exchange_extendedCall),
    exchange_underlying(Curve_Crypto_V2::exchange_underlying_0Call),
    exchange_underlying(Curve_Crypto_V2::exchange_underlying_1Call),
    fee(Curve_Crypto_V2::feeCall),
    fee_gamma(Curve_Crypto_V2::fee_gammaCall),
    future_A_gamma(Curve_Crypto_V2::future_A_gammaCall),
    future_A_gamma_time(Curve_Crypto_V2::future_A_gamma_timeCall),
    future_adjustment_step(Curve_Crypto_V2::future_adjustment_stepCall),
    future_admin_fee(Curve_Crypto_V2::future_admin_feeCall),
    future_allowed_extra_profit(Curve_Crypto_V2::future_allowed_extra_profitCall),
    future_fee_gamma(Curve_Crypto_V2::future_fee_gammaCall),
    future_ma_half_time(Curve_Crypto_V2::future_ma_half_timeCall),
    future_mid_fee(Curve_Crypto_V2::future_mid_feeCall),
    future_out_fee(Curve_Crypto_V2::future_out_feeCall),
    future_owner(Curve_Crypto_V2::future_ownerCall),
    gamma(Curve_Crypto_V2::gammaCall),
    get_dy(Curve_Crypto_V2::get_dyCall),
    get_virtual_price(Curve_Crypto_V2::get_virtual_priceCall),
    initial_A_gamma(Curve_Crypto_V2::initial_A_gammaCall),
    initial_A_gamma_time(Curve_Crypto_V2::initial_A_gamma_timeCall),
    is_killed(Curve_Crypto_V2::is_killedCall),
    kill_deadline(Curve_Crypto_V2::kill_deadlineCall),
    kill_me(Curve_Crypto_V2::kill_meCall),
    last_prices(Curve_Crypto_V2::last_pricesCall),
    last_prices_timestamp(Curve_Crypto_V2::last_prices_timestampCall),
    lp_price(Curve_Crypto_V2::lp_priceCall),
    ma_half_time(Curve_Crypto_V2::ma_half_timeCall),
    mid_fee(Curve_Crypto_V2::mid_feeCall),
    out_fee(Curve_Crypto_V2::out_feeCall),
    owner(Curve_Crypto_V2::ownerCall),
    price_oracle(Curve_Crypto_V2::price_oracleCall),
    price_scale(Curve_Crypto_V2::price_scaleCall),
    ramp_A_gamma(Curve_Crypto_V2::ramp_A_gammaCall),
    remove_liquidity(Curve_Crypto_V2::remove_liquidity_0Call),
    remove_liquidity(Curve_Crypto_V2::remove_liquidity_1Call),
    remove_liquidity(Curve_Crypto_V2::remove_liquidity_2Call),
    remove_liquidity_one_coin(Curve_Crypto_V2::remove_liquidity_one_coin_0Call),
    remove_liquidity_one_coin(Curve_Crypto_V2::remove_liquidity_one_coin_1Call),
    remove_liquidity_one_coin(Curve_Crypto_V2::remove_liquidity_one_coin_2Call),
    revert_new_parameters(Curve_Crypto_V2::revert_new_parametersCall),
    revert_transfer_ownership(Curve_Crypto_V2::revert_transfer_ownershipCall),
    set_admin_fee_receiver(Curve_Crypto_V2::set_admin_fee_receiverCall),
    stop_ramp_A_gamma(Curve_Crypto_V2::stop_ramp_A_gammaCall),
    token(Curve_Crypto_V2::tokenCall),
    transfer_ownership_deadline(Curve_Crypto_V2::transfer_ownership_deadlineCall),
    unkill_me(Curve_Crypto_V2::unkill_meCall),
    virtual_price(Curve_Crypto_V2::virtual_priceCall),
    xcp_profit(Curve_Crypto_V2::xcp_profitCall),
    xcp_profit_a(Curve_Crypto_V2::xcp_profit_aCall),
}

#[allow(non_camel_case_types)]
pub enum SushiSwap_V2_Enum {
    DOMAIN_SEPARATOR(SushiSwap_V2::DOMAIN_SEPARATORCall),
    MINIMUM_LIQUIDITY(SushiSwap_V2::MINIMUM_LIQUIDITYCall),
    PERMIT_TYPEHASH(SushiSwap_V2::PERMIT_TYPEHASHCall),
    allowance(SushiSwap_V2::allowanceCall),
    approve(SushiSwap_V2::approveCall),
    balanceOf(SushiSwap_V2::balanceOfCall),
    burn(SushiSwap_V2::burnCall),
    decimals(SushiSwap_V2::decimalsCall),
    factory(SushiSwap_V2::factoryCall),
    getReserves(SushiSwap_V2::getReservesCall),
    initialize(SushiSwap_V2::initializeCall),
    kLast(SushiSwap_V2::kLastCall),
    mint(SushiSwap_V2::mintCall),
    name(SushiSwap_V2::nameCall),
    nonces(SushiSwap_V2::noncesCall),
    permit(SushiSwap_V2::permitCall),
    price0CumulativeLast(SushiSwap_V2::price0CumulativeLastCall),
    price1CumulativeLast(SushiSwap_V2::price1CumulativeLastCall),
    skim(SushiSwap_V2::skimCall),
    swap(SushiSwap_V2::swapCall),
    symbol(SushiSwap_V2::symbolCall),
    sync(SushiSwap_V2::syncCall),
    token0(SushiSwap_V2::token0Call),
    token1(SushiSwap_V2::token1Call),
    totalSupply(SushiSwap_V2::totalSupplyCall),
    transfer(SushiSwap_V2::transferCall),
    transferFrom(SushiSwap_V2::transferFromCall),
}

#[allow(non_camel_case_types)]
pub enum Curve_Crypto_Factory_V2_Enum {
    A(Curve_Crypto_Factory_V2::ACall),
    D(Curve_Crypto_Factory_V2::DCall),
    add_liquidity(Curve_Crypto_Factory_V2::add_liquidity_0Call),
    add_liquidity(Curve_Crypto_Factory_V2::add_liquidity_1Call),
    add_liquidity(Curve_Crypto_Factory_V2::add_liquidity_2Call),
    adjustment_step(Curve_Crypto_Factory_V2::adjustment_stepCall),
    admin_actions_deadline(Curve_Crypto_Factory_V2::admin_actions_deadlineCall),
    admin_fee(Curve_Crypto_Factory_V2::admin_feeCall),
    allowed_extra_profit(Curve_Crypto_Factory_V2::allowed_extra_profitCall),
    apply_new_parameters(Curve_Crypto_Factory_V2::apply_new_parametersCall),
    balances(Curve_Crypto_Factory_V2::balancesCall),
    calc_token_amount(Curve_Crypto_Factory_V2::calc_token_amountCall),
    calc_withdraw_one_coin(Curve_Crypto_Factory_V2::calc_withdraw_one_coinCall),
    claim_admin_fees(Curve_Crypto_Factory_V2::claim_admin_feesCall),
    coins(Curve_Crypto_Factory_V2::coinsCall),
    commit_new_parameters(Curve_Crypto_Factory_V2::commit_new_parametersCall),
    exchange(Curve_Crypto_Factory_V2::exchange_0Call),
    exchange(Curve_Crypto_Factory_V2::exchange_1Call),
    exchange(Curve_Crypto_Factory_V2::exchange_2Call),
    exchange_extended(Curve_Crypto_Factory_V2::exchange_extendedCall),
    exchange_underlying(Curve_Crypto_Factory_V2::exchange_underlying_0Call),
    exchange_underlying(Curve_Crypto_Factory_V2::exchange_underlying_1Call),
    factory(Curve_Crypto_Factory_V2::factoryCall),
    fee(Curve_Crypto_Factory_V2::feeCall),
    fee_gamma(Curve_Crypto_Factory_V2::fee_gammaCall),
    future_A_gamma(Curve_Crypto_Factory_V2::future_A_gammaCall),
    future_A_gamma_time(Curve_Crypto_Factory_V2::future_A_gamma_timeCall),
    future_adjustment_step(Curve_Crypto_Factory_V2::future_adjustment_stepCall),
    future_admin_fee(Curve_Crypto_Factory_V2::future_admin_feeCall),
    future_allowed_extra_profit(Curve_Crypto_Factory_V2::future_allowed_extra_profitCall),
    future_fee_gamma(Curve_Crypto_Factory_V2::future_fee_gammaCall),
    future_ma_half_time(Curve_Crypto_Factory_V2::future_ma_half_timeCall),
    future_mid_fee(Curve_Crypto_Factory_V2::future_mid_feeCall),
    future_out_fee(Curve_Crypto_Factory_V2::future_out_feeCall),
    gamma(Curve_Crypto_Factory_V2::gammaCall),
    get_dy(Curve_Crypto_Factory_V2::get_dyCall),
    get_virtual_price(Curve_Crypto_Factory_V2::get_virtual_priceCall),
    initial_A_gamma(Curve_Crypto_Factory_V2::initial_A_gammaCall),
    initial_A_gamma_time(Curve_Crypto_Factory_V2::initial_A_gamma_timeCall),
    initialize(Curve_Crypto_Factory_V2::initializeCall),
    last_prices(Curve_Crypto_Factory_V2::last_pricesCall),
    last_prices_timestamp(Curve_Crypto_Factory_V2::last_prices_timestampCall),
    lp_price(Curve_Crypto_Factory_V2::lp_priceCall),
    ma_half_time(Curve_Crypto_Factory_V2::ma_half_timeCall),
    mid_fee(Curve_Crypto_Factory_V2::mid_feeCall),
    out_fee(Curve_Crypto_Factory_V2::out_feeCall),
    price_oracle(Curve_Crypto_Factory_V2::price_oracleCall),
    price_scale(Curve_Crypto_Factory_V2::price_scaleCall),
    ramp_A_gamma(Curve_Crypto_Factory_V2::ramp_A_gammaCall),
    remove_liquidity(Curve_Crypto_Factory_V2::remove_liquidity_0Call),
    remove_liquidity(Curve_Crypto_Factory_V2::remove_liquidity_1Call),
    remove_liquidity(Curve_Crypto_Factory_V2::remove_liquidity_2Call),
    remove_liquidity_one_coin(Curve_Crypto_Factory_V2::remove_liquidity_one_coin_0Call),
    remove_liquidity_one_coin(Curve_Crypto_Factory_V2::remove_liquidity_one_coin_1Call),
    remove_liquidity_one_coin(Curve_Crypto_Factory_V2::remove_liquidity_one_coin_2Call),
    revert_new_parameters(Curve_Crypto_Factory_V2::revert_new_parametersCall),
    stop_ramp_A_gamma(Curve_Crypto_Factory_V2::stop_ramp_A_gammaCall),
    token(Curve_Crypto_Factory_V2::tokenCall),
    virtual_price(Curve_Crypto_Factory_V2::virtual_priceCall),
    xcp_profit(Curve_Crypto_Factory_V2::xcp_profitCall),
    xcp_profit_a(Curve_Crypto_Factory_V2::xcp_profit_aCall),
}
